/**
 * @fileOverview 向下兼容，老版本的一些配置变量的读写
 *包括UserData、FF、Utils
 */

(function (jQuery, _, M139) {
    var $ = jQuery;
    var win;
    var vm = M139.namespace("M2012.MatrixVM", Backbone.Model.extend(
     /**
        *@lends M2012.MatrixVM.prototype
        */
    {
        /** 封装向下兼容对象实例，比如：UserData、FF、Utils等对象，使一些老的代码可以正常工作
        *@constructs M2012.MatrixVM
        *@param {Object} options 初始化参数集
        *@example
        */
        initialize: function (options) {
            options = options || {};
            win = options.window || window;
        },
        start: function () {//运行入口
            this.createRequestByScript();
            this.createFloatingFrame();
            this.createPathConfig();
            this.createUtils();
            this.createLoadScript();
            this.createUserData();
            this.createGlobalVariable();
            this.createLinksShow();
            this.createModuleManager();
            this.createMailTool();
            this.createWaitPanel();
            this.createValidate();
            
        },

        /**创建老版本的FloatingFrame对象*/
        createFloatingFrame: function () {
            win.FF = window.FloatingFrame = FF;
            return FF;
        },
        /*创建resourcePath,siteConfig中的路径配置*/
        createPathConfig:function(){
            win.rmResourcePath = (top.getDomain("resource") || "") + "/rm/richmail";
            win.resourcePath = win.rmResourcePath.replace("richmail", "coremail");

            win.SiteConfig.ucDomain = getDomain("webmail");
            win.ucDomain = getDomain("webmail");
            win.SiteConfig.smsMiddleware = getDomain("rebuildDomain") + "/sms/";
            win.SiteConfig.mmsMiddleware = getDomain("rebuildDomain") + "/mms/";
            win.SiteConfig.largeAttachRebuildUrl = getDomain("rebuildDomain") + "/disk/";
            win.SiteConfig.disk = getDomain("rebuildDomain") + "/disk/netdisk";
            
            
        },
        createUtils:function(){
            //loadScript("m2011.utilscontrols.pack.js");
            
            win.Utils = {
                PageisTimeOut: function () {
                    return false;
                },
                waitForReady: function (query, callback) {
                    return M139.Timing.waitForReady(query, callback);
                },
                loadSkinCss: function (path, doc, prefix, dir) {
                    var version = "", skinFolder= "css", alt = "/";

                    //获取2.0皮肤映射的1.0值,给内嵌的老页面用
                    path = (top.$User.getSkinNameMatrix && top.$User.getSkinNameMatrix()) || 'skin_shibo';

                    if (/new_/.test(path)) {
                        skinFolder = "theme" + alt + path.match(/skin_(\w+)$/)[1];
                        path = path.replace("new_", "");
                    }

                    if (prefix) {
                        path = path.replace("skin", prefix + "_skin");
                    }

                    if (!doc) {
                        doc = document;
                    }

                    //加清皮肤样式缓存的版本号
                    if (top.SiteConfig && top.SiteConfig.skinCSSCacheVersion) {
                        version = "?v=" + top.SiteConfig.skinCSSCacheVersion;
                    }

                    var linkHref = top.rmResourcePath + alt + skinFolder + alt + path + ".css" + version;
                    if (dir) {
                        linkHref = dir + path + ".css" + version;
                    }

                    var links = doc.getElementsByTagName("link");
                    for (var i = 0; i < links.length; i++) {
                        var l = links[i];

                        if (!l.href) {
                            l.href = linkHref + version;
                            return;
                        }
                    }
                },
                queryString: function (param, url) {
                    return $Url.queryString(param, url);
                },
                queryStringNon: function(param, url) {
                    for(var url = url || location.search, url = url.split(/&|\?/), e = null, c = 0; c < url.length; c++) {
                    var g = url[c].split("=");
                    if(g[0] == param) {
                    e = g[1];
                    break;
                     }
                     }
                     return e;
                },
                openControlDownload : function(removeUploadproxy) {
                    //var win = window.open(getDomain("webmail") + "/LargeAttachments/html/control139.htm");
                    //setTimeout(function() { win.focus(); }, 0);
                    top.$App.show("smallTool");
					//top.addBehavior("文件快递-客户端下载");
                },

                UI: {
                    selectSender: function (id, isAddPop, doc) {
                        var from = $Url.queryString("from");
                        if (typeof (doc) == "undefined")
                            doc = document;

                        if (typeof (isAddPop) == "undefined")
                            isAddPop = false;

                        var selFrom = doc.getElementById(id);
                        UserData = window.top.UserData;
                        var mailAccount = top.$User.getDefaultSender();

                        var trueName = top.$User.getTrueName();
                        var arr = top.$User.getAccountListArray();
                        if(mailAccount)addItem(mailAccount);
                        for (var i = 0; i < arr.length; i++) {
                            var mail = arr[i];
                            if (mailAccount != mail) addItem(mail);
                        }

                        //添加代收账号地址  
                        if (isAddPop) {
                            $(top.$App.getPopList()).each(function () {
                                for (var i = 0; i < selFrom.options.length; i++) {
                                    if (this == selFrom[i].value) return;
                                }
                                addItem(this.email);
                            })
                        }
                        selFrom.options.add(new Option("发信设置", "0"));

                        //发件人地址下拉框切换事件
                        var selFromOnChange = function (id) {
                            var selFrom = doc.getElementById(id);
                            if (selFrom.value == "0") {
                                selFrom[0].selected = true;
                                top.$App.show("account");
                                top.addBehavior("写信页_别名设置");
                            }
                            selFrom = null;
                        }

                        selFrom.onchange = function () { selFromOnChange(id) };

                        function addItem(addr) {
                            addr = addr.trim();
                            var text = trueName ? '"{0}"<{1}>'.format(trueName.replace(/"|\\/g, ""), addr) : addr; //发件人姓名替换双引号和末尾的斜杠
                            var item = new Option(text, addr);
                            selFrom.options.add(item);
                            item.innerHTML = item.innerHTML.replace(/\&amp\;#/ig, "&#");
                            if (item.value == from) item.selected = true;
                        }

                    }
                },
                parseSingleEmail: function (text) {
                    text = text.trim();
                    var result = {};
                    var reg = /^([\s\S]*?)<([^>]+)>$/;
                    if (text.indexOf("<") == -1) {
                        result.addr = text;
                        result.name = text.split("@")[0];
                        result.all = text;
                    } else {
                        var match = text.match(reg);
                        if (match) {
                            result.name = match[1].trim().replace(/^"|"$/g, "");
                            result.addr = match[2];
                            //姓名特殊处理,某些客户端发信,姓名会多带一些引号或斜杠
                            result.name = result.name.replace(/\\["']/g, "").replace(/^["']+|["']+$/g, "");
                            result.all = "\"" + result.name.replace(/"/g, "") + "\"<" + result.addr + ">";
                        } else {
                            result.addr = text;
                            result.name = text;
                            result.all = text;
                        }
                    }
                    if (result.addr) {
                        result.addr = result.addr.encode();
                    }
                    return result;

                },
                parseEmail : function (text){
				    var reg=/(?:[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}|(?:"[^"]*")?\s?<[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}>)\s*(?=;|,|，|；|$)/gi;
				    var regName=/^"([^"]+)"|^([^<]+)</;
				    var regAddr=/<?([A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4})>?/i;
				    var matches=text.match(reg);
				    var result=[];
				    if(matches){
				        for(var i=0,len=matches.length;i<len;i++){
				            var item={};
				            item.all=matches[i];
				            var m=matches[i].match(regName);
				            if(m)item.name=m[1];
				            m=matches[i].match(regAddr);
				            if(m)item.addr=m[1];
				            if(item.addr){
				                item.account=item.addr.split("@")[0];
				                item.domain=item.addr.split("@")[1];
				                if(!item.name)item.name=item.account;
				                result.push(item);
				            }
				        }
				    }
				    return result;
				}
            };
            win.getXmlDoc = function (xml) {
                return M139.Text.Xml.parseXML(xml);
            }
            //解析xml报文 通讯录用到
            win.xml2json = function(xmlNode,xml2jsonConfig){
                if(typeof xmlNode =="string"){
                    try{
                        var xmldom=getXmlDoc(xmlNode);
                        xmlNode=xmldom.documentElement;
                    } catch (ex) {
                    }
                }
                var config=xml2jsonConfig[xmlNode.tagName];
                if(!config){
                    return document.all?xmlNode.text:xmlNode.textContent;
                }else if(config.type=="simple"){
                    return xml2json_SimpleObject(xmlNode);
                }else if(config.type=="rich"){
                    return xml2json_RichObject(xmlNode,config);
                }else if(config.type=="array"){
                    return xml2json_Array(xmlNode);
                }else{
                    return null;
                }
                function xml2json_RichObject(xmlNode,config){
                    var result={};
                    var arrayElement=config.arrayElement;
                    if(arrayElement){
                        var arrayList=result[arrayElement]=[];
                    }
                    for(var i=0,childs=xmlNode.childNodes,len=childs.length;i<len;i++){
                        var child=childs[i];
                        if(child.nodeType==1){
                            if(child.tagName==config.arrayElement){
                                arrayList.push(xml2json(child,xml2jsonConfig));
                            }else{
                                result[child.tagName]=xml2json(child,xml2jsonConfig);
                            }
                        }
                    }
                    return result;
                }
                function xml2json_SimpleObject(xmlNode){
                    var result={};
                    for(var i=0,children=xmlNode.childNodes,len=children.length;i<len;i++){
                        var child=children[i];
                        if(child.nodeType==1){
                            result[child.tagName]=document.all?child.text:child.textContent;
                        }
                    }
                    return result;
                }
                function xml2json_Array(xmlNode){
                    var result=[];
                    for(var i=0,children=xmlNode.childNodes,len=children.length;i<len;i++){
                        var child=children[i];
                        if(child.nodeType==1){
                            result.push(xml2json(child,xml2jsonConfig));
                        }
                    }
                    return result;
                }
            }
            win.json2xml = function(obj) {
                var list = [];
                for (var p in obj) {
                    list.push("<");
                    list.push(p);
                    list.push(">");
                    list.push(encodeXML(obj[p]));
                    list.push("</");
                    list.push(p);
                    list.push(">");
                }
                return list.join("");
            }
            if (!String.format) {
                String.format = function (template,param) {
                    return M139.Text.Utils.format(template, param);
                }
            }
        },
        createLoadScript:function(){
            win.loadScriptM2011=function(key, _doc, charset, root) {
                var path = null;
                var scriptList = [
                    { "name": "jquery.js", "version": "20120302" },
                    { "name": "utils_controls.js", "version": "20121229" },
                    { "name": "framework.js", "version": "20121221" },
                    { "name": "common_option.js", "version": "20121123" },
                    { "name": "utils.js", "version": "20120302" },
                    { "name": "compose_2010_pack.js", "version": "20121227" },
                    { "name": "folderview.js", "version": "20121122" },
                    { "name": "welcome.js", "version": "20130104" }
                ];
                for (var i = 0; i < scriptList.length; i++) {
                    if (scriptList[i]["name"] == key) {
                        path = top.rmResourcePath + "/js/" + key + "?v=" + scriptList[i]["version"];
                        break;
                    }
                }
                function getResourceHost() {
                    return rmResourcePath.match(/^(http:\/\/)?([^\/]+)/i)[0];
                }
                if (path == null) {
                    var _root = root || "/rm/richmail/js/";
                    path = getResourceHost() + _root + key;
                }

                if (path.indexOf("utils_controls.js") > -1) {
                    return top.loadScript(getResourceHost() + "/m2012/js/packs/m2011.utilscontrols.pack.js", _doc, charset);
                } else if (path.indexOf("AddressBook.js") > -1) {
                    return top.loadScript(getResourceHost() + "/m2012/js/matrixvm/page/m2011.page.AddressBook.js", _doc);
                } else if (path.indexOf("RichInputBox.js") > -1) {
                    return top.loadScript(getResourceHost() + "/m2012/js/matrixvm/page/m2011.page.RichInputBox.js", _doc);
                }

                (_doc || document).write("<script charset=\"" + (charset || "gb2312") + "\" type=\"text/javascript\" src=\"" + path + "\"></" + "script>");
            }
            win.loadScripts = function (arr, _doc) {
                
                    for (var i = 0; i < arr.length; i++) {
                        win.loadScriptM2011(arr[i], _doc);
                    }
                
            }
            win.loadRes = function (w) {
                if (!w || !w.RES_FILES) return;
                function getResourceHost() {
                    return rmResourcePath.match(/^(http:\/\/)?([^\/]+)/i)[0];
                }
                var resList = w.RES_FILES;
                for (var i = 0; i < resList.length; i++) {
                    if (resList[i].js) {
                        var path = resList[i].js;
                        if (path.indexOf("utils_controls.js") > -1) {
                            top.loadScript(getResourceHost() + "/m2012/js/packs/m2011.utilscontrols.pack.js", w.document);
                        } else if (path.indexOf("jquery.js") > -1) { //群邮件继续使用旧版jquery，避免兼容问题
                            top.loadScript(rmResourcePath + "/js/jquery.js", w.document);
                        } else { //偷梁换柱，群邮件js文件映射到新版目录
                            path = path.replace("/groupmail/js/", "/groupmail/m2011.groupmail.");
                            top.loadScript(path.replace("/$base$", m2012ResourceDomain + "/m2012/js/service"), w.document, resList[i].charset || "gb2312");
                            //top.loadScript(path.replace("/$base$", getResourceHost() + "/rm"), w.document, resList[i].charset || "gb2312");
                        }
                    } else if (resList[i].css) {
                        var path = resList[i].css;
                        top.loadCSS(path.replace("/$base$", getResourceHost() + "/rm"),w.document);
                    }
                }
                if(w.location.href && w.location.href.indexOf('ComposeGroupmail') > -1){
                	// add by tkh 群邮件引入大附件model层m2012.ui.largeattach.model.js
	                try{
		                top.loadScript(m2012ResourceDomain+'/m2012/js/lib/underscore.js', w.document, "uft-8");
		                top.loadScript(m2012ResourceDomain+'/m2012/js/lib/backbone.js', w.document, "uft-8");
		                top.loadScript(m2012ResourceDomain+'/m2012/js/packs/m139.core.pack.js', w.document, "uft-8");
		                top.loadScript(m2012ResourceDomain+'/m2012/js/ui/largeattach/m2012.ui.largeattach.model.js', w.document, "uft-8");
	                } catch (e) { }
                }
                w.RES_FILES = null;//清理
            }
        },
        createGlobalVariable: function () {
            var _this = this;
            win.coremailDomain = $App.getMailDomain();
            win.addrDomain = "/addrsvr";
            win.mailDomain = $App.getMailDomain();
            win.isRichmail = true;
            win.stylePath = "/m";
            win.wmsvrPath = "/s";
            win.wmsvrPath2 = "http://" + location.host + "/RmWeb";

            win.Main = {
                closeCurrentModule: function () {
                    $App.closeTab();
                }
            }
            win.Main.setReplyMMSData = function ($){
                if($){
                    top["replyMMSData"]={content:"string"==typeof $.content&&$.content||"",receivers:_.isArray($.receivers)&&$.receivers||[],subject:"string"==typeof $.subject&&$.subject||""};
                }
            }

            /*win.Utils={
                UI:{
                    selectSender: function () {
                        return "发件人";
                    }
                }
            }
            */
            win.behaviorClick = function (target, window) {
                top.M139.Logger.behaviorClick(target, window);
            }
            win.addBehavior = function (behaviorKey, thingId) {
                top.M139.Logger.logBehavior({
                    key: behaviorKey,
                    thingId: thingId
                });
            }
            win.addBehaviorExt = function (param) {
                if (param && param.actionId) {
                    top.M139.Logger.logBehavior({
                        thingId: param.thingId || 0,
                        actionId: param.actionId,
                        moduleId: param.moduleId || 0,
                        actionType: param.actionType,
                        pageId: 24
                    });
                }
            }
            win.ScriptErrorLog = function () {

            }
            win.MailTool = {
                getAccount: function (email) {
                    return $Email.getAccount(email);
                },
                getAddr: function (email) {
                    return $Email.getEmail(email);
                }
            }
            win.encodeXML = function (text) {
                return $Xml.encode(text);
            }
            win.FilePreview = {
                isRelease: function () { return true; },
                checkFile: function (fileName, fileSize) {
                    if (fileSize && fileSize > 1024 * 1024 * 20) {
                        return -1;
                    }
                    //var reg = /\.(?:doc|docx|xls|xlsx|ppt|pptx|pdf|txt|html|htm|jpg|jpeg|jpe|jfif|gif|png|bmp|tif|tiff|ico|)$/i;
                    var reg = /\.(?:doc|docx|xls|xlsx|ppt|pptx|pdf|txt|jpg|jpeg|jpe|jfif|gif|png|bmp|ico|)$/i; //临时屏蔽html文件的预览功能
                    var reg2 = /\.(?:rar|zip|7z)$/i;
                    if (reg.test(fileName)) {
                        return 1;
                    } else if (reg2.test(fileName)) {
                        return 2;
                    } else {
                        return -1;
                    }
                },
                getUrl: function (p) {
                    var previewUrl = "/m2012/html/onlinepreview/online_preview.html?fi={fileName}&mo={uid}&dl={downloadUrl}&sid={sid}&id={contextId}&rnd={rnd}&src={type}";
                    previewUrl += "&skin={skin}";
                    previewUrl += "&resourcePath={resourcePath}";
                    previewUrl += "&diskservice={diskService}";
                    previewUrl += "&filesize={fileSize}";
                    previewUrl += "&disk={disk}";
                    previewUrl = $T.Utils.format(previewUrl, {
                        uid: top.M139.Text.Mobile.remove86(top.uid),
                        sid: top.UserData.ssoSid,
                        rnd: Math.random(),
                        skin: window.top.UserConfig.skinPath,
                        resourcePath: encodeURIComponent(top.rmResourcePath),
                        diskService: encodeURIComponent(top.SiteConfig.diskInterface),
                        type: p.type || "",
                        fileName: encodeURIComponent(p.fileName),
                        downloadUrl: encodeURIComponent(p.downloadUrl),
                        contextId: p.contextId || "",
                        fileSize: p.fileSize || "",
                        disk: top.SiteConfig.disk
                    });
                    return previewUrl;

                }
            }; 
            win.GetDiskArgs=function() {
                return top.diskSelectorArgs;
            }
            win.OpenDisk=function(args) {
                //{sid:””, businessWindow:window, callback :function(){}, restype :1, selectMode :0, width :500,height:500}
                if (!args) { args = {}; }
                top.diskSelectorArgs = args;

                var url = SiteConfig["disk"] + "/html/selectdisk.html?sid=" + $App.getSid() + "&restype=" + (args.restype ? args.restype : 1);

                top.FF.open("彩云", url, 484, 405, true);


            }
            var self = this;
            win.GlobalEvent = {
                add: function (key, func) {
                    self.on(key, func);
                },
                broadcast: function (key, args) {
                    self.trigger(key, args);
                }
            }
            win.ReadMailInfo = {
                getDownloadAttachUrl: function (file) {
                    var temp = "/view.do?func=attach:download&mid={0}&offset={1}&size={2}&name={3}&encoding={6}&sid={4}&type={5}";
                    return top.wmsvrPath2 + temp.format(file.mid, file.fileOffSet, file.fileSize, encodeURIComponent(file.fileName), file.sid, file.type,file.encoding);
                }
            }

            if (_this.createContacts) _this.createContacts();
            
            win.reloadAddr = function() {
                $App.trigger("change:contact_maindata");
            };

            win.namedVarToXML = function (name, obj, prefix) {

                function getDataType (obj) {
                    return Object.prototype.toString.call(obj).replace(/^\[object (\w+)\]$/, "$1");
                };
                function getVarType(obj, stringValue) {
                    if (obj == null) {
                        return "null";
                    }
                    var type = getDataType(obj);
                    if (type == "Number") {
                        var s = stringValue ? stringValue : obj.toString();
                        if (s.indexOf(".") == -1) {
                            if (obj >= -2 * 1024 * 1024 * 1024 & obj < 2 * 1024 * 1024 * 1024) {
                                return "int";
                            } else {
                                if (!isNaN(obj)) {
                                    return "long";
                                }
                            }
                        }
                        return "int";
                    } else {
                        return type.toLowerCase();
                    }
                }
                function tagXML(dataType, name, val) {
                    var s = "<" + dataType;
                    if (name) {
                        s += " name=\"" + textXML(name) + "\"";
                    }
                    if (val) {
                        s += ">" + val;
                        if (val.charAt(val.length - 1) == ">") {
                            s += "\n";
                        }
                        return s + "</" + dataType + ">";
                    } else {
                        return s + " />";
                    }
                }
                function textXML(s) {
                    s = s.replace(/[\x00-\x08\x0b\x0e-\x1f]/g, "");
                    return s;
                }

                if (obj == null) {
                    return prefix + tagXML("null", name);
                }
                //var type = obj.constructor;
                var type = getDataType(obj);
                if (type == "String") {
                    var xml = textXML(obj);
                    try {
                        xml = M139.Text.Xml.encode(xml);
                    } catch (e) { }
                    return prefix + tagXML("string", name, xml);
                } else {
                    if (type == "Object") {
                        if (obj.nodeType) {
                            top.FloatingFrame.alert(UtilsMessage["UtilsInvalidError"].format(Object.inspect(obj)));
                            return "";
                        }
                        var s = "";
                        for (var i in obj) {
                            s += namedVarToXML(i, obj[i], prefix + "  ");
                        }
                        return prefix + tagXML("object", name, s + prefix);
                    } else {
                        if (type == "Array") {
                            var s = "";
                            for (var i = 0; i < obj.length; i++) {
                                s += namedVarToXML(null, obj[i], prefix + "  ");
                            }
                            return prefix + tagXML("array", name, s + prefix);
                        } else {
                            if (type == "Boolean" || type == "Number") {
                                var s = obj.toString();
                                return prefix + tagXML(getVarType(obj, s), name, s);
                            } else {
                                if (type == "Date") {
                                    var s = "" + obj.getFullYear() + "-" + (obj.getMonth() + 1) + "-" + obj.getDate();
                                    if (obj.getHours() > 0 || obj.getMinutes() > 0 || obj.getSeconds() > 0) {
                                        s += " " + obj.getHours() + ":" + obj.getMinutes() + ":" + obj.getSeconds();
                                    }
                                    return prefix + tagXML(getVarType(obj, s), name, s);
                                } else {
                                    top.FloatingFrame.alert(UtilsMessage["UtilsInvalidError"].format(Object.inspect(obj)));
                                    return "";
                                }
                            }
                        }
                    }
                }

            }
            win.UtilsMessage = {
                AddcontactEmptyError: "分组名称不能为空。",
                AddcontactSpecialError: "组名中不能包含特殊字符。",
                AddcontactSuccess: "添加成功!",
                AddsendcontactsAddError: "添加失败",
                AddsendcontactsAddSuccess: "添加成功!",
                AddsendcontactsNotice: "正在添加联系人...",
                AddsendcontactsOneError: "请至少选中一行!",
                AddsendcontactsTeamError: "请输入组名",
                ChecksecretfolderpwdError: "密码错误",
                Folder_smsError: "短信验证码输入错误，请重新输入!",
                Folder_smsNoError: "您还未获取短信验证码，请点击上方的按钮获取。",
                Folder_smsNotice: "正在获取短信验证码",
                FoldermanageError: "排序操作失败！",
                ForwardEmptyError: "邮箱地址不能为空",
                ForwardOneError: "很抱歉，只能转发到一个邮箱地址。",
                ForwardRightError: "请输入正确的邮箱地址（例：example@139.com）",
                ForwardSelfError: "转发用户不能填写自己的邮箱地址",
                PopfolderFullError: "邮箱容量将满,请及时清理",
                PopfolderFulledError: "邮箱容量已满, 请清理过期邮件",
                UtilsDebugError: "调试器错误",
                UtilsInvalidError: "Passing invalid object: {0}",
                UtilsNoloadError: "数据未加载成功，可能的原因是登录超时了。",
                UtilsRequestError: "请求出错:",
                UtilsScreenError: "截屏功能仅能在IE浏览器下使用",
                UtilsScreenInstallConfirm: "使用截屏功能必须安装139邮箱控件,是否安装?",
                UtilsTimeoutError: " <b>登录超时，可能由于以下原因：</b><br/>1、您同时使用多个帐号或多次登录邮箱<br/>2、您的网络链接长时间断开<br/>3、当前页面闲置太久",
                UtilsUpdateConfirm: "您安装的上传控件已经不能使用,是否更新?",
                UtilsUpgradeConfirm: "当前的截屏控件需要升级才可继续使用",
                UtilsUploadConfirm: "上传文件必须安装139邮箱控件,是否安装?",
                vipNoPermissionNotice: "VIP{0}{2}为{0}元版{1}邮箱专属{2}。<br/>立即升级，重新登录后即可使用。"
            };

            win.frameworkMessage = {
                AddsendcontactsTeamError: "请输入新分组名称",
                EditorFaceError: "纯文本模式无法使用表情!",
                EditorImgError: "纯文本模式无法插入图片!",
                EditorWordsError: "请先选择要加入链接的文字。",
                FetionAliasError: "对不起，设置邮箱别名后才能绑定飞信，请先设置邮箱别名",
                FetionAlreadyError: "您已绑定飞信",
                FetionBindConfirm: "系统将自动绑定飞信服务，是否继续?",
                FetionBindFeiError: "绑定失败，请重试",
                FetionLoading: "正在加载中......",
                FetionLoading2Confirm: "您已成功绑定飞信，现在可以直接用邮箱使用飞信.\r\n{0},继续登录飞信吗?",
                FetionLoadingConfirm: "您已成功绑定飞信，现在可以直接用邮箱使用飞信.继续登录飞信吗?",
                FetionLoginError: "您已经取消绑定飞信，请绑定飞信后登录",
                FetionNoOpenConfirm: "您的飞信服务还没有开通，现在是否注册？",
                FetionProofError: "获取凭证失败，请稍后再试",
                FetionTryLoading: "资源正在加载中，请稍后再试",
                FolderAddedError: "添加文件夹失败，请重试",
                FolderAlreadyError: "文件夹&nbsp;<b>{0}</b>&nbsp;已存在！",
                FolderCheckError: "已向服务器提交代收命令，请稍后检查您的代收文件夹。",
                FolderClearConfirm: "您确定要清空吗?",
                FolderCustomizeError: "自定义文件夹个数不能超过{0}个",
                FolderDelConfirm: "确定要删除该文件夹吗",
                FolderNameEmptyError: "文件夹名称不能为空",
                FolderNameOverError: "文件夹名字不能超过16个字母或者8个汉字！",
                FolderPopError: "POP代理正在执行中，请等待执行完毕",
                FolderSpecialError: "文件夹中不能包含特殊字符！",
                FolderWaiError: "正在为您代收邮件，请稍候......",
                GroupExists: "组名重复是否仍要添加？",
                LinksUnFunctionError: "该功能暂时无法使用",
                MailServerExistError: "对不起，文件夹名称已存在",
                MailServerLoginError: "对不起，登录超时，请重新登录。",
                MailboxAlreadyError: "您所选择的邮件已在当前文件夹中，请重新选择",
                MailboxBatchError: "您刚才有新邮件到达，请重新确认后再进行本项操作",
                MailboxDelConfirm: "系统提示：彻底删除此邮件后将无法取回，您确定要彻底删除吗？",
                MailboxDelsConfirm: "如果彻底删除，这{0}封邮件将无法找回，您确定吗？",
                MailboxExportMail: "仅支持导出200M以内的邮件",
                MailboxKeyError: "请输入关键字",
                MailboxMoveConfirm: "要转移的邮件包含已置顶邮件，转移后将不再置顶。您确定要转移吗？",
                MailboxSelError: "请选择邮件",
                MailboxSpamConfirm: "所选邮件将被移动到垃圾邮件夹。通过举报垃圾邮件，可以协助我们更有效的抵制垃圾邮件，感谢您！",
                MailboxTopError: "最多只能置顶10封邮件",
                MainConfigError: "配置文件未加载",
                MainSearchText: "邮件全文搜索...",
                MainWapSuccess: "139邮箱WAP访问地址已经发送到您的手机，请查收",
                Main_extDownConfirm: "尊敬的139用户，您好，请下载pushemail",
                ReadmailAttachSuccess: "附件：{0}保存成功，请到手机彩云我的文件柜查看。",
                ReadmailContentError: "请输入要回复的内容",
                ReadmailDelSuccess: "邮件已经删除!",
                ReadmailDiskError: "对不起，您尚未开通彩云服务。",
                ReadmailFilterError: "添加失败，您添加的过滤器数量已达到最大上限",
                ReadmailLoadError: "加载失败,请重试",
                ReadmailMailError: "请输入要回复的邮件地址",
                ReadmailReceiptConfirm: "对方要求发送已读回执,是否发送?<br />             <label for='chkShowReturnReceipt'>            <input id='chkShowReturnReceipt' onclick='window.chkShowReturnReceiptValue=this.checked' type='checkbox' />            以后都按本次操作            </label>",
                ReadmailReduktionSuccess: "操作成功，邮件已被还原到收件箱中。",
                ReadmailRejectionSuccess: "设置主题拒收成功",
                ReadmailReplySuccess: "回复成功",
                ReadmailRightMailError: "请输入正确的邮件地址:",
                ReadmailSelReceiveError: "请至少选择一个收件人",
                ReadmailTryAgainError: "服务器忙，请稍后重试",
                ReadmailWithdraw1Error: "撤回失败,邮件不存在",
                ReadmailWithdraw2Error: "撤回失败,此邮件不支持召回",
                ReadmailWithdraw3Error: "撤回失败,该邮件已超过撤回期限",
                SimpleframeSendConfirm: "确定不发送此明信片吗？",
                SysBusyTryAgainError: "系统繁忙，请稍后重试!",
                TablabelError: "Tab Init Error",
                TablabelExistError: "fTabLabelExist",
                TablabelNoTabError: "Tab 不存在",
                addContacting: "保存联系人中……",
                addFolderPageLoadError: "邮件地址格式有误，请重新填写！",
                addGroupTitle: "请输入新分组名称",
                addNotAllowed: "不支持添加自己为VIP联系人。",
                changeTagColorParamsError: "参数错误，改变标签颜色失败！",
                checkPswEnterPwdFormValid: "请输入密码！",
                checkPswNotOnlyNumFormValid: "密码不能是纯数字组合！",
                checkPswNotSeriesFormValid: "密码不能是字符串联，如aaaaaa、ABCDEF、FEDCBA！",
                checkPswNotSpecialCharFormValid: "密码中包含不合法字符，可支持字母、数字、及_~@#$^符号！",
                checkPswPwdLengthFormValid: "密码须由6位至16位字符或数字组成！",
                checkSelectSongsError: "请选择歌曲再播放！",
                delConfirmMsg: "确定取消“VIP联系人”？<br>其邮件将同时取消“VIP邮件”标记。",
                delContactEventConfirm: "确定要删除该联系人？",
                editGroupListSuc: "{0}已加为VIP联系人，其邮件已自动标记为“VIP邮件”。",
                error_contactOverlimit: '保存联系人失败，联系人数量已达上限。你可以<a href="javascript:(function(){top.FF.close();top.Links.show(\'addr\');})();">管理通讯录&gt;&gt;</a>',
                error_contactReachlimit: '保存联系人部分成功，联系人数量超出上限部分未保存，你可以<a href="javascript:(function(){top.FF.close();top.Links.show(\'addr\');})();">管理通讯录&gt;&gt;</a>',
                error_contactRepeat: "保存联系人失败，联系人已存在。",
                exportMailLongTime: "文件夹邮件较多，导出邮件可能需要较长的时间。",
                folderManageDelFolderlConfig: "确定要删除该文件夹吗？",
                folderManagePageClearFolderConfirm: "您确定要清空吗？",
                folderManageReNameTitle1: "重命名",
                folderManageReNameTitle2: "请输入文件夹名称",
                folderviewClearFolderFilled: "邮箱容量已满, 请清理过期邮件！",
                folderviewClearFolderFull: "邮箱容量将满,请及时清理！",
                folderviewDeleteFolderConfirm: "确定要删除该文件夹吗？",
                folderviewdelegateConfirm: "删除代收邮箱将同时删除此文件夹内所有的邮件，是否继续删除？",
                groupLimit: "分组联系人总数已达上限，不能添加。",
                markTagIsRepateError: '"{0}" 已经标记过  "{1}" 标签了',
                markTagNoSelectMailError: "请选择邮件",
                modContactError: "修改联系人失败，请稍后再试。",
                modContactSuccess: "修改联系人成功",
                modifySecretFolderPwdPageComparePwdFormValid: "两次密码输入不一致，请重新输入！",
                modifySecretFolderPwdPageEnterNewPwdFormValid: "请输入新密码！",
                modifySecretFolderPwdPageEnterOldPwdFormValid: "请输入旧密码！",
                modifySecretFolderPwdPageModifyError: "修改失败，请稍后再试",
                modifySecretFolderPwdPageOldPwdError: "旧密码错误！",
                modifySecretFolderPwdPageSetLockPwdSuccess: "安全锁密码修改成功！",
                opClear: "您已清空VIP联系人，其邮件同时取消“VIP邮件”标记。",
                opSuc: "操作成功。",
                operatingTagError: "操作失败，请稍后再试。",
                searchKeyWordIsEmptyError: "请输入要搜索的内容",
                searchPageFormatDateError: "日期格式有误！",
                secretFolderFolderNotFould: "找不到指定的文件夹",
                secretFolderPwdInvalid: "密码不正确或者密码不符合规则",
                secretFolderSetPageLockAreaFormValid: "请选择加锁范围！",
                secretFolderSetPageMaxFolderError: "设置安全锁的文件夹个数超出最大限制，最大只可以设置{0}个！",
                secretFolderSetPagePwdError: "密码错误！",
                secretFolderSetPagePwdFormValid: "两次密码输入不一致，请重新输入！",
                secretFolderSetPageSetError: "设置失败，请稍后再试！",
                secretFolderSetPageSetLockError: "设置失败，请稍后再试！",
                secretFolderSetPageSetLockSuccess: "安全锁设置成功！",
                showColorPickerParamsError: "参数错误，打开颜色盘失败！",
                sysBusy: "系统繁忙，操作失败。",
                sysError: "系统繁忙，请稍后再试!",
                tagManageDelFolderlConfig: "确定删除标签“{0}”吗？ 删除后相关邮件也将会移除此标签（邮件不会被删除）",
                tagManageReNameTitle1: "重命名",
                tagManageReNameTitle2: "请输入标签名称",
                tagMenuSelectError: "选择标签菜单或选择邮件出错，请稍后再试。",
                tagNameEmptyError: "标签名称不能为空！",
                tagNameOverError: "标签名字不能超过25个字母或汉字！",
                tagNameRepateError: "{0} 已经存在！",
                tagNameSpecialError: "标签名称中不能包含特殊字符！",
                tagOverflow: "很抱歉，每封邮件最多只能贴{0}张标签。",
                tearTagParamsError: "参数错误，撕掉标签操作失败！",
                userFolderPageBindDataClearEventConfirm: "您确定要清空吗？",
                vipContactsMax: "VIP联系人已达上限{0}个，不能添加。{1}",
                addVipSuc: "“{0}”已加为“VIP联系人”，其邮件已自动标记为“VIP邮件”。",
                cancelVipText: "确定取消“VIP联系人”？<br/>其邮件将同时取消“VIP邮件”标记。",
                waitPannelAddFolder: "正在添加文件夹...",
                waitPannelAddTagName: "正在添加标签...",
                waitPannelClearFolder: "正在清空文件夹...",
                waitPannelDelete: "正在删除...",
                waitPannelLoad: "数据加载中...",
                waitPannelModifyPwd: "正在修改安全锁密码...",
                waitPannelReName: "正在重命名文件夹...",
                waitPannelReTagName: "正在重命名标签...",
                waitPannelSetLockSuccess: "正在设置安全锁...",
                warn_contactEmailToolong: "电子邮箱地址太长了",
                warn_contactIllegalEmail: "电子邮箱地址格式不正确，请重新输入!",
                warn_contactMobileError: "手机号码格式不正确，请重新输入",
                warn_contactMobileToolong: "手机号码太长了",
                warn_contactNameToolong: "联系人姓名太长了",
                warn_contactNamenotfound: "请输入联系人姓名",
                zw: ""
            };
        },
        /**创建老版本的UserData对象*/
        createUserData: function () {
            win.UserData = {};

            try {
                userdata = $.extend({}, top.$App.getConfig("UserData"));
                $App.on("userAttrsLoad", function (args) {
                    win.trueName = $User.getTrueName();
                    if (win.UserData) { //可能userData尚未加载
                        win.UserData.userName = $User.getTrueName();
                    }

                    win.UserAttrs = $App.getConfig("UserAttrs");
                })
                $App.on("userDataLoad", function (args) {

                    win.UserData = $.extend({}, args);

                    win.uid = args.UID;
                    win.sid = $App.getSid();
                    win.UserData.ssoSid = win.sid;
                    win.UserData.ServerDateTime = new Date();//暂无服务器时间
                       
                    win.UserData.userNumber = win.uid;
                    if (win.trueName) {
                        win.UserData.userName = win.trueName;
                    }

                    var tempArr = [];
                    var list = win.UserData.uidList
                    for (var elem in list) {
                        if (list[elem].name) {
                            tempArr.push(list[elem].name.replace(/@.+/, ""));
                        }
                    }
                    win.UserData.uidList = tempArr;//替换回旧的uidList;

                    win.UserConfig = { "skinPath": "skin_shibo" };
                    
                    try {
                        //修复ps套餐特权的问题
                        var vip = top.$User.getServiceItem();
                        if (vip == "0016") {
                            args.vipInfo.MAIL_2000008 = "1";
                        } else if (vip == "0017") {
                            args.vipInfo.MAIL_2000008 = "2";
                        } else {
                            args.vipInfo.MAIL_2000008 = "0";
                        }
                        args.vipInfo.serviceitem = top.$User.getServiceItem();
                    } catch (e) { }


                });
                return userdata;
            } catch(e) {
            }

            if (top.UserData) {
                userdata = top.UserData;
            }

            win.UserData = userdata;//对UserData的写操作无法同步
            return win.UserData;
        },

        /**创建老版本的UserData对象*/
        createRequestByScript: function () {
            var _utils = {
                requestByScript: function(option, callback) {
                    try {
                        top.M139.core.utilCreateScriptTag.apply(top.M139.core, arguments);
                        return;
                    } catch (e) {
                    }
                    
                    var _src = top.getResourceHost() + "/m2012/js/packs/" + option.src;
                    top.Utils.requestByScript(option.id, _src, callback, option.charset)
                }
            };

            return _utils;
        },

        /**创建老版本的Links对象，实现Links.show*/
        createLinksShow: function () {
            /*win.Links = {
                show: function (name, params) {

                }
            }*/
            win.LinksConfig = win.LinkConfig; //兼容旧版
            win.Links = {

                old:{ //由于没有重构，要跳到1.0的
                    "migrate":"migrate", //一键搬家
                    "syncsetting":"syncsetting", //手机同步邮箱
                    "videomail":"videomail", //视频邮件
                    "invite":"invite", //邀请好友
                    "invitebymail":"invitebymail" //发邮件邀请好友
                },

                map:{ //创建links.show与$App.show的映射关系
                        "upgradeGuide": "mobile",
                        "partner": "mobile",
                        "uecLab":"uecLab",
                        //"setPrivate": "account",
                        "shequ139": "shequ",
                        "orderinfo": "mobile",
                        "mobileGame": "mobileGame",
                        "mnote": "note",
                        "shareAddr": "addrshare",
                        "shareAddrInput": "addrshareinput",
                        "dingyuezhongxin": "googSubscription", // update by tkh 云邮局的tabid统一改为：googSubscription
                        "urlReplace": "urlReplace",
                        "addrinputhome": "addrinputhome",
                        "addroutput": "addroutput",
                        "addr":"addrhome",
                        "addcalendar": "addcalendar",
			            "mobiSyncMail": "syncguide",
                        "syncGuide": "syncguide",
                        "addrImport": "addrImport",
                        "homemail": "googSubscription",
                        "addredit": "addrEdit",
                        "billmanager": "billManager",
                        "disk": "diskDev",
                        "mailnotify": "notice",
                        "tagsuser": "tags",
                        "accountManage": "account",
                        "antivirus": "spam_antivirusArea",
                        "baseData": "account",
                        "addMyCalendar": "addcalendar",
                        "popagent": "popmail", //06-24
                        "blacklist": "spam",
                        "optionindex": "account",
                        "password":"account_accountSafe",
                        "autoreply":"preference_replySet",
                        "autoforward":"preference_forwardSet",
                        "mailnotifyTips":"preference_onlinetips",
                        "filter":"type",
                        "changenumber":"account_accountSafe",
                        "folderall":"tags",
                        "folderpop":"popmail",
                        "inputAddr":"addrinputhome",
                        "inputAddrI":"addrMcloudImport",
                        "secretfolderpwd":"account_secSafe",
                        "addrWhoAddMe": "addrWhoAddMe",
                        "addrvipgroup":"addrvipgroup",
                        "setPrivacy": "setPrivate",
                        "notice":"notice",
                        "calendar_search": "calendar_search",
			"calendar_square":"calendar_square",
                        "calendar_manage":"calendar_manage"
                    },

                show: function (key, options) {
                    var map = this.map; //map放出来，方便判断
/*
if(SiteConfig.selfSearchRelease){
map["selfSearch"]="selfSearch";
}
*/
                    //urlreplace处理
                    //如：&urlReplace=/inner/reader/index?c=17302
                    if(options && /urlreplace/gi.test(options)) {
                        var getObj = window.LinkConfig[key];
                        var newUrl = ''; 
                        var param = '';
                        var urlReplaceObj = {};
                        if (options.indexOf("http://") == -1 && options.indexOf("https://") == -1) {
                            param = options.split('=')[0] + '=';
                            options = options.replace(param,'');
                            newUrl = getDomain(key) + options;
                        }
                        options = newUrl;
                        urlReplaceObj.group = getObj.group;
                        urlReplaceObj.title = getObj.title;
                        urlReplaceObj.url = options;
                        key = 'urlReplace';                       
                        window.LinkConfig[key] = urlReplaceObj;
                        options = null;
                    }

                    if (map[key]) {
                        $App.show(map[key], options);
                        return; 
                    }

                    if (options && options.indexOf('&') > -1) {
                        options = '?from=jumpto' + options;
                        var obj = $Url.getQueryObj(options);
                        //console.log(obj);
                        $App.jumpTo(key, obj);
                    } else {
                        //console.log(key);
                        $App.jumpTo(key);
                    }
                },
                showUrl: function (url, tabTitle) { //暂时跳到旧版读信

                    if (!_.isEmpty(url)) {
                        url = $.trim(url);
                    }

                    if (!_.isEmpty(tabTitle)) {
                        tabTitle = $.trim(tabTitle);
                    }

                    if (!_.isEmpty(url) && !_.isEmpty(tabTitle)) {
                        return $App.showUrl(url, tabTitle);
                    }

                    var jumpToKey = {
                        partid: top.$User.getPartid(),
                        source: 'jumpto',
                        mid: top.$App.getCurrMailMid()
                    };

                    $App.jumpTo('15', jumpToKey);
                }
            }
        },
        createMailTool: function () {
            $App.on("userAttrsLoad", function () {
                win.FM = { folderList: $App.getConfig("FolderList") };
            });
            
            win.MB = {
                show: function (fid) {
                    $App.showMailbox(fid);
                },
                showBillManager: function () {
                    $App.showMailbox(8);
                },                
                subscribeTab: function (key, isOpenFolder) { // add by tkh 是否打开'我的订阅'文件夹
                    if (key && $.inArray(key, ['myMag', 'myCollect', 'googSubscription'])>=0) {
                        $App.show(key);
                        return;
                    }
                    $App.showMailbox(9, isOpenFolder);
                }
            };
            win.CM = {
                show: function (options) {
                    // update by tkh 通过inputData传递参数到写信页，支持传递大文本。如邮件正文。
                    $App.show("compose",null,{inputData:options});
                },
                sendMail: function (sendMailInfo, categroy) {
                    var letter = {
                        to: sendMailInfo.to ? sendMailInfo.to.join(";") : "",
                        cc: sendMailInfo.cc ? sendMailInfo.cc.join(";") : "",
                        bcc: sendMailInfo.bcc ? sendMailInfo.bcc.join(";") : "",
                        showOneRcpt: (sendMailInfo.singleSend || sendMailInfo.showOneRcpt) ? 1 : 0,
                        isHtml: sendMailInfo.isHtml ? 1 : 0,
                        subject: sendMailInfo.subject,
                        content: sendMailInfo.content,
                        priority: sendMailInfo.priority || 3,
                        requestReadReceipt: sendMailInfo.sendReceipt ? 1 : 0,
                        saveSentCopy: sendMailInfo.saveToSendBox === false ? 0 : 1,
                        inlineResources: 0,
                        scheduleDate: 0,
                        normalizeRfc822: 0
                    };
                    var categroyList = {
                        compose: "103000000",
                        sms: "105000000",
                        contact: "109000000",
                        greetingCard: "102000000",
                        postCard: "101000000"
                    }
                    if (categroy == undefined) {
                        categroy = "compose";
                    }

                    //是否定时邮件
                    if (sendMailInfo.timeset && _.isDate(sendMailInfo.timeset)) {
                        letter.scheduleDate = parseInt(sendMailInfo.timeset.getTime() / 1000);
                    }
                    //设置发信帐号
                    (function getAccount(ac) {
                        //login|alias|number|fetion|default
                        if (!ac) ac = {};
                        if (_.isString(ac)) {
                            letter.account = ac;
                        } else if (_.isObject(ac)) {
                            ac.id = ac.id || "default";
                            var acSettings = {
                                "default": getDefaultId(),
                                "login": getLoginId(),
                                "alias": getAlisaId(),
                                "number": getNumberId(),
                                "fetion": getFetionId()
                            };
                            if (!top.$Email.isEmail(ac.id)) {
                                ac.id = acSettings[ac.id];
                            }
                            ac.name = (ac.name == null) ? getDefaultName() : ac.name;
                            letter.account = "\"{0}\"<{1}>".format(ac.name, ac.id);
                        }

                        function getDefaultId() {
                            return $User.getDefaultSender();
                        }
                        function getLoginId() {
                            return $User.getDefaultSender();
                        }
                        function getAlisaId() {
                            return $User.getAliasName();
                        }
                        function getFetionId() {
                            return $User.getDefaultSender();
                        }
                        function getNumberId() {
                            return $User.getUid() + "@" + mailDomain;
                        }
                        function getDefaultName() {
                            return $User.getTrueName();
                        }
                    })(sendMailInfo.account);
                    if (!M139.Text.Email.isEmailAddr(letter.account)) {
                        //return doError("ParamError", "account参数异常");
                    }
                    if (sendMailInfo.headers) {
                        letter.headers = {};
                        if (sendMailInfo.headers.subjectColor) {
                            //主题颜色
                            letter.headers["X-RM-FontColor"] = sendMailInfo.headers.subjectColor;
                        }
                        var sn = sendMailInfo.headers.smsNotify;
                        if (sn !== undefined) {
                            letter.headers["X-RM-SmsNotify"] = sn;
                        }
                    }
                    var requestXml = {
                        attrs: letter,
                        action: "deliver",
                        returnInfo: 1
                    };
                    if (sendMailInfo.loadingMsg) {
                        WaitPannel.show(sendMailInfo.loadingMsg);
                    }
                    var categroyId = categroyList[categroy];
                    if (!categroyId) {
                        categroyId = categroy;
                    }
                    top.M139.RichMail.API.call("mbox:compose&comefrom=5&categroyId=" + categroyId, requestXml, function (e) {
                        WaitPannel.hide();
                        var result = e.responseData;
                        if (sendMailInfo.callback) {
                            sendMailInfo.callback(result);
                            return;
                        }
                        if (result['code'] == 'S_OK') {
                            doSuccess(result['var']);
                        } else {
                            //后面要把所有错误类型整理出来
                            if (result["code"] == "FA_INVALID_DATE") {
                                doError("DateError", "定时发送的时间不能比当前的时间早", result["code"]);
                            } else {
                                doError("Unknown", "发送失败", result["code"]);
                            }
                        }
                    });
                    function doSuccess(mid) {
                        if (sendMailInfo.onsuccess) {
                            sendMailInfo.onsuccess({ mid: mid });
                        }
                    }
                    function doError(errorCode, errorMsg, code) {
                        if (sendMailInfo.onerror) {
                            sendMailInfo.onerror({ errorCode: errorCode, errorMsg: errorMsg, code: code });
                        }
                    }
                }
            }
        },
        createModuleManager: function() {
            win.MM = {
                show: function (name, params) {
                },
                activeModule:function(name){
                    top.$App.closeTab(name);
                },
				setTitle: function(title){
					top.$App.setTitle(title);
				},
                close: function (name, params) {
                    try {
                        top.$App.closeTab(name);
                        return;
                    } catch (ex) {
                    }

                    var _params = params || {};

                    if (_params.exec == "back") {
                        top.MM.goBack();
                    } else if (_params.exec == "closeAll") {
                        top.MM.closeAll();
                    } else {
                        top.MM.close(name);
                    }

                }
            };
            return win.MM;
        },

        /**创建老的加载中对象*/
        createWaitPanel: function () {
            win.WaitPannel = {
                show: function (msg, option) {
                    try {
                        top.M139.UI.TipMessage.show(msg, option);
                        return;
                    } catch (ex) {
                    }

                    if (top.WaitPannel) {
                        if (option) {
                            if (option.delay) {
                                top.FF.alert(msg);
                                setTimeout(function(){
                                    top.FF.close();
                                }, option.delay);
                                return;
                            }
                        }

                        top.WaitPannel.show(msg);
                    }
                },
                hide: function () {
                    try {
                        top.M139.UI.TipMessage.hide();
                        return;
                    } catch (ex) {
                    }

                    if (top.WaitPannel) {
                        top.WaitPannel.hide();
                    }
                }
            }
            return win.WaitPannel;
        },
        createValidate: function() {
    win.Validate = {
        config: {
				//3位是考虑到短号集群网。
				"mobile":{
					message:"手机格式不正确，请输入3-20位数字",
					//regex:/^\d{3,20}$/
					regex:/^[\(\)\-\d]{3,20}$/
				},
				"email":{
					message:"邮箱格式不正确。应如zhangsan@139.com，长度6-90位",
					regex:new RegExp("^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$","i")
				},
				"phone":{
					message:"电话号码格式不正确，请输入3-30位数字、-",
					regex:/^[\-\d]{3,30}$/
				},
				"fax":{
					message:"传真号码话格式不正确，请输入3-30位数字、-",
					regex:/^[\-\d]{3,30}$/
				},
				"zipcode" :{
					message:"邮编格式不正确，请输入3-10位字母、数字、-或空格",
					regex:/^[\ \-\w]{3,10}$/
				},
				"otherim" :{
					message:"飞信号格式不正确，请输入6-10位数字",
					regex:/^\d{6,10}$/
				},
				"qq" :{
					message:"QQ格式不正确，请输入5-11位数字",
					regex:/^\d{5,11}$/
				}
        },
        test: function(key, value) {
            var obj = Validate.config[key];
            if(!obj) {
                throw "找不到的正则:" + key;
            }
            if(obj.regex.test(value)) {
                return true;
            } else {
                this.error = obj.message;
                return false;
            }
        },
        testBirthday: function(value) {

            var isDate = false;
            if(!value) return false;
            var r = value.match(/(\d{4})\-(\d{2})\-(\d{2})/);
            if(r) {
                try {
                    var t = [Number(r[1]), Number(r[2]) - 1, Number(r[3])];
                    var n = new Date();
                    if(t[0] > 0 && t[0] <= n.getFullYear() && t[1] > -1 && t[1] < 12 && t[2] > 0 && t[2] < 32) {
                        var d = new Date(t[0], t[1], t[2]);
                        if(d < n) {
                            isDate = (d.getFullYear() == t[0] && (d.getMonth()) == t[1] && d.getDate() == t[2]);
                        }
                    }
                } catch(ex) {}
            }
            return isDate;
        }
    }
}
    }));
    jQuery.extend(M2012.MatrixVM,
    /**@lends M2012.MatrixVM*/
    {
        /**在使用了老版本对象接口的情况下给予日志提示，描述使用新版本的方法*/
        tip: function (oldFunc, newWay) {

        }
    });
    //对话框组件
    var FF = {
        alert: function (msg, callback) {
            try {
                this.current = top.$Msg.alert(msg, { onclose: callback, isHtml: true, icon:"warn" });
                return this.current;
            } catch(e) {
            
            }
        
            if (top.FF && top.FF.alert) {top.FF.alert(msg)}
        },
        prompt: function (title, msg, defaultValue, callback, maxLength) {
            this.current = $Msg.prompt(msg, callback, {
                dialogTitle: title,
                defaultValue: defaultValue,
                maxLength: maxLength,
                isHtml: true
            });
            return this.current;
        },
        setHeight: function (height) {
            $Msg.getCurrent().setHeight(height);
            $Msg.getCurrent().resetHeight();
        },
        setWidth: function (height) {
            $Msg.getCurrent().setWidth(height);
        },
        close: function () {
            $Msg.getCurrent().close();
        },
        confirm: function (message, callback, cancelCallback, isYesAndNo) {
            var op = {
                icon:"warn",
                isHtml:true
            };
            if (isYesAndNo) {
                op.buttons = [" 是 ", " 否 "];
            }
            this.current = $Msg.confirm(message, callback, cancelCallback, op);
            return this.current;
        },
        show: function (html, title, width, height, fixSize, onclosed, eventHandlers) {
            this.current = $Msg.showHTML(html, {
                dialogTitle: title,
                width: width,
                height: height,
                onclick: onclosed
            });
            return this.current;
        },
        open: function (title, src, width, height, fixSize, miniIcon, hideIcon, hideTitle) {
            this.current = $Msg.open({
                url: src,
                dialogTitle: title,
                width: width,
                height: height,
                //onclick: onclosed,
                hideTitleBar: hideTitle
            });
            return this.current;
        },
        minimize: function () {
            $Msg.getCurrent().minisize();
        }
    };

})(jQuery, _, M139);

﻿
(function ($, _, M) {

var _base = {

    __getUrl:function(page, type){
        return "/sharpapi/addr/apiserver/" + page + "?sid=" + sid + (type ? "&APIType=" + type : "") + "&rnd=" + Math.random();
    },

    //添加联系人(单个)
    getAddContactsUrl: function() {
        return Contacts.__getUrl("AddContact.ashx");
    },
    //添加联系人(多个)
    getAddMultiContactsUrl: function() {
        return Contacts.__getUrl("AddMultiContacts.ashx");
    },
    //添加最近联系人(多个)
    getAddLastestContactsUrl: function() {
        return Contacts.__getUrl("AddLastContacts.ashx");
    },
    //自动保存联系人，附带添加最近联系人。
    getAutoSaveRecentContactsUrl: function(){
        return Contacts.__getUrl("AutosaveContact.ashx");
    },
    //取i联系整合接口
    getIAPIUrl: function(action) {//i联系
        return Contacts.__getUrl("iContactService.ashx", action);
    },
    addrInterfaceUrl: function(action){
        return Contacts.__getUrl("addrinterface.ashx", action);
    },
    getLoadLastContactsDataUrl: function() {
        return Contacts.addrInterfaceUrl("GetLCContacts");
    },
    getAPIUrl: function(action){
        return Contacts.addrInterfaceUrl(action);
    },

     //直呼型接口地址
    apiurl : function(action){
        //return top.addrDomain + "/" + action + "?sid=" + sid + "&r=" + Math.random();
        return "/addrsvr/" + action + "?sid=" + sid + "&r=" + Math.random();
    },
    
    MAX_VIP_COUNT: 10,
    
    MAX_CONTACT_LIMTE: 3000,
    getMaxContactLimit: function(){
        var limit = $User.getMaxContactLimit();
        if (limit < 3000) {
            limit = this.MAX_CONTACT_LIMTE;
        }
        return limit;
    },

    //初始化旧数据LinkManList
    init:function(){},

    //通讯录已加载
    isReady: false,
    waitingQueue: [],

    runWaiting: function() {
        $(this.waitingQueue).each(function() { this() });
        this.waitingQueue.length = 0;
    },

    ready: function(callback){
        if(this.isReady){
            callback();
        }else{
            this.waitingQueue.push(callback);
        }
    },


    createAddressPage : function(param) {
        var url = "/m2012/html/addrwin.html?";
        for (var p in param) {
            if(!/container|width|height|withName/.test(p)){
                url += "&" + p + "=" + param[p];
            }
        }
        if (param.withName) {
            url += "&useNameText=true&useAllEmailText=true";
        }
        param.container.innerHTML = "<iframe frameBorder='0' src='{0}' style='width:{1};height:{2}'></iframe>"
        .format(url, param.width || "100%", param.height || "100%");
    },
    
    addSinglVipContact: function(param){
        if(!param.serialId){
            return false;
        }
        var vipMsg = top.frameworkMessage;
        if(top.Contacts.IsPersonalEmail(param.serialId)){
            //top.FF.alert("不支持添加自己为VIP联系人。");
            top.M139.UI.TipMessage.show("不支持添加自己为VIP联系人。", { delay: 2000, className: 'msgYellow'});
            return false;
        }
        
        var vips = top.Contacts.data.vipDetails;
        var vipGroupId = "",vipCount =0,vipMaxCount = top.Contacts.MAX_VIP_COUNT; //因后端接口限制
        if(vips.isExist){
            vipGroupId =vips.vipGroupId;
            vipCount = vips.vipn ;
        }
        
        if(vipCount >= vipMaxCount){
            var a = '<a hidefocus="" style="text-decoration:none;" href="javascript:top.FF.close();top.Links.show(\'addrvipgroup\');" ><br/>管理VIP联系人</span></a>';
            var msg = vipMsg.vipContactsMax.format(vipMaxCount,a);
            top.FF.alert(msg);

            return false;
        }
        top.WaitPannel.show("正在保存...");
        var requestData = {
                    groupId : vipGroupId,
                    serialId: param.serialId,
                    groupType:1
        }
        
        //回调
        function callback(res){

            top.WaitPannel.hide();
            if(res.ResultCode != 0){
                if(res.resultCode == 23){ //分组联系人已达上限
                    top.FF.alert(vipMsg.groupLimit);
                    return false;
                }
                
                if(Retry.retryTime >=3){
                    top.FF.alert(vipMsg.syserror);
                    Retry.retryData = "";
                    Retry.retryFun = null;
                    Retry.retryTime = 0;
                }else{ //重试3次
                    Retry.retryData = param;
                    Retry.retryFun = AddGroupList;
                    top.FF.alert(vipMsg.sysBusy + '<a hidefocus="" href="javascript:var Obj = top.Retry;var data = Obj.retryData;Obj.retryFun(data);Obj.retryTime++;top.FF.close();">重试</span></a>',function(){
                        var Obj = top.Retry;
                            Obj.retryData = "";
                            Obj.retryFun = null;
                            Obj.retryTime = 0;
                    });
                }
                return false;
            }
            
			//var name = $T.Html.encode(param.name);
            var sucMsg = vipMsg.addVipSuc.replace('“{0}”', '');
            //top.FF.alert(sucMsg);
            top.M139.UI.TipMessage.show(sucMsg, { delay: 2000});
            
            top.BH('addvipsuccess');
            
            if(param.success) param.success();
            
            top.Contacts.updateCache("addVipContacts",param.serialId);
            top.$App.trigger("change:contact_maindata");
            
        }
        
		function AddGroupList(){
			top.Contacts.AddGroupList(requestData,callback);
		}	
        AddGroupList();
    },
	
	delSinglVipContact : function (param){
		var self = this;
		var vipMsg = top.frameworkMessage;
		function cancelVip(){
			self.delSinglVipContact2(param);
		}
		top.FloatingFrame.confirm(vipMsg["cancelVipText"],cancelVip);
	},
    
    delSinglVipContact2 : function (param){
        if(!param.serialId){
            return false;
        }
        var vipMsg = top.frameworkMessage;
		
        top.WaitPannel.show("正在保存...");
        if(!top.Contacts.IsExitVipGroup){
            return false; //不存在vip联系人组
        }
        
        var vips = top.Contacts.data.vipDetails;
        var requestData = {
                    groupId : vips.vipGroupId,
                    serialId: param.serialId
        }
        //回调
        function callback(res){
            top.WaitPannel.hide();
            if(res.ResultCode != 0){
                if(Retry.retryTime >=3){
                    top.FF.alert(vipMsg.sysError);
                    Retry.retryData = "";
                    Retry.retryFun = null;
                    Retry.retryTime = 0;
                }else{ //重试3次
                    Retry.retryData = param;
                    Retry.retryFun = DelGroupList;
                    top.FF.alert(vipMsg.sysBusy + '<a hidefocus="" href="javascript:var Obj = top.Retry;var data = Obj.retryData;Obj.retryFun(data);Obj.retryTime++;top.FF.close();">重试</span></a>',function(){
                        var Obj = top.Retry; 
                            Obj.retryData = "";
                            Obj.retryFun = null;
                            Obj.retryTime = 0;
                    });
                }
                return false;
            }
            
            //top.FF.alert(vipMsg.opSuc);
            top.M139.UI.TipMessage.show("取消成功", { delay: 2000 });
            if(param.success) param.success();
            
            top.Contacts.updateCache("delVipContacts",param.serialId);
            top.$App.trigger("change:contact_maindata");
            
        }
        
		function DelGroupList(){
			top.Contacts.DelGroupList(requestData,callback);
		}
		DelGroupList();
    },

    addVIPContact: function (successCallback) {
		var self = this;
        var maxCount = this.MAX_VIP_COUNT;
        var contactsModel = top.M2012.Contacts.getModel();
        var tempVipArr = contactsModel.get("data").vip.contacts;
        var selItems = [];
        if(tempVipArr &&  tempVipArr instanceof Array){
            selItems = Array.prototype.slice.call(tempVipArr,0);
        }
        for (var i = 0; i < selItems.length; i++) {
            var c = contactsModel.getContactsById(selItems[i]);
            if (!c || !c.getFirstEmail()) {
                selItems.splice(i, 1);
                i--;
            } else {
                selItems[i] = {
                    name: c.name,
                    addr: c.getFirstEmail(),
                    serialId: c.SerialId,
                    value: contactsModel.getSendText(c.name, c.getFirstEmail())
                };
            }
        }

        

        var view = top.M2012.UI.Dialog.AddressBook.create({
            receiverText: "VIP联系人",
            showLastAndCloseContacts: false,
            showVIPGroup: false,
            showSelfAddr: false,
            getDetail: true,
            filter: "email",
            maxCount: maxCount,   //VIP联系人增加至10个，搜索VIP联系人的“常用、商务”2个邮箱
            items: selItems,
            isAddVip:true
        });
        view.on("select", function (e) {
            var ids = [];
            var list = e.value;
            for (var i = 0; i < list.length; i++) {
                ids.push(list[i].serialId);
            }
            //selectedCallback(ids);
			self.submitVipContact(ids, function(){ successCallback(ids); });
        });
        view.on("additemmax", function () {
            $Msg.alert("VIP联系人已达上限"+ maxCount +"个，不能添加。", {
                icon: "warn"
            });
        }); 
    },
	submitVipContact:function(ids,successCallback,options){ //type: "add" ,增加
		var self = this;
		selectedCallback(ids);
		//添加VIP联系人组件-submit执行函数
        function selectedCallback(vipList){
            var vipC = top.Contacts.getVipInfo();
            var groupId = vipC.vipGroupId;
            if( !vipC.hasContact && vipList.length == 0){
                return;
            }
            var serialIds = vipList.join(',');
			if(options && options.type == "add") serialIds = vipC.vipSerialIds + ',' + serialIds;
            var param = { groupId: groupId, groupType: 1, serialId: serialIds };

            top.Contacts.editGroupList(param, callBack);
            function callBack(result) {
                var vipPanelTips = top.frameworkMessage;
                if(result.ResultCode != '0'){
                    if(result.resultCode == '23'){
                        FF.alert(vipPanelTips.groupLimit);
                        return false;
                    }
                    //重试 -变量使用View.Retry来保存重试数据
                    var Obj = Retry;
                    if(Obj.retryTime>=3){
                        Obj.retryData = "";
                        Obj.retryFun = null;
                        Obj.retryTime = 0;
                        top.FF.alert(vipPanelTips.sysError);
                    }else{
                        Obj.retryData = vipList;
                        Obj.retryFun = selectedCallback;
                        top.FF.alert(vipPanelTips.sysBusy + '<a hidefocus="" href="javascript:var Obj = top.Retry;top.jslog(\'VIpretyr\',Obj);var data = Obj.retryData;Obj.retryFun(data);Obj.retryTime++;top.FF.close();">重试</span></a>',function(){
                            var Obj = top.Retry;
                            Obj.retryData = "";
                            Obj.retryFun = null;
                            Obj.retryTime = 0;
                        });
                    }
                    return false;
                }
                var msg = vipPanelTips.opSuc + '<br>';
                if(vipList.length == 0){
                    msg += vipPanelTips.opClear;
                }else{
                    msg += vipPanelTips.editGroupListSuc.format('所选联系人');
                    top.addBehavior('成功添加VIP联系人');
                }
                top.Contacts.updateCache("editVipContacts", serialIds);
				
				if(options && options.notAlert){
					if (successCallback) {
						successCallback();
					}
				}else{
					top.FF.alert(msg, function(){
                        top.FF.close();
                        //js会阻塞提示框关闭, 所以设置延时
                        if (successCallback) {
                            setTimeout(function(){successCallback();}, 5); 
                        }
                    });
				}
				
                top.$App.trigger("change:contact_maindata");
            }
        }
	},

    /**
     *返回是否自动保存联系人判断
     */
    isAutoSaveContact:function(){
        var isAuto = top.$App.getUserCustomInfo(9);
        if (!isAuto || isAuto === '1') {
            return true;
        } else {
            return false;
        }
    },

    /**
     *收敛ajax请求接口
     */
    ajax: function (options) {
        if (/^\/+(mw|mw2|g2|addrsvr)\//.test(options.url)) {
            var conf = {
                headers: {},
                method: options.method,
                error: options.error,
                async: options.async,
                responseDataType: ""
            };

            if (typeof options.data == "object") {
                if (!options.contentType) {
                    options.contentType = "application/x-www-form-urlencoded"
                }
            }

            if (options.contentType) {
                conf.headers["Content-Type"] = options.contentType;
            }

            return top.M139.RichMail.API.call(options.url, options.data, function (e) {
                var isJson = options.dataType && options.dataType.toLowerCase() == "json";
                var result;
                if (isJson) {
                    result = e.responseData;
                } else {
                    result = e.responseText;
                }
                if (options.success) {
                    options.success(result);
                }
            }, conf);
        } else {
            return doJQAJAX();
        }
        function doJQAJAX() {
            return $.ajax(options);
        }
    },


    scriptReady: function(target, callback) {
        var _this = this;
        var _caller = _this.scriptReady.caller;

        M139.core.utilCreateScriptTag(
            {
                id: "contact_async_method",
                src: $App.getResourceHost() + "/m2012/js/packs/m2012_contacts_async.pack.js",
                charset: "utf-8"
            },
            function(){
                if ("string" === typeof target && _caller === _this[target]) {
                    window.console && console.log("[ERROR] Contacts." + target + "() not found");
                    return;
                }

                if ("function" === typeof target) target();
                if ("function" === typeof callback) callback();
            }
        );
    },

    data: {
        groups: null, //联系人组
        contacts: null, //联系人
        map: null, //组关系
        lastestContacts: null, //最近联系人
        userSerialId: null,
        birthdayContacts: null, //即将生日的好友，
        Vip: null //vip联系人信息
    },

    onchangeListeners: [],
    change: function(func) {
        this.onchangeListeners.push(func);
    },
    onchange: function(args) {
        $(this.onchangeListeners).each(function() {
            try {
                this(args);
            } catch (e) { }
        })
    },

    FROMTYPE: {
        MAIL: 0x10,  //电子邮件
        MOBILE: 0x20,//短彩信
        FAX: 0x40,   //传真

        NONE: 0,     //默认
        SMS: 1,      //发短信成功页
        CARD: 2,     //发贺卡成功页
        POST: 3,     //发明信片成功页
        EMAIL: 4,    //发邮件成功页
        MMS: 5,      //发彩信成功页
        FILE: 6      //发文件快递成功页
    },

    ConvertFrom : function(a){
        var F=this.FROMTYPE;
        var from = a & 0x0f; //取来源
        var type = a & 0xf0; //来类别
        var last = '1';
        var key = 'E';

        if(from == F.MMS){
            last = "2";
        }

        switch(type){
            case F.FAX: key='F'; break;
            case F.MAIL: key='E'; break;
            case F.MOBILE: key='M'; break;
        }

        return {'from': from, 'type': type, 'key': key, 'last': last};
    }
};



/* 新格式
Object
    birthdayContacts: Array[0]
    closeContacts: Array[20]
    contacts: Array[2733]
    contactsIndexMap: Object [新增]
    contactsMap: Object [新增]
    groupedContactsMap: Object [新增]
    groups: Array[22]
    groupsMap: Object
    lastestContacts: Array[50]
    map: Array[137]
    vip: Object [新增]
*/

/*  旧格式
Object
    ContactsMap: Array[603322342]
    TotalRecord: 2733
    Vip: Array[1]  [未迁移]
    birthdayContacts: Array[0]
    closeContacts: Array[20]
    contacts: Array[2733]
    contactsHasRecord: Object
    groups: Array[22]
    groupsMap: Object
    lastContactsDetail: Array[232]
    lastestContacts: Array[50]
    map: Array[137]
    strangerHasRecord: Object
    userSerialId: undefined
    vipDetails: Object
*/

$.extend(M2012.MatrixVM.prototype, {

    _addrDataNull: {
        ContactsMap: [],
        TotalRecord: 0,
        Vip: [],
        birthdayContacts: [],
        closeContacts: [],
        contacts: [],
        contactsHasRecord: {},
        groups: [],
        groupsMap: {},
        lastContactsDetail: [],
        lastestContacts: [],
        map: [],
        strangerHasRecord: {},
        userSerialId: "",
        vipDetails: {
            hasContact: false,
            isExist: false,
            vipContacts: [],
            vipEmails: [],
            vipGroupId: "",
            vipSerialIds: "",
            vipn: "0"
        }
    },

    createContacts: function(){

        var ci = M2012.Contacts.ContactsInfo;

        window.Contacts = {};
        window.ContactsInfo = ci;

        //联系人搜索
        window.ContactsInfo.prototype.search = function(keyword) {
            var text = (this.name + "," + this.emails + "," + this.mobiles + "," + this.faxes);
            if (this.Quanpin || this.Jianpin) text += "," + this.Quanpin + "," + this.Jianpin;
            //tofix: 下面的职务与公司名，在GetUserAddrJsonData接口并未返回，所以下面的条件永远不生效
            if(this.UserJob)text+=","+this.UserJob;
            if(this.CPName)text+=","+this.CPName;
            return text.toLowerCase().indexOf(keyword.toLowerCase()) >= 0;
        }

        /**
         * 验证通讯录实体对象的数据合法性
         * @param uncheckEmpty boolean 不检查关键字段是否为空
         * @return object
         *  {success: boolean,
         *   msg: string,
         *   errorProperty: string
         *  }
         */
        window.ContactsInfo.prototype.validateDetails=function(uncheckEmpty){
            var T = this;
            if (!uncheckEmpty){
                if(!T.name || T.name.trim()==""){
                    return failResult("请输入姓名","name");
                }
                if(T.FamilyEmail)T.FamilyEmail=T.FamilyEmail.trim();
                if(T.MobilePhone)T.MobilePhone=T.MobilePhone.trim();
                if(T.OtherEmail)T.OtherEmail=T.OtherEmail.trim();
                if(T.OtherMobilePhone)T.OtherMobilePhone=T.OtherMobilePhone.trim();
                if(!T.FamilyEmail && !T.MobilePhone && !T.BusinessEmail && !T.BusinessMobile){
                    return failResult("电子邮箱和手机号码，请至少填写一项");
                }
            }
            

            if(T.AddGroupName){
                if(Contacts.getGroupByName(T.AddGroupName)){
                    return failResult("新建的组名已存在","AddGroupName");
                }else{
                    T.AddNewGroup="true";
                }
            }
            if(T.FamilyEmail){
                  var emaiLen = T.FamilyEmail.length;
                  var lenCheck = (emaiLen >= 6 && emaiLen<= 90)
                  if(!lenCheck  ||!Validate.test("email",T.FamilyEmail) ){
                    return failResult("电子邮箱格式不正确。应如zhangsan@139.com，长度6-90位");
                  }
             }
            if(T.BusinessEmail){
                  var emaiLen = T.BusinessEmail.length;
                  var lenCheck = (emaiLen >= 6 && emaiLen<= 90)
                  if(!lenCheck  ||!Validate.test("email",T.BusinessEmail) ){
                    return failResult("商务邮箱格式不正确。应如zhangsan@139.com，长度6-90位");
                  }
             }
              
            if(T.MobilePhone && !Validate.test("mobile",T.MobilePhone)){
                return failResult("手机号码格式不正确，请输入3-20位数字");
             }
             
             if(T.BusinessMobile && !Validate.test("mobile",T.BusinessMobile)){
                return failResult("商务手机格式不正确，请输入3-20位数字");
             }
            
             if(T.CPZipCode && !Validate.test("zipcode",T.CPZipCode)){
                  return failResult("公司邮编格式不正确，请输入3-10位字母、数字、-或空格");
             }
                
            //if(T.ZipCode && !Validate.test("zipcode",T.ZipCode)){
            //    return failResult("邮政邮编格式不正确，请输入3-10位字母、数字、-或空格");
            // }    
            if(T.FamilyPhone && !Validate.test("phone",T.FamilyPhone)){
                return failResult("常用固话格式不正确，请输入3-30位数字、-", "familyphone");
            }
            if(T.BusinessPhone && !Validate.test("phone",T.BusinessPhone)){
                return failResult("公司固话格式不正确，请输入3-30位数字、-");
            }
            //if(T.OtherPhone && !Validate.test("phone",T.OtherPhone)){
            //  return failResult("常用固话格式不正确，请输入3-30位数字、-");
            //}

            if(T.BusinessFax && !Validate.test("fax",T.BusinessFax)){
                return failResult("传真号码格式不正确，请输入3-30位数字、-");
            }

            if(T.BirDay && !Validate.testBirthday(T.BirDay)){
                return failResult("请输入正确的生日日期:"+T.BirDay,"BirDay");
            }

            if(T.OtherIm && !Validate.test("otherim",T.OtherIm)){
                return failResult("飞信号格式不正确，请输入6-10位数字");
            }

            return {success:true};
            function failResult(msg,property){
                return {
                    success:false,
                    msg:msg,
                    errorProperty:property||""
                };
            }
        };

        $.extend(window.Contacts, _base);
        
        var _this = this;
        _this.attacthContactMethod();

        $App.on("GlobalContactLoad", function (args) {
            _base.runWaiting();
        });

        $App.on("contactLoad", function (args) {
            _this.loadContactData();
        });

        $App.on("contactUpdate", function (args) {
            _this.loadContactData();
        });
    },

    loadContactData: function() {
        var _this = this;
        var _data = false;

        M139.Timing.waitForReady(
        function(){
            return _data;
        },
        function(){
            var temp = $.extend({}, _this._addrDataNull);
            $.extend(temp, _data);

            temp.ContactsMap = temp.contactsMap;
            
            (function(tmp){
                var _vip = tmp.vip;
                _vip.contacts = _vip.contacts || [];
                _vip.groupId = _vip.groupId || "";
                var _vipCount = _vip.contacts.length;

                var i = 0;
                var _vipEmails = [];
                var _vipContacts = [];

                for (i = 0; i < _vipCount; i++) {
                    var contact = tmp.contactsMap[_vip.contacts[i]];
                    if (contact) { _vipContacts.push(contact); }
                }

                for (i = 0; i < _vipContacts.length; i++) {
                    var _vipContact = _vipContacts[i];
                    var _vipContactEmails = [];
                    if(_vipContact.FamilyEmail) _vipContactEmails.push(_vipContact.FamilyEmail);
                    if(_vipContact.BusinessEmail) _vipContactEmails.push(_vipContact.BusinessEmail);
                    _vipEmails = _vipEmails.concat(_vipContactEmails);  //VIP联系人增加至10个，搜索VIP联系人的“常用、商务”2个邮箱
                }

                tmp.vipDetails = {
                    isExist      : _vip.groupId.length > 0,   //vip联系人分组是否存在
                    hasContact   : _vipCount > 0,   //
                    vipGroupId   : _vip.groupId || "vip",
                    vipContacts  : _vipContacts || "",
                    vipEmails    : _vipEmails || "",
                    vipSerialIds : _vip.contacts.join(",") || "", 
                    vipn         : _vipCount || 0
                }
            })(temp);

            window.Contacts.data = temp;
            window.Contacts.isReady = true;

            top.$App.trigger("GlobalContactLoad", temp);
        });

        $App.getModel("contacts").requireData(function(data){
            _data = data;
        });
    }

})
top.Retry={
	retryTime : 0,
	retryData : "",
	retryFun : null
} ; //home页全局变量，用来做重试操作使用。

})(jQuery, _, M139);

﻿
;

function AddrCrossAjax(_url, _data, _onResponse, _onError){

    var xhr = false;

    if (window.XMLHttpRequest) {
        xhr = new XMLHttpRequest();
        if (typeof xhr.withCredentials !== "boolean") {
            xhr = false;
        }
    }

    if (xhr) {
        xhr.open("POST", _url, true);
        xhr.withCredentials = true;
        if (xhr.setRequestHeader) {
            xhr.setRequestHeader('Content-Type', 'text/plain');
        }

        xhr.onreadystatechange = function(){
            if (this.readyState == 4){
                if (this.status == 200){
                    if (_onResponse) _onResponse(this.responseText);
                } else {
                    if (_onError) _onError(this.status);
                }
            }
        };
        xhr.send(_data);
        return;
    }

    //如果浏览器版本可能不允许 Cross-Origin Resource Sharing 协议则使用Iframe代理
    apiProxyReady(function(T){
        T.ajax.request(_url, {
            "method": "POST",
            "header": {"Content-Type":"application/xml"},
            "data": _data,
            "onfailure": function(xhr){
                if (_onError) _onError(xhr.status);
            },
            "onsuccess": function(xhr, res){
                if (_onResponse) _onResponse(res);
            }
        });
    });
}; // end function ajax

function doAPIrequest(param){

    var url=param.url;
    var request=param.request;
    var timeout=param.timeout||30000;
    var type=param.type||"post";
    var successHandler=param.successHandler;
    var callback=param.callback;
    var err=param.error;

    AddrCrossAjax(url, request, onResponse, err);

    function onResponse(response) {
        Contacts.hideLoading();
        if(param.responseEncode){
            response = param.responseEncode(response);
        }
        try{ //返回json
            var responseObj = eval("(" + response + ")");
            if( responseObj.ResultCode == 0){
                if(successHandler){
                    successHandler(responseObj);
                }
            }
        }catch(e){
            var doc=getXmlDoc(response);
            if(doc && doc.documentElement){
                var rc=doc.getElementsByTagName("ResultCode")[0];
                rc=rc||doc.getElementsByTagName("rc")[0];
                var msg=doc.getElementsByTagName("ResultMsg")[0];
                msg=msg||doc.getElementsByTagName("rm")[0];
                if(rc){
                    var text=rc.text||rc.textContent;
                    var message=msg.text||msg.textContent;
                    if(text=="0"){
                        if(successHandler)successHandler(doc,rc);
                    }else{
                        error(text,message,doc);
                    }
                }else{
                    error();
                }
            }else{
                error();
            }
        }
    }

    function error(resultCode,resultMessage, xdoc){
        if (err) {
            err();
            return;
        }

        var RC_CODE = {
            GroupExisted: 9,
            ContactOverLimit: 21,
            GroupOverLimit: 22,
            ContactInGroupOverLimit: 23,
            ContactExisted: 28,
            AddContactTooQuick: 32,
            InputContactTooQuick: 33
        };
        var result = { success: false, resultCode: -1, msg: "" };
        var rc = -1;

        if ( param.showLoading != false ) {
            Contacts.hideLoading();
        }

        if (typeof(resultCode) == "string"){
            result.resultCode = resultCode;
        }

        rc = parseInt(result.resultCode);

        switch(rc) {
            case RC_CODE.GroupExisted:
            case RC_CODE.GroupOverLimit:
            case RC_CODE.ContactInGroupOverLimit:
            case RC_CODE.AddContactTooQuick:
            case RC_CODE.InputContactTooQuick:
                result.msg=resultMessage;
                break;

            case RC_CODE.ContactOverLimit:
                result.msg="保存失败，联系人数量已达上限。你可以<br /><a href=\"javascript:(function(){top.FF.close();top.Links.show('addr');})();\">管理通讯录&gt;&gt;</a>" ;
                break;

            case RC_CODE.ContactExisted:
                rc = xdoc.getElementsByTagName("SerialId")[0];
                rc = rc.text||rc.textContent;
                result.SerialId = parseInt(rc);
                break;
            default:
                result.msg = YIBUMSG.ajax_othererror;
                break;
        }

        if(callback){
            callback(result);
        }
    }
};


function getXMLTest(doc){
    if(doc.xml)return doc.xml;
    var root=doc.documentElement||doc;
    var xml="<"+root.tagName+">";
    $(root.tagName+" > *",doc).each(function(){
        xml+="<"+this.tagName+">"+encodeXML(this.textContent)+"</"+this.tagName+">";
    });
    xml+="</"+root.tagName+">";
    return xml;
}
function replaceSimpleXML(xml){
    if(typeof xml!="string"){
        xml=getXMLTest(xml);
    }
    var rm=replaceMent;
    for(var p in rm){
        var reg=new RegExp("(</?)"+p+">","g");
        xml=xml.replace(reg,"$1"+rm[p]+">");
    }
    return xml;
}

function LastContactsInfo(param) {
    for(var p in param){
        this[p]=param[p];
    }
    var reg=/^(\d+)-(\d+)-(\d+) (\d+):(\d+):(\d+)$/;
    var m=this.CreateTime.match(reg);
    this.CreateTime=new Date(m[1],m[2]-1,m[3],m[4],m[5],m[6]);
}

(function ($, _, M) {


String.prototype.bind=function(data){
    var result=this;
    for(var p in data){
        var reg=new RegExp("\\{"+p+"\\}","gi");
        result=result.replace(reg,data[p]);
    }
    return result;
}

var _syncMethods = {

    getContactsByMobile: function(mobile) {
        var result = [];
        if (!Contacts.data.contacts || mobile == '' || 'undefined' == typeof mobile) {
            return result;
        }

        if (mobile.length == 13) {
            mobile = mobile.replace(/^86/, "");
        }
        for (var i = 0, contacts = Contacts.data.contacts, len = contacts.length; i < len; i++) {
            var c = contacts[i];
            for (var j = 0; j < c.mobiles.length; j++) {
                var m = c.mobiles[j];
                m = m.replace(/[^\d]+/g, "");//tofix:修正(86)+8686-86,等手机号
                if(m.length==13)m=m.replace(/^86/, "");
                if (m == mobile) {
                    result.push(c);
                }
            }
        }
        return result;
    },

    getSingleContactsByMobile: function(mobile, useRepeat) {
        var contacts = Contacts.data.contacts;
        if (mobile.length == 13) {
            mobile = mobile.replace(/^86/, "");
        }
        if (!contacts) return null;
        if (!window._mobileCache_) {
            _mobileCache_ = {};
            _repeatMobile_ = {};
            for (var i = 0, len = contacts.length; i < len; i++) {
                var c = contacts[i];
                for (var j = 0; j < c.mobiles.length; j++) {
                    var m = c.mobiles[j];
                    if(m.length==13)m=m.replace(/^86/, "");
                    if (!_mobileCache_[m]) {
                        _mobileCache_[m] = c;
                    } else if (_mobileCache_[m].name != c.name) {
                        _repeatMobile_[m] = true;
                    }
                }
            }
            setTimeout(function() { _mobileCache_ = undefined; _repeatMobile_ = undefined; }, 0);
        }
        if (_repeatMobile_[mobile] && !useRepeat) {
            return null;
        } else {
            return _mobileCache_[mobile];
        }
    },
    //调用新版的函数
    getNameByAddr: function(addr, name) {
        arguments.callee.exists = false;
        var addrName = top.$App.getModel("contacts").getAddrNameByEmail(addr);
        addrName = top.M139.Text.Html.encode(addrName);
        if (addrName == top.M139.Text.Email.getAccount(addr)) {
            return top.M139.Text.Email.getEmail(addr);
        } else {
            return addrName;
        }
    },

    getGroupByName: function(groupName){
        var groups=Contacts.data.groups;
        for(var i=0,len=groups.length;i<len;i++){
            var g=groups[i];
            if(g.GroupName==groupName){
                return g;
            }
        }
        return null;
    },

    getGroupById: function(groupId){
        var groups=Contacts.data.groups;
        for(var i=0,len=groups.length;i<len;i++){
            var g=groups[i];
            if(g.GroupId==groupId){
                return g;
            }
        }
        return null;
    },

    isExistsGroupName: function(groupName){
        var groups=Contacts.data.groups;
        for(var i=0,len=groups.length;i<len;i++){
            if(groups[i].GroupName==groupName){
                return true;
            }
        }
        return false;
    },

    //验证新增联系人数据
    validateAddContacts: function(obj){
        Contacts.validateAddContacts.error="";
        if(!obj.name || obj.name.trim()==""){
            Contacts.validateAddContacts.error="请输入联系人姓名";
            return false;
        }
        if(obj.name.trim().getByteCount()>100){
            Contacts.validateAddContacts.error=frameworkMessage['warn_contactNameToolong'];
            return false;
        }
        if(obj.email && !Validate.test("email",obj.email)){
            Contacts.validateAddContacts.error=Validate.error;
            return false;
        }
        if(obj.email && obj.email.getByteCount()>60){
            Contacts.validateAddContacts.error=frameworkMessage['warn_contactEmailToolong'];
            return false;
        }
        if(obj.mobile && !Validate.test("mobile",obj.mobile)){
            Contacts.validateAddContacts.error=Validate.error;
            return false;
        }
        if(obj.mobile && obj.mobile.getByteCount()>100){
            Contacts.validateAddContacts.error=frameworkMessage['warn_contactMobileToolong'];
            return false;
        }
        if(!obj.email && !obj.mobile){
            Contacts.validateAddContacts.error="电子邮箱和手机号码，请至少填写一项";
            return false;
        }
        if(obj.newGroup){
            if(Contacts.getGroupByName(obj.newGroup)!=null){
                Contacts.validateAddContacts.error="联系组\""+obj.newGroup+"\"已经存在!";
                return false;
            }
        }
        return true;
    },

    getContactsByGroupId: function (groupId, onlyId) {
        var model = top.M2012.Contacts.getModel();
        if (onlyId) {
            return model.getGroupMembersId(groupId);
        } else {
            return model.getGroupMembers(groupId);
        }
    },

    getContactsById: function(contactsId){
        return Contacts.data.ContactsMap[contactsId]||null;
    },

    getContactsGroupById: function(contactsId){
        var groups = [];
        var member = Contacts.data.groupMember;
        for(var key in member){
            if(member[key] && member[key].length > 0){
                var str = member[key].join(',');
                if(str.indexOf(contactsId) > -1){
                    groups.push(key);
                }
            }
        }

        return groups;
    },

    getVipInfo: function(){
        return Contacts.data.vipDetails||null;
    },

    //根据VIP联系人信息组装数据提供刷新VIP邮件使用
    setVipInfo: function(vips){
        if(!vips){return false;}
        var vipinfo = vips;
        var vipn =0,vips = "",isExist =false,hasContact=false,vipGroupId="",vipArr = [] , vipEmails = [];
        if(vipinfo.length > 0){
            isExist = true;
            vipGroupId = vipinfo.vipGroupId;
            vipn = vipinfo.vipn;
        }
        if(vipn > 0){
            hasContact = true;
            vips = vipinfo.vipSerialIds;
            var vipIdArray = vips.split(",");
    
            for(var i=0; i<vipIdArray.length;i++){
                var info = Contacts.data.ContactsMap[vipIdArray[i]];
                if(info){
                    vipArr.push(info);
                    vipEmails = vipEmails.concat(info.emails);
                }
            }
        }
        Contacts.data.vipDetails ={
                        isExist      : isExist,   //vip联系人分组是否存在
                        hasContact   : hasContact,   //
                        vipGroupId   : vipGroupId,
                        vipContacts  : vipArr,
                        vipEmails    : vipEmails,
                        vipSerialIds : vips,
                        vipn         : vipn
                    };
    },

    //根据email地址找到联系人
    getContactsByEmail: function(email){
        var result = [];
        if (!Contacts.data.contacts) return result;
        for (var i = 0, contacts = Contacts.data.contacts, len = contacts.length; i < len; i++) {
            var c = contacts[i];
            for (var j = 0; j < c.emails.length; j++) {
                if (c.emails[j] == email) {
                    result.push(c);
                }
            }
        }
        return result;
    },

    getSingleContactsByEmail: function(email,useRepeat) {//默认放弃有重复name的,除非useRepeat为true
        var contacts = Contacts.data.contacts;
        if (!contacts || !email) return null;
        email = email.toLowerCase();
        if (!window._emailCache_) {
            _emailCache_ = {};
            _repeatEmail_ = {};
            for (var i = 0, len = contacts.length; i < len; i++) {
                var c = contacts[i];
                for (var j = 0; j < c.emails.length; j++) {
                    var e = c.emails[j].toLowerCase();
                    if (!_emailCache_[e]) {
                        _emailCache_[e] = c;
                    } else if (_emailCache_[e].name != c.name) {
                        _repeatEmail_[e] = true;
                    }
                }
            }
            setTimeout(function() { _emailCache_ = undefined; _repeatEmail_ = undefined; }, 0);
        }
        if (_repeatEmail_[email] && !useRepeat) {
            return null;
        } else {
            return _emailCache_[email];
        }
    },

    //是否存在的手机
    isExistMobile: function(mobile) {
        var contacts = Contacts.data.contacts;
        mobile = mobile.toString().trim().replace(/^86/,"");
        if (!contacts) return true;
        for (var i = 0, len = contacts.length; i < len; i++) {
            var info = contacts[i];
            if (
                (info.MobilePhone && info.MobilePhone.trim().replace(/^86/,"") == mobile)
                || (info.BusinessMobile && info.BusinessMobile.trim().replace(/^86/,"") == mobile)
                || (info.OtherMobilePhone && info.OtherMobilePhone.trim().replace(/^86/,"") == mobile)) {
                return true;
            }
        }
        return false;
    },

    //是否存在的邮箱
    isExistEmail: function(email){
        var contacts=Contacts.data.contacts;
        if(!contacts)return true;
        if(!email)return false;
        email=email.toLowerCase();
        for(var i=0,len=contacts.length;i<len;i++){
            var info=contacts[i];
            if(
                (info.FamilyEmail && info.FamilyEmail.toLowerCase()==email)
                ||(info.BusinessEmail && info.BusinessEmail.toLowerCase()==email)
                ||(info.OtherEmail && info.OtherEmail.toLowerCase()==email)){
                return true;
            }
        }
        return false;
    },

    getContactsCount: function() {
        return top.Contacts.data.TotalRecord;
    },

    QueryUserInfo: function(callback){

        var request="<QueryUserInfo><UserNumber>{0}</UserNumber></QueryUserInfo>".format($User.getUid());
        function successHandler(doc){
            var result={};
            var obj=doc.responseData;
            result.success=true;
            //result.msg= YIBUMSG.contactsaved;
            result.msg= "保存成功";//下版本修复
            if(obj.UserInfo){
                //result.info=new top.ContactsInfo(obj.UserInfo);
				 var helper = top.$App.getModel("contacts");
				 var fullInfo = helper.userInfoTranslate(obj.UserInfo[0]);
				result.info = new M2012.Contacts.ContactsInfo( fullInfo );
			}else{
                result.info=null;
            }
            if(callback){
                callback(result);
            }
        }
		 $RM.call("QueryUserInfo", request, function(a){
				successHandler(a);
			}, { error: function(){ alert("连接失败"); } });
		/*
        doAPIrequest({
            url:Contacts.apiurl("QueryUserInfo"),
            callback:callback,
            request:request,
            successHandler:successHandler,
            responseEncode:replaceSimpleXML
        });*/

    },

    /**
     * 将list添加到本地最近联系人缓存中。
     * @param {Array} list 必选参数，带属性AddrContent联系人数组。
     */
    addLastestContactsToCache: function(list) {
        var lastestContacts = Contacts.data.lastestContacts;
        if(!lastestContacts) return;
        $(list).each(function() {
            for (var i = 0; i < lastestContacts.length; i++) {
                if (lastestContacts[i] && lastestContacts[i].AddrContent == this.AddrContent) {
                    lastestContacts.splice(i, 1);
                    i--;
                }
            }
        });
        var arr = list.concat(lastestContacts);
        Contacts.data.lastestContacts = arr;
    },

    //邮件列表发件人浮层，加改手机使用。
    addContactsMobile: function(serialId, number, callback) {
        var info = Contacts.getContactsById(serialId);
        var request = "<AddContactsField><SerialId>{0}</SerialId><MobilePhone>{1}</MobilePhone></AddContactsField>".format(
            info.SerialId,
            encodeXML(number)
        );
        Contacts.execContactDetails(request, function(result) {
            if (result.success) {
                info.MobilePhone = number;
                info.mobiles[0] = number;
                if (callback) callback(result);
            } else {                
                if (callback) callback(result);
            }
        }, false);
    },

    //通讯录首页快速编辑使用，只更改其中几个字段时使用。
    //注意，该服务端接口必须填满所有字段，否则会清空
    ModContactsField: function (serialId, contactsDetails, isOver, callback, msg) {
        //TODO 暂时没想到好方法，在请求此方法时，YIBUMSG为空（未加载m2011.matrixvm.contacts.async.js)的情形,特加了个msg参数
        //关联文件：m2012.contacts.httpclient.js, 行700左右

        var properties;
        var feContact = contactsDetails;
        var orContact = this.getContactsById(serialId);

        var key = [ "AddrFirstName", "FamilyEmail", "MobilePhone", "BusinessEmail", "BusinessMobile" ];
        for (var i = key.length; i--; ) {
            properties = feContact[key[i]];
            if (properties) {
                orContact[key[i]] = properties;
            }

            if (typeof(properties) == "string" && properties.length == 0) {
                orContact[key[i]] = "";
            }
        }

        var buff = ["<ModContactsField>",
            "<UserNumber>", $User.getUid(), "</UserNumber>",
            "<SerialId>", serialId, "</SerialId>"];

        for (var m = key.length, i = 0; i < m; i++) {
            buff.push("<", key[i], ">", encodeXML(orContact[key[i]]), "</", key[i], ">");
        }

        buff.push("<OverWrite>", (isOver ? "1" : "0"),"</OverWrite>");
        buff.push("</ModContactsField>")

        var requestBody = buff.join('');
        var requestUrl = Contacts.addrInterfaceUrl("ModContactsField");

        function successHandler(doc) {
            var info = doc.responseData;

            var result = {};
            result.resultCode = info.ResultCode;
            result.msg = msg || YIBUMSG.contactsaved;
            result.ContactInfo = contactsDetails;
            result.SerialId = contactsDetails.SerialId;

            if (result.resultCode == '0'){
                Contacts.getContactsInfoById(serialId, function(_result){
                    Contacts.updateCache("EditContactsDetails", { 'info':_result.contactsInfo });
                    result.ContactInfo = _result.contactsInfo;
                    result.msg = msg || YIBUMSG.contactsaved;
                    result.success = true;

                    if (callback) callback(result);
                });
            }else{
                result.success = false;
                if (callback) callback(result);
            }
        }

        $RM.call("ModContactsField", requestBody, function(a){
            successHandler(a);
        }, { error: function(){ alert("连接失败"); } });

    },

    /*
    * 判断联系人是否是vip联系人-只需要判断serialId是否在vipgroup里面就行因为 vip组最多20人，这样循环最快
    *groupId 默认为vip组的id
    *serialId 联系人id
    *return BOOLEAN  返回联系人是否在某个组-默认查询vip组 -vip组ID固定(****)
    */
    IsVipUser: function(serialId){
        if(!serialId){
            return false;
        }
        var vipContacts = Contacts.data.vipDetails;
        if(!vipContacts.isExist){ //不存在vip联系人组
            return false;
        }
        if(!vipContacts.hasContact){
            return false; //VIP联系人为0
        }
    
        var vips = vipContacts.vipSerialIds;
        return vips.indexOf(serialId) > -1;
    },

    //从多个联系人中筛选出vip联系人
    /*
    *serialIdList ["3123","312321"]
    */
    FilterVip: function(serialIdList){
        var isVip = false;
        var vipList = [];
        if(!serialIdList){
            top.jslog("联系人sid组为空",serialIdList);
            return vipList;
        }
        for(var i=0;i<serialIdList.length;i++){
            isVip = top.Contacts.IsVipUser(serialIdList[i]);
            if(isVip){
                vipList.push(serialIdList[i]);
            }
        }
       return vipList;
    },

    //判断是否有vip联系人组
    IsExitVipGroup: function(){
        var vipgroup = Contacts.data.vipDetails;
        return vipgroup.length > 0 ;
    },

    //判断传入的sid是否是用户自己的 ()
    IsPersonalEmail: function(serialId){
		if(!serialId){return false;}
        //var info = top.Contacts.getContactsById(serialId);
        var info = top.Contacts.data.ContactsMap[serialId];
        var emails = info.emails;
        var personalEmails = $User.getAccountListArray();

        for(var i=0; i<emails.length; i++){
            for(var j=0;j<personalEmails.length;j++){
                if(personalEmails[j] ==emails[i]) {
                    return true; //break 只能退出当前for循环，没法退出最外层for循环，只能使用return 退出整个函数
                }
            }
        
        }
        return false;
    }

};

    //异步方法体的函数
    var _asyncMethods = {

        //#region //{ 联系人操作方法

        addContacts: function() {
            var _this = this, arg = arguments;
            _this.scriptReady("addContacts", function(){_this.addContacts.apply(_this, arg)});
        }

        ,addContactsMuti: function(contacts, callback) {
            var _this = this, arg = arguments;
            _this.scriptReady("addContactsMuti", function(){_this.addContactsMuti.apply(_this, arg)});
        }

        ,addContactDetails: function(contacts,callback){
            return this.execContactDetails(contacts,callback,true);
        }

        ,editContactDetails: function(contacts,callback){
            return this.execContactDetails(contacts,callback,false);
        }

        ,execContactDetails: function(contacts, callback, isAdd) {
            var _this = this, arg = arguments;
            _this.scriptReady("execContactDetails", function(){_this.execContactDetails.apply(_this, arg)});
        }

        ,deleteContacts: function() {
            var _this = this, arg = arguments;
            _this.scriptReady("deleteContacts", function(){_this.deleteContacts.apply(_this, arg)});
        }

        ,addLastestContacts: function() {
            var _this = this, arg = arguments;
            _this.scriptReady("addLastestContacts", function(){_this.addLastestContacts.apply(_this, arg)});
        }

        //最近联系人详细数据
        ,getLastContactsDetail: function(callback,isClose){
            var _this = this, arg = arguments;
            _this.scriptReady("getLastContactsDetail", function(){_this.getLastContactsDetail.apply(_this, arg)});
        }

        ,getCloseContactsDetail: function(callback) {
            this.getLastContactsDetail(callback, true);
        }

        //异步查询联系人详细数据
        ,getContactsInfoById: function(id,callback){
            var _this = this, arg = arguments;
            _this.scriptReady("getContactsInfoById", function(){_this.getContactsInfoById.apply(_this, arg)});
        }

        //获取重复联系人列表
        ,getRepeatContacts: function(callback){
            var _this = this, arg = arguments;
            _this.scriptReady("getRepeatContacts", function(){_this.getRepeatContacts.apply(_this, arg)});
        }

        //获取待更新联系人的人数
        ,getUpdatedContactsNumData: function(callback) {
            var _this = this, arg = arguments;
            _this.scriptReady("getUpdatedContactsNumData", function(){_this.getUpdatedContactsNumData.apply(_this, arg)});
        }

        //#endregion //}

        //#region //{ 组操作方法

        ,addGroup: function() {
            var _this = this, arg = arguments;
            _this.scriptReady("addGroup", function(){_this.addGroup.apply(_this, arg)});
        }

        ,changeGroupName: function() {
            var _this = this, arg = arguments;
            _this.scriptReady("changeGroupName", function(){_this.changeGroupName.apply(_this, arg)});
        }

        ,deleteGroup: function() {
            var _this = this, arg = arguments;
            _this.scriptReady("deleteGroup", function(){_this.deleteGroup.apply(_this, arg)});
        }

        //#endregion //}

        //#region //{ 联系人分组 关联方法

        ,deleteContactsFromGroup: function() {
            var _this = this, arg = arguments;
            _this.scriptReady("deleteContactsFromGroup", function(){_this.deleteContactsFromGroup.apply(_this, arg)});
        }

        ,moveContactsToGroup: function(){
            var _this = this, arg = arguments;
            _this.scriptReady("moveContactsToGroup", function(){_this.moveContactsToGroup.apply(_this, arg)});
        }

        ,copyContactsToGroup: function() {
            var _this = this, arg = arguments;
            _this.scriptReady("copyContactsToGroup", function(){_this.copyContactsToGroup.apply(_this, arg)});
        }

        /**
        * 给编辑分组联系人--与之前的不同，主要是做vip联系人组添加了groupType（非必填）
        * param.groupId:分组ID-第一次添加vip联系人时，分组为存在-groupId为""
        * param.groupType: 1 || ""
        * param.serialIds:联系人id串
        */
        ,editGroupList: function(){
            var _this = this, arg = arguments;
            _this.scriptReady("editGroupList", function(){_this.editGroupList.apply(_this, arg)});
        }

        //#endregion //}

        //#region //{ 用户自身资料操作方法

        //添加或编辑用户自身资料
        ,AddUserInfo: function(info,callback){
            var _this = this, arg = arguments;
            _this.scriptReady("AddUserInfo", function(){_this.AddUserInfo.apply(_this, arg)});
        }

        //#endregion //}
        
        //#region //{ 用户相互关系相关方法

        ,getWhoWantAddMeData: function(callback) {
            var _this = this, arg = arguments;
            _this.scriptReady("getWhoWantAddMeData", function(){_this.getWhoWantAddMeData.apply(_this, arg)});
        }

        ,agreeOrRefuseAll: function(callback) {
            var _this = this, arg = arguments;
            _this.scriptReady("agreeOrRefuseAll", function(){_this.agreeOrRefuseAll.apply(_this, arg)});
        }

        //#endregion //}
        
        //>
        //合并联系人
        //<
        ,MergeContacts: function(serialId,info,callback){
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.MergeContacts.apply(Contacts,arg)});
        }
        //>
        //智能全自动合并联系人
        //<
        ,AutoMergeContacts: function(callback){
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.AutoMergeContacts.apply(Contacts,arg)});
        }
        //>
        //<
        ,getAddrConfig: function(callback) {
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.getAddrConfig.apply(Contacts,arg)});
        }
        //>
        //删除最近联系记录
        //<
        ,DeleteLastContactsInfo: function(param, callback) {
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.DeleteLastContactsInfo.apply(Contacts,arg)});
        }
        //>

        //删除最近联系记录
        //<
        ,EmptyLastContactsInfo: function(param, callback) {
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.EmptyLastContactsInfo.apply(Contacts,arg)});
        }

        ,addContactsToCacheExec: function() {
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.addContactsToCache.apply(Contacts,arg)});
        }

        //<9.28
        ,addLastestContactsExt: function(param) {
	        var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execaddLastestContactsExt", function(){
                    Contacts.execaddLastestContactsExt.apply(Contacts, arg);
                });
            });
	        //Contacts.scriptReady(function(){Contacts.addLastestContactsExt.apply(Contacts,arg)});
        }

        ,getWhoAddMePageData: function(callback) {
            var _this = this, arg = arguments;
            _this.scriptReady("getWhoAddMePageData", function(){_this.getWhoAddMePageData.apply(_this, arg)});
        }
        ,getWhoAddMeData: function(callback) {
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.getWhoAddMeData.apply(Contacts,arg)});
        }

        ,getDealListData: function(callback) {
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.getDealListData.apply(Contacts,arg)});
        }
        ,deleleteDealList: function(relationId, callback) {
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.deleleteDealList.apply(Contacts,arg)});
        }

        //同步添加若干联系人（同自动保存联系人接口AutoSaveReceivers）
        ,syncAddContacts: function(obj, callback, groupid){
            var arg=arguments;
            Contacts.scriptReady(function(){Contacts.execSyncAddContacts.apply(Contacts,arg)});
        }



        //用户隐私设置
        ,savePrivacySettings: function(callback) {
            var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execSavePrivacySettings", function(){
                    Contacts.execSavePrivacySettings.apply(Contacts, arg);
                });
            });
        }

        //获取用户隐私设置信息params 包括 请求参数 和回调函数
        ,getPrivacySettings: function(params) {
            var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execGetPrivacySettings", function(){
                    Contacts.execGetPrivacySettings.apply(Contacts, arg);
                });
            });
        }
        /**
         * 可能认识的人页面批量添加选择人员。
         * @param {String} request 必选参数，请求参数。
         */
        ,OneKeyAddWAM: function(request,callback){
            var _this = this, arg = arguments;
            _this.scriptReady("OneKeyAddWAM", function(){_this.OneKeyAddWAM.apply(_this, arg)});
        }
        /**
         * 可能认识的人分组接口。
         * @param {String} request 必选参数，请求参数。
         */
        ,WMAGroupList: function(request,callback){
	       var _this = this, arg = arguments;
            _this.scriptReady("WMAGroupList", function(){_this.WMAGroupList.apply(_this, arg)});
        }

        ,modDealStatus: function(p, callback) {
        var arg=arguments;
        Contacts.scriptReady(function(){Contacts.modDealStatus.apply(Contacts,arg)});
        }

        ,updateCache: function(type, param) {    
            var arg = arguments;
            Contacts.scriptReady(function() { Contacts.updateCache.apply(Contacts, arg) });
        }

        /**
         * 发信成功页自动保存联系人与记录最近联系人。
         * @param {Array } contacts 必选参数，包含主送、抄送、密送的所有收件人的逗号隔开数组行 1@a.c, 2@a.c。
         * @param {String} from 必选参数，E、E1之类的来源标识 详见FROMTYPE枚举。
         * @param {Object} panel 必选参数，生成已保存联系人列表的DOM对象。
         * @param {String} subject 必选参数，刚才发送的邮件的标题。
         * @return void
         */
        ,AutoSaveRecentContacts: function(contacts, from, panel, subject) {
	        var _this = this, arg = arguments;
            _this.scriptReady("AutoSaveRecentContacts", function(){_this.AutoSaveRecentContacts.apply(_this, arg)});
        }
        /**
        *发信页 查询所有收件人是否在是整组
        */
        ,IsAllContactsSameGroup: function(requestParam, callback){
	        var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execIsAllContactsSameGroup", function(){
                    Contacts.execIsAllContactsSameGroup.apply(Contacts, arg);
                });
            });
        }


        /**
         *发信成功页另存为组
         */
        ,saveRecieverToGroup: function(requestParam, callback){
	        var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execsaveRecieverToGroup", function(){
                    Contacts.execsaveRecieverToGroup.apply(Contacts, arg);
                });
            });
        }

        /**
         * 发信成功页删除联系人。
         * @param {String} serialId 必选参数，联系人ID。
         * @return void
         */
        ,DelSavedContact: function(serialId, lst, ext){
	        var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execDelSavedContact", function(){
                    Contacts.execDelSavedContact.apply(Contacts, arg);
                });
            });
        }

        /**
         * 发信成功页修改联系人。
         * @param {String} serialId 必选参数，联系人ID。
         * @param {String} mobile 必选参数，修改后的手机号。
         * @param {String} name 必选参数，修改后的姓名。
         * @param {Object} lnk 必选参数，”修改“字样的A标签。
         * @param {Object} lstGroup 必选参数，组列表所在的UL标签。
         * @return void
         */
        ,ModSavedContact: function(serialId, mobile, name, lnk, pnl){
            var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execModSavedContact", function(){
                    Contacts.execModSavedContact.apply(Contacts, arg);
                });
            });
        }

        /**
         * 给自动保存联系人页快速添加组
         * @param {Object} btn
         * @param {Object} context
         */
        ,QuickAddGroup: function(btn, context){
           var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execQuickAddGroup", function(){
                    Contacts.execQuickAddGroup.apply(Contacts, arg);
                });
            });
        }

        /**
         * 修改部分个人信息的接口
         * @param {Function} callback
         */
        ,ModUserInfoIncrement: function(callback) {
            var arg=arguments;
            Contacts.scriptReady(function() {
                if (Contacts.ModUserInfoIncrement.caller == null) {
                    Contacts.ModUserInfoIncrement.apply(Contacts,arg);
                }
            });
        }

        //禁用自动保存联系人后，发送成功出现的保存联系人页面
        ,createAddContactsPage: function(param) {
	        var arg=arguments;
            Contacts.scriptReady(function(){
                Utils.waitForReady("Contacts.execCreateAddContactsPage", function(){
                    Contacts.execCreateAddContactsPage.apply(Contacts, arg);
                });
            });
        }

        //给分组添加联系人--与之前的不同，主要是做vip联系人组添加了groupType（非必填）
        /**
        *param.groupId:分组ID-第一次添加vip联系人时，分组为存在-groupId为""
        *param.groupType: vip || ""
        *param.serialIds:联系人id串
        */
        ,AddGroupList: function(param,callback){
	        var _this = this, arg = arguments;
            _this.scriptReady("AddGroupList", function(){_this.AddGroupList.apply(_this, arg)});
        }



        //将联系人移除分组--取消vip联系人调用的此接口
        ,DelGroupList: function(param,callback){
			 var _this = this, arg = arguments;
            _this.scriptReady("DelGroupList", function(){_this.DelGroupList.apply(_this, arg)});
        }
        
        //获取“和通讯录”待更新联系人的人数
        , getColorCloudInfoData: function (callback, onerror) {
            var _this = this, arg = arguments;
            _this.scriptReady("getColorCloudInfoData", function () { _this.getColorCloudInfoData.apply(_this, arg) });
        }

        /**
         * 获取联系人中可设置生日提醒联系人信息的接口
         * @parm importId {Int} 导入单号，指某次导入联系人的单号
         * @parm callback {Function} 成功时触发的回调方法
         * @parm onerror{Function} 失败时触发的回调方法
         */
        , getFinishImportList: function (importId, callback, onerror) {
            var _this = this, arg = arguments;
            _this.scriptReady("getFinishImportList", function () { _this.getFinishImportList.apply(_this, arg) });
        }

        /**
         * 获取联系人中可设置生日提醒联系人信息的接口
         * @parm importId {Int} 导入单号，指某次导入联系人的单号
         * @parm callback {Function} 成功时触发的回调方法
         * @parm onerror{Function} 失败时触发的回调方法
         */
        , getFinishImportResult: function (importId, callback, onerror) {
            var _this = this, arg = arguments;
            _this.scriptReady("getFinishImportResult", function () { _this.getFinishImportResult.apply(_this, arg) });
        }

        /**
         * 获取联系人中可设置生日提醒联系人信息的接口
         * @parm callback {Function} 成功时触发的回调方法
         * @parm onerror{Function} 失败时触发的回调方法
         */
        , getRemindBirthdays: function (callback, onerror) {
            var _this = this, arg = arguments;
            _this.scriptReady("getRemindBirdays", function () { _this.getRemindBirthdays.apply(_this, arg) });
        }

        /**
         * 设置生日提醒联系人的接口
         * 告知服务器，对应号码的联系人，已经设置生日提醒
         * @parm contactsNumbers {Array} 联系人号码数组，如[13800138000,13800138001]
         * @parm callback {Function} 成功时触发的回调方法
         * @parm onerror{Function} 失败时触发的回调方法
         */
        , setRemindBirthdays: function (contactsNumbers, callback, onerror) {
            var _this = this, arg = arguments;
            _this.scriptReady("setRemindBirdays", function () { _this.setRemindBirthdays.apply(_this, arg) });
        }

    };


/* 新格式
Object
    birthdayContacts: Array[0]
    closeContacts: Array[20]
    contacts: Array[2733]
    contactsIndexMap: Object [新增]
    contactsMap: Object [新增]
    groupedContactsMap: Object [新增]
    groups: Array[22]
    groupsMap: Object
    lastestContacts: Array[50]
    map: Array[137]
    vip: Object [新增]
*/

/*  旧格式
Object
    ContactsMap: Array[603322342]
    TotalRecord: 2733
    Vip: Array[1]  [未迁移]
    birthdayContacts: Array[0]
    closeContacts: Array[20]
    contacts: Array[2733]
    contactsHasRecord: Object
    groups: Array[22]
    groupsMap: Object
    lastContactsDetail: Array[232]
    lastestContacts: Array[50]
    map: Array[137]
    strangerHasRecord: Object
    userSerialId: undefined
    vipDetails: Object
*/

    $.extend(M2012.MatrixVM.prototype, {

        attacthContactMethod: function() {
            $.extend(window.Contacts, _syncMethods);
            $.extend(window.Contacts, _asyncMethods);
        }

    })

})(jQuery, _, M139);

﻿/**
 * @fileOverview 定义通讯录数据管理模块
 */

(function (jQuery, _, M139) {
    var $ = jQuery;
    var isFirstLoadQueryUserInfo = true;
    M139.namespace("M2012.Contacts.Model", Backbone.Model.extend(
    /**@lends M2012.Contacts.Model.prototype*/
    {

        /**通讯录数据实体
        *@constructs M2012.Contacts.Model
        */
        initialize: function (options) {
            this.initEvents();
        },

        /**
         *@inner
         */
        getUserNumber: function () {
            return top.$User.getUid();
        },

        /**
         *加载通讯录数据
         */
        loadMainData: function (options, callback) {
            options = options || {};
            var This = this;
            this.isLoading = true;

            //options.testUrl = "/m2012/js/test/html/contactsData.js";//用测试数据
            if (options.testUrl) {
                //测试数据
                $.get(options.testUrl, function (responseText) {
                    This.onMainDataLoad(M139.JSON.tryEval(responseText), callback);
                });
            } else {
                var requestData = {
                    GetUserAddrJsonData: {
                        //UserNumber: this.getUserNumber()
                    }
                };
                M2012.Contacts.API.call("GetUserAddrJsonData", requestData,
                    function (e) {
                        This.isLoading = false;
                        if (e) {
                            if (e.responseData) {
                                if (e.responseData.ResultCode == "0") {
                                    This.onMainDataLoad(e.responseData, callback);
                                } else if (e.responseData.ResultCode == "216") {
                                    $App.trigger("change:sessionOut", {}, true);
                                } else {
                                    M139.Logger.getDefaultLogger().error('addrsvr response error', e.responseData);
                                }
                            } else {
                                M139.Logger.getDefaultLogger().error('addrsvr response invalid', e.responseText);
                            }
                        } else {
                            M139.Logger.getDefaultLogger().error('addrsvr response empty');
                        }
                    }
                );
            }
        },


        loadQueryUserInfo: function (callback) {
            if (SiteConfig.m2012NodeServerRelease && $App.isShowWelcomePage() && isFirstLoadQueryUserInfo) {
                //第一次加载读欢迎页内联json
                var data = getWelcomeInlinedJSON();
                if (data) {
                    setTimeout(function () {
                        inlinedCallback(data, true);
                    }, 0);
                } else {
                    $App.on("welcome_QueryUserInfo_load", function (data) {
                        inlinedCallback(data, true);
                    });
                }
            } else {
                var client = new M139.ExchangeHttpClient({
                    name: "ContactsLoadMainDataHttpClient",
                    responseDataType: "JSON2Object"
                });
                client.on("error", function(e) {
                    if (options && _.isFunction(options.error)) {
                        options.error(e);
                    }
                });
                var reqData = "<QueryUserInfo><UserNumber>" + $User.getUid() + "</UserNumber></QueryUserInfo>";
                client.request(
                {
                    method: "post",
                    url: "/addrsvr/QueryUserInfo?sid=" + $App.query.sid + "&formattype=json",
                    data: reqData
                }, callback);
            }
            isFirstLoadQueryUserInfo = false;
            function inlinedCallback(data, todoClone) {//TODO Clone
                if (todoClone) {
                    data = $App.deepCloneJSON(data);
                }
                callback({
                    responseData: data
                });
                inlinedCallback = new Function();//防止欢迎页和页面自己加载的调用2次回调
            }
            function getWelcomeInlinedJSON() {
                var json = null;
                try {
                    json = document.getElementById("welcome").contentWindow.inlinedQueryUserInfoJSON;
                } catch (e) { }
                return json;
            }
        },

        //获取个人资料
        getUserInfo: function (options, callback) {
            var self = this;            
            if (!top.$User) {
                return;
            }
            
            options = options || {};
            
            //options.refresh true  每次都刷新数据
            if(self.UserInfoData && !options.refresh){
                if (callback && typeof (callback) == "function") {
                    try {
                        callback(self.UserInfoData);
                        return;
                    } catch (ex) {}
                }
            }

            self.getUserInfoWaiting = true;
            this.loadQueryUserInfo(
                function (e) {
                    if (e && e.responseData) {
                        var code = e.responseData.ResultCode;
                        var data = {
                            "code": "S_FALSE", //这是取缓存验证用户失败时默认的返回code
                            "ResultCode": code
                        };
                        if (code == "0") {
                            //返回报文：QueryUserInfoResp={"ResultCode":"0","ResultMsg":"Operate successful","UserInfo":[{"un":"8613911111115","b":"19","c":"\u5f20","d":"\u4e09\u4e30","e":"2323","f":"1","h":"西藏","i":"拉萨市","k":"试试11","l":"518007","m":"长虹科技大厦的份上","n":"0","p":"13911111115","r":"13911111115","s":"0756626262","t":"435435341","v":"07552566251","y":"zhumy@rd139.com","c8":"1391111111","a2":"5180071","a3":"长虹大厦发送地方实得分","a4":"彩讯科技公司","b3":"Z","b8":"\/Upload\/Photo\/139111\/139111111\/13911111115\/20120808173757.gif","c1":"前端工程师","e7":"2","e8":"0","f2":"5522","f7":"game","f8":"8","g7":"111","g8":"111111111111111111"}]}
                            //var userInfo = self.userInfoTranslate(e.responseData["UserInfo"][0]);
                            //console.log(userInfo);
                            //if (callback) { callback(userInfo); }
                            data = {
                                "code": "S_OK",
                                "var": self.userInfoTranslate(e.responseData["UserInfo"][0])
                            };
                        }
                        self.UserInfoData = data;
                        if (callback && typeof (callback) == "function") {
                            try {
                                callback(data);
                            } catch (ex) {
                                
                            }
                        }
                    }
                    self.getUserInfoWaiting = false;
                }
            );
        },
        contactRequest:function(apiName,options,callback){
            var client = new M139.ExchangeHttpClient({
                name: "ContactsLoadMainDataHttpClient",
                requestDataType: "ObjectToXML2",
                responseDataType: "JSON2Object"
            });
            if (!options) { options = {}; }
            options.UserNumber = top.$User.getUid();
            var reqData = {};
            reqData[apiName]= options

            client.request(
                {
                    method: "post",
                    url: "/addrsvr/"+apiName+"?sid=" + top.$App.query.sid + "&formattype=json",
                    data: reqData
                },
                function (e) {
                    if (callback) {callback(e); }
                }
            );
        },
        //修改个人资料
        modifyUserInfo: function (userInfo, callback) {
			var self = this;
            this.contactRequest("ModUserInfo", userInfo, function (e) {
				self.UserInfoData = null;
                if (e && e.responseData) {
                    if (callback) {
                        callback(e.responseData);
                    }
                }
            });
        },
        modifyGroup:function(options,callback){
            //<EditGroupList><UserNumber>8613590330157</UserNumber><GroupId>1171021884</GroupId><SerialId>1025214752</SerialId><GroupType>1</GroupType></EditGroupList>
            this.contactRequest("EditGroupList", options, function (e) {
                if (e && e.responseData) {
                    if (callback) {
                        callback(e.responseData);
                    }
                }
            });

        },
        userInfoTranslate: function (UserInfo) {
            var map = {
                "a": "UserType",
                "b": "SourceType",
                "c": "AddrFirstName",
                "d": "AddrSecondName",
                "e": "AddrNickName",
                "f": "UserSex",
                "g": "CountryCode",
                "h": "ProvCode",
                "i": "AreaCode",
                "j": "CityCode",
                "k": "StreetCode",
                "l": "ZipCode",
                "m": "HomeAddress",
                "n": "MobilePhoneType",
                "o": "BirDay",
                "p": "MobilePhone",
                "q": "BusinessMobile",
                "r": "BusinessPhone",
                "s": "FamilyPhone",
                "t": "BusinessFax",
                "u": "FamilyFax",
                "v": "OtherPhone",
                "w": "OtherMobilePhone",
                "x": "OtherFax",
                "y": "FamilyEmail",
                "z": "BusinessEmail",
                "c2": "OtherEmail",
                "c3": "PersonalWeb",
                "c4": "CompanyWeb",
                "c5": "OtherWeb",
                "c6": "OICQ",
                "c7": "MSN",
                "c8": "OtherIm",
                "c9": "CPCountryCode",
                "d0": "CPProvCode",
                "d1": "CPAreaCode",
                "a0": "CPCityCode",
                "a1": "CPStreetCode",
                "a2": "CPZipCode",
                "a3": "CPAddress",
                "a4": "CPName",
                "a5": "CPDepartName",
                "a6": "Memo",
                "a7": "ContactCount",
                "a8": "ContactType",
                "a9": "ContactFlag",
                "b0": "SynFlag",
                "b1": "SynId",
                "b2": "RecordSeq",
                "b3": "FirstNameword",
                "b4": "CountMsg",
                "b5": "StartCode",
                "b6": "BloodCode",
                "b7": "StateCode",
                "b8": "ImageUrl",
                "b9": "SchoolName",
                "c0": "BokeUrl",
                "c1": "UserJob",
                "e1": "FamilyPhoneBrand",
                "e2": "BusinessPhoneBrand",
                "e3": "OtherPhoneBrand",
                "e4": "FamilyPhoneType",
                "e5": "BusinessPhoneType",
                "e6": "OtherPhoneType",
                "e7": "EduLevel",
                "e8": "Marriage",
                "e9": "NetAge",
                "e0": "Profession",
                "f1": "Income",
                "f2": "Interest",
                "f3": "MoConsume",
                "f4": "ExpMode",
                "f5": "ExpTime",
                "f6": "ContactMode",
                "f7": "Purpose",
                "f8": "Brief",
                "f9": "FavoEmail",
                "f0": "FavoBook",
                "g1": "FavoMusic",
                "g2": "FavoMovie",
                "g3": "FavoTv",
                "g4": "FavoSport",
                "g5": "FavoGame",
                "g6": "FavoPeople",
                "g7": "FavoWord",
                "g8": "Character",
                "g9": "MakeFriend",
                "ui": "UserInfo",
                "un": "UserNumber",
                "sd": "SerialId",
                "gd": "GroupId",
                "gp": "Group",
                "gi": "GroupInfo",
                "ct": "Contacts",
                "ci": "ContactsInfo",
                "gl": "GroupList",
                "li": "GroupListInfo",
                "tr": "TotalRecord",
                "rc": "ResultCode",
                "rm": "ResultMsg",
                "gn": "GroupName",
                "cn": "CntNum",
                "ri": "RepeatInfo",
                "lct": "LastContacts",
                "lctd": "LastContactsDetail",
                "lci": "LastContactsInfo",
                "cct": "CloseContacts",
                "cci": "CloseContactsInfo",
                "an": "AddrName",
                "at": "AddrType",
                "ac": "AddrContent",
                "us": "UserSerialId",
                "ai": "AddrId",
                "lid": "LastId",
                "ate": "AddrTitle",
                "trg": "TotalRecordGroup",
                "trr": "TotalRecordRelation",
                "cf": "ComeFrom",
                "cte": "CreateTime",
                "trg": "TotalRecordGroup",
                "trr": "TotalRecordRelation",
                "Bct": "BirthdayContacts",
                "bci": "BirthdayContactInfo"
            }
            var result = {};
            for (elem in UserInfo) {
                if (map[elem]) {
                    result[map[elem]] = UserInfo[elem];
                }
            }
            return result;
        },
        //获取隐私设置
        getPrivateSettings: function (callback) {
            if (!window.$User) {
                return;
            }

            var self = this;
            var client = new M139.ExchangeHttpClient({
                name: "ContactsLoadMainDataHttpClient",
                responseDataType: "JSON2Object"
            });

            var reqData = "<GetPrivacySettings><UserNumber>" + $User.getUid() + "</UserNumber></GetPrivacySettings>";

            client.request(
                {
                    method: "post",
                    url: "/addrsvr/GetPrivacySettings?sid=" + $App.query.sid,
                    data: reqData
                },
                function (e) {

                    if (e && e.responseData) {
                        var respData = e.responseData;
                        var code = respData.ResultCode;
                        var data = {
                            "code": "S_FALSE" //这是取缓存验证用户失败时默认的返回code
                        };
                        if (code == "0") {
                            //返回报文：QueryUserInfoResp={"ResultCode":"0","ResultMsg":"Operate successful","UserInfo":[{"un":"8613911111115","b":"19","c":"\u5f20","d":"\u4e09\u4e30","e":"2323","f":"1","h":"西藏","i":"拉萨市","k":"试试11","l":"518007","m":"长虹科技大厦的份上","n":"0","p":"13911111115","r":"13911111115","s":"0756626262","t":"435435341","v":"07552566251","y":"zhumy@rd139.com","c8":"1391111111","a2":"5180071","a3":"长虹大厦发送地方实得分","a4":"彩讯科技公司","b3":"Z","b8":"\/Upload\/Photo\/139111\/139111111\/13911111115\/20120808173757.gif","c1":"前端工程师","e7":"2","e8":"0","f2":"5522","f7":"game","f8":"8","g7":"111","g8":"111111111111111111"}]}
                            //var userInfo = self.userInfoTranslate(e.responseData["UserInfo"][0]);
                            //console.log(userInfo);
                            //if (callback) { callback(userInfo); }

                            data = {
                                "code": "S_OK",
                                "var": {
                                    "addMeRule": respData.WhoAddMeSetting,
                                    "UserInfoSetting": respData.UserInfoSetting //这个是一个对象
                                }
                            };
                        }
                        if (callback && typeof (callback) == "function") {
                            try {
                                callback(data);
                            } catch (ex) {
                                
                            }
                        }
                    }
                }
            );
        },

        //更新隐私设置
        //注意：经测试，如果UserInfoSetting未传递所有值，则未传递的值默认设置为“仅好友可见”，值为0
        //建议暂不使用此接口设置数据
        /*
        options={
              UserNumber:8613800138000, //此字段可忽略，会自动添加
              WhoAddMeSetting:0,
              UserInfoSetting:{
                AddrFirstName:0,
                UserSex:0,
                BirDay:0,
                ImageUrl:0,
                FamilyEmail:0,
                MobilePhone:0,
                FamilyPhone:0,
                OtherIm:0,
                HomeAddress:0,
                CPName:0,
                UserJob:0,
                BusinessEmail:0,
                BusinessMobile:0,
                BusinessPhone:0,
                CPAddress:0,
                CPZipCode:0
              }
            }
        */
        updatePrivateSettings: function (options, callback) {
            var client = new M139.ExchangeHttpClient({
                name: "ContactsLoadMainDataHttpClient",
                requestDataType: "ObjectToXML2",
                responseDataType: "JSON2Object"
            });

            var UserNumber = $User.getUid();
            var reqData = { "UserNumber": UserNumber }; //默认加上号码
            reqData = { "SavePrivacySettings": $.extend(reqData, options) };

            client.request(
                {
                    method: "post",
                    url: "/addrsvr/SavePrivacySettings?sid=" + $App.query.sid,
                    data: reqData
                },
                function (e) {
                    if (e && e.responseData) {
                        var respData = e.responseData;
                        var result = {
                            "code": (respData.ResultCode == "0" ? "S_OK" : respData.ResultCode) || "FS_UNKNOWN",
                            "var": {
                                "msg": respData.ResultMsg || ""
                            }
                        };

                        if (callback) {
                            callback(result);
                        }
                    }
                }
            );
        },
        /**
         *获取通讯录数据
         */
        requireData: function (callback) {
            var data = this.get("data");
            if (data) {
                if (callback) {
                    callback(data);
                }
            } else {
                if (!this.isLoading) {
                    this.loadMainData();
                }
                this.on("maindataload", function (data) {
                    this.off("maindataload", arguments.callee);
                    if (callback) {
                        setTimeout(function () {
                            callback(data);
                        }, 0);
                    }
                });
            }
        },

        /**通讯是否已加载*/
        isLoaded: function () {
            return !!this.get("data");
        },

        /**
         *通讯录数据加载完成后处理数据
         *@inner
         */
        onMainDataLoad: function (json, callback) {
            json.Groups = json.Group || json.Groups;

            //后台不输出数组的时候容错
            if (!json.LastContacts) json.LastContacts = [];
            if (!json.CloseContacts) json.CloseContacts = [];
            if (!json.BirthdayContacts) json.BirthdayContacts = [];
            if (!json.Contacts) json.Contacts = [];
            if (!json.Groups) json.Groups = [];
            if (!json.GroupMember) json.GroupMember = {};
            if (!json.NoGroup) json.NoGroup = [];

            json.TotalRecord = parseInt(json.TotalRecord);
            json.TotalRecordGroup = parseInt(json.TotalRecordGroup);
            json.TotalRecordRelation = parseInt(json.TotalRecordRelation);
            json.userSerialId = json.UserSerialId;

            var exports = {
                TotalRecord: json.TotalRecord,
                TotalRecordGroup: json.TotalRecordGroup,
                TotalRecordRelation: json.TotalRecordRelation,
                noGroup: json.NoGroup
            };

            //分组
            this.createGroupData({
                data: json,
                exports: exports
            });

            //联系人
            this.createContactsData({
                data: json,
                exports: exports
            });

            //组关系
            this.createGroupMemberData({
                data: json,
                exports: exports
            });
            //处理最近、紧密联系人
            this.createLastAndCloseContactsData({
                data: json,
                exports: exports
            });

            //处理生日联系人
            this.createBirthdayContactsData({
                data: json,
                exports: exports
            });
            
            //处理VIP联系人
            this.createVIPContactsData({
                data: json,
                exports: exports
            });
            
            //处理用户个人资料  QueryUserInfo合并至GetUserAddrJsonData接口输出
            if(json["UserInfo"] && json["UserInfo"][0]){
                this.UserInfoData = {
                    "code": "S_OK",
                    "var": this.userInfoTranslate(json["UserInfo"][0])
                };
            }

            this.set("data", exports);
            this.trigger("maindataload", exports);
            if (callback) callback(exports);
        },

        /**
         *加载通讯录主干数据后处理分组数据
         *@inner
         */
        createGroupData: function (options) {
            if (options.append) {
                //添加新组后更新缓存
                var data = this.get("data");
                var groups = data.groups;
                var groupsMap = data.groupsMap;
                var groupMember = data.groupMember;
                var newGroup = {
                    GroupId: options.append.groupId,
                    id: options.append.groupId,
                    GroupName: options.append.groupName,
                    name: options.append.groupName,
                    CntNum: 0,
                    count: 0
                };
                groups.push(newGroup);
                groupsMap[newGroup.id] = newGroup;
                groupMember[newGroup.id] = [];
            } else {
                var exports = options.exports;
                var data = options.data;
                var dataGroups = data.Groups;
                var groups = new Array(dataGroups.length);
                var groupsMap = {};
                for (var i = 0, len = dataGroups.length; i < len; i++) {
                    var g = dataGroups[i];
                    groupsMap[g.gd] = groups[i] = {
                        GroupId: g.gd,
                        id: g.gd,
                        GroupName: g.gn,
                        name: g.gn,
                        CntNum: g.cn,
                        count: g.cn
                    };
                }
                exports.groups = groups;
                exports.groupsMap = groupsMap;
            }
        },

        /**
         *加载通讯录主干数据后处理联系人数据
         *@inner
         */
        createContactsData: function (options) {
            if (options.remove) {
                var data = this.get("data");
                var serialId = options.serialId;
                delete data.contactsMap[serialId];
                delete data.contactsIndexMap[serialId];
                var contacts = data.contacts;
                for (var i = contacts.length - 1; i >= 0; i--) {
                    if (contacts[i].SerialId == serialId) {
                        contacts.splice(i, 1);
                        break;
                    }
                }
                data.emailHash = null;//清除字段缓存
            } else if (options.append) {
                var data = this.get("data");
                var newContacts = options.append;
                var contacts = data.contacts;
                var contactsMap = data.contactsMap;
                var contactsIndexMap = data.contactsIndexMap;
                var nogroup = data.noGroup;
                for (var i = 0; i < newContacts.length; i++) {
                    var c = newContacts[i];
                    c.Quanpin = c.FullNameword || "";
                    c.Jianpin = c.FirstWord || "";

                    var info = new M2012.Contacts.ContactsInfo(c);
                    contacts[contacts.length] = info;
                    contactsMap[info.SerialId] = info;
                    contactsIndexMap[info.SerialId] = contacts.length;
                }
                data.emailHash = null;//清除字段缓存
                data.TotalRecord += newContacts.length;
            }else{
                var exports = options.exports;
                var data = options.data;
                var dataContacts = data.Contacts

                var contacts = new Array(dataContacts.length);
                var contactsMap = {};
                var contactsIndexMap = {};

                var csClass = M2012.Contacts.ContactsInfo;
                for (var i = 0, len = dataContacts.length; i < len; i++) {
                    var c = dataContacts[i];
                    var info = new csClass({
                        SerialId: c.sd,
                        AddrFirstName: c.c,
                        AddrSecondName: c.d,
                        MobilePhone: c.p,
                        BusinessMobile: c.q,
                        OtherMobilePhone: c.w,
                        FamilyEmail: (c.y || "").toLowerCase(),
                        BusinessEmail: (c.z || "").toLowerCase(),
                        OtherEmail: (c.c2 || "").toLowerCase(),
                        FirstNameword: (c.b3 || "").toLowerCase(),
                        FamilyFax: c.u,
                        BusinessFax: c.t,
                        OtherFax: c.x,
                        ImageUrl: c.b8,
                        Quanpin: (c.d2 || "").toLowerCase(),
                        Jianpin: (c.d3 || "").toLowerCase(),
                        CPName: c.a4,
                        UserJob: c.c1
                    });
                    contacts[i] = info;
                    contactsMap[c.sd] = info;
                    contactsIndexMap[c.sd] = i;
                }
                exports.contacts = contacts;
                exports.contactsMap = contactsMap;
                exports.contactsIndexMap = contactsIndexMap;
            }

            //刷新通讯录标签
            var addrtab = $App.getTabByName("addr");
            if (addrtab) {
                addrtab.isRendered = false;
            }
        },

        updateContactsData: function (options) {
            var data = this.get("data");
            var contactinfos = options.modification;
            var map = data.map || [];
            var contacts = data.contacts;
            var contactsMap = data.contactsMap;
            var groupsMap = data.groupsMap;

            var j, k, flag, groups = [];

            for (k = contactinfos.length; k--; ) {

                var info = new M2012.Contacts.ContactsInfo(contactinfos[k]);
                contactsMap[info.SerialId] = info;

                for (j = contacts.length; j--; ) {
                    if (contacts[j].SerialId == info.SerialId) {
                        contacts[j] = info;
                        break;
                    }
                }

                //删除现有map后重建关系
                groups.length = 0;
                for (j = map.length; j--; ) {
                    if (map[j].SerialId == info.SerialId) {
                        groups.push(map[j].GroupId);
                        map.splice(j, 1);
                    }
                }

                //先删除groups、groupsMap 的联系人数，注意groups是旧的组关系
                for (j = groups.length; j--; ) {
                    flag = groupsMap[groups[j]];
                    flag.count = parseInt(flag.count) - 1;
                    flag.CntNum = parseInt(flag.CntNum) - 1;
                }

                //重建map
                groups = info.GroupId.split(','); //groups有""的元素
                for (j = groups.length; j--; ) {
                    if (groups[j]) {
                        map.push({ SerialId: info.SerialId, GroupId: groups[j] });
                        flag = groupsMap[groups[j]];
                        flag.count = parseInt(flag.count) + 1;
                        flag.CntNum = parseInt(flag.CntNum) + 1;
                    }
                }

                //更新未分组
                for (j = data.noGroup.length; j--; ) {
                    if (data.noGroup[j] == info.SerialId) {
                        data.noGroup.splice(j, 1);
                        break;
                    }
                }

                if (groups.length == 0) {
                    data.noGroup.push(String(info.SerialId));
                    if (data.groupedContactsMap) {
                        delete data.groupedContactsMap[info.SerialId];
                    }
                } else {
                    if (data.groupedContactsMap) {
                        data.groupedContactsMap[info.SerialId] = 1;
                    }
                }

            }
            if(data.emailHash){//还要更新二级hash缓存
                if(info.emails && info.emails.length>0){
                    data.emailHash[info.emails[0]]=info;
                 }
            }
            groups.length = 0;
            groups = null;
        },


        /**
         *加载通讯录主干数据后处理联系人组关系数据
         *@inner
         */
        createGroupMemberData: function (options) {
            if (options.append) {
                //添加组关系缓存
                var appendItem = options.append;//格式为{SerialId:"",groups:[]}
                var groups = appendItem.GroupId;
                
                groups = groups.length == 0 ? [] : groups;
                groups = _.isString(groups) ? groups.split(",") : groups;

                var data = this.get("data");
                var groupsMap = data.groupsMap;
                var groupMember = data.groupMember;
                if (groups.length == 0) {
                    //如果没分组，联系人id添加到noGroup
                    data.noGroup.push(appendItem.SerialId);
                } else {
                    _.each(groups, function (gid) {
                        var gm = groupMember[gid];
                        if (_.isUndefined(gm)) {
                            data.groupMember[gid] = [];
                            gm = data.groupMember[gid];
                        }

                        gm.push(appendItem.SerialId);
                        groupsMap[gid].CntNum = gm.length;
                    });
                }
            } else {
                var data = options.data;
                var exports = options.exports;
                var contactsMap = exports.contactsMap;
                var groupsMap = exports.groupsMap;
                var groupMember = data.GroupMember;
                for (var gid in groupMember) {
                    var group = groupsMap[gid];
                    if (!group) {
                        if(/^\d+$/.test(gid)){
                            delete groupsMap[gid];//删除组脏数据
                        }
                    } else {
                        var members = groupMember[gid];
                        for (var i = 0; i < members.length; i++) {
                            if (!contactsMap[members[i]]) {
                                members.splice(i, 1);//删除联系人脏数据
                                i--;
                            }
                        }
                        group.CntNum = members.length;
                    }
                }
                exports.groupMember = groupMember;
            }
        },

        /**
         *加载通讯录主干数据后处理最近联系人和紧密联系人数据
         *@inner
         */
        createLastAndCloseContactsData: function (options) {
            if (options.append) {
                var data = this.get("data");

                var lastestContacts = data.lastestContacts;
                if (!$.isArray(lastestContacts)) {
                    return;
                }

                var items = options.append || [];
                for (var i = 0; i < items.length; i++) {
                    var l = items[i];
                    lastestContacts.unshift(l);
                }
                var map = {};
                //排除重复
                for (var i = 0; i < lastestContacts.length; i++) {
                    var l = lastestContacts[i];
                    if (map[l.AddrContent]) {
                        lastestContacts.splice(i, 1);
                        i--;
                    } else {
                        map[l.AddrContent] = 1;
                    }
                }
                if (lastestContacts.length > 50) {
                    lastestContacts.length = 50;
                }
            } else {
                var exports = options.exports;
                var data = options.data;
                var dataLastContacts = data.LastContacts;
                var dataCloseContacts = data.CloseContacts;
                var lastestContacts = [];
                var closeContacts = [];


                for (var i = 0, len = dataLastContacts.length; i < len; i++) {
                    var l = dataLastContacts[i];
                    if (typeof l.ac == "object") continue;//不懂？
                    lastestContacts.push({
                        SerialId: l.sd,
                        AddrName: l.an,
                        AddrType: l.at,
                        AddrContent: l.ac
                    });
                }

                for (var i = 0, len = dataCloseContacts.length; i < len; i++) {
                    var l = dataCloseContacts[i];
                    if (typeof l.ac == "object") continue;
                    closeContacts.push({
                        SerialId: l.sd,
                        AddrName: l.an,
                        AddrType: l.at,
                        AddrContent: l.ac
                    });
                }
                exports.lastestContacts = lastestContacts;
                exports.closeContacts = closeContacts;
            }
        },

        /**
         *加载通讯录主干数据后处理过生日的联系人数据
         *@inner
         */
        createBirthdayContactsData: function (options) {
            var exports = options.exports;
            var data = options.data;
            var dataBirContacts = data.BirthdayContacts;
            var birthdayContacts = new Array(dataBirContacts.length);
            for (var i = dataBirContacts.length - 1; i >= 0; i--) {
                var k = dataBirContacts[i];
                birthdayContacts[i] = {
                    SerialId: k.sd,
                    AddrName: k.an,
                    MobilePhone: k.p,
                    FamilyEmail: k.y,
                    BusinessEmail: k.z,
                    OtherEmail: k.c2,
                    BirDay: k.o
                };
            };
            exports.birthdayContacts = birthdayContacts;
        },

        /**
         *处理vip联系人数据
         *@inner
         */
        createVIPContactsData: function (options) {
            //"Vip":[{"vipg":"1158807544","vipc":"188722633,998324356","vipn":"2"}]
            var data = options.data;
            var exports = options.exports;
            var vipData = data.Vip && data.Vip[0];
            var vip = {};
            if (vipData) {
                try{
                    vip.groupId = vipData.vipg;
                    vip.contacts = vipData.vipc ? vipData.vipc.split(",") : [];
                } catch (e) {
                    //todo
                }
            }
            exports.vip = vip;
        },

        /**
         *根据联系人id获得对象
         *@param {String} cid 联系人id (SerialId)
         *@returns {M2012.Contacts.ContactsInfo} 返回联系人对象
         */
        getContactsById: function (cid) {
            return this.get("data").contactsMap[cid] || null;
        },
        /**
         *根据联系人id获取当前联系人的所有组
         *@param {String} cid 联系人id (SerialId)
         *@returns [] 返回联系人组
         */
        getContactsGroupById: function(cid){
            var groups = [];
            var member = this.get("data").groupMember;
            for(var key in member){
                if(member[key] && member[key].length > 0){
                    if(member[key].join(',').indexOf(cid) > -1){
                        groups.push(key);
                    }
                }
            }

            return groups;
        },
        /**
         *根据组id获得对象
         *@param {String} gid 组id (groupId)
         *@returns {Object} 返回组对象
         */
        getGroupById: function (gid) {
            return this.get("data").groupsMap[gid] || null;
        },

        /**
         *根据组名获得组对象
         *@param {String} gid 组id (groupId)
         *@returns {Object} 返回组对象
         */
        getGroupByName: function (groupName) {
            var groups = this.getGroupList();
            for (var i = 0, len = groups.length; i < len; i++) {
                var g = groups[i];
                if (g.name === groupName) {
                    return g;
                }
            }
            return null;
        },


        /**
         *获得联系人的分组id列表
         *@param {String} serialId 联系人id
         *@returns {Object} 返回组对象
         */
        getContactsGroupId: function (serialId) {
            var groupMember = this.get("data").groupMember;
            var groups = [];
            for (var gid in groupMember) {
                var members = groupMember[gid];
                for (var i = 0, len = members.length; i < len; i++) {
                    if (members[i] === serialId) {
                        groups.push(gid);
                        break;
                    }
                }
            }
            return groups;
        },

        /**
         *返回一个联系组的克隆列表
         *@returns {Array} 返回数组
         */
        getGroupList: function () {
            var groups = this.get("data");
            if (groups) {
                groups = groups.groups;
            }

            if (groups && _.isFunction(groups.concat)) {
                groups = groups.concat();
            } else {
                groups = [];
            }

            return groups;
        },
        /**
         *返回一个分组共有多少联系人，数据接口输出的有可能不准确，可纠正
         *@param {String} gid 组id (groupId)
         *@returns {Number} 返回组联系人个数
         */
        getGroupMembersLength: function (gid) {
            var group = this.getGroupById(gid);
            if (!group) {
                throw "M2012.Contacts.Model.getGroupContactsLength:不存在联系人分组gid=" + gid;
            }
            return group.CntNum;
        },
        /**
         *返回一个联系组的所有联系人id
         *@param {String} gid 组id (groupId)
         *@param {Object} options 选项集
         *@param {String} options.filter 筛选出有以下属性的联系人:email|mobile|fax
         *@returns {Array} 返回组联系人id：[seriaId,seriaId,seriaId]
         */
        getGroupMembersId: function (gid, options) {
            var result = this.getGroupMembers(gid, options);
            for (var i = 0, len = result.length; i < len; i++) {
                result[i] = result[i].SerialId;
            }
            return result;
        },
        /**
         *返回一个联系组的所有联系人列表
         *@param {String} gid 组id (groupId)
         *@param {Object} options 选项集
         *@param {String} options.filter 筛选出有以下属性的联系人:email|mobile|fax
         *@returns {Array} 返回组联系人id：[ContactsInfo,ContactsInfo,ContactsInfo]
         */
        getGroupMembers: function (gid, options) {
            options = options || {};
            var filter = options.filter;                        
            var cData = this.get("data");
            var contactsMap = cData.contactsMap;
            var groupMember = cData.groupMember;
            var result = [];
            if (gid == this.getVIPGroupId()) {
                result = this.getVIPContacts();
            } else {
                var gm = groupMember[gid];
                if (gm) {
                    for (var i = 0, len = gm.length; i < len; i++) {
                        var cid = gm[i];
                        var c = contactsMap[cid];
                        if (c) {
                            result.push(c);
                        }
                    }
                }
            }
            if (options && options.filter) {
                result = this.filterContacts(result, { filter: options.filter, colate: options.colate });
            }
            return result;
        },
        /**获得vip联系人*/
        getVIPContacts: function () {
            var data = this.get("data");
            var result = [];
            var vip = data && data.vip;
            var contactsMap = data && data.contactsMap;
            if (vip && vip.contacts) {
                var contacts = vip.contacts;
                for (var i = 0; i < contacts.length; i++) {
                    var c = contacts[i];
                    var item = contactsMap[c];
                    if (item) {//vip联系人有可能被删除了
                        result.push(item);
                    }
                }
            }
            return result;
        },
        /**
         *获得vip分组id
         */
        getVIPGroupId: function () {
            var id = "";
            var data = this.get("data");
            if (data && data.vip) {
                id = data.vip.groupId;
            }
            return id;
        },

        /**
         *筛选联系人
         *@param {Array} contacts 要筛选的联系人
         *@param {Object} options 选项集
         *@param {String} options.filter 筛选属性：email|mobile|fax
         *@returns {Array} 返回组联系人id：[ContactsInfo,ContactsInfo,ContactsInfo]
         */
        filterContacts: function (contacts, options) {
            var filter = options.filter;
            var result = [];
            for (var i = 0, len = contacts.length; i < len; i++) {
                var c = contacts[i];
                if (filter == "email" && c.getFirstEmail()) {
                    result.push(c);
                } else if (filter == "mobile" && c.getFirstMobile()) {
                    result.push(c);
                } else if (filter == "fax" && c.getFirstFax()) {
                    result.push(c);
                } else if (options.colate && c.getFirstEmail().indexOf(filter) > -1) {
                    result.push(c); //change by Aerojin 2014.06.09 过滤非本域用户
                }                
            }
            return result;
        },

        /**
         *绑定一些事件
         *@inner
         */
        initEvents:function(){
            var self = this;
            var E = "dataForMatch_email", M = "dataForMatch_mobile", F = "dataForMatch_fax";

            //清除用来做索引的缓存
            self.on("update", function (e) {
                if (e.type == "AddSendContacts" || e.type == "AddContacts" || e.type == "EditContacts") {
                    if (self.has(E)) {
                        self.unset(E);
                    }

                    if (self.has(M)) {
                        self.unset(M);
                    }

                    if (self.has(F)) {
                        self.unset(F);
                    }
                }
            });

            //重新加载联系人数据时，也清理做索引的缓存
            self.on("maindataload", function () {
                if (self.has(E)) {
                    self.unset(E);
                }

                if (self.has(M)) {
                    self.unset(M);
                }

                if (self.has(F)) {
                    self.unset(F);
                }
            });
        },

        //预先处理 合并最近联系人紧密联系人与常用联系人，排除重复
        getDataForMatch: function (filter) {
            var dataKey = "dataForMatch_" + filter;
            var data = this.get(dataKey);
            if (!data) {
                var contacts = this.filterContacts(this.get("data").contacts, {
                    filter: filter
                });
                data = getOldLinkManList(contacts, filter);
                this.set(dataKey, data);
            }
            return data;
            function getOldLinkManList(contacts, filter) {
                var key;
                if (filter == "email") {
                    key = "emails";
                } else if (filter == "fax") {
                    key = "faxes";
                } else if (filter == "mobile") {
                    key = "mobiles";
                }
                var linkManList = [];
                for (var i = 0, len = contacts.length; i < len; i++) {
                    var c = contacts[i];
                    var addrs = c[key];
                    for (var j = 0; j < addrs.length; j++) {
                        var addr = addrs[j];
                        linkManList.push({
                            name: c.name,
                            lowerName: c.lowerName,
                            addr: addr,
                            id: c.SerialId,
                            quanpin: c.Quanpin,
                            jianpin: c.Jianpin
                        });
                    }
                }
                return linkManList;
            }
        },
        /**
         *根据输入匹配联系人
         *@inner
         */
        getInputMatch: function (options) {
            var contacts = this.getDataForMatch(options.filter);
            var keyword = options.keyword;
            var len = contacts.length;
            var matches = [];
            var matchTable = {};
            var attrToNumber = {
                "addr": "01",
                "name": "02",
                "quanpin": "03",
                "jianpin": "04"
            }
            var numberToAttr = {
                "01": "addr",
                "02": "name",
                "03": "quanpin",
                "04": "jianpin"
            }
            var SPLIT_CHAR = "0._.0";//匹配键的分隔符
            //高性能哈希，匹配下标+匹配属性=key，value为匹配结果集合
            function pushMatch(attrName, index, arrIndex) {
                var matchKey = index + SPLIT_CHAR + attrName;
                if (index < 10) matchKey = "0" + matchKey;
                var arr = matchTable[matchKey];
                if (!arr) matchTable[matchKey] = arr = [];
                arr.push(arrIndex);
            }
            for (var i = 0; i < len; i++) {
                var item = contacts[i];
                //if (host.value.indexOf("<" + item.addr + ">") > 0) continue;
                var minIndex = 10000;
                var minIndexAttr = null;
                var index = item.addr.indexOf(keyword);
                if (index != -1 && index < minIndex) {
                    minIndex = index;
                    minIndexAttr = attrToNumber.addr;
                }
                if (index == 0) {
                    pushMatch(minIndexAttr, minIndex, i);
                    continue;
                }
                index = item.lowerName.indexOf(keyword && keyword.toLowerCase());// update by tkh 用户输入的关键字统一转换成小写
                if (index != -1 && index < minIndex) {
                    minIndex = index;
                    minIndexAttr = attrToNumber.name;
                }
                if (minIndex == 0) {
                    pushMatch(minIndexAttr, minIndex, i);
                    continue;
                }

                if (!/[^a-zA-Z]/.test(keyword)) {
                    if (item.quanpin && item.jianpin) {
                        index = item.quanpin.indexOf(keyword);
                        if (index != -1 && index < minIndex) {
                            minIndex = index;
                            minIndexAttr = attrToNumber.quanpin;
                        }
                        if (minIndex == 0) {
                            pushMatch(minIndexAttr, minIndex, i);
                            continue;
                        }
                        index = item.jianpin.indexOf(keyword);
                        if (index != -1 && index < minIndex) {
                            minIndex = index;
                            minIndexAttr = attrToNumber.jianpin;
                        }
                    }
                }
                if (minIndexAttr) {
                    pushMatch(minIndexAttr, minIndex, i);
                    continue;
                }
            }

            var allMatchKeys = [];
            for (var p in matchTable) {
                allMatchKeys.push(p);
            }
            allMatchKeys.sort(function (a, b) {
                return a.localeCompare(b);
            });
            var MAX_COUNT = options.maxLength || 30;
            for (var i = 0; i < allMatchKeys.length; i++) {
                var k = allMatchKeys[i];
                var arr = matchTable[k];
                //从key中获取matchAttr和matchIndex，后面用于着色加粗
                var matchAttr = getAttrNameFromKey(k);
                var matchIndex = getMatchIndexFromKey(k);
                for (var j = 0; j < arr.length; j++) {
                    var arrIndex = arr[j];
                    matches.push({
                        info: contacts[arrIndex],
                        matchAttr: matchAttr,
                        matchIndex: matchIndex
                    });
                    if (matches.length >= MAX_COUNT) break;
                }
            }
            //var matchKey = index + SPLIT_CHAR + attrName;
            function getAttrNameFromKey(key) {
                return numberToAttr[key.split(SPLIT_CHAR)[1]];
            }
            function getMatchIndexFromKey(key) {
                return parseInt(key.split(SPLIT_CHAR)[0], 10);
            }
            return matches;
        },

        /**搜索联系人：姓名、拼音、传真、职位等
         *@param {String} keyword 搜索关键字
         *@param {Object} options 搜索选项集
         *@param {Array} options.contacts 要搜索的联系人集（否则是全部联系人）
         */
        search: function (keyword, options) {
            options = options || {};
            if (options.contacts) {
                var contacts = options.contacts;
            } else {
                var contacts = this.get("data").contacts;
                if (options.filter) {
                    contacts = this.filterContacts(contacts, { filter: options.filter });
                }
            }
            var result = [];
            for (var i = 0, len = contacts.length; i < len; i++) {
                var c = contacts[i];
                if (c.match(keyword)) {
                    result.push(c);
                }
            }
            return result;
        },
        /**
         *得到地址
         *@param {String} text 要提取地址的文本
         *@param {String} addrType 要提取地址类型：email|mobile|fax
         */
        getAddr: function (text, addrType) {
            if (addrType == "email") {
                return M139.Text.Email.getEmail(text);
            } else if (addrType == "mobile") {
                return M139.Text.Mobile.getNumber(text);
            }
            return "";
        },
        /**
         *得到名字
         *@param {String} text 要提取地址的文本
         *@param {String} addrType 要提取地址类型：email|mobile|fax
         */
        getName: function (text, addrType) {
            if (addrType == "email") {
                return M139.Text.Email.getName(text);
            } else if (addrType == "mobile") {
                return M139.Text.Mobile.getName(text);
            }
            return "";
        },

        /**
         *得到发送文本 "name"<addr>
         *@param {String} name 姓名
         *@param {String} addr 地址
         *@example
         var text = model.getSendText("李福拉","lifula@139.com");
         var text = model.getSendText("李福拉","15889394143");
         */
        getSendText: function (name, addr) {
            name = (name || "") && name.replace(/["\r\n]/g, " ");
            return "\"" + name + "\"<" + addr + ">";
        },

        /**
         *根据邮件地址获得联系人
         *@param {String} email 邮件地址
         *@returns {Array} 返回联系人数组
         */
        getContactsByEmail: function (email) {
            email = $Email.getEmailQuick(email);
            var item = this.getHashContacts()[email];
            if (item) {
                return [item];
            } else {
                return [];
            }
        },

        getHashContacts:function(){
            var data = this.get("data");
            if (!data) return {};
            if (!data.emailHash) {
                var contacts = data.contacts;
                var hash = {};
                if (contacts) {
                    for (var i = 0, len = contacts.length; i < len; i++) {
                        var c = contacts[i];
                        for (var j = 0; j < c.emails.length; j++) {
                            hash[c.emails[j]] = c;
                        }
                    }
                }
                data.emailHash = hash;
            }
            return data.emailHash || {};
        },

        /**
         *根据手机号获得联系人
         *@param {String} email 邮件地址
         *@returns {Array} 返回联系人数组
         */
        getContactsByMobile: function (mobile) {
            var data = this.get("data");
            var result = [];
            if (!data || !data.contacts) return result;
            for (var i = 0, contacts = data.contacts, len = contacts.length; i < len; i++) {
                var c = contacts[i];
                for (var j = 0; j < c.mobiles.length; j++) {
                    if (c.mobiles[j] == mobile) {
                        result.push(c);
                    }
                }
            }
            return result;
        },

        /**
         *根据邮件地址获得联系人
         *@param {String} email 邮件地址
         *@returns {String} 返回联系人姓名，如果找不到，返回@前的账号部分
         */
        getAddrNameByEmail: function (email) {
            email = email.trim();
            var c = this.getContactsByEmail(email);
            if (c && c.length > 0) {
                return c[0].name;
            } else {
                var name = $Email.getNameQuick(email);
                if (name && name.replace(/['"\s]/g,"") != "") {
                    return name;
                } else {
                    name = email.replace(/<[^>]+>$/, "");
                    if (name && name.replace(/['"\s]/g, "") != "") {
                        return name;
                    } else {
                        return email;
                    }
                }
            }
        },

        /**
         *更新通讯录缓存数据
         */
        updateCache: function (options) {
            var type = options.type;
            switch (type) {
                case "AddGroup":
                    this.createGroupData({
                        append:options.data
                    });
                    break;
                case "DeleteContacts":
                    this.createContactsData({
                        remove:options.data
                    });
                    break;

                case "AddSendContacts":
                    //添加最近联系人
                    this.createLastAndCloseContactsData({
                        append: options.data.items
                    });
                    var newContacts = options.data.newContacts;
                    //添加新联系人
                    if (newContacts && newContacts.length > 0) {
                        this.createContactsData({
                            append:newContacts
                        });

                        for (var i = 0, m = newContacts.length; i < m; i++) {
                            this.createGroupMemberData({ append: newContacts[i] });
                        }
                    }

                    //if (c.GroupId) {
                    //    var groups = c.GroupId.split(','), group;
                    //    for (var j = groups.length; j--; ) {
                    //        group = data.groupMember[groups[j]];
                    //        if (group) {
                    //            group.push(info.SerialId);
                    //        }

                    //        group = data.groupsMap[groups[j]];
                    //        if (group) {
                    //            group.CntNum = Number(group.CntNum) + 1;
                    //            group.count = group.CntNum;
                    //        }
                    //    }
                    break;

                case "AddContacts":
                    this.createContactsData({
                        append: _.isArray(options.data) ? options.data : [options.data]
                    });
                    var data = _.isArray(options.data) ? options.data[0] : options.data;
                    if (data && data.GroupId) {
                        this.createGroupMemberData({
                            append: data
                        });
                    }
                    break;

                case "EditContacts":
                    this.updateContactsData({
                        modification: _.isArray(options.data) ? options.data : [options.data]
                    });
                    break;

            }

            /**服务端响应事件
            * @name M2012.Contacts.Model#update
            * @event
            * @param {Object} e 事件参数
            * @param {String} e.type 更新行为：AddGroup|AddContacts|EditGroup
            * @param {Object} e.data 更新的数据
            * @example
            model.on("update",function(e){
                console.log(e.type);
                console.log(e);
            });
            */
            this.trigger("update", options);

        },

        /**
         * 获取通讯录现有总条数
         * @param {Function} 回调函数，这是可等待数据加载成功后才给出的
         * @return {Number} 总条数，如果未加载到数据，则返回 -1
         */
        getContactsCount: function(callback) {

            if (callback) {
                M139.Timing.waitForReady('"undefined" !== typeof top.$App.getModel("contacts").get("data").contacts.length', function () {
                    callback(this.get("data").contacts.length);
                });
            }

            if (this.isLoaded()) {
                return this.get("data").contacts.length;
            } else {
                return -1;
            }
        }
    }));


    jQuery.extend(M2012.Contacts,
    /**@lends M2012.Contacts*/
    {
        /**返回一个M2012.Contacts.Model模块实例*/
        getModel: function () {

            if (window != window.top) {
                return top.M2012.Contacts.getModel();
            }

            if (!this.current) {
                this.current = new M2012.Contacts.Model();
            }
            return this.current;
        }

    });

})(jQuery, _, M139);
﻿/*global Backbone: false */

/**
  * @fileOverview 定义通讯录数据实体类
  */

(function (jQuery,_,M139){
    var $ = jQuery;
    var inM2012 = false;
    /**通讯录数据实体
    *@constructs M2012.Contacts.ContactsInfo
    */
    function ContactsInfo(options) {
        for (var p in options) {
            this[p] = options[p] || "";
        }
        var emails = this.emails = [];
        var mobiles = this.mobiles = [];
        var faxes = this.faxes = [];
        if (!this.name) this.name = (this.AddrFirstName || "") + (this.AddrSecondName || "");
        this.lowerName = this.name.toLowerCase();
        if (this.FamilyEmail) emails.push(this.FamilyEmail);
        if (this.OtherEmail) emails.push(this.OtherEmail);
        if (this.BusinessEmail) emails.push(this.BusinessEmail);

        if (this.MobilePhone) mobiles.push(this.MobilePhone);
        if (this.OtherMobilePhone) mobiles.push(this.OtherMobilePhone);
        if (this.BusinessMobile) mobiles.push(this.BusinessMobile);

        if (this.OtherFax) faxes.push(this.OtherFax);
        if (this.FamilyFax) faxes.push(this.FamilyFax);
        if (this.BusinessFax) faxes.push(this.BusinessFax);
        if (!inM2012) {
            inM2012 = Boolean(top.$App);
        }
        if (inM2012) {
            this.fixPhoto();
        }
    }
    var defPhoto;
    var sysImgPath = ["/upload/photo/system/nopic.jpg", "/upload/photo/nopic.jpg"];
    var baseUrl;
    ContactsInfo.prototype =
        /**
        *@lends M2012.Contacts.ContactsInfo.prototype
        */
    {
        getMobileSendText: function () {
            var n = this.getFirstMobile();
            n = n && n.replace(/\D/g, "");
            if (!n) return "";
            var name = this.name.replace(/"/g, "");
            return "\"" + name + "\"<" + n + ">";
        },
        getEmailSendText: function () {
            var e = this.getFirstEmail();
            if (!e) return "";
            var name = this.name.replace(/"/g, "");
            return "\"" + name + "\"<" + e + ">";
        },
        getFaxSendText: function () {
            var e = this.getFirstFax();
            if (!e) return "";
            var name = this.name.replace(/"/g, "");
            return "\"" + name + "\"<" + e + ">";
        },
        getFirstEmail: function () {
            if (this.emails && this.emails[0]) return this.emails[0];
            return "";
        },
        getFirstMobile: function () {
            if (this.mobiles && this.mobiles[0]) return this.mobiles[0];
            return "";
        },
        getFirstFax: function () {
            if (this.faxes && this.faxes[0]) return this.faxes[0];
            return "";
        },
        /**
         *模糊搜索
         */
        match: function (keyword) {
            return [
            this.name,
            this.BusinessEmail,
            this.BusinessFax,
            this.BusinessMobile,
            this.CPName,
            this.FamilyEmail,
            this.FamilyFax,
            this.FirstNameword,
            this.Jianpin,
            this.MobilePhone,
            this.OtherEmail,
            this.OtherFax,
            this.OtherMobilePhone,
            this.Quanpin,
            this.UserJob].join("").toLowerCase().indexOf(keyword) > -1;
        },
        fixPhoto: function () {
            if (this.ImagePath) return;
            if (!defPhoto) {
                defPhoto = $App.getResourcePath() + "/images/face.png";
				/*不再用g2的域名访问地址
                baseUrl = M139.Text.Url.makeUrl(getDomain("webmail") + "/addr/apiserver/httpimgload.ashx", {
                    sid: $App.getSid()
                });
				*/
				//
				function getPhotoUploadedAddr() {
						var tmpurl = location.host;
						var url2 = "";
						if (tmpurl.indexOf("10086.cn") > -1 && top.$User.isGrayUser()) {
							url2 = "http://image0.139cm.com";
						} else if(tmpurl.indexOf("10086.cn") > -1 && !top.$User.isGrayUser()) {
							url2 = "http://images.139cm.com";
						} else if (tmpurl.indexOf("10086ts") > -1) {
							url2 = "http://g2.mail.10086ts.cn";
						}else if(tmpurl.indexOf("10086rd") > -1){
							url2 = "http://static.rd139cm.com";
						}
						return url2 ;
				}
				baseUrl = getPhotoUploadedAddr()
            }
            if (this.ImageUrl) {
                if (this.ImageUrl.indexOf("http://") == 0) {
                    return;
                }
                this.ImagePath = this.ImageUrl;
            //  var path = this.ImagePath.toLowerCase(); 不能转大小写
				var path = this.ImagePath;
                if (path == sysImgPath[0] || path == sysImgPath[1] || path == "") {
                    this.ImageUrl = defPhoto;
                }else{
                //    this.ImageUrl = baseUrl + "&path=" + encodeURIComponent(path);不需要编码
					this.ImageUrl = baseUrl + path + "?rd=" + Math.random();
                }
            } else {
                this.ImageUrl = defPhoto;
                this.ImagePath = "/upload/photo/nopic.jpg";
            }
        }
    }
    M139.namespace("M2012.Contacts.ContactsInfo", ContactsInfo);



})(jQuery,_,M139);
﻿M139.namespace("M2012.Main.View", {
    TopView: Backbone.View.extend({
        el: "#header",
        events: {
            "click #btn_set": "onSettingClick",
            "click #accountList": "onAccountListClick"
        },
        initialize: function (options) {

            this.model = null;
            this.initEvents();

        
            //全局点击事件
            $GlobalEvent.on("click", this.resetTopFixTabsCssAndDropdown);        
        },
        onSettingClick:function(){
            $("#accountList").removeClass("infoSelon");
            $App.show('account');
            BH("top_accountManager");
            return false;
        },
        onReceiveLetterClick: function () {
            $App.getView("folder").model.set("vipMailStats", null);//清空vip数据，用于重新加载
            $App.trigger("reloadFolder", {
                callback: function () {
                    $App.showMailbox(1);
                }
            });
        },
        onComposeClick:function(e){
            e.preventDefault();
            var modules = $App.getView("tabpage").model.pages;
            for (var elem in modules) {
                if (elem && elem.indexOf("compose") >= 0) {
                    var win = $(modules[elem].element).find("iframe")[0].contentWindow;
                    try {
                        //判断有新开的写信tab，并且未被修改过，则切换过去。加catch防止iframe正在加载中时拒绝访问
                        if (win.mainView.model.get("pageType") == "compose" && win.mainView.model.isBlankCompose() == true) {
                            $App.getView("tabpage").activeTab(elem);
                            return;
                        }
                    } catch (ex) { }
                }
            }
            $App.show('compose');
            return false;
        },
        onAccountListClick: function (e) {
            var jTarget = $(e.currentTarget);
            if (jTarget.hasClass("infoSelon")) {
                jTarget.removeClass("infoSelon");
            } else {
                jTarget.addClass("infoSelon");
            }
            $("#umcpassportplugin").hide();
            $('#helpmenu').removeClass('infoSelon');
            $('body > .menuPop').remove();
            e.stopPropagation();
        },
        initEvents: function () {
            var self = this;
            $("#logout").attr("href", getDomain("mail") + '/login/Logout.aspx?sid=' + sid + "&redirect=" + encodeURIComponent(getDomain("mail") + "/logout.htm"));


            $(document.getElementById("btn_compose")).click(function (e) {
                self.onComposeClick(e);
            });
            $(document.getElementById("btn_receive")).click(function (e) {
                self.onReceiveLetterClick(e);
            });

            $App.on("userDataLoad", function () {
                var provCode = 0;

                if ($User.isChinaMobileUser()) {
                    provCode = $User.getProvCode();
                } else {
                    $("#mailLog").attr("href", "javascript:$App.showMailbox(1)");
                }
                $("#help").attr("href", getDomain("help") + "/" + provCode + "/index.html?sid=" + $App.getSid());


                var uecDomain = getDomain("uec");
                if ($User.isGrayUser()) {
                    uecDomain = "http://smsrebuild0.mail.10086.cn/uec";
                }
                $("#btn_feedback").attr("href", uecDomain + "/jumpFeedbackRedirect.do?isdirect=1&nav=3&isfirst=1&sid=" + $App.getSid());
            });
            $("#recommend").hover(
                  function () {
                      $(this).offset().left > 0 && $(this).addClass("selectOn");
                  },
                  function () {
                      $(this).removeClass("selectOn");
                  }
            );

            
            //this.initForAccount();

            VoiceInput.create({
                button: "#btn_foiceSearch", //input: "#tb_mailSearch",
                onComplete: function (text) {
                    var input = $("#tb_mailSearch");
                    if (input.val() == self.seachBoxtip) {
                        input.val(text)
                    } else {
                        input.val(input.val() + text);
                    }
                    setTimeout(function () {
                        input.focus();
                    }, 500);

                }
            });

            $('#setDefaultTab, #mailSetLi').mouseover(function () {
                var id = $(this).attr('id');
                var className = 'on';
                if (id == 'accountSet') {
                    className = 'selected';
                } else if(id == 'setDefaultTab') {
                    className = 'focus';
                }
                $('#mailSetLi').each(function() {
                    if ($(this).find('.J-dropdown').hasClass('hide')) {
                        $(this).removeClass('selected focus on');
                    }
                }); 
                $(this).addClass(className);
            }).mouseout(function () {
                if ($(this).find('.J-dropdown').hasClass('hide')) {
                    $(this).removeClass('selected focus on');
                }
            });
        },
        initForAccount: function () {//处理默认账号菜单的事件绑定
            $GlobalEvent.on("click", function (e) {
                var elem = $("#accountList");
                if (elem.hasClass("infoSelon")) {
                    elem.removeClass("infoSelon");
                }
            });
        },
        preInitSearch: function () {
            var self = this;
            var isInit = false;
            // 首先执行一次给this.seachBoxtip赋初始值
            self.switchSearchBoxTips();
            $("#tb_mailSearch").css("color", "gray").val(self.seachBoxtip);
            self.initForSearch();
            /*$("#tb_mailSearch").focus(function () {
                $(this).unbind("focus", arguments.callee);
                if (!isInit) {
                    self.initForSearch();
                }
                isInit = true;
            });
            $("#searchIcon").mousedown(function () {
                $(this).unbind("mousedown", arguments.callee);
                if (!isInit) {
                    self.initForSearch();
                }
                isInit = true;
            });*/
			$("#op_mail").mouseover(function(){$(this).css("cursor","default")}) //鼠标移动到第一行，应该显示不可点击
        },
        initForSearch: function () {//处理搜索菜单
            var self = this;
            self.firstShow = true;
            var menu = $("#searchMenu");
            var tb = $("#tb_mailSearch");
            var searchIcon = $("#searchIcon");
            // 暂时屏蔽网盘文件搜索
            menu.find('#li_op_disk').remove();
            // 初始化各模块下需要隐藏的提示项
            if ($App.getConfig("UserAttrs") && $App.getConfig("UserAttrs").fts_flag == 1) {
                $('#open_all').hide();
                var items = menu.find('li a');
                var defaultItemSeq = {
                    'addr': [6],
                    'diskDev': [8, 9],
                    'googSubscription': [10],
                    'calendar': [7]
                }
            } else {
                $('#li_op_all').hide();
                $('#li_op_subject_content').hide();

                var items = menu.find("li[id!='li_op_all'][id!='li_op_subject_content'] a");
                menu.find("#li_op_all, #li_op_subject_content").remove();
                var defaultItemSeq = {
                    'addr': [4],
                    'diskDev': [6, 7],
                    'googSubscription': [8],
                    'calendar': [5]
                }
                $('#open_all').click(function() {
                    //$App.setAttrs({fts_flag:1});
                    //$App.getConfig("UserAttrs").fts_flag = 1;
                    $RM.setAttrs({attrs: {fts_flag:1}}, function (result) {
                       if (result["code"] == "S_OK") {
                            BH("open_search_all_succeed")
                            var dialog = $Msg.confirm(
                                                "全文检索开通成功，刷新页面生效",
                                                function () {
                                                    location.reload();
                                                },
                                                {
                                                    title:"",
                                                    dialogTitle:'系统通知',
                                                    icon:"ok",
                                                    buttons:["立即刷新"]
                                                }
                            )
                        } else {
                            top.M139.UI.TipMessage.show("全文检索开通失败",{className:"msgRed", delay: 1000 });
                        }
                   });
                })
            }
            // 滑动事件
            items.hover(function () {
                //$(this).addClass("selected");
                selectItem($(this));
            }, function () {
                //$(this).removeClass("selected");
                //blurItem($(this));
            });
            var key = {
                up: 38, down: 40, enter: 13, left: 37, right: 39
            };
            //切换搜索下拉菜单
            function switchSearchMenu(visible) { 
                if (tb.val().trim() == '') visible = false;
                if (visible) {
                    show();
                    self.firstShow = false;
                } else {
                    hide();
                }
            }

            function showItemByChannel(channel) {
                var seqs = defaultItemSeq[channel];
                for (var i = 0, len = seqs.length; i < len; i++) {
                    menu.find('li:eq('+ seqs[i] +')').show();
                }
            }
            //显示搜索下拉菜单
            function show() {
                var searchDefaultSetting = $App.getCustomAttrs("searchDefaultSetting");
                var keyword = tb.val().trim();
                menu.find("strong").text($TextUtils.getTextOverFlow(keyword, 5, true));
            //    searchIcon.addClass("searchEnter"); 搜索输入框内，去掉enter icon
                var index = 1;
                //取得用户设置的默认搜索项
                var channel = $('#toFixTabs').find('li.on').attr('name');
                menu.find('li').hide();
                if (channel == 'addr' || channel == 'diskDev' || channel == 'googSubscription'||channel=='calendar') {
                    index = defaultItemSeq[channel][0];
                    showItemByChannel(channel);                    
                } else {
                    $.each(items, function(i,value){
                        if($(this).attr("field") == searchDefaultSetting){
                            index = i;
                            return false;
                        }
                    });

                    menu.find('li').not(":eq("+defaultItemSeq['calendar'][0]+")").show();
                }
                
                items.removeClass("sel");
                items.eq(index).addClass("sel");//默认选中
                selectItem(items.eq(index)); //默认选中

                tb.parent().addClass("searchContentOn");
                menu.removeClass("hide");
            }
            //隐藏搜索下拉菜单
            function hide() {
                tb.parent().removeClass("searchContentOn");
                menu.addClass("hide");
            //    searchIcon.removeClass("searchEnter"); 搜索输入框内，去掉enter icon
            }

            function setSearchFrom() {
                top.$App.getView("mailbox_other").model.set("searchIsComeformDefault", "from");
            }
            var clickSearchItem = false; //鼠标点击区域是否在搜索框范围内，用于失焦后隐藏搜索菜单
            function doSearch(type, field) {
                clickSearchItem = true;
                top.$App.getView("mailbox").model.set("IamFromLaiwang",false);
                var searchDefaultSetting = $App.getCustomAttrs("searchDefaultSetting");
                var keyword = tb.val().trim();
                var channel = $('#toFixTabs').find('li.on').attr('name');
                top.$App.getView("mailbox_other").model.set("searchContent",keyword);//把搜索的内容记住，没有内容的时候会搜索主题，需要用到
                if (keyword == "" || keyword == self.seachBoxtip) {
                    $Msg.alert("请输入关键词");
                } else {
                    if (type == "mail") {
                        if (keyword.length > 100) {
                            top.FF.alert('仅支持对100个字符的关键词搜索，100个字符外的字词将被忽略');
                            keyword = keyword.substring(0, 100);
                        }
                        top.$App.getView("mailbox_other").model.set("showSearchclassify",true);// 只有通过搜索框搜索邮件，先显示逼近式搜索模块
                        if (field && field != "all") {
                            var options = addCondiction(keyword, field);
                            $App.searchMail(options);
                        } else if(field == "all") {
                            $App.searchMail(keyword);
                        }else{
                            $App.searchMail(keyword);
                        }
                    } else if (type == "attach") {
                        BH('diskv2_search');
                        $App.show('diskDev',{from: "attachment",keyword : keyword});
                    } else if (type == "disk") {
                        $App.show("diskDev", "&keyword=" + escape(keyword));
                    } else if (type == "contact") {
                        if (channel == 'addr') {
                            $App.trigger("searchkeywordChange", {type:"addr",keyword: keyword});
                        } else {
                            $App.show("addrhome", { goid: 9001, keyword: keyword, homeRoute: 10300});
                        }                        
                    } else if (type == 'tempStorage') {
                        BH('diskv2_search');
                        $App.show('diskDev',{from: "cabinet",keyword : keyword})
                    } else if (type == 'googSubscription') {
                        $App.show("googSubscription", { keyword: keyword });
                    } else if (type == 'calendar') {
                        BH("calendar_calendarsearch_click");
                        $App.trigger("calendarSearch", { type: 'subscribe', keyword: keyword });
                    }
                }
                switchSearchMenu(false); //在搜索时，如果菜单是显示的，则切换为隐藏
                tb.blur();
            }
            function addCondiction(keyword, field) {
                var options = keyword;
                var field = field.split("_");
                var condictions = [];
                for(var i = 0; i < field.length; i++){
                    condictions.push({
                        field: field[i],
                        operator: "contains",
                        value: keyword
                    });
                }
                if (keyword != '') {
                    options = {condictions: condictions};
                    if (field == 'attachName') {
                        options.flags = { attached: 1 };
                    }
                }
                return options;
            }
            $("#op_from,#op_to_from,#op_subject,#op_subject_content,#op_all").click(function () {
                //每次搜索的时候清楚提示框，结果影响位置
                //$("#guideHTML").hide();
                //$("#div_mail").unbind("scroll");
                top.$App.getView("mailbox").model.set("IamFromLaiwang",false);
                var field = $(this).attr('field') || null;
                if (field) {
                    BH('search_' + field);//统计代码
                }else{
                    BH('top_search');
                }
                if(field == "from"){
                    setSearchFrom();//默认搜索下搜索发件人的时候记住这个状态
                }
                top.$App.getView("mailbox_other").model.set("setting", field); //选择了搜索项目后把搜索的东西传递下去
                doSearch("mail", field);
                return false;
            });
            $("#op_disk").click(function () { doSearch("disk"); return false; });
            $("#op_contact").click(function () { doSearch("contact"); return false; });
            $("#op_attach").click(function () { doSearch("attach"); return false; });
            $("#op_tempStorage").click(function () { doSearch("tempStorage"); return false; });
            $("#op_googSubscription").click(function () { doSearch("googSubscription"); return false; });
            $("#op_calendar").click(function () { doSearch("calendar"); return false; });

        $("#searchIcon").click(function () {
        //有searchEnter的已经被干了
        //    if ($(this).hasClass("searchEnter")) { //回车状态下是搜索
        //        doSearch("mail");
        //        //$App.searchMail($("#tb_mailSearch").val());
        //        switchSearchMenu(false);
        //        BH("top_searchEnter");
       //     } else { //下拉图标，出菜单
                //switchSearchMenu(true);
                showAdvanceSearch();
                BH("top_searchDrop");
        //    }

            });

            // 搜索按钮
            $('#searchBtnIcon').click(function () {
                BH('search_icon');
                var searchDefaultSetting2 = $App.getCustomAttrs("searchDefaultSetting");
                //每次搜索的时候清楚提示框，结果影响位置
                //$("#guideHTML").hide();
                //$("#div_mail").unbind("scroll");
                // 根据模块来确定搜索类型
                var channel = $('#toFixTabs').find('li.on').attr('name');
                if (channel == 'addr') {
                    doSearch("contact"); return false;
                } else if (channel == 'diskDev') {
                    doSearch("attach"); return false;
                } else if (channel == 'googSubscription') {
                    doSearch("googSubscription"); return false;
                } else if (channel == 'calendar') {
                    doSearch("calendar"); return false;
                }

                if(searchDefaultSetting2 && "from,subject,to_from,subject_content,all".indexOf(searchDefaultSetting2) > -1){
                    doSearch('mail',searchDefaultSetting2);
                    top.$App.getView("mailbox_other").model.set("setting", searchDefaultSetting2); //传入右边的浮框的选中的值
                    if(searchDefaultSetting2 == "from"){
                        setSearchFrom(); //默认搜索下搜索发件人的时候记住这个状态
                    }
                }else{
                    doSearch('mail',"from"); //放入默认的值
                    top.$App.getView("mailbox_other").model.set("setting", "from"); //传入右边的浮框的选中的值
                    setSearchFrom(); //默认搜索下搜索发件人的时候记住这个状态
                }

            //    doSearch("mail");
                switchSearchMenu(false);
            });
            
            function tb_focus() {
                if (self.seachBoxtip == $(this).val()) {
                    $(this).val("").css("color", "black");
                }
                switchSearchMenu(true);
                setTimeout(function () {
                    if (self.popupSearch && $("#popup_searchadvance").length > 0) {
                        self.popupSearch.close();
                    }
                }, 50);
            }
            //tb_focus.call(tb[0]);//因为改成异步绑定，所以这里要先触发一次
            tb.focus(tb_focus).blur(function (e) {
                if ("" == $(this).val()) {
                    $(this).css("color", "gray");
                    tb.val(self.seachBoxtip);
                }
                
                window.setTimeout(function () { //点击到搜索按钮，点击菜单都会触发失焦事件，会造成执行顺序混乱，所以要延时200毫秒执行
                                        
                    if (!clickSearchItem) {
                        switchSearchMenu(false);
                    }
                    clickSearchItem = false; //变量复位
                }, 200);
                //hide();
            }).keydown(function (e) {
                switch (e.keyCode) {
                    case key.up: doUp(); break;
                    case key.down: doDown(); break;
                    default: return;
                }
            }).keyup(function (e) {
                switch (e.keyCode) {
                    case key.enter: doEnter(); break;
                        /*case key.right:
                        case key.left: switchSearchMenu(false); break;*/
                    default:
                        //var keyword = $(this).val().trim() || "关键词";
                        var keyword = $(this).val().trim();
                        var isHide = menu.hasClass('hide');
                        if (isHide) switchSearchMenu(true); //在输入关键字时，如果菜单是隐藏的，则切换为显示
                        if (keyword == '') switchSearchMenu(false);
                        menu.find("strong").text($TextUtils.getTextOverFlow(keyword, 5, true));
                }
            });
            function showAdvanceSearch() {
                switchSearchMenu(false);
                var dialogHeight = 320;
                if ($App.getConfig("UserAttrs") && $App.getConfig("UserAttrs").fts_flag == 1) {
                    dialogHeight = 380;
                }
                this.popupSearch = M139.UI.Popup.create({
                    name: "searchadvance", width: 360, height: dialogHeight,
                    //autoHide:true,
                    target: document.getElementById("searchContainer"),
                    content: "<iframe src='advance_search.htm' frameborder=\"0\" allowTransparency=\"true\" style='border:0px;width:330px;height:" + dialogHeight + "px'/>"
                });
                this.popupSearch.render();

                //微调位置
                fixPosition();

                function fixPosition() {
                    var $el = $('#popup_searchadvance');
                    if ($el.attr('data-fix')) { return }
                    var left = $el.css('left').replace('px', '');
                    var top = $el.css('top').replace('px', '');
                    left = parseInt(left, 10) + 5;
                    top = parseInt(top, 10) - 10;
                    $el.find('div[name=popup_arrow]').remove();
                    $el.css({ left: left + 'px', top: top + 'px' });
                    $el.attr('data-fix', 1);
                }
            }
            $("#btn_searchAdvance").click(function (e) { //给高级搜索绑定事件，此时按钮还未生成（用 live）
                showAdvanceSearch();
                e.preventDefault();
                BH("top_searchAdvance");
            });

            function doEnter() {
                var item = getSelectedItem();
                var searchDefaultSetting2 = $App.getCustomAttrs("searchDefaultSetting");
                //每次搜索的时候清楚提示框，结果影响位置
                //$("#guideHTML").hide();
                //$("#div_mail").unbind("scroll");
                if (item != null) {
                    item.click();
                    
                } else {
                    // 根据模块来确定搜索类型
                    var channel = $('#toFixTabs').find('li.on').attr('name');
                    if (channel == 'addr') {
                        doSearch("contact"); return false;
                    } else if (channel == 'diskDev') {
                        doSearch("attach"); return false;
                    } else if (channel == 'googSubscription') {
                        doSearch("googSubscription"); return false;
                    } else if (channel == 'calendar') {
                        doSearch("calendar"); return false;
                    }

                    if(searchDefaultSetting2 && "from,subject,to_from,subject_content,all".indexOf(searchDefaultSetting2) > -1){
                        doSearch('mail',searchDefaultSetting2);
                        if(searchDefaultSetting2 == "from"){
                            setSearchFrom(); //默认搜索下搜索发件人的时候记住这个状态
                        }
                    }else{
                        doSearch('mail',"from"); //放入默认的值
                        top.$App.getView("mailbox_other").model.set("setting", "from"); //传入右边的浮框的选中的值
                        setSearchFrom(); //默认搜索下搜索发件人的时候记住这个状态
                    }
                }
            }
            function doUp() {
                var index = getSelectedIndex();
                var index = getSelectedIndex();
                if (index >= 0) {
                    do {
                        index--;
                        index = index < 0 ? index + items.length : index;
                        if(index == 0){
                            index = items.length - 1;
                        }
                    } while (!items.eq(index).is(':visible'));
                    
                    selectItem(items.eq(index));
                }
            }
            function doDown() {
                var index = getSelectedIndex();
                if (index >= 0) {
                    do {
                        index = (index + 1) % items.length;
                        if(index == 0){
                            index = 1;
                        }
                    } while (!items.eq(index).is(':visible'));
                    
                    selectItem(items.eq(index));
                }
                if(index == -1){
                    selectItem(items.eq(1));
                }
            }
            function getSelectedItem() {
                var index = getSelectedIndex();
                if (index >= 0) return items.eq(index);
                return null;
            }
            function getSelectedIndex() {
                for (var i = 0; i < items.length; i++) {
                    if (items.eq(i).hasClass('selected')) return i;
                }
                return -1;
            }
            function selectItem(item) {
                var last = getSelectedItem();
                if (last != null) blurItem(last);
                if(item.attr("id") != "op_mail"){
                    item.addClass('selected');
                }
                item.attr('id') === 'btn_searchAdvance' && item.find('b').removeClass('c_666');
            }
            function blurItem(item) {
                item.removeClass('selected');
                item.attr('id') === 'btn_searchAdvance' && item.find('b').addClass('c_666');
            }
        },
        //获取账号列表，必须要在userData加载成功后才能调用
        getAccountList: function () {
            return $User.getAccountList();
        },

        //获取默认发信账号
        getDefaultSender: function () {
            var data = $App.getConfig("UserData");
            if (!data) { return $App.getConfig("UserAttrs").uid; }

            if (data && data.defaultSenderAccount) {
                return data.defaultSenderAccount;
            } else {
                var int_defaultSender = data.defaultSender; //DefaultSender取值 0=未设置   1=手机号  2=普通别名 3=飞信别名|通行证号

                //未设置过或者服务端接口异常未返回时,取当前登录名
                if (int_defaultSender === "0" || int_defaultSender === "" || _.isUndefined(int_defaultSender)) {
                    var loginName = data.loginName || $User.getShortUid(); //容错
                    return $App.getAccountWithLocalDomain(loginName);
                }

                var fetchMethod = {
                    "1": function (a) { return a.type === "mobile" }, //1
                    "2": function (a) { return a.type === "common" }, //2
                    "3": function (a) { return a.type === "fetion" || a.type === "passid" } //3
                }[int_defaultSender];

            var accountList = this.getAccountList();
            for (var i = accountList.length; i--; ) {
                if ( fetchMethod(accountList[i]) ) {
                    return accountList[i].name;
                }
            }

                //没找到的情况下容错处理
                return accountList[0].name;
            };

        },
        //设置默认发信账号
        setDefaultSender: function (account, type, callback) {
            //if (top.SiteConfig.moreAlias) {
                /*if (account.indexOf("@") > -1) {
                    account = account.split("@")[0];
                };
                var data = {
                    "default": account,
                    "type": type
                };*/
                var data = {
                    setDefaultSendAccount:account
                }
                M139.HttpRouter.addRouter("setting", ["user:setDefaultSendAccount"]);
                M139.RichMail.API.call("user:setDefaultSendAccount", data, function (response) {
                    if (callback) { callback(response.responseData) }
                }, function () {
                    $Msg.alert("服务器发生不可预期的错误");
                    return
                });
            //}
            /*else {
                var url = '/sharpapi/serviceapi/alterdefault.ashx?sid=' + $App.getSid() + "&type=" + account + "&rnd=" + Math.random();;
                url = M139.HttpRouter.getNoProxyUrl(url);

                var img = new Image();
                img.src = url;
            };
            setTimeout(function () { //因为image 对象的onload不起作用，无法精确判断成功，用延时实现
                $App.trigger("userAttrChange", {
                    callback: function () { }
                });
            }, 500);*/

        },
        renderAccountList: function (data) {
            var self = this;
            var $accountSet = $("#accountSet");
            if (data) {
                //var menuItems = [{ html: "<span>选择默认发信账号</span>", highlight: false }, { isLine: true }];
                var defaultSender = this.getDefaultSender(); //默认发信账号
                var html = ['<li><a href="javascript:;"><span class="text">默认发信帐号：</span></a></li>'];
                var accountList = self.getAccountList();

                var hasAccount = false;
                $(accountList).each(function (i, n) {
                    html.push('<li status=' + $User.getDefaultAccountType(n.type) + ' item="');
                    html.push(n.name);
                    if (n.name == defaultSender) {
                        $accountSet.find("a:eq(0)").html('<i class="i-users"></i>'+ n.name +'<i class="triangle t_blackDown"></i>'); //设置当前
                        html.push('"class="selecteds"');
                        hasAccount = true;
                    }
                    html.push('"><a href="javascript:"><span class="text">')
                    html.push(n.name);
                    if (n.name == defaultSender) {
                        html.push('</span><i class="i_icok"></i></a></li>');
                    } else {
                        html.push('</span></a></li>');
                    }
                    
                });

                //容错：如果服务端返回的 默认发件帐号，无法在帐号列表里找到，则直接显示出默认发件帐号
                if (!hasAccount) {
                    $accountSet.find('a:eq(0)').html('<i class="i-users"></i>'+ defaultSender +'<i class="triangle t_blackDown"></i>');
                }

                function getAccountHtml(tipText, buttonText) {
                    var html = ['<div class="bingIng">',
                    '<dl class="mb_5">',
                      '<dt class="gray mt_5 mb_5">' + tipText + '</dt>',
                      '<dd class="ta_c"><a id="bindAccount" href="javascript:void(0)" class="btnNormal c_000"><span style="margin:0;">' + buttonText + '</span></a></dd>',
                    '</dl>',
                '</div>'].join("");
                    return html;
                }
                function insertAccountHtml(tipText, buttonText) {
                    var jBindAccount = $("#accountList div.bingIng");
                    if (jBindAccount.size() == 0) {
                        $("#accountList ul").after(getAccountHtml(tipText, buttonText));
                    }
                }

                var line = $accountSet.find('li.line:eq(0)').index();
                $accountSet.find('li:lt('+line+')').remove();
                $accountSet.find('ul:eq(0)').prepend(html.join(""));
                /*
                document.getElementById("accountList").getElementsByTagName("ul")[0].innerHTML = html.join("");
                var aLen = $User.getAliasName('fetion') ? 2 : 1;
                if (accountList.length == aLen) {
                    if (!$User.isInternetUser()) {
                        var buttonText = '邮箱帐号';
                        if ($User.isChinaMobileUser()) {
                            buttonText = '别名帐号';
                        }
                        insertAccountHtml('使用“' + buttonText + '@139.com”发邮件，保护手机号码隐私。', '申请' + buttonText);
                    } else {
                        insertAccountHtml('绑定手机号码，享受免费、无限量邮件到达通知短信！', '绑定手机号码');
                    }
                    $("#bindAccount").click(function (event) {
                        top.$App.show("account");
                        return false;
                    });
                } else {
                    var jBindAccount = $("#accountList div.bingIng");
                    if (jBindAccount.size() > 0) {
                        jBindAccount.remove();
                    }
                }*/

                $accountSet.unbind('click').click(function (e) {
                    e.stopPropagation();
                    self.resetTopFixTabsCssAndDropdown(this);                  
                });

                $accountSet.find('li[item] a').unbind('click').click(function () {
                        var account = $(this).parents("li").attr("item");
                        var type = $(this).parents("li").attr("status");
                        $(this).parents("li").addClass('selecteds').siblings('li[item]').removeClass('selecteds');
                        if (top.SiteConfig.moreAlias) {
                            self.setDefaultSender(account, type, function (result) {
                                if (result.code != "S_OK") {
                                    $Msg.alert("系统繁忙，请稍后再试");
                                    return
                                }
                                $accountSet.find("a:eq(0)").html('<i class="i-users"></i>'+ account +'<i class="triangle t_blackDown"></i>');
                                M139.UI.TipMessage.show("默认发信帐号设置成功", { delay: 2000 });
                            });
                        } else {
                            $accountSet.find("a:eq(0)").html('<i class="i-users"></i>'+ account +'<i class="triangle t_blackDown"></i>');
                            self.setDefaultSender(account);
                        }
                        BH("top_defaultAccount");
                    });

                // 统计日志
                $accountSet.find('a:eq(0)').unbind('click').click(function(){
                    BH('top_account');
                })
                $('#logout').unbind('click').click(function(){
                    BH('top_logout');
                });
            }
        },
        checkAvaibleForMobile: function () {
            $User.checkAvaibleForMobile("#sms_link,#btn_sms,#mms_link,#link_cm,#link_score,#btn_g3,#note_link,#fetionContainerId,#btn_pushemail,#tc_link,#fc_link,#colorcloud_link,#music_link,#recommend a,#btn_userCenter");

            if ($User.isNotChinaMobileUser()) {
                $("#li_weibo_fetion").hide();
            }

        },

        //显示统一通行证盒子
        renderUmcBox: function (data) {

            var hasUmc = !!data.isumcuser;
            if (!hasUmc) {
                return;
            }

            var UMCSVR = getDomain("UMCSVR") || "http://www.rdcmpassport.com:30030/UmcSSO/plugin";
            var VERSION = "1.0";
            var FROM139 = "3";
            var self = this;

            function createUmcSvr(api) {
                return [UMCSVR, '?func=', api, "&sourceid=", FROM139, "&ver=", VERSION].join('');
            }

            function createPluginUrl(args) {
                return [createUmcSvr("plug:init"), "&anchor=", args.anchor, "&artifact=", args.artifact, "&passid=", args.passid].join('');
            }

            function callArtifactApi(onfetch, onfail) {
                M139.RichMail.API.call("umc:getArtifact", {}, function (response) {
                    var respData = response.responseData;
                    if (respData) {

                        if (respData.code == "S_OK") {
                            respData = respData['var'];

                            if (respData.artifact) {
                                onfetch(respData);	
                            } else if (onfail) {
                                onfail();
                            } else {
                                M139.Logger.getDefaultLogger().info("umc.getartifact is empty", true);
                            }
                        }
                    }
                });
            }

            function fetchArtifact(onfetch) {
                if (top._session_flag_umcbox_added_) return;
                top._session_flag_umcbox_added_ = true;

                //$("#header .infoSel:has(#btn_set):eq(1)")
                //$("#header .logoinfo").append('<div class="infoSel" id="umcboxpluginbar" style="color:#DDE5EE;line-height: 22px;"></div>');
                var temp = ['<li id="umcboxpluginbar" class="newLogoInfo_li">',
                                //'<a href="javascript:void(0);" id="umcboxpluginbar" class="newLogoInfo_a">',
                                    //'互联网通行证 <i class="triangle t_whiteDown"></i>',
                                //'</a>',
                            '</li>',
                            '<li class="newLogoInfo_li noMar">|</li>'].join("");
                $('#mailSetLi').before(temp);
			
                if (top.SiteConfig.testUmcFeatures) {
                    var passid = "800011348";
                    var url = UMCSVR.replace("/UmcSSO/plugin", "") + "/test/getartifact?account=13601000030";
                    $.getScript(url, function () {
                        self.umcBoxAdded = true;
                        onfetch({'artifact': artifact, 'passid': passid});
    					fixAlink();
                    });
                    return;
                }

                //鉴于获取凭证失败率较高，所以失败后隔10秒重试一次。
                callArtifactApi(onfetch, function() {
                    setTimeout(function() {
                        M139.Logger.getDefaultLogger().info("umc.getartifact fetch again", true);
                        callArtifactApi(onfetch, null);
                    }, 15000);
                });
            }
		
    		//微调连接内容
    		function fixAlink(){
                var flag = true;
    		    var umcbox = $('#umcboxpluginbar');
                umcbox.addClass('newLogoInfo_raset')
    		    umcbox.find('a:eq(0)').addClass('newLogoInfo_a').html('互联网通行证').unbind('click').click(function(){
                    self.resetTopFixTabsCssAndDropdown();
                    var left = umcbox.offset().left;
                    if (flag && $B.is.ie && $B.getVersion() <= 8) {
                        setTimeout(function() {
                            $('#umcpassportplugin').css('left', left + 96 + 'px');
                            flag = false;
                        }, 50);
                    } else {
                        $('#umcpassportplugin').css('left', left + 96 + 'px');
                    }
                    
                    BH('click_umcboxpluginbar');
                });
    		    umcbox.unbind().mouseover(function () { umcbox.addClass("on"); }).mouseout(function () { umcbox.removeClass("on"); });
    		}
			

            function oninit() {
                fixAlink();
            }

            fetchArtifact(function(args){

                var boxid = "umcboxpluginbar";

                args = $.extend({
                    sourceid: FROM139, anchor: boxid
                }, args);


                var url = createPluginUrl(args);

                M139.Core.utilCreateScriptTag({
                    id: "UMC_SSO_BOX_PACK",
                    src: url
                }, function(){
                    oninit(boxid);
                });
            });
        },

    /**
     * 显示右下角的用管中心的升级提醒
     * @param data
     */
    renderUmcUpgrade: function (data) {

        //如果总开关关闭，则全局关闭。
        if (top.SiteConfig.showUmcUpgrade) {

            //如果总开关打开，则看服务端分省开关是否打开
            if ( typeof(data.isumcprov) !== "undefined" ) {
                var provopen = !!data.isumcprov;
                if (!provopen) {
                    return;
                }
            }

            //如果服务端开关没有实现，则看前端分省开关是否打开
            if ( typeof(top.SiteConfig.showUmcProv) !== "undefined" ) {
                var provlist = top.SiteConfig.showUmcProv || [];
                var provCode = $User.getProvCode();
                if ($.inArray(provCode, provlist) == -1) {
                    return;
                }
            }
        } else {
            return;
        }

        var hasUmc = !!data.isumcuser;
        if (hasUmc) {
            return;
        }
        
        
        var view = new M2012.UI.Tip.UmcUpgradeTip.View({});
        view.render();
        

    },
	
	//帮助中心菜单
	renderHelpMenu:function(){
		var self = this;
		var helpMenuContainer = $('#mailSetLi');
		var menuList = helpMenuContainer.find('.J-dropdown');
		
		//帮助中心
		var provCode = 0;
		if ($User.isChinaMobileUser()) {
			provCode = $User.getProvCode();
		}
		menuList.find("#helpcenter").attr('href', getDomain("help") + "/" + provCode + "/index.html?sid=" + $App.getSid());
		
		//反馈
		var uecDomain = getDomain("uec");
        if ($User.isGrayUser()) {
			uecDomain = "http://smsrebuild0.mail.10086.cn/uec";
        }
        menuList.find("#feedback").attr("href", uecDomain + "/jumpFeedbackRedirect.do?isdirect=1&nav=3&isfirst=1&sid=" + $App.getSid());
		
		//更新日志
		//menuList.find("li:eq(6) a").attr('href','http://help.mail.10086.cn/statichtml/1/Category/39/List_1.html');
		
		helpMenuContainer.unbind('click').click(function (e) {
			self.resetTopFixTabsCssAndDropdown(this);
			e.stopPropagation();
		}).children('a').unbind('click').click(function(){
            BH('top_setting');
        }).end().find('ul>li').unbind('click').click(function(){
            BH($(this).find('a').attr('bh'));
        });
	},
	
	//手机通知图标
	phoneNoticeEvent:function(){
		var self = this;
		var container = $('#phoneNotice');
		var isInternetUser = $User.isInternetUser();
		if(isInternetUser){
			container.find('i').removeClass('i-phoneNotice').addClass('i-phoneNoticeGray');	
		}
		container.unbind('click').click(function(){
			isInternetUser ?  $User.showMobileLimitAlert() : $App.show('notice');
                        return false;
		});
	},
	
	// add by tkh 改掉精品订阅的地址，深圳灰度用户加载新版精品订阅
	switchSubscribe : function(){
		var self = this;
		if(top.$User.isGrayUser() && top.$User.getAreaCode() == 3){
			LinkConfig.googSubscription = { url: 'http://subscribe3.mail.10086.cn/inner/index.jsp', group: "subscribe", title: "精品订阅" };
        }else{
        	LinkConfig.googSubscription = { url: 'http://subscribe2.mail.10086.cn/inner/index.jsp', group: "subscribe", title: "精品订阅" };
        	LinkConfig.myCollect = { url: 'http://subscribe2.mail.10086.cn/inner/show_favorite.action', group: "subscribe", title: "精品订阅" };
        }
        var jGoogSubscription = $("#googSubscription");
        if(jGoogSubscription.size() > 0){
        	if(top.$User.isGrayUser() && top.$User.getAreaCode() == 3){
        		jGoogSubscription.attr('src', 'http://subscribe3.mail.10086.cn/inner/index.jsp');
        	}else{
        		jGoogSubscription.attr('src', 'http://subscribe2.mail.10086.cn/inner/index.jsp');
        	}
        }
	},

    renderHealth: function(){
	    if(location.href.indexOf("rd139cm") > 0) return ;
        var health = $App.getConfig('healthyHistory');
        if(health){
            var lastUpdateDay = health.lastUpdateTime.substring(0,health.lastUpdateTime.indexOf(' ')),
                score = health.totalScore,
                timeArr = lastUpdateDay.split('-'),
                day = Math.floor(($.now() - new Date(timeArr[0], timeArr[1]-1, timeArr[2]).getTime()) / (24 * 3600 * 1000)),
                overDay = ($.now() - new Date(timeArr[0], timeArr[1]-1, timeArr[2]).getTime()) >= 72 * 3600 * 1000,
                overMonth = ($.now() - new Date(timeArr[0], timeArr[1]-1, timeArr[2]).getTime()) >=  3 * 30*24 * 3600 * 1000,
                lastTipsDay = new Date(health.lastTipsRemind).getDay(),
                isThisWeekTips = (new Date(new Date().format("yyyy-MM-dd") + ' 00:00:00').getTime() - (lastTipsDay - 1) * 24 * 3600 * 100) > new Date(health.lastTipsRemind).getTime()
                    || !($.now() - new Date(health.lastTipsRemind).getTime() <= 24 * 3600 * 1000),
                status = {};
            if($User.isChinaMobileUser()){
                if(score == 0){
                    status = ["i-redShield", "139邮箱体检帮您提升邮箱安全与效能"];
                }else if(overDay){
                    status = ["i-redShield", "超过" + day + "天未体检"];
                }else if(score < 50){
                    status = ["i-redShield",  "健康度：" + score + "分；<br>有隐患，请立即修复"];
                }else if(score < 90){
                    status = ["i-yellowShield", "健康度：" + score + "分；<br>还不错，修复后更好"];
                }else{
                    status = ["i-greenShield", "健康度：" + score + "分；<br>非常好，请继续保持"];
                }
                top.$('#healthSet i').removeClass('i-redShield, i-yellowShield, i-greenShield').addClass(status[0]);
                top.$('#healthSet .tips-text').html(status[1]);
                top.$('#healthSet a').hover(function(){
                    top.$('#healthSet .tipsOther').css('display', 'block');
                },function(){
                    top.$('#healthSet .tipsOther').css('display', 'none');
                }).on('click',function(){
                    top.$App.jumpTo('health');
                });
            }else{
                top.$('#healthSet').css('display', 'none').next().css('display', 'none');
            }

            if(overMonth && isThisWeekTips){
                setTimeout(function(){
                    M139.RichMail.API.call("healthy:updateLastTipsTime", {}, function (response) {
                        if (response.responseData && response.responseData.code == "S_OK") {
                            $BTips.addTask({
								width: 385,
                                title: "邮箱健康提醒",
                                content: ['<div class="norTips clearfix"><div class="norTipsIco fl"><img src="../images/module/welcome/htest.png" width="66" height="66"></div>',
                                    '<dl class="norTipsContent pt_10"><dt class="norTipsLine fw_b">邮箱已超过<var class="c_ff5907"> 3',
                                    '</var>个月未体检，建议立即体检。</dt>',
                                        '<dd>最近体检是 <var class="c_ff5907">' + lastUpdateDay + '</var> ，建议每周一次体检。</dd></dl></div>',
                                    '<div class="boxIframeBtn"><span class="bibText"></span><span class="bibBtn">',
                                    '<a class="btnDoHealth btnSure" href="javascript:top.$App.jumpTo(\'health\')"><span>立即体检</span></a></span></div>'
                                ].join(''),
                                timeout: 1000 * 20
                            });
                        }
                    });
                },10 * 1000);
            }
        }
    },

	
    render: function () {
        var self = this;
        $App.on("userDataLoad", function (data) {
            self.renderAccountList(data);
            self.checkAvaibleForMobile();

            self.renderUmcBox(data);
            //self.renderUmcUpgrade(data);
	    self.phoneNoticeEvent();
	    self.renderHelpMenu();
	    self.renderHealth();			
            //self.switchSubscribe(); // add by tkh


            //顶部邮箱营业厅，add by qzj
            /*
			var provinceName = top.SiteConfig.billAllowProvince[top.$User.getProvCode()];

			if (provinceName) {
			    var href = "javascript:$App.show('billCharge', {'ct':'main','ac':'index'})"
			    $('#toFixTabs').find('li[name=billCharge]').show().find('a').attr('href', href);
			}*/
			M139.Logger.getDefaultLogger().debug("userdataload topviewrender");
        });

        if (!$User.isChinaMobileUser()) { //非移动用户自动打开收件箱
            $App.on("folderLoaded", function () {
                $App.off("folderLoaded", arguments.callee);
                $App.showMailbox(1);
                setTimeout(function () {
                    $("[tabid=mailbox_1] .i_close").remove(); //收件箱不显示关闭
                }, 200);
            });
            $(".mailLogo_new").attr("href", "javascript:$App.showMailbox(1)");
        }
    },


    showTopFixedTabs: function () {
        var self = this;
        var tabpageModel = $App.getView("tabpage").model;

        var topFixTabs = tabpageModel.getInitTabsData();  // 固定页签数组
        var $defaultTabTxt = $('#defaultTabTxt');       // 显示默认页签的文本框
        var defaultEntryTab = this.getDefaultEntrytab();    // 默认进入的固定页签
        var defaultTabsRange = [];                      // 用于生成默认页签下拉框对象数组
        for (var i = 0, len = topFixTabs.length; i < len; i++) {
            var item = topFixTabs[i];
            defaultTabsRange.push({
                text: tabpageModel.topFixTabObj[item],
                value: item,
                myData: i
            })
        }
        
        // 展示顶部固定标签
        // 非移动用户隐藏“欢迎页”，“日历”
        if (!$User.isChinaMobileUser()) {
            $('#toFixTabs li[name=welcome], #toFixTabs li[name=calendar]').hide();
        }
        $('#toFixTabs>li').click(function () {
            BH('click_fixedtab_' + $(this).attr("name"));
            //$(this).addClass("on").siblings().removeClass('on');
        });

        var $setDefaultTab = $("#setDefaultTab");
        // 事件-显示设置默认页签浮层
        $setDefaultTab.click(function (e) {
            e.stopPropagation();
            BH('set_default_tab');
            self.resetTopFixTabsCssAndDropdown(this);

            // 设置当前默认标签
            defaultEntryTab = self.getDefaultEntrytab();
            $defaultTabTxt.text(tabpageModel.topFixTabObj[defaultEntryTab]);
        });

        // 选择新的默认标签
        $defaultTabTxt.parent().click(function () {
            if (self.menuDefaultEntryTab) {
                $(self.menuDefaultEntryTab.el).remove();
            }
            self.menuDefaultEntryTab = M2012.UI.PopMenu.create({
                selectMode: true,
                width: 90,
                dx:-1,
                dockElement: $defaultTabTxt,
                items: defaultTabsRange,
                onItemClick: function (item) {
                    defaultEntryTab = item.value;
                    $defaultTabTxt.text(tabpageModel.topFixTabObj[defaultEntryTab]);
                    self.menuDefaultEntryTab = false;
                }
            });

            var selectItem = $.grep(defaultTabsRange, function (i) {
                return i.value === defaultEntryTab;
            });
            //self.menuDefaultEntryTab.selectItem(selectItem[0] ? selectItem[0].myData : 0);
        });
        // 事件-阻止默认页签设置浮层事件冒泡
        $('#setDefaultTabDiv').click(function (e) {
            e.stopPropagation();
        });
        // 事件-确认默认页签设置
        $('#setDefaultTabConfirm').click(function (e) {
            e.stopPropagation();
            BH('set_defaultentrytab_' + defaultEntryTab);
            $setDefaultTab.removeClass('focus');
            $("#setDefaultTabDiv").addClass('hide');

            // 设置登陆后打开的页签
            $App.setUserConfigInfo("defaultentrytab", defaultEntryTab, function () {
                //先记录在cookie, 这样不用重新登录就能取到最新值
                $Cookie.set({
                    name: "defaultTab" + $App.getSid(),
                    value: defaultEntryTab
                });
                if (!$App.getConfig("UserData").mainUserConfig.defaultentrytab) {
                    $App.getConfig("UserData").mainUserConfig.defaultentrytab = [];
                }
                $App.getConfig("UserData").mainUserConfig.defaultentrytab[1] = defaultEntryTab;

                $('#toFixTabs>li').removeClass('on').filter('[name=' + defaultEntryTab + ']').addClass('on');
                defaultEntryTab == 'mailbox_1' ? $App.showMailbox(1) : $App.show(defaultEntryTab);
            });
        });

        // 事件-取消默认页签设置
        $('#setDefaultTabCalcel').click(function (e) {
            e.stopPropagation();
            $setDefaultTab.removeClass('focus');
            $("#setDefaultTabDiv").addClass('hide');
        });
    },

    resetTopFixTabsCssAndDropdown: function(context){
        $('#setDefaultTab, #mailSetLi, #accountSet').each(function(){
            var id = $(this).attr('id');
            var className = 'on';
            if (id == 'accountSet') {
                className = 'selected';
            } else if(id == 'setDefaultTab') {
                className = 'focus';
            }
            if (context && $(context).attr('id') == $(this).attr('id')){
                $(this).find('.J-dropdown').toggleClass('hide');
                if ($(this).find('.J-dropdown').hasClass('hide')) {
                    $(this).removeClass(className);
                } else {
                    $(this).addClass(className);
                }
            } else {
                $(this).removeClass(className).find('.J-dropdown').addClass('hide');
            }
        });
    },

    getDefaultEntrytab: function() {
        // $Cookie.get('defaultTab' + $App.getSid()) || $Url.queryString("tab");
        var defaultEntryTab = $Cookie.get("defaultTab" + $App.getSid()) || $Url.queryString("tab");    // 默认进入的固定页签
        var topFixTabs = $App.getView("tabpage").model.getInitTabsData();
        // 初始化默认进入的固定页签
        if (!defaultEntryTab || topFixTabs.join(",").indexOf(defaultEntryTab) == -1) {
            defaultEntryTab = $User.isChinaMobileUser() ? 'welcome' : 'mailbox_1';
        }
        return defaultEntryTab;
    },

    setSearchBox: function (currentModule) {
        if (currentModule == 'googSubscription' || currentModule == 'diskDev' || currentModule == 'calendar' || currentModule == 'addr' ) {
            $('#searchIcon, #btn_foiceSearch').hide();
            $('#tb_mailSearch').width(207);
        } else {
            $('#searchIcon, #btn_foiceSearch').show();
            $('#tb_mailSearch').width(177);
        }
    },

    switchSearchBoxTips: function() {
        var currentModule = $App.getCurrentTab() && $App.getCurrentTab().name;
        var tips = {
            calendar: "搜索公开日历"
        };
        switch(currentModule) {
            case 'diskDev':
                this.seachBoxtip = '搜索文件';
                break;
            case 'googSubscription':
                this.seachBoxtip = '搜索报刊、服务';
                break;
            case 'calendar':
                this.seachBoxtip = tips.calendar; //searchBoxtip,单词拼错了
                break;
			case 'addr':
                this.seachBoxtip = '搜索联系人';
                break;
            default:
                this.seachBoxtip = '搜索关键词';
        }

        var $tb = $("#tb_mailSearch")
        var word = $.trim($tb.val());
        if (word == '搜索关键词' || word == '搜索文件' || word == '搜索报刊、服务' || word == tips.calendar || word == '搜索联系人') {
            $tb.val(this.seachBoxtip);
        }
    }
})
});
var TabPageModel = Backbone.Model.extend({
	/**
	 * 
	 */
    initialize: function(options){
    	//console.debug(options)
		if(options){
		
			this.container=options.container;
			//this.container=c;
			//alert("hello");
			
			this.toolbar=document.createElement("div");
			this.toolbar.id="main_toolbar";
			$(this.toolbar).addClass('bgMargin');
			this.toolbar.style.display="none";
			this.container.appendChild(this.toolbar);
		}
	},
    moduleConfig :{	//模块配置，用于工厂模式创建相应的模块
    //welcome:{moduleClass:window.Welcome,groupType:1},//欢迎页
    simpleframe: { model: "SimpleIframeModel", view:"SimpleIframeView" }, //大小通吃的框架页
    readmail: { model: "ReadModel", view:"ReadView"  }, //读邮件
    mailbox: { model: "MailboxModel", view:"MailboxView" }, //收件箱
    compose: { model: "ComposeModel", view:"ComposeView"} //写邮件
	},
    pages: {}, //标签页集合，用于遍历
	TabpageModel:[],	//模块列表
	moduleCount:0,
	prevModule:null,//上一模块
	defaults:{  //默认数据
	    currentModule:null,//当前模块
	    container:null,
	    moduleConfig:{},//模块配置
	    prevModule:null,//上一个模块
		maxTab: 5,//最大限制5个固定标签
		maxTabsNum: 25, //所有标签最大值为25个，打开第26个标签时关闭第25个
		myapptabs: ['addr', 'calendar', 'googSubscription'], //固定标签取消时显示在特色应用
		initTabsData: ['welcome', 'mailbox_1', 'addr', 'calendar', 'diskDev', 'googSubscription'], //移动用户默认固定标签(首页， 邮件， 通讯录，日历， 彩云网盘， 云邮局），不可关闭
		initInternetUserTabsData: ['mailbox_1', 'addr', 'diskDev', 'googSubscription'], //非移动用户默认固定标签(邮件， 通讯录，彩云网盘， 云邮局），不可关闭
		channelState:{},
		selected: []
	},
	topFixTabObj: {
	    'welcome': '首页',
	    'mailbox_1': '邮件',
	    'addr': '通讯录',
	    'calendar': '日历',
	    'diskDev': '彩云网盘',
	    'googSubscription': '云邮局'
	},
	
	/**
	 * 创建module,module是实体数据{name:"模块名",
	 * isload:false //是否加载过
	 * type:"mailbox" //表示模块类型，如mailbox,welcome,readmail
	 * title:"" 表示模块标题
	 * element:null 模块容器dom
	 */
	createModule:function (module){
	    if (module.mutiple) { // 多实例
	        module.orignName = module.name;
	        var key = Math.random();
	        if (module.data && module.data.key) {
	            key = module.data.key;
	        }
	        module.name = module.name + "_" + key;
	    }
			//module.type=module.name;
		if(!module.group){  module.group=module.name;};
		if(!module.title){module.title=module.name;};
		
		var existModule = this.getModule(module.name);
		if(existModule){//已存在则直接返回
			
			//  add by tkh 已存在覆盖  module.data.inputData 的属性后再返回 
			try{
				if(existModule.data.inputData){
					_.extend(existModule.data.inputData, module.data.inputData);
				}
			}catch(e){
				console.log('Function:createModule 覆盖inputData属性时报错。');
			}
			
		    return existModule;
		}
		
		if(!module.data){
			module.data=new Object();
		}

		//从模块配置表获取模块处理类
		//module.model=this.moduleConfig["model"];	
		//module.view=this.moduleConfig["view"];
		
		//为模块创建div容器
		var divContent = document.createElement("div");
		if (module["deactive"]) {
		    divContent.innerHTML = "";
		} else {
		    divContent.className = "gload";
		    divContent.innerHTML = "<span class='gloadbg'></span>";
		}

		//divContent.style.display="none";
		this.container.appendChild(divContent);
		

		module.element = divContent;	//模块的容器元素,主要方便做切换显示隐藏
		module.view.el = divContent; //设置当前view的el
		
		
		this.pages[module.name]=module;//加入模块队列
		//this.createTab(module.name);
		return module;
	},
	//将模块从内存中清除
	deleteModule:function(moduleName){
		var m=this.pages[moduleName];
		//m.element.parentNode.removeChild(m.element); //移除此元素 ，对于收件箱会出状况，先留着@_@
	    delete this.pages[moduleName];
	},
	existModule:function(name){
		if(this.getModule(name)){
			return true;
		}else{
			return false;
		}
	},
	//得到模块
	getModule: function(module){
		if (typeof(module) == "string") {
			return this.pages[module];
		}else{
			return this.pages[module.name];
		}
		
	},
	getCurrent: function () {
	    var name = this.get("currentModule");
	    if (name) {
	        return this.getModule(name);
	    } else {
	        return null;
	    }
	},
	/**
	 * 显示模块，如果不存在则创建
	 */
	showModule:function(moduleName){
		var module=this.getModule(moduleName);
		if(!module){
		    module = this.getModule("welcome"); //容错
		}
	    if(this.prevModule!=null && this.prevModule!=module){
    
		    this.prevModule.element.style.display="none";    //隐藏上一个模块
		}
		module.element.style.display="";
		module.view.el=module.element;//设置当前view的el
	    //获取模块正文区域
		if (module.view && module.view.render) {
		    var isRendered = module.isRendered ? true : false;//当前模块是否已经显示过
            
			var result = module.view.render(isRendered); //执行当前模块的render
			module.isRendered=true;//表示已显示过

		}
		//获取工具栏，工具栏是所有标签页共用的
		if (module.view && module.view.getToolbar) {
			if(module.group!=this.prevModule.group){ //非常重要：如果是同一分组的不需要重新生成toolbar，避免页面刷新，避免递归导致的死循环
				var tb=module.view.getToolbar();
				if(typeof(tb)=="string"){
					this.toolbar.innerHTML=tb;
				}else if(this.toolbar.childNodes.length==0){ //如果生成过，避免重复生成
					this.toolbar.appendChild(tb);
				}
				
				this.toolbar.style.display="";
			}
			
		}else{
			this.toolbar.style.display="none";
		}
		
		
		this.prevModule=module;
		return module;
	},
	
	/** 获取初始化固定标签 */
	getInitTabsData:function(){
		return $User.isChinaMobileUser() ? this.get('initTabsData') : this.get('initInternetUserTabsData');
	},
	
	/** 设置固定标签 */
	setFixedTabsData:function(options,callback){ //保存值只能是string类型
		$App.setCustomAttrs('fixedtabs', options, callback);
	},
	
	/** 获取固定标签 */
	getFixedTabsData:function(){ //这里需要判断是否设置过,主要获取时间问题，可能数据还未加载
		var fixedtabs = null;
		/*if(this.hasSetFixedTabs()){
			var fixedtabs = $App.getCustomAttrs('fixedtabs');
			fixedtabs = fixedtabs.split(",");
		}else{*/
			fixedtabs = this.getInitTabsData();
		// }
		return fixedtabs;
	},
	
	/** 标记设置过固定标签 */
	markSetFixedTabs:function(callback){
		if(!this.hasSetFixedTabs()){
			$App.setCustomAttrs('hasSetFixedTabs', "1", callback);
		}
	},
	saveChannelState: function (channelName,name) {
	     
	    var channelState = this.get("channelState");
	    if (!channelName || channelName == "groupMail") {//群邮件特殊处理
	        channelName = "mail";
	    }
	    channelState[channelName] = { current: name };
	},
	
	/** 是否设置过固定标签 */
	hasSetFixedTabs:function(){
		return $App.getCustomAttrs('hasSetFixedTabs');
	}
	
});
﻿TabPageView =Backbone.View.extend({
    initialize: function(options){
        var model=new TabPageModel(options);
        this.model=model;
        this.el=options.container;
        var self = this;
        model.on("change:currentModule", function (model, val, group) {
            if (val != null) { //为了触发onchange，先设为null再设为null再设为目标值，所以会触发两次
                var currentModule = val;      //找到当前模块，执行当前模块的render
                try {
                    this.showModule(currentModule);
                    self.activeTab(currentModule);
                    self.renderChannel(currentModule);
                    // 控制标签管理菜单显示隐藏
                    if ($App.getView('tabpage').tab.count > 5) {
                        $('#tabsMenuIco').show();
                    } else {
                        $('#tabsMenuIco').hide();
                    }
                    // 【云邮寄模块】需要隐藏下拉三角、语音输入
                    $App.getView('top').setSearchBox(currentModule);
                    // 切换模块时改变搜索框的默认提示语
                    $App.getView('top').switchSearchBoxTips();
                    // 除欢迎页和邮件列表，其他模块的高度有调整，需要触发iframe变化
                    if ($('#' + currentModule).length) {
                        $('#' + currentModule).resize();
                    } else if (typeof group == 'string') {
                        $('#' + group).resize()
                    }

                    /*
                     * 子模块支持透明皮肤
                     */
                    var moduleName = $App.getCurrentTab().name;
                    var module = {
                        'addr': true,
                        'calendar': true,
                        'diskDev': true,
                        'googSubscription': true
                    }
                    var allowMailbox = function (name) {
                        var layout = $App.getMailboxView().model.get('layout');
                        return (name === 'mailbox_1' || name.indexOf('mailsub_') > -1) && layout === 'list';
                    }

                    // 欢迎页、收件箱透明化处理
                    // 欢迎页透明化处理需要2步：1-容器div_main背景透明化；2-iframe内引用皮肤样式
                    if (moduleName === 'welcome' || allowMailbox(moduleName)) {
                        $('#div_main').addClass('TransparentBg');
                    } else {
                        $('#div_main').removeClass('TransparentBg');
                    }

                    // 子模块透明化处理
                    // 1-移除容器div_main背景色；2-iframe内引用皮肤样式；3-调整左样式边栏（云邮局除外，因为云邮局iframe的高度没有变化）
                    if (module[moduleName]) {
                        $('#div_main').addClass('mainIframeBg_noBg');

                        if (moduleName !== 'googSubscription') {
                            $('#skinBgSub').addClass('skin_not');
                        } else {
                            $('#skinBgSub').removeClass('skin_not');
                        }
                    } else {
                        $('#div_main').removeClass('mainIframeBg_noBg');
                        $('#skinBgSub').removeClass('skin_not');
                    }

                    $App.onResize();
                } catch (ex) {
                    console.error(ex.message);
                }
                
                this.lastModule = currentModule;
                $App.closeWriteOkPage();
            }

        });
	
        this.tab=new TabLabel(document.getElementById("divTab"),this);
        this.tab.call = [this.onTabDelete, this.onTabActive, this.onTabClose];

        this.watchScrollbar();
	
    },
    el:null,//声明自己的容器
    template: "",
    orignTabs:null,
    events: {
        // "click .itemTitle":"changeTitle"
    },
    render:function (){
        var self=this;
    
        var currentModule = this.model.get("currentModule");
        if (currentModule) {
            this.activeTab(currentModule);
        }
    
   
    },
    setTitle:function(title,moduleName){
        //title=title.encode();
        if(!moduleName){
            moduleName=this.model.get("currentModule");
        }
        this.tab.title(moduleName,title);
        this.model.getModule(moduleName).title=title;
	
    },
    getVisibleCount: function () {
        return $("#divTab ul").find("li[tabid]:visible").length;
    },
    renderCloseAllButton: function () {
        var self = this;

	
    },

    /** 标签管理按钮 */
    renderMenuListButton:function(){
        var self = this;
        if($("#tabsMenuIco")[0]){
		
            return;
        }
        //setTimeout(function () {//异步执行
        $("#divTab ul").append('<li id="tabsMenuIco" class="noAll" tabindex="0"><a href="javascript:;" class="closeAll" title="点击查看更多"></a></li>');
        //},0);
    },
    //激活tab,会重复执行，以后优化
    //激活tab,会重复执行，以后优化
    activeTab: function (moduleName) {
        //alert("active:"+moduleName);
        if (this.tab.exist(moduleName)) {
            this.tab.active(moduleName);
        } else {	//如果tab不存在则创建
            this.createTab(moduleName);
        }
        try {
            $App.trigger("showTab", this.model.getModule(moduleName));
        } catch (ex) {
            //避免showtab事件中有异常，影响整个标签页切换
        }

    },
    replace:function(tabOld,tabNew){
        this.tab.replace(tabOld, tabNew);
    },
    //关闭指定标签页
    close:function(tabName){
        if(!tabName){
            tabName=this.model.get("currentModule");
        }
        this.tab.close(tabName);
    },
    //关闭全部标签页
    closeAllTab:function(){
        for (elem in this.model.pages) {
            if (elem != "welcome") {
                this.close(elem);
            }
        }
    },
    resize:function(){
        this.tab.size();
    },
    fixFlashRemove: function (tabName) {
        // 控制标签显示隐藏
        if ($.browser.msie && (tabName.indexOf("compose") >= 0 || tabName == "account"
                   || tabName == "mms" || tabName == "postcard") || tabName == "greetingcard" || tabName=="activityInvite"
                   || tabName == "quicklyShare" || tabName == "diskDev") { //特殊处理销毁flash时引发的异常__flash__removeCallback
            var module = this.model.getModule(tabName);
            if (module) {
                var elem = module.element;
                if($(elem).find("iframe")[0]){ //有些iframe还未打开
                    var flash = $("object", $(elem).find("iframe")[0].contentWindow.document);
                    if (flash.attr("classid") == "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000") {
                        flash.remove();
                    }
                }
            }
        
        }
    },
    //关闭当前标签页时触发的事件
    onCloseTab:function(tabName){
        var module = this.model.getModule(tabName);
        if (module) {
            this.fixFlashRemove(tabName);
            var elem = module.element;
            this.model.deleteModule(tabName);
            var iframe = $(elem).find("iframe");
            if (iframe.length > 0) {//释放iframe内存
                var frm = iframe.get(0);
                
                if (tabName.indexOf("compose_") >= 0) {
                    var childFrm = $("iframe", frm.contentWindow.document);
                    $(childFrm).each(function (i,n) {
                        n.src="about:blank";
                        $(n).remove();
                    });
                    
                }
                /*try {
                    frm.contentWindow.document.write('');
                    frm.contentWindow.document.clear();
                } catch (e) { };*/
                frm.src = "about:blank";
                frm.parentNode.removeChild(frm);
            }
            $(elem).remove(); //关闭标签时，清空dom内容回收内存
 
        
        

        }
	
        //    this.renderCloseAllButton();
        //this.renderMenuListButton(); //关闭时不用再调用了，因为是固定显示的
	
        /*var module;
            if(moduleName){
                module=this.modules[moduleName];
            }else{
                module=this.currentModule;
            }
            
            module.close=true;
            module.element.style.display="none";
            if (module.group != this.prevModule.group) {
                if(module==MM.currentModule){	//关闭的模块当前处于激活状态
                    //this.showModule(this.prevModule.name);
                }
                
            }
            return true;*/
    },
    clearTabCache:function(tabName){
        for (elem in this.model.pages) {
            var current = this.model.pages[elem];
            if (current.name.indexOf(tabName) >= 0) {
                current.isRendered = false;
            }
        }
    },
    createOrignTabs: function (orignTabs, view, isHeaderTab) {
        for (var i = 0; i < orignTabs.length; i++) {
            var key = orignTabs[i];
            if (key == "mailbox_1") {
                this.model.createModule({ view: $App.getView("mailbox"), name: "mailbox_1", title: "收件箱", group: "mailbox", deactive: true });
                this.createTab(key, true, isHeaderTab);
            } else {
                var link = window.LinkConfig[key];
                var obj = { name: key, view: view, title: link["title"], group: link["group"], mutiple: link["mutiple"], deactive: true }
                this.model.createModule(obj);
                this.createTab(key, true, isHeaderTab);
            }
        }

    },
    watchScrollbar: function () {
        if (($.browser.msie && $.browser.version < 8) || !$.browser.msie) {//只有IE8以上浏览器存在滚动条复位问题
            return;
        }
        var watchList = ["#sidebar", "#div_maillist", "#readmail_container", "#covMailSummaryList"]
        M139.Timing.setInterval("watchScrollbar", function () {
            for (var i = 0; i < watchList.length; i++) {
                var elems = $(watchList[i]);
                if (elems.length > 0) {
                    elems.each(function (i, n) {
                        if (!n.getAttribute("hasWatched")) {
                            console.log("start watch........",n);
                            M139.Timing.watchElementScroll(n);
                            n.setAttribute("hasWatched",true);
                        }

                    });
               
                }
            }
        },1000);
    },
channelOptions: {},
showChannel:function(channelName){
	
	// add by tkh 点击云邮局频道，如果有‘红点’触发更新消息状态的事件
	if(top.$App.pushMpostMsg){
		top.$App.trigger('updateMpostMsgStatus');
	}
	
	// add by tkh 邮箱顶层保留现场之后进入云邮局页面不会刷新，触发云邮局内部的事件刷新数据
	if(channelName === 'subscribe'){
		top.$App.trigger('renderMpostMailnotify');
	}
	
    var targetTab = "mail";
    if (this.channelOptions[channelName]) {
        targetTab=this.channelOptions[channelName].defaultTab;
    }
    var state=this.model.get("channelState");
    if (state[channelName] && state[channelName].current) {
        targetTab = state[channelName].current;
        if (this.tab.exist(targetTab)) {
            $App.activeTab(targetTab);
        } else { //容错，标签可能被自动关闭 
            if (this.channelOptions[channelName] && this.channelOptions[channelName].defaultTab) {
                $App.show(this.channelOptions[channelName].defaultTab);
            } else {
                $App.showMailbox(1);
            }
        }
    } else {    //未打开过该频道
        if (targetTab == "mail") { //邮件频道不用 app.show打开，要特殊处理下
            $App.showMailbox(1);
        } else {
            $App.show(targetTab);
        }
    }

},
registerChannel: function (name, options) {
    //renderFunc = (options && options.renderFunc) || "none";
    this.channelOptions[name] = options;

},
renderChannel: function (name) {
    var self = this;
    var folderLeft = $("#sub");
    function showMainFolder(show, remainWidth) {
        if (show) {
            $("#leftOther").hide();
            !$App.isNewWinCompose() && folderLeft.show();
            $("#main").css("left", "200px");
            var fv = $App.getView("folder");
            if (fv) {
                fv.resizeSideBar();//隐藏再显示后滚动条会重置，重设滚动条高度
            }
        } else {
            $("#leftOther").show();
            !$App.isNewWinCompose() && folderLeft.hide();
            var left = remainWidth ? "200px" : "0px";
            $("#main").css("left", left);
        }
    }
    function setTabVisible(channel) {
        // 控制顶部导航模块选中样式
        $("#toFixTabs [class=on]").removeClass();
        $("#toFixTabs [channel="+channel+"]").addClass("on");
        
        // 通讯录、日历、网盘模块高度需要调整
        /*
        if (channel == 'addr' || channel == 'calendar' || channel == 'disk') {
            $('#main').addClass('main_not');
            $('#divTab').addClass('mainTop_not');
        } else {
            $('#main').removeClass('main_not');
            $('#divTab').removeClass('mainTop_not');
        }*/

        var op = self.channelOptions[channel];
        if (op && op.withinMail) { //在邮件频道显示
            $("#toFixTabs [channel=mail]").addClass("on");
        }
        if (op && op.hideTab) {
            $("#divTab ul").hide();
            $('#main').addClass('main_not');
            $('#divTab').addClass('mainTop_not');
        } else {
            $("#divTab ul").show();
            $('#main').removeClass('main_not');
            $('#divTab').removeClass('mainTop_not');
        }
        for (elem in self.tab.tabs) {
            var t = self.tab.tabs[elem];
            var m = self.model.getModule(elem);
            if (!m) continue;

            var currentOp = self.channelOptions[m.group] ? self.channelOptions[m.group]:self.channelOptions[m.channel];//循环取频道设置
            if (channel == "mail" || (op && op.withinMail)) { //邮件模块
                if (currentOp) {//隐藏其它频道的标签
                    if (currentOp.hideTab == false) {
                        $(t).show();
                    } else {
                        $(t).hide();
                    }
                } else {
                    $(t).show();
                }
            } else if (channel == 'welcome' || channel == 'subscribe' || channel == "note") { // 为在欢迎页显示“收件箱”入口做的特殊处理
                channel = channel == 'welcome' ? 'mailbox' : channel;
                if (m.group == channel || m.channel == channel) {
                    $(t).show();
                } else {
                    $(t).hide();
                }
            } else {//其它的全隐藏。
                $(t).hide();
            }

        }
        // 调整tablabel数目为显示标签的数目
        self.tab.count = $('#divTab li:visible').not('#tabsMenuIco').length;
        if (self.prevChannel && self.prevChannel != channel) {//切换频道时因为时序问题，无法判断当前频道有几个标签，所以要再次调用resize。prevChannel是为了提高性能减少重复计算
            self.tab.size();
        }
        
        self.prevChannel = channel;
    }
    var module = this.model.getModule(name);
    var channelName = module.channel || module.group;//取模块的group或channel作为channel名称 
    
    if (this.channelOptions[channelName]) {
        this.model.saveChannelState(channelName,name);
        var leftNav = this.channelOptions[channelName].leftNav;
        if (leftNav == "none") { //iframe全部内容实现，不需要顶层的左侧导航
            showMainFolder(false);
            setTabVisible(channelName);
        } else if (leftNav == "mail") { //共用邮件channel的左侧导航
            showMainFolder(true, true);
            setTabVisible(channelName);
        } else {    //由top窗口创建左侧导航,目前暂未使用，未来预留
            showMainFolder(false, true);
            if (folderLeft.prev().attr("class") == "sub") {//已创建过
                folderLeft.prev().html(leftNav());
            } else {
                folderLeft.before("<div class=\"sub\" id=\"leftOther\">" + leftNav() + "</div>");
            }
        }

    } else {
        var visibleChannel = (name == "welcome" ? "welcome" : "mail");
        this.model.saveChannelState(visibleChannel,name);
        showMainFolder(true);

        setTabVisible(visibleChannel);
    }
},
//达到最大标签数处理,打开第26个标签时关闭第25个
maxTabHandler:function(){
    var maxTabsNum = this.model.get('maxTabsNum') || 23; //26 = 25 + 管理标签
    var lastTab;
    var lastTabId;
    this.tabContainer = this.tabContainer || $('#divTab ul');
    var $visibleTabs = this.tabContainer.find('li:visible').not('#tabsMenuIco');
    if( $visibleTabs.length >= maxTabsNum){
        lastTab = this.tabContainer[0].lastChild.previousSibling; //最后一个标签页
        lastTabId = lastTab.getAttribute('tabid');
        lastTabId && $App.closeTab(lastTabId);
    }
},

createTab: function (tabName, deactivate, isHeaderTab) {
    var mod = this.tab.exist(tabName);
    if (mod) {
        //this.tab.active(tabName);
        return;
    }

    try{
        this.maxTabHandler();        
    }catch(e){
        console.log(e);
    }


	var title=this.model.pages[tabName].title;
    var t = {
        name: tabName,
        text: title,
        group: this.model.pages[tabName].group
    };
    if (tabName == "welcome") {
        t.close = true;
    }	
    this.tab.add(t, deactivate, isHeaderTab);
},
//tab标签页点击叉号时触发，用于清除当前模块
onTabDelete:function(tabName){
	//因为同分组的tab替换时也会触发onTabDelete，所以只有未分组的module，才能直接删除模块
	/*var module=this.model.getModule(tabName);
    if(module.group==module.name){	//未分组的module
    	this.model.deleteModule(tabName);
    }else{	//分组的module，不做处理
    	
    }*/
    return ;
},
onTabActive:function(tabName){
//返回true表示激活tab成功
    this.model.set("currentModule",tabName);//设置当前模块，重要
    //this.model.showModule(tabName);
    return true;
},
onTabClose: function (name) { 
    var args = { cancel: false, name: name };
    try{
        $App.trigger("closeTab", args);
    } catch (ex) { }


    if (!args.cancel) { 
        this.onCloseTab(name);
        return true;
    } else {//取消关闭
        return false;
    }
}

});
﻿;(function () {
    var FrameModel = Backbone.Model.extend({
        /**
        * 
        */
        initialize: function (options) {
            if (!window.LinkConfig) {	//只执行一次，避免子类重复执行
                window.LinkConfig = {	//模块配置，用于工厂模式创建相应的模块
                    welcome: { url: "welcome_v2.html", site: "", title: "首页", tab: "welcome",group:"welcome"},
                    compose: { url: "compose.html", site: "", title: "写信", mutiple: true },
                    activityInvite: { url: "activityinvite/invite.html", site: "", title: "会议邀请", mutiple: false },
                    account:             {group: "setting", title: "设置", url: "set/account.html", site: "", tab: "account" },
                    account_setname:     {group: "setting", title: "设置", url: "set/account.html?bubble=txtSenderName", site: "", tab: "account" },
                    account_accountSafe: {group: "setting", title: "设置", url: "set/account.html?anchor=accountSafe", site: "", tab: "account" },
                    account_secSafe:     {group: "setting", title: "设置", url: "set/account.html?anchor=secSafe", site: "", tab: "account" },
                    account_areaSign:    {group: "setting", title: "设置", url: "set/account.html?anchor=areaSign", site: "", tab: "account" },
                    account_userInfo:    {group: "setting", title: "设置", url: "set/account.html?anchor=userInfo", site: "", tab: "account" },
                    accountLock:         {group: "setting", title: "设置", url: "set/account_lock.html", site: "", tab: "account" },
                    lockForget:          {group: "setting", title: "设置", url: "set/account_lock_verifycode.html", site: "", tab: "account" },
                    editLockPass:        {group: "setting", title: "设置", url: "set/mobile.html", site: "", tab: "account" },
                    preference:          {group: "setting", title: "设置", url: "set/preference.html", site: "", tab: "preference" },
                    preference_replySet: {group: "setting", title: "设置", url: "set/preference.html?anchor=replySet", site: "", tab: "preference" },
                    preference_forwardSet: {group: "setting", title: "设置", url: "set/preference.html?anchor=forwardSet", site: "", tab: "preference" },
                    preference_autoDelSet: {group: "setting", title: "设置", url: "set/preference.html?anchor=clearFolders", site: "", tab: "preference" },
                    preference_onlinetips: {group: "setting", title: "设置", url: "set/preference.html?anchor=onlinetips", site: "", tab: "preference" },
                    preference_clientSend: {group: "setting", title: "设置", url: "set/preference.html?anchor=clientSend", site: "", tab: "preference" },
                    preference_popReceiveMail: {group: "setting", title: "设置", url: "set/preference.html?anchor=popReceiveMail", site: "", tab: "preference" },
                    preference_autoSavaContact: {group: "setting", title: "设置", url: "set/preference.html?anchor=autoSavaContact", site: "", tab: "preference" },
                    popmail:    {group: "setting", title: "设置", url: "set/pop.html", site: "", tab: "popmail" },
                    addpop:     {group: "setting", title: "设置", url: "set/add_pop.html", site: "", tab: "popmail" },
                    addpopok:   {group: "setting", title: "设置", url: "set/add_pop_ok.html", site: "", tab: "popmail" },
                    type:       {group: "setting", title: "设置", url: "set/sort.html", site: "", tab: "type_new" },
                    type_new:   {group: "setting", title: "设置", url: "set/sort_new.html", site: "", tab: "type_new" },
                    createType: {group: "setting", title: "设置", url: "set/create_sort.html", site: "", tab: "type_new" },
                    tags:              {group: "setting", title: "设置", url: "set/tags.html", site: "", tab: "tags" },
                    tags_customerTags: {group: "setting", title: "设置", url: "set/tags.html?anchor=forwardSet", site: "", tab: "tags" },
                    tags_systemFolder: {group: "setting", title: "设置", url: "set/tags.html?anchor=systemFolder", site: "", tab: "tags" },
                    spam:               {group: "setting", title: "设置", url: "set/spam.html", site: "", tab: "spam" },
                    spam_whiteListArea: {group: "setting", title: "设置", url: "set/spam.html?anchor=forwardSet", site: "", tab: "spam" },
                    spam_spamMailArea:  {group: "setting", title: "设置", url: "set/spam.html?anchor=spamMailArea", site: "", tab: "spam" },
                    spam_antivirusArea: {group: "setting", title: "设置", url: "set/spam.html?anchor=antivirusArea", site: "", tab: "spam" },
                    mobile:          {group: "setting", title: "设置", url: "set/mobile.html", site: "", tab: "mobile" },
                    partner:         {group: "setting", title: "设置", url: "set/mobile.html", site: "", tab: "mobile" }, //兼容旧版，多写一个key
                    notice: {group: "setting", title: "设置", url: "set/notice.html", site: "", tab: "notice" },
                    set_addr: {group: "setting", title: "设置", url: "set_v2/set_addr.html", site: "", tab: "settingsaddr" },
                    set_calendar: {group: "setting", title: "设置", url: "set_v2/set_calendar.html", site: "", tab: "settingscalendar" },
                    set_disk: {group: "setting", title: "设置", url: "set_v2/set_disk.html", site: "", tab: "settingsdisk" },
                    set_mpost: {group: "setting", title: "设置", url: "/mpost2014/html/columnmanager.html?sid=" + top.sid, site: "", tab: "settingsmpost" },

                    pushEmail: { url: "/pushmail/default.aspx", site: "webmail", title: "pushEmail", tab: "pushemail" }, //pushemail地址
                    G3Phone: { url: top.SiteConfig.ssoInterface + "/GetUserByKeyEncrypt?url=" + encodeURIComponent("http://auth.weibo.10086.cn/sso/139mailframe.php?a=g3&environment=2&partId=1&path=&skin=shibo&sid=") + "&comeFrom=weibo&sid=" + top.sid, title: "G3通话", tab: "G3Phone" },
                    fetion: { url: "http://i2.feixin.10086.cn/home/indexpart", site: "", title: "飞信同窗", tab: "fetion" },
                    shequ: { url: top.SiteConfig.ssoInterface + "/GetUserByKeyEncrypt?url=" + encodeURIComponent("http://auth.weibo.10086.cn/sso/139mailframe.php?sid=") + "&comeFrom=weibo&sid=" + top.sid, comefrom: "weibo", title: "移动微博", group: "移动微博", tab: "shequ" },
                    cancelPackage: { url: "/userconfig/matrix/MailUpgrade.aspx?page=MailUpgrade.aspx", site: "webmail", title: "套餐信息", tab: "cancelpackage" },
                    syncguide: { url: "/rm/richmail/page/sync_guide_inner.html", site: "", title: "手机同步邮箱", tab: "syncguide" },
                    pay139: { url: top.SiteConfig.ssoInterface + "/GetUserByKeyEncrypt?url=" + encodeURIComponent(domainList.global.pay139+"&sid=") + "&comeFrom=weibo&sid=" + top.sid, site: "", title: "手机支付", tab: "pay139" },
                    note: { url: "note/note.html", site: "", title: "和笔记", tab: "note" },
					heyuedu: { url: top.SiteConfig.ssoInterface + "/GetUserByKeyEncrypt?url="+ encodeURIComponent("http://read.10086.cn/email139/index?Sid=") +"&comeFrom=weibo&sid=" + top.sid, comeFrom:"weibo", site: "", title: "和阅读", tab: "heyuedu" },
                    sms: { url: "sms/sms_send.html", group: "sms", title: "发短信", homeUrl: "sms_send.html" },
                    mms: { url: "mms/mmsRedirect.html", group: "mms", title: "发彩信" },
                    diskDevOld: { url: "disk/disk_jump.html", site: "", group: "disk", title: "彩云网盘", homeUrl: "disk_default.html" },
                    diskDev: { url: "disk_v2/disk2.html", site: "", group: "disk", title: "彩云", homeUrl: "disk_v2/disk2.html" },// update by tkh 重构彩云
                    diskShare: { url: "disk_v2/disk_share.html", site: "", group: "disk", title: "彩云网盘", homeUrl: "disk_v2/disk_share.html" },// update by chenzhuo 移植彩云共享功能
                    greetingcard: { url: "card/card_sendcard.html", site: "", title: "贺卡" },
                    card_success: { url: "card/card_success.html", site: "", title: "贺卡" },
                    quicklyShareOld: { url: "largeattach/largeattach_welcome.html", site: "", title: "文件快递" },
                    quicklyShare: { url: "fileexpress/cabinet.html", site: "", group: "disk", title: "彩云网盘" },// update by tkh 重构文件快递默认打开暂存柜页面
                    postcard: { url: "/Card/PostCard/Default.aspx", group: "postcard", site: "webmail", title: "明信片", homeUrl: "Default.aspx" },
                    attachlist: { url: "mailattach/mailattach_attachlist.html", site: "", group: "disk", title: "彩云网盘" },
                    calendar: { url: "calendar_v2/cal_index.html", homeUrl: "cal_index.html", title: "日历", group: "calendar" },
                    addMyCalendar: { url: "calendar_v2/mod/cal_mod_schedule_v1.html", homeUrl: "cal_index.html", title: "添加活动", group: "calendar" },
					vipEmpty: { url: "mail/vipmail_empty.html", site: "", title: "VIP邮件" },
                    clientPc: { url: getDomain("rebuildDomain") + "/disk/netdisk/wp.html?jsres=http%3A//images.139cm.com/rm/newnetdisk4//&res=http://images.139cm.com/rm/richmail&isrm=1", site: "", title: "pc客户端", target: "_blank"},
                    smallTool: { url: "/m2012/html/control139.htm", site: "", title: "pc客户端/小工具", target: "_blank" },
                    smallToolSetup: { url: "/m2012/controlupdate/mail139_tool_setup.exe", site: "", title: "小工具安装", target: "_blank" },
                    pcClientSetup: { url: "/m2012/html/disk_v2/wp.html", site: "", title: "pc客户端", target: "_blank" },
					health: { url: "health.html", group: "health", title: "邮箱健康度"},

                    //用户中心
					userCenter: { url: " http://zone.mail.10086.cn/api/sso/ssoformail.ashx?to=CN201204A1&flag=6", site: "", title: "用户中心" },
					voiceSetting: { url: "/m2012/html/voiceMail/redirect.html", site: "", title: "语音信箱" },


                    //通讯录块
                    addrvipgroup:     { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?v=20120620&homeRoute=10100", site: "" },
                    addrhome:         { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html", site: "" },
                    addrinputhome:    { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_import_clone", site: "" },
                    addroutput:       { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_export", site: "" },
                    addrWhoAddMe:     { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_whoaddme", site: "" },
                    addrWhoWantAddMe: { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_request", site: "" },
                    updateContact:    { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_update", site: "" },
                    addrshare:        { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr/addr_share_home.html?check=1", site: "" },
                    addrshareinput:   { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "/addr/matrix/share/ShareAddrInput.aspx", site: "webmail" },
                    addrbaseData:     { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_info_basic", site: "" },
                    dyContactUpdate:  { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "/addr/matrix/updatecontactinfo.htm", site: "webmail" },
                    addrImport:       { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_import_pim", site: "" },
                    addrImportFile: { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_import_file", site: "" },
                    addrMcloudImport: { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_import_pim", site: "" },
                    addrAdd:         { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_add_contacts", site: "" },
					addrEdit:         { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_editContact", site: "" },
                    addrMyVCard:      { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr/addr_businesscard.html?type=mybusinesscard&pageId=0", site: "" },
                    addr:             { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html", site: "" },
                    setPrivate:       { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_setprivacy", site: "" },
                    baseData:         { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_info_basic", site: "" },
                    teamCreate: { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_team_create", site: "" },
                    teamNotify: { group: "addr", tab: "addr", title: "通讯录", homeUrl: "addr_index.html", url: "addr_v2/addr_index.html?homeRoute=10200&redirect=addr_team_notify", site: "" },
                    syncGuide:        { url: "/rm/richmail/page/sync_guide_inner.html", site: "", title: "手机同步邮箱", tab: "syncguide" },

                    groupMail: { url: "/m2012/html/groupmail/list.html",site: "", title: "群邮件", group: "groupMail"  },
                    writeGroupMail: { url: "/m2012/html/groupmail/list.html?redirect=writeGroupMail", site: "", title: "群邮件", group: "groupMail" },
                    //groupMail: { url: "GroupMail/groupEmailList.htm", site: "webmail", title: "群邮件" },
                    groupMailWrite: { url: "GroupMail/GroupMail/ComposeGroupmail.aspx?action=write", site: "webmail", group: "groupMailCompose", title: "写群邮件" },
                    groupMailSetting: { url: "/GroupMail/GroupOper/GroupManager.aspx", site: "webmail", group: "groupMail", title: "群邮件", refresh: true },
                    groupMailFindGroup: { url: "/GroupMail/GroupOper/FindGroup.aspx", site: "webmail", group: "groupMail", title: "群邮件", refresh: true },
                    groupMailCreateGroup: { url: "/GroupMail/GroupOper/CreateGroup.aspx", site: "webmail", group: "groupMail", title: "群邮件", refresh: true },
                    groupMailAddGroupUser: { url: "/GroupMail/GroupOper/AddUserGroup.aspx", site: "webmail", group: "groupMail", title: "群邮件", refresh: true },
                    groupMailEditGroup: { url: "/GroupMail/GroupOper/EditGroupNickName.aspx", site: "webmail", group: "groupMail", title: "群邮件", refresh: true },

                    myrings: { url: "set/myrings.html", site: "", title: "咪咕音乐" },
                    billManager: { url: "bill/billmanager.htm", site: "", group: "mailsub_0", title: "服务邮件" },
                    billLife: { url: "/handler/bill/goto.ashx?lc=main", site: "billLife", group: "mailsub_0", title: "服务邮件" },
                    billLifeNew: { url: "/handler/bill/goto.ashx", site: "billLife", group: "mailsub_0", title: "服务邮件" },
                    billLifeSsoIndex: { url: "/handler/bill/goto.ashx?lc=main&provcode=0&areacode=0&from=1&fromtype=1 ", site: "billLife", group: "mailsub_0", title: "账单生活" },
                    billLifeSsoWater: { url: "/handler/bill/goto.ashx?lc=pay.waterselect&provcode=0&areacode=0&from=1&fromtype=1 ", site: "billLife", group: "mailsub_0", title: "账单生活" },
                    billLifeSsoElectric: { url: "/handler/bill/goto.ashx?lc=pay.electricselect&provcode=0&areacode=0&from=1&fromtype=1 ", site: "billLife", group: "mailsub_0", title: "账单生活" },
                    billLifeSsoGass: { url: "/handler/bill/goto.ashx?lc=pay.gasselect&provcode=0&areacode=0&from=1&fromtype=1 ", site: "billLife", group: "mailsub_0", title: "账单生活" },
                    billLifeTraffic: { url: "/handler/bill/goto.ashx?lc=pay.trafficselect&provcode=0&areacode=0&from=1&fromtype=1", site: "billLife", group: "mailsub_0", title: "账单生活" },
                    //uecLab: { url: "/LabsServlet.do", site: "uec", title: "实验室" },
                    uecLab: { url: "uec/lab.html", title: "实验室" },
                    selfSearch: { url: 'set/selfsearch.html', title: '自助查询' },

                    fax: { url: "fax/sso.aspx?style=3&id=2", site: "webmail", title: "收发传真" },
                    pushemail: { url: "/pushmail/default.aspx", site: "webmail", title: "手机客户端" },
                    smsnotify: { url: "sms/notifyfriends.html", group: "sms", title: "短信提醒" },
                    mobileGame: { url: "http://g.10086.cn/s/139qr/", group: "mobileGame", title: "手机游戏" },

                    // 主题运营活动
                    earth2013: { url: "topicality/earth2013/indexearth.html", site: "", title: "地球一小时" },
                    addcalendar: { url: "calendar/calendar_editcalendar.html", homeUrl: "calendar_view.html", title: "日历", group: "calendar" },

                    //每月任务
                    //myTask: { url: "taskmain/taskmain.html", site: "", title: "我的任务" },

                    myTask: { url: 'http://zone.mail.10086.cn/api/sso/ssoformail.ashx?to=CN201306B1', site: "", title: "我的积分任务" },
                    sportLottery: { url: "http://3g.weicai.com/139mail/index.php", type: "sso", comefrom: "weibo" },
                    
                    changeSkin: {url: "changeskin.html", site: "", title: "换皮肤"}, // add by tkh 设置皮肤
                    

                    //邮箱营业厅
                    mailHall: { url: "hall/index.html", site: "", title: "邮箱营业厅" },//邮箱营业厅

                    //年终“邮”
                    lottery: { url: top.getDomain('lotteryRequest') + '/setting/s?func=setting:examineUserStatus&versionID=1', site: "", title: "开箱邮礼" },
                    //lotteryDetail: { url: 'https://happy.mail.10086.cn/web/act/cn/fuli/Rule.aspx', site: "", title: "活动详情" },//年终“邮”
                    //lotteryDetail: { url: 'http://happy.mail.10086.cn/web/act/cn/lottery/detail.aspx', site: "", title: "活动详情" },//年终“邮”
                    //lotteryad: { url: 'http://happy.mail.10086.cn/web/act/cn/lottery/index.aspx', site: "", title: "马上邮奖" },//年终“邮”
                    blueSky: { url: 'http://zone.mail.10086.cn/api/sso/ssoformail.ashx?to=CN201403A1', site: "", title: "蓝天自造" },
                    billCharge: { url: top.SiteConfig.billChargeUrl, site: "", title: "邮箱营业厅" },
                    colorfulEgg: { url: 'http://zone.mail.10086.cn/api/sso/ssoformail.ashx?to=CN201403D1', site: '', title: '生日彩蛋' },
                    smartLife: { url: top.getDomain('happyMailUrl') + '/api/sso/ssoformail.ashx?to=CN201407B1', site: "", title: "拥抱智能生活" },
                    nothing: {} //结尾
                };
                //window.LinksConfig = window.LinkConfig; //兼容旧版
                if (!domainList["global"]["billLife"]) {
                    domainList["global"]["billLife"] = "http://bill.mail.10086.cn";
                }
                this.addSubscribeLinks();
                this.fixlinks();//提供新开关动态修改链接入口
            }

        },
        modules: [], //模块列表
        defaults: {  //默认数据
            currentLink: null, //当前模块
            container: null
        },
        /***
        * 通过key值获取links配置
        */
        getLinkByKey: function (key) {
            return window.LinkConfig[key];
        },
        /***
        * 通过model取到当前的标签页id，再取到相应的links配置
        */

        getLink: function (moduleModel) {

            var currentModuleName = moduleModel.get("currentModule"); //模块管理model

            var key = currentModuleName;
            var module = moduleModel.getModule(currentModuleName);
            if (module.orignName) { //多实例，name已经加了guid，取orignName
                key = module.orignName;
            }
            var config = window.LinkConfig[key]; //为了适应写信页多实例，不能直接取module.name，而是取分组名称
            if (module.view && module.view.inputData && module.view.inputData.categroyId) {
                config.categroyId = module.view.inputData.categroyId;
            }
            return config;
            //alert(config.url);
        },

        /**
        * 创建module,module是实体数据{name:"模块名",
        * isload:false //是否加载过
        * type:"mailbox" //表示模块类型，如mailbox,welcome,readmail
        * title:"" 表示模块标题
        * element:null 模块容器dom
        */
        addLink: function (key, data) {
            window.LinkConfig[key] = data;
        },

        /** 添加我的订阅相关页面连接 */
        addSubscribeLinks: function () {
            //var host = getDomain('dingyuezhongxin'); // update by tkh
            var host = "http://" + top.location.host;
            var homemailhost = getDomain('homemail');
            this.addLink('goodMag', { url: host + "/inner/magazine_list_main.action", group: "subscribe", title: "云邮局" });
            this.addLink('googSubscription', { url: host + "/mpost2014/html/mpost.html", group: "subscribe", title: "云邮局" }); // 云邮局主页面
            this.addLink('mpostOnlineService', { url: host + "/mpost2014/html/onlineservice.html", channel: "subscribe", mutiple:true,refresh:true,title: "云邮局" }); // 云邮局在线服务（新页签）
            this.addLink('mpostOnlineRead', { url: host + "/mpost2014/html/mymagazine.html", group: "subscribe", title: "云邮局" }); // 云邮局在线阅读
            this.addLink('myMag', { url: host + "/inner/magazine_list_main.action", group: "subscribe", title: "云邮局" });
            this.addLink('myCollect', { url: host + "/inner/show_favorite.action", group: "subscribe", title: "云邮局" });
            this.addLink('myCloudSubscribe', { url: host + "/inner/mysubscribe.action", group: "subscribe", title: "云邮局" }); // add by tkh 新版精品订阅‘我的订阅’
            this.addLink('setSubscription', { url: host + "/inner/to_subscribe_manager.action", group: "subscribe", title: "云邮局" });
            this.addLink('myBookshelf', { url: host + "/inner/magazine_list_main.action", group: "subscribe", title: "云邮局" });
            this.addLink('dingyuezhongxin', { url: host + "/mpost2014/html/mpost.html", group: "subscribe", title: "云邮局" });
            this.addLink('dingyueDownload', { url: "http://jpdyapp.mail.10086.cn/?21", group: "subscribe", title: "云邮局" });

        },
        fixlinks :function(){
        	
            if(top.SiteConfig.calendarRemind){//修改日程提醒
           	
           	    if(top.SiteConfig.isLoadingCalendarRemind){
           	    	
           	    	this.addLink('calendar',{ url: "calendar_reminder/loading.html", homeUrl: "month.html", title: "日历", group: "calendar" });
           	    	
           	    }else{
           	    	
           	    	this.addLink('calendar',{ url: "calendar_v2/cal_index.html", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	this.addLink('createCalendar', { url: "calendar_v2/cal_index.html?redirect=addlabel", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	this.addLink('addcalendar', { url: "calendar_v2/cal_index.html?redirect=addact", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	this.addLink('addBirthcalendar', { url: "calendar_v2/cal_index.html?redirect=addbirthact", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	this.addLink('calendar_act_view', { url: "calendar_v2/cal_index.html?redirect=actview", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	this.addLink('calendar_msg', { url: "calendar_v2/cal_index.html?redirect=msg", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	this.addLink('calendar_search', { url: "calendar_v2/cal_index.html?redirect=search", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	this.addLink('calendar_square', { url: "calendar_v2/cal_index.html?redirect=discovery", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	this.addLink('calendar_manage', { url: "calendar_v2/cal_index.html?redirect=labelmgr", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
                    this.addLink('calendar_viewlabel', { url: "calendar_v2/cal_index.html?redirect=viewlabel", homeUrl: "cal_index.html", title: "日历", group: "calendar" });
           	    	var lstSpecial = [{labelId:6,name:'birth',page:'list_system.html'},{labelId:1,name:'appointment',page:'list_system.html'},{labelId:2,name:'pay',page:'list_system.html'},
           	    					{labelId:3,name:'special',page:'list_system.html'},{labelId:5,name:'sport',page:'list_system.html'},{name:'baby',page:'list_baby.html'}
           	    				  ];
           	    	var item = null ,url = null , homeUrl = null;
           	    	for(var i = 0 ;i < lstSpecial.length; i++){
           	    		
           	    		item = lstSpecial[i];
           	    		homeUrl = item.page;
           	    		url = "calendar_v2/" + item.page;
           	    		if(item.labelId){
           	    			
           	    			url +=  ("?labelId=" + item.labelId);
           	    		}
           	    		
           	    		this.addLink('specialCalendar_'+item.name,{url: url,homeUrl: homeUrl,title: "日历",group: "calendar"});
           	    	}
           	    }
           		
           	
           }
            if (SiteConfig.m2012NodeServerRelease) {
                LinkConfig.welcome.url = "/m2012server/welcome";
            }
        }

    }, {
	    getLinkByKey: function (key) {
            return window.LinkConfig[key];
        }
    });

    window.FrameModel = FrameModel;

})();
var FrameView = Backbone.View.extend({
    initialize: function (options) {
        this.parentView = options.parent;
        this.model = new FrameModel();
        this.param = options.param;//页面参数（如果有的话）
        this.url = options.url;//如果传递url直接打开，可以不需要配置
        this.html = options.html;//如果传递html直接可以不通过iframe创建标签页
        this.title = options.title;//如果传递url直接打开，可以不需要配置
        this.inputData = options.inputData;
        var self = this;
        $(window).resize(function () {
            self.onResize();
        });

    },
    render: function (isRendered) {//isRendered:表示是否显示过，用于强制刷新
        var self = this;
        var pm = this.parentView.model; //父view的model，即模块管理类
        var currentModule = pm.get("currentModule");//当前模块
        var config = this.model.getLink(pm);//获取链接配置

        var errorTip = ['<div class="bodyerror ErrorTips" style="display:none">',
 		    '<img src="../images/global/smile.png" width="73" height="72">',
 		    '<p>没加载出来，再试一次吧</p>',
 		    '<a class="btnTb" href="javascript:"><span class="p_relative">重新加载</span></a>',
 	    '</div><div class="gtips NoCompleteTips" style="display:none">',
            '<span class="ml_5">由于网络原因，当前页面未完全加载，是否<a class="Retry" style="text-decoration: underline;" href="javascript:">重新加载</a>？</span>',
            '<a href="javascript:" class="i_u_close Close"></a>',
        '</div>'].join("");


        if (config) { //有配置
            //this.el=pm.getModule(currentModule).element;//显示容器
            this.parentView.setTitle(pm.getModule(currentModule).title || config.title); //设置标题 

            if ($(this.el).html() == "" || !isRendered || config.refresh) {   //没有创建过，或需要强制刷新时才重新加载
                var prefix = config.url.indexOf("?") >= 0 ? "&" : "?";//是问号还是&符号
                var url = config.url ;
                if (!config.clearSid) { //有不需要sid的情况
                    url = url + prefix + "sid=" + sid;
                }
                if (config.categroyId) {
                    url += '&categroyId=' + config.categroyId;
                }
                if (config.site) {
                    url = getDomain(config.site) + "/" + url;
                }
                if (this.param) {
                    if (typeof (this.param) == "string") {
                        if (this.param.indexOf("urlReplace") >= 0) {
                            url = this.param.match("urlReplace=(.+)")[1];
                            var m_domain = config.url.match(/http:\/\/.+?\//);
                            if (m_domain) {
                                url = m_domain + url;
                            }
                        } else {
                            url = url + this.param
                        }
                    } else {
                        url = M139.Text.Url.makeUrl(url, this.param);
                    }
                }

                if (this.inputData) {
                    url = $App.inputDataToUrl(url, this.inputData);
                }

                var id = currentModule;
                if (config.tab) {
                    id = config.tab;
                }
                $(this.el).html("<iframe scrolling=\"auto\" class=\"main-iframe\" name=\"ifbg\" frameborder=\"no\" width=\"100%\" id=\"" + id + "\" src=\"" + url + "\" allowtransparency=\"true\"></iframe>" + errorTip);
            }
        } else if (this.url) {
            this.parentView.setTitle(this.title); //设置标题
            $(this.el).html("<iframe scrolling=\"auto\" class=\"main-iframe\" name=\"ifbg\" frameborder=\"no\" width=\"100%\" src=\"" + this.url + "\" allowtransparency=\"true\"></iframe>" + errorTip);
        } else if (this.html) {
            this.parentView.setTitle(this.title); //设置标题
            $(this.el).html(this.html);
        }
        this.onResize();

        if (!isRendered) {
            setTimeout(function () {
                self.watchIframeStatus(pm.getModule(currentModule));
            }, 0);
        }
    },
    /**
     * 获取工具栏，此函数由tabpageView自动调用。
     */
    onResize: function () {

        if (this.el) {
            try {
                var iframe = this.el.childNodes[0];
                var currentModule = $App.getCurrentTab && $App.getCurrentTab() && $App.getCurrentTab().name;
                // 切换到其他模块会触发欢迎页iframe高度的改变
                // 欢迎页iframe高度变化会影响$App.getBodyHeight()取值
                if (iframe.id == 'welcome' && currentModule != 'welcome') {
                    return;
                }
                $iframe = $(iframe);
                var height = $(document.body).height() - $("#div_main").offset().top;
                $iframe.height(height - 4);//减去多余4像素
                //console.log(iframe.id)
                if ($.browser.msie && $.browser.version < 8) {
                    // 针对ie67的优化
                    
                    var idAttr = iframe.id; // add by tkh 与网盘一样，云邮局的页签不需要设置宽度
                    if ((idAttr && idAttr.indexOf('mpostOnlineService') !== -1) ||
                        idAttr === 'googSubscription' ||
                        idAttr == "diskDev" ||
                        idAttr == "calendar" || idAttr == "createCalendar" || idAttr == "addcalendar" || idAttr.toLowerCase().indexOf("calendar_") > -1 ||
                        idAttr == "addr" ||
                        idAttr === 'jpdy_topic_1'||
                        idAttr == "billCharge") {
                        return; 
                    }
                    
                    if ($App.isNewWinCompose()) {
                        // 不操作
                    } else {
                        $iframe.width($(document.body).width() - 214);
                    }
                }

            } catch (e) { }
        }
    },

    getIframe: function(){
        return this.el.firstChild || null;
    },

    /**
     *设置标题栏左侧图标状态
     *@param status {string} loading|error|hide
     */
    setTabStatus: function (status) {
        //console.log("setTabStatus:" + status);
        var iframe = this.getIframe();
        if (iframe.id) {
            $App.getView("tabpage").tab.setStateIcon(iframe.id, status);
        }
        
        this.model.set("tabStatus", status);
    },

    getTabStatus: function(){
        return this.model.get("tabStatus");
    },

    /**
     *根据iframe的状态显示如loading图标
     */
    watchIframeStatus: function (module) {
        if (!SiteConfig.labelIframeLoadingRelease) {
            return;
        }
        if ($B.is.ie && $B.getVersion() < 9) {
            return;
        }
        var self = this;
        var iframe = this.getIframe();
        if (!iframe || iframe.id == "welcome") return;
        setTimeout(function () {
            checkFinish("settimeout");//防止类似ie11超快加载，来不及捕获onload
        }, 100);
        setTimeout(function () {
            if (self.getTabStatus()=="error") {
                module.isRendered = false;
            }
        }, 10000);
        var win = iframe.contentWindow;
        iframe.onload = function () {//bind load会触发2次
            checkFinish("onload");
        };
        if (isLocalPage()) {
            $Timing.waitForReady(function () {
                return win.document.domain === document.domain
            }, function () {
                $(win.document).ready(checkFinish);
            });
        }
        function isLocalPage() {
            //要确保非本域iframe 不检查同域（如飞信，微博等）
            var url = iframe.src;
            if (/^\/|http:\/\/(appmail\d+|rm|app|smsrebuild\d+|subscribe\d+|html5)\.mail\./.test(url) && url.indexOf('/m2012') > -1) {
                if (url.indexOf("inner/reader/index") >= 0 || url.indexOf("voiceMail") >= 0) {//云邮局的页面没加domain，特殊处理下
                    return false;
                }
                return true;
            } else {
                return false;
            }
        }
        function checkFinish(type) {
            var notCompleteTimer;
            if (isLocalPage()) {
                //定制的页面要检查对象可用而不是脚本有可访问性
                if ($Iframe.isAccessAble(iframe)) {
                    //html页中的健康检查代码
                    if (win.LoadStatusCheck) {
                        notCompleteTimer = setTimeout(showNotCompleteTip, 3000);
                        $Timing.waitForReady(function () {
                            return win.LoadStatusCheck.isComplete() && self.checkIframeHealth(iframe);
                        }, function () {
                            clearTimeout(notCompleteTimer);
                            showOK();
                        });
                    } else {
                        if (self.checkIframeHealth(iframe)) {
                            showOK();
                        } else {
                            setTimeout(function () {
                                if (self.checkIframeHealth(iframe)) {
                                    showOK();
                                } else {
                                    showNotCompleteTip();
                                }
                            }, 3000);
                        }
                    }
                } else {
                    if (type == "onload") {
                        showError();
                    }
                }
            } else {
                //非同域名无法检测页面完成性
                showOK();
            }
        }
        function showOK() {
            self.setTabStatus("hide");
            $(self.el).find("div.ErrorTips,div.NoCompleteTips").hide();
            iframe.style.visibility = "";
        }
        function showError() {
            self.setTabStatus("error");
            $(self.el).find("div.ErrorTips").show().find("a").click(function () {
                $(this).unbind("click");
                reload();
            });
            iframe.style.visibility = "hidden";
            $App.trigger("httperror", {
                loadResourceError: true
            });
        }
        function showNotCompleteTip(){
            self.setTabStatus("error");
            var container = $(self.el).find("div.NoCompleteTips").show();
            container.find("a.Retry").click(function () {
                $(this).unbind("click");
                reload();
            });
            container.find("a.Close").click(function () {
                container.hide();
            });
            iframe.style.visibility = "";
            $App.trigger("httperror", {
                loadResourceError: true
            });
            if (self.iframeErrorLog) {
                M139.Logger.sendClientLog(self.iframeErrorLog);
            }
        }
        function reload() {
            iframe.src = iframe.src;
            $(self.el).find("div.ErrorTips,div.NoCompleteTips").hide();
        }
    },
    /**
     *检测iframe里的js和css加载正常
     */
    checkIframeHealth: function (iframe) {
        var self = this;
        var result = true;
        //高级浏览器才支持script onload,在index.html中loadScript的时候加的
        if (($B.is.ie && $B.getVersion() >= 9) || !!window.FormData) {
            (function () {
                var scripts = iframe.contentWindow.document.getElementsByTagName("script");
                for (var i = 0; i < scripts.length; i++) {
                    var js = scripts[i];
                    if (js.getAttribute("jsonload") === "0") {
                        result = false;
                        self.iframeErrorLog = { level: "ERROR", name: "JSLoadError", url: js.src };
                        return;
                    }
                }
                //windows下的safari，以及低版本的chrome和firefox不支持 css文件的onload事件，会产生误判 
                if (($B.is.chrome && $B.getVersion() < 25) || ($B.is.safari) || ($B.is.firefox && $B.getVersion() < 25)) {
                    return;
                }
                var links = iframe.contentWindow.document.getElementsByTagName("link");
                for (var i = 0; i < links.length; i++) {
                    var css = links[i];
                    if (css.parentNode && css.parentNode.tagName !== "HEAD") continue;
                    if (css.getAttribute("cssonload") === "0") {
                        result = false;
                        self.iframeErrorLog = { level: "ERROR", name: "CSSLoadError", url: css.href };
                        return;
                    }
                }
            })();
        }
        return result;
    }
});
﻿String.prototype.trim = function(){
	return this.replace(/^\s+|\s+$/g, "");
}

function TabLabel(container,context){
    this.win = window;
    this.doc = this.win.document;
    this.context=context;  //modelview的引用，避免依赖
    //this.id = "divTab";
	var ul=document.createElement("ul");
	//ul.className="tab";
	
	ul.innerHTML = '<li id="tabsMenuIco" class="noAll" tabindex="0" style="display:none"><a href="javascript:;" hidefocus="true" class="closeAll" title="点击查看更多"></a></li>';

	container.innerHTML="";
	container.appendChild(ul);
    this.main = ul;
    this.cur = null;
    this.tabs = [];
    this.group = [];
    this.count = 0;
    this.width = -1;
    this.max = 124;
    this.min = 90;
	this.playerWidth=0;
    this.history = [];
    this.call = [];
    this.init();
    //拖动初始化
    //DropAbledTabLabel.init(this);
}

TabLabel.prototype.init=fTabLabelInit;
TabLabel.prototype.add=fTabLabelAdd;
TabLabel.prototype.exist=fTabLabelExist;
TabLabel.prototype.del=fTabLabelDel;
TabLabel.prototype.active=fTabLabelActive;
TabLabel.prototype.title=fTabLabelTitle;
TabLabel.prototype.close=fTabLabelClose;
TabLabel.prototype.change=fTabLabelChange;
TabLabel.prototype.replace=fTabLabelReplace;
TabLabel.prototype.size=fTabLabelSize;
TabLabel.prototype.update=fTabLabelUpdate;
TabLabel.prototype.showPlayer = fTabLabelShowPlayer;
TabLabel.prototype.setStateIcon = fTabLabelSetStateIcon;

function fTabLabelSetStateIcon(id, state) {
    var classes = {
        "loading": "error-loading",
        "error": "error-tab",
        "cluster": "i_m_rss",
	    "uploading": "write-loading"
    }
    var el = this.tabs[id] && this.tabs[id].firstChild;
    if (el && el.tagName == "I") {
        if (state == "hide") {
            el.style.display = "none";
        } else {
            el.className = classes[state];
            if (state == "cluster") {
                $(el).css({ left: "3px", top: "9px" });
            }
            el.style.display = "";
        }
    }
}
function fTabLabelShowPlayer(show){
	if(show){
		this.playerWidth=240;
		
	}else{
		this.playerWidth=0;
	}
	if(top.MM){
		top.MM.resize();
		top.MM.onShow();
	}
	
	
	
}
function fTabLabelInit(){
    try {
        //this.main = this.doc.getElementById(this.id);
        var w = 720; // 208 130
        //this.main.style.width  = w+30+"px";    
        this.width = w; 
    } 
    catch (e) {
        alert(frameworkMessage.TablabelError, e);
    }
}


function specialTreatments(ao,tab,_this) {
    /* 标签的特殊处理 */

    //#region 日历calendar
    if (ao.name == "calendar") {
        var key = "calendar_version";
        var oldVer = $Cookie.get(key) || "",
            newVer = top.SiteConfig[key] || "";
        if (!!newVer && oldVer != newVer) {
            //有更新
            $(tab).append('<i class="i_newsL" key="' + key + '" value="' + newVer + '"></i>');
        }
    }
    //#endregion
}

function fTabLabelAdd(ao, deactivate, isHeaderTab) {
    var v = this;
    var win = this.win;
    var id = ao.name;
    var tab, dvl, dvm, dvr, a;
	//ao.text=Utils.htmlEncode(ao.text);
	tab = this.doc.createElement('li');
	tab.setAttribute("tabid", id);
    tab.setAttribute("role","tab");
    tab.setAttribute("tabindex","0");

	var text = $T.Html.encode(ao.text);
	var orignTabsData = this.context.model.getFixedTabsData();
	
	function noClose(){ //是否可以关闭

		//特殊业务，移动用户固定标签收件箱可以关闭，非移动用户不能关闭
	    if (id === 'welcome' || id === 'mailbox_1' || $.inArray(id, orignTabsData) > -1) {
			return true;
		}
	}
	//如果是云邮件，加图标
//	if(id == "googSubscription"){
//		icon2 = '<i class="i_m_rss"></i>';
//	}
    if (noClose()) {
        tab.className = deactivate ? "" : "on";
        tab.setAttribute("aria-selected", deactivate ? "false" : "true");
	    tab.innerHTML = "<i style='display:none;' class=\"error-loading\"></i><span>" + text + "</span>";
        
    }else{
        tab.className = deactivate?"":"on";
        tab.setAttribute("aria-selected", deactivate ? "false" : "true");
	    tab.innerHTML = "<i style='display:none;' class=\"error-loading\"></i>\
            <span>"+text+"</span>\
            <a href=\"javascript:;\" class=\"i_close\" title=\"关闭\"></a>";
    }

	tab.onmousedown = function (e) {
	    e = e || window.event;
	    var target = e.target || e.srcElement;
	    if (target.tagName == "A") return;
        var id = this.getAttribute("tabid");
        if (v.exist(id) == v.cur) {
            return;
        }
		
        v.active(id);
    }
  
	ao.text = ao.text || "";
    tab.title = ao.text;//.stripTags();
	
	if (!ao.close) {
	    var a_close = tab.getElementsByTagName("a")[0];
		tab.ondblclick = function(){
            if (a_close) {
                $(a_close).trigger("click");
            }
    	};
		if (a_close) {
		    a_close.onclick = function (e) {
		        //var id = this.parentNode.parentNode.getAttribute("tabid"); //找到标签上保存的模块id
		         var id = this.parentNode.getAttribute("tabid");
				//延迟移除 否则无法触发document的click事件
				_delTab(id);
		    };
		}
	}
	
	
	
	//删除固定标签
	var delTabId = 'delOrignTab_' + id;
	$App.off(delTabId).on(delTabId ,function(){
		var flag = true;
		if(id === 'welcome'){
			flag = false;
		}
		if(id.indexOf("mailbox_") > -1 && !$User.isChinaMobileUser()){
			flag = false;
		}
		
		flag && _delTab(id);
		console.log(id);
	});
	
	function _delTab(id){
		setTimeout(function () {
			if (v.call[2].call(v.context, id)) {
				v.del(id);
			}
		}, 0);
	}

	/** 
	* 插入标签有两种情况：
	* 1、普通在尾部插入节点 
	* 2、固定标签设置时在头部插入节点 
	*/
    if(!isHeaderTab){
		$('#tabsMenuIco').before(tab);
	}else{
		$(this.main).find('li:eq(0)').after(tab); //固定标签显示,这里无问题
	}
	$('#tabsMenuList').hide(); //隐藏下拉菜单

	this.tabs[id] = tab;
    if (!deactivate) {
        this.active(id);
    }
    this.count++;
    this.size();
	
	//特殊切换
	var replaceReg = /myMag|myCollect|googSubscription|myCloudSubscribe/i;
	if(replaceReg.test(ao.name)){
		ao.group = "subscribe";
		ao.name = "精品订阅";
	}
	
    if (ao.group) { //存在分组的情况，进行替换
		
        var group = this.group[ao.group];
        if (group && group != id && this.exist(group)) {
        	this.call[2].call(this.context, group);
            this.replace(group, id);
        }
        this.group[ao.group] = id;
    }
    //扩展标签页支持拖拽
    //DropAbledTabLabel.bindItemBehavior(tab);

    //标签的特殊处理
    specialTreatments(ao, tab, this);
}

//这个对象让标签页支持拖动
var DropAbledTabLabel = {
	//绑定容器
	init:function(tabObj){
		this.tabObj = tabObj;
		var ul = tabObj.main;
		this.majia_ul = ul.cloneNode(false);
		this.majia_ul.style.position = "absolute";
		this.jMajia_ul = $(this.majia_ul);
		ul.parentNode.appendChild(this.majia_ul);
	},
	//处理标签页行为
	bindItemBehavior:function(li){
		var This = this;
		$(li).mousedown(function(e){
			if(e.target.tagName=="A")return;
			This.onMouseDown(this,e);
	    });
	},
	onMouseDown:function(sender,e){
		var This = this;
		//将马甲ul清空
    	this.majia_ul.innerHTML = "";
    	//复制被点击的标签页元素li并添加到马甲ul中
    	var node = sender.cloneNode(true);
    	this.majia_ul.appendChild(node);
    	//$(node).find("p").html("哈哈哈哈");
    	
    	//复制被点击的li的x坐标
    	//因为ul是相对父元素定位的，所以left要减去父元素的left
    	var parentLeft = $(this.tabObj.main).offset().left;
    	var startLeft = $(sender).offset().left-parentLeft;
    	$(this.majia_ul).css("left",startLeft);
    	
    	this.majia_ul.style.visibility = "hidden";
    	this.current_li = sender;
    	
    	//鼠标移动的拖动效果
    	var startX = e.clientX;
    	var lastX = e.clientX;
    	$(document).mousemove(onMouseMove);
    	$(document).mouseup(onMouseUp);
    	GlobalDomEvent.on("mouseup",onGlobalMouseUp);
    	function clearEvents(){
    		$(document).unbind("mousemove",onMouseMove).unbind("mouseup",onMouseUp);
    		GlobalDomEvent.un("mouseup",onGlobalMouseUp)
    	}
    	function onGlobalMouseUp(e){
    		clearEvents();
    		This.moveEnd();
    	}
    	function onMouseUp(e){
    		clearEvents();
    		This.moveEnd();
    	}
    	function onMouseMove(e){
    		//当开始拖动的时候，隐藏被点击的li，显示马甲li
    		sender.style.visibility = "hidden";
    		This.majia_ul.style.visibility = "";
    		var newX = e.clientX;
    		//x轴平移
    		This.jMajia_ul.css("left",parseInt(This.majia_ul.style.left) + newX - lastX);
    		lastX = newX;
    		Utils.stopEvent(e);
    		This.testTabResort();
    		
    		if($.browser.msie && e.clientY<10){
    			clearEvents();
        		This.moveEnd();
    		}
    		
    		return false;
    	}
	},
	moveEnd:function(){
		this.majia_ul.innerHTML = "";
		//恢复被隐藏的li
		if(this.current_li)this.current_li.style.visibility = "";
	},
	//测试标签页是否重新排序
	testTabResort:function(){
		var changeX = this.jMajia_ul.offset().left - $(this.current_li).offset().left;
		//console.log("changeX:"+changeX);
		var count = Math.round(changeX / $(this.current_li).width());//可优化性能
		//console.log("count:"+count);
		if(count==0)return;
		if(count>0){
			var obj = this.current_li;
			for(var i=0;i<count && obj.nextSibling;i++){
				obj = obj.nextSibling;
			}
			$(obj).after(this.current_li);
		}else{
			count = -count;
			var obj = this.current_li;
			for(var i=0;i<count && obj.previousSibling;i++){
				obj = obj.previousSibling;
			}
			$(obj).before(this.current_li);
		}
	}
}


function fTabLabelExist(id){
    var tab = this.tabs[id];
    if (tab && tab.nodeType && tab.getAttribute("tabid")) {
        return tab;
    }
    return null;
}

function fTabLabelDel(id){
    var tab = this.exist(id);
    if (!tab) {
        //ch("Tab Del Error", null);
        return;
    }
    if (this.cur == tab) {
        this.cur = null;
    }
    this.main.removeChild(tab);
    delete this.tabs[id];
    this.count--;
    this.size();
    if (this.call[0]) {
        this.call[0].call(this.context,id);
    }
    this.update(id, false);
    if (!this.cur && this.history.length) {
        tab = this.history[this.history.length - 1];
        this.history.length--;
        if (tab == "welcome") { tab = "mailbox_1";}
        this.active(tab);
    }   
    // 控制标签管理菜单显示隐藏
    if ($App.getView('tabpage').tab.count > 5) {
        $('#tabsMenuIco').show();
    } else {
        $('#tabsMenuIco').hide();
    }
}

function fTabLabelActive(id,raiseEvent){

    var tab = this.exist(id);
    if (!tab) {
        //ch("Tab Active Error", null);
		//alert(frameworkMessage.TablabelNoTabError);
        return;
    }
    if (this.call[1]) {
        if (!this.call[1].call(this.context,id)) { //执行modelview.onActive
            return false;
        }
    }    
    if (this.cur) {    
        setActive(this.cur, false);
    }
    this.cur = tab;
    setActive(tab, true);
    this.update(id, true);
	
    function setActive(tab, visible)
    {
        if (visible)	//获得焦点
        {
            var id = tab.getAttribute("tabid");
            tab.className = "on";
            tab.setAttribute("aria-selected","true");
        
            if (id == "welcome")            
            { 
				tab.className = "home on";
            }else{
                tab.className = "on";
            }
        }
        else	//失去焦点
        {
            var id1 = tab.getAttribute("tabid");
            if (id1 == "welcome")
            {
				tab.className = "home";
    
            }else{
				tab.className = "";
            }
			tab.setAttribute("aria-selected","false");
            
        }
    }
}

function fTabLabelTitle(id, title){
    var tab = this.exist(id);
    if (!tab) {
        //ch("Tab Title Error", null);
        return;
    }
    var txt = tab.getElementsByTagName("span")[0];

    if (title) {
        txt.innerHTML = $T.Html.encode(title);
        tab.title = title;//.stripTags();
    }
    else {
        var t = $T.Html.decode(txt.innerHTML);
        return t;//.stripTags();
    }
}

function fTabLabelClose(id){
    var tab = this.exist(id);
    if (tab) {
        $(tab).find(".i_close").trigger("click");
       
    }
    else {
        //ch("Tab Close Error", null);
    }
}

function fTabLabelChange(id, title, name){
    var tab = this.exist(id);
    if (!tab) {
        //ch("Tab Change Error", null);
        return;
    }
    if (title) {
        this.title(id, title);
    }
    delete this.tabs[id];
    tab.setAttribute("tabid", name);
    this.tabs[name] = tab;
    var i, l = this.history.length;
    for (i = 0; i < l; i++) {
        if (this.history[i] == id) {
            this.history[i] = name;
            break;
        }
    }
}

function fTabLabelReplace(oldId, newId){
    var tab = this.exist(oldId) && this.exist(newId);
    if (!tab) {
        //ch("Tab Replace Error", null);
        return;
    }
    var title = this.title(newId);
    this.cur = this.exist(oldId);
    this.del(newId);
    this.change(oldId, title, newId);
    this.active(newId);
}

function fTabLabelSize(w){
    var tab, i, k = 7;
    if (w) {
        this.width = w;
    }else{
        var searchBarWidth=30; //275=搜索栏+关闭全部按钮的宽度
        this.width = $D.getWinWidth() - searchBarWidth - this.max;//210=左侧 文件夹的宽度
    }
    if ((this.count - 1) * this.max > this.width) {
        this.min =Math.floor(this.width/(this.count - 1));
        //this.min = Math.floor((this.width - this.count * k) / this.count);
    }
    else {
        this.min = this.max;
    }
    for (i in this.tabs) {
        tab = this.exist(i);
        if (tab){
            //tab.style.width=this.min-21+"px";
            var m= $(tab).text() == '收件箱' ? (this.max - 33) : (this.min-33); //33=标签页左右两边之和
            if(m<0.5){m=0;} //最小宽度为0，标签再多的话会溢出显示区域，无解
            //if(tab.getAttribute("tabid")!="welcome"){
                tab.style.width=m+"px";
            //}
        
        }
    }
}

function fTabLabelUpdate(id, flag){
    var i, l = this.history.length;
    var t, a = [];
    for (i = 0; i < l; i++) {
        t = this.history[i];
        if (t != id) {
            a[a.length] = t;
        }
    }
    if (flag) {
        a[a.length] = id;
    }
    this.history = a;
}

﻿
/**
* @fileOverview 标签菜单
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 标签菜单
    */

    M139.namespace('M2012.TabMenu.View', superClass.extend({

        /**
        *@lends M2012.TabMenu.View.prototype
        */		
		
		events:{
			"click #orignTabsManage": "onOrignTabsManage" //管理标签		
		},
		
        template: {
			
			menu:[ '<div id="tabsMenuList" class="tab-menu shadow" style="position:absolute;left:{left}px;top:{top}px;background:white;z-index:999">',
				'<ul class="tab-top">',
					'<li id="closeAllTabs" onClick="appView.closeAllTab()">',
						'<a href="javascript:;"> <i class="i-tab i-tab-c"></i>',
							'<span class="title">关闭所有标签</span>',
						'</a>',
					'</li>',
				'</ul>',
				'<div id="otherTabsMenu" class="sweb tab-ullist" style="display:none">',
					'<ul class="tab-list">',
					'</ul>',
				'</div>',
			'</div>'].join(""),
			
			item:['<li tabid="{tabid}" class="{css}" data-curr="{flag}" bh="tab_menulist_other">',
						'<span class="tab-text" title="{title}">{name}</span>',
						'<span class="i-tab i-tab-x" name="close" style="{display}" title="关闭"></span>',
				  '</li>'].join(''),
				  
			nothing: ''
        },

        initialize: function () {
            var self = this;
			this.model = appView.getView("tabpage").model;
			this.isChinaMobileUser = $User.isChinaMobileUser();
			this.initEvents();			
			return superClass.prototype.initialize.apply(this, arguments);
        },

		/** 定义Dom节点 */
		initContainer:function(){
			this.mainTab = this.mainTab || $('#divTab'); //标签容器
			this.tabsMenuList = this.tabsMenuList || $('#tabsMenuList'); //下拉菜单
			this.fixedTabsUl = this.fixedTabsUl || $('#fixedTabsUl'); //固定标签区域
			this.otherTabsMenu = this.otherTabsMenu || $('#otherTabsMenu'); //非固定标签区域
		},		
		
		/** 标签管理 */
		onOrignTabsManage:function(){
			M139.UI.TipMessage.show("数据加载中...");
			
			setTimeout(function(){
				if(M2012.TabManage){
					new M2012.TabManage.View().render();
					M139.UI.TipMessage.hide();
				}else{
					M139.core.utilCreateScriptTag({
						id: 'tabsmanagescript', 
						src: '/m2012/js/richmail/main/tabmanage.view.js', 
						charset: "utf-8"
					},function(){
						M139.UI.TipMessage.hide();
					})					
				}
			},500)
		},		
		
		/** 点击下拉菜单按钮 */
		onShowMenuClick:function(){	
			var self = this;
			var html = this.template.menu;
			this.container = $('#tabsMenuIco');
			var left = this.container.offset().left - 112;
			var top = this.container.offset().top + 31;
			html = $T.Utils.format(html,{
				left:left,
				top:top
			});
			
			if(!$('#tabsMenuList')[0]){
				$('body').append(html);
				this.setElement('#tabsMenuList');
				this.initContainer();
				this.onFixedTabsEvent();
				this.hoverTabsEvent();
			}else{
				this.$el.css({'left':left + 'px','top':top + 'px','display':''});
			}
			
			/*if(this.mainTab.find("li[tabid]:visible").length === 1){ //一个页签时比较特殊，要调整位置
				this.$el.css({'left':(left + 138) + 'px'});
			}*/
			
			this.showOtherTabsList();
			this.initFixCurrTab();
			
			BH('tab_menulist');
		},
		
		/** 当前固定标签 */
		initFixCurrTab:function(){
			var flag = true;
			var currTab = $App.getCurrentTab();
			var tabName = currTab.name;
			this.fixedTabsUl.find("li").removeClass('sel').removeAttr("data-curr");
			if(tabName === 'myCloudSubscribe'){ //云邮局统一
				tabName = 'googSubscription';
			}
			if(tabName === 'mailbox_1' && currTab.title !== '收件箱'){
				flag = false;
			}
			if(/calendar|addr|welcome|googSubscription|mailbox_1/i.test(tabName)){
				flag && this.fixedTabsUl.find("li[rel="+tabName+"]").addClass('sel').attr("data-curr",'1');
			}
		},		
		
		/** 其他非固定标签显示 */
		showOtherTabsList:function(){
			//var alltabs = appView.getView("tabpage").model.pages; //obj 顺序不对
			var self = this;
			var alltabs = [];
			var tabName = '';
			var tabTitle = '';
			//从节点里获取所有标签页
			this.mainTab.find('li:visible').each(function(i,val){
				tabName = $(this).attr('tabid') || '';
				tabTitle = $(this).attr('title') || '';
				if(/mailbox_/.test(tabName) && !self.isChinaMobileUser){ //非移动号不关闭邮件列表
					tabName = null; 
				}
				tabName && tabTitle && alltabs.push({
					name:tabName,
					title:tabTitle
				});
			});			
			var item = this.template.item;
			var fixedtabs = this.model.getFixedTabsData();
			var htmlstr = [];
			var closeTabsLen = 0;
			var str = '';
			var fixedRegs = /calendar/i; //日历
			fixedtabs = fixedtabs.concat(this.model.getInitTabsData());
			
			$.each(alltabs,function(i,val){	
				
				if( $.inArray(val.name, fixedtabs) == -1 && !fixedRegs.test(val.name)){
					closeTabsLen++;
					var isCurrTab = $App.getCurrentTab().name === val.name;
					str = $T.Utils.format(item,{
						tabid:val.name,
						css: isCurrTab ? 'sel' : '',
						title:$T.Utils.htmlEncode(val.title),
						flag: isCurrTab ? '1' : '',
						name:$T.Utils.htmlEncode(val.title),
						display: isCurrTab ? '' : 'display: none;'
					}); //防xss

					htmlstr.push(str);
				}
			});
			htmlstr = htmlstr.join('');
			
			var thisCon = this.otherTabsMenu;
			if(htmlstr){
				if(closeTabsLen > 7 ){
					thisCon.addClass("tab-ullist-h"); //滚动条
				}else{
					thisCon.removeClass("tab-ullist-h");				
				}
				thisCon.find('ul').html(htmlstr);
				thisCon.show();
				this.onOtherTabsEvent();
			}else{
				thisCon.find('ul').html('');
				thisCon.hide();
			}
			
			this.hoverTabsEvent(thisCon);
		},

		/** 鼠标hover事件 */
		hoverTabsEvent:function(container){
			var container = container || this.tabsMenuList;
			container.find("li").hover(function(){
				$(this).addClass('sel');
				$(this).find('.i-tab-x').show();
			},function(){
				if (!$(this).attr("data-curr")) {
					$(this).removeClass('sel');
					$(this).find('.i-tab-x').hide();
				}
			});
		},
		
		/** 固定标签绑定 */
		onFixedTabsEvent:function(){
			
			this.fixedTabsUl.delegate('li','click',function(){
				var key = $(this).attr('rel');
				var clickTab = $App.getTabByName(key);
				
				if(!key){return}
				if(clickTab){ //已打开标签
					if(clickTab.group === 'mailbox' && clickTab.title !== '收件箱'){
						$App.showMailbox(1);
						return;
					}
					$App.getView("tabpage").activeTab(key); //切换
				}else{ //未打开标签
					if(key === 'mailbox_1'){
						$App.showMailbox(1);
					}else{
						$App.show(key);					
					}
				}
			});
			
		},
		
		/** 非固定标签绑定 */
		onOtherTabsEvent:function(){		
			this.otherTabsMenu.find('li').bind('click',function(e){
				var tabid = $(this).attr('tabid'),
					jTarget = $(e.target);
					
				if(jTarget.attr('name') === 'close'){ //关闭
					$App.close(tabid);
				}
				
				$App.getView("tabpage").activeTab(tabid); //切换
			});
		},
		
		initEvents:function(){
			var self = this;
			
			//下拉按钮点击
			$('#divTab').delegate('#tabsMenuIco','click',function(){     
				self.onShowMenuClick();
			});
			//点击云邮局
			$('#divTab').delegate('li[tabid="googSubscription"]','click',function(){     
				top.BH("clickYUNmail");
			});
			//全局点击判断			
			top.$GlobalEvent.on("click", function (e) {
				var event = e.event;
				var element= (event.srcElement || event.target);
				if($(element).attr('id') === 'tabsMenuIco' || $(element).attr('class') === 'closeAll'){
				}else{
					self.tabsMenuList.hide();
				}
			});
			
		}

    }));


})(jQuery, _, M139);
﻿/**
 * @fileOverview 定义M2012.UserModel类.
 */

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.Model.ModelBase;
    var namespace = "M2012.UserModel";
    M139.namespace(namespace, superClass.extend(
    /**
    *@lends M2012.UserModel.prototype
    */
    {
    /**
    *管理用户常用属性类
    *@constructs M2012.UserModel
    *@param {Object} options 参数集合
    *@example
    */
    initialize: function (options) {

        return superClass.prototype.initialize.apply(this, arguments);
    },
    name: namespace,

    /**
    *获得用户别名
    *@param {String} type 别名类型：common普通别名(默认)|fetion飞信别名
    *@returns {String}
    *@example
    $User.getAliasName("common");//返回lifula
    */
    getAliasName: function (type) {
        type = type || "common";
        var result = $.grep(this.getAccountList(), function (n, i) {
            return n.type == type;
        });
        return result.length > 0 ? result[0].name : "";
    },
    /**
    *设置默认帐号时获得用户帐号类型 1 普通别名别名 2 手机号 3 飞信别名
    *@param {String} type 别名类型：common普通别名|fetion飞信别名|mobile手机号|passid通行证
    *@returns {Int}
    *@example
    $User.getAccountType("common");//返回1
    */
    getDefaultAccountType: function (type) {
        return { "common": 1, "mobile": 2, "fetion": 3, "passid": 4 }[type];
    },
    /**
    *返回用户分区号： 返回1为灰度，返回12为全网（测试线返回21是全网）
    *@returns {String}
    */
    getPartId: function () {
        var id = this.get("partid");
        if (!id) {
            id = getCookie("cookiepartid") || "";
            this.get("partid", id);
        }
        return id;
    },
    isGrayUser: function () { //是否灰度用户
        return this.getPartId() == "1";
    },
    /**
    *请用getPartId，这里为了兼容
    *@returns {String}
    */
    getPartid: function () {
        return this.getPartId();
    },

    /**
    *取老版本的UserData，获取用户不变属性的时候用，获取动态属性禁用，外部禁用
    *@inner
    */
    getUserDataObj: function () {
        var ud = {
            userNumber: "",
            "ssoSid": top.sid,
            provCode: "1"
        }
        
        return ud;
        /*var ud = this.get("UserData");
        if (!ud) {
            ud = M139.JSON.tryEval(M139.Text.Cookie.get("UserData"));
            if (!ud) {
                $App.setSessionOut({
                    type: "CookieUserData"
                });
                throw this.logger.getThrow("Cookie中UserData为空");
            }
            this.get("UserData", ud);
        }
        return ud;*/
        
    },

    /**
    *获取用户设置的默认字体.系统默认字体为： {size : '2',family : '宋体',color : '#000000'}
    */
    getDefaultFont: function () {
        var fontsStr = this.tryGetObjectValue($App.getConfig("UserAttrsAll"), 'fonts', '2;宋体;#000000;1.5');
        var fontsObj = {};
        var temp = fontsStr.split(';');
        fontsObj.size = temp[0];
        fontsObj.family = temp[1].replace(/'/g, '');
        fontsObj.color = temp[2];
        fontsObj.lineHeight = temp[3] || 1.5;
        fontsObj.lineHeight = fontsObj.lineHeight == 1 ? 1.2 : fontsObj.lineHeight; //单倍设为1.2，有些浏览器单倍文字会被截半（遮挡住）

        var mapSize = {
            6: "一号",
            5: "二号",
            4: "三号",
            3: "四号",
            2: "五号",
            1: "六号"
        };
        fontsObj.sizeText = mapSize[fontsObj.size];
        
        var mapLineHeight = {
            1.2 : "单倍",
            1.5 : "1.5倍",
            2   : "2倍",
            2.5 : "2.5倍"
        };
        fontsObj.lineHeightText = mapLineHeight[fontsObj.lineHeight];
        
        return fontsObj;
    },
    
    /**
    *获取用户设置的皮肤，系统默认的皮肤为 normal add by tkh
    */
    getSkinName: function () {
        var skinPath = $Cookie.get("SkinPath2");
        if (!/^skin_\w+$/.test(skinPath) || HIDDEN_SKIN[skinPath]) {
            skinPath = "skin_lightblue";
        } else if (skinPath == 'skin_normal') {
            skinPath = $Cookie.get("cookiepartid") == 1 ? "skin_red" : "skin_lightblue";
        }
        return skinPath;
    },

    /**
    *获取2.0皮肤映射的1.0值,给内嵌的老页面用
    */
    getSkinNameMatrix: function () {
        var skin = this.getSkinName();
        //新老皮肤近似值映射
        var skinMatch = { 
            "skin_red": "skin_red",
            'skin_pink': "skin_pink",
            'skin_golf': "new_skin_golf",
            'skin_light': "skin_g1",
            'skin_star': "new_skin_startrek",
            'skin_cat': "new_skin_riches",
			'skin_mstar': 'skin_snow',
			'skin_sunset': 'skin_mZone',
			'skin_paint': 'skin_2010',
			'skin_mcloud': 'skin_shibo',
            'skin_lightblue': 'skin_shibo',
			'skin_sunflower': 'skin_mZone',
			'skin_rose': 'new_skin_rabbit',
			'skin_flowers': 'new_skin_spring',
			'skin_brocade': 'skin_love',
			'skin_newyear': 'new_skin_rabbit',
			'skin_dew': 'skin_green',
			'skin_cherry': 'skin_pink',
			'skin_warm': 'new_skin_rabbit',
			'skin_lithe': 'skin_blue',
			'skin_night': 'new_skin_riches',
			'skin_morning': 'new_skin_rabbit',
            'skin_spring': 'skin_green',
            'skin_summer': 'skin_blue',
            'skin_autumn': 'skin_xmas',
            'skin_winter': 'skin_love',
            'skin_child': 'skin_mZone',
            'skin_woman': 'skin_pink',
            'skin_bluesky': "skin_shibo",
            'skin_claritBamboo':"skin_grassGreen",
            'skin_claritBrown': "skin_brown",
            'skin_claritGreen': "skin_paleGreen",
            'skin_claritPurple': "skin_lavender",
            'skin_claritRed': "skin_pinks"
        };
        var path = skinMatch[skin] || "skin_shibo";
        return path;
    },

    /**
    *获取一个对象的属性值（有容错处理）
    @param {Object} obj 对象名
    @param {String} key 属性名
    @param {Mixed} defaultValue 默认值(不传的话，无数据返回"")
    */
    tryGetObjectValue: function (obj, key, defaultValue) {
        defaultValue = (defaultValue === undefined ? "" : defaultValue);
        var value = (obj && obj[key]) || defaultValue;
        return value;
    },

    /**
    *获取GetMaindata输出的UserData属性值
    *@inner
    @param {String} key 属性名
    @param {Mixed} defaultValue 默认值(不传的话，无数据返回"")
    */
    tryGetUDValue: function (key, defaultValue) {
        return this.tryGetObjectValue($App.getConfig("UserData"), key, defaultValue);
    },

    /**
    *获取UserAttr属性值
    *@inner
    */
    tryGetUAttrValue: function (key, defaultValue) {
        return this.tryGetObjectValue($App.getConfig("UserAttrs"), key, defaultValue);
    },

    /**
    *获取PersonalData属性值
    *@inner
    */
    tryGetPDataValue: function (key, defaultValue) {
        return this.tryGetObjectValue($App.getConfig("PersonalData"), key, defaultValue);
    },

    /**
    *返回用户手机账号（带86）（原来的UserData.userNumber)
    *@returns {String}
    */
    getUid: function () {
        if ($App.getConfig && $App.getConfig("UserData")) {
            return $App.getConfig("UserData").UID;
        } else {
            return "";
        }
    },

    /**
    *返回用户手机账号（不带86）
    *@returns {String}
    */
    getShortUid: function () {
        return $T.Mobile.remove86(this.getUid());
    },
    /**
    * 读取是否已升级为移动通行证
    * @returns {void}
    */
    isUmcUserAsync: function (callback) {
        var data = $App.getConfig("UserData");
        var _callback = callback || new Function();
        
        if (typeof(data.isumcuser) != "undefined") {
            _callback(data.isumcuser);
            return;
        }
    
        M139.Timing.waitForReady(function(){
            try {
                var _data = $App.getConfig("UserData");
                if ( typeof(_data.isumcuser) != "undefined" ) {
                    return true;
                }
            } catch (ex) {
            }

            return false;
        }, function() {
            var _data2 = $App.getConfig("UserData");
            _callback(_data2.isumcuser);
        });
    },

    /**
    *是否是互联网账号
    */
    isInternetUser: function () {
        return this.getProvCode() === '83'
    },
    /*是否是中国移动用户*/
    isChinaMobileUser: function () {
        return this.getProvCode() <= 31 ? true : false;
    },

    /*是否非中国移动用户*/
    isNotChinaMobileUser: function () {
        return !this.isChinaMobileUser();
    },

    //判断涉及手机号的功能是否可用
    checkAvaibleForMobile: function (elList) {
        var self = this;
        if (this.isChinaMobileUser()) {//移动账号
            return true;
        } else {
            if (elList) { //点击后提示
                $(elList).unbind("click");
                if (typeof (elList) == "string") {
                    $(elList).live("click", function (e) {
                        self.showMobileLimitAlert();
                        e.stopPropagation();
                        e.preventDefault();
                    });
                } else {
                    $(elList).bind("click", function (e) {
                        self.showMobileLimitAlert();
                        e.stopPropagation();
                        e.preventDefault();
                    });
                }
            } else { //立即提示
                self.showMobileLimitAlert();
            }
            return false;
        }
    },

    showMobileLimitAlert: function () {
        if (this.isInternetUser()) { //互联网账号
            $Msg.alert("尊敬的用户：您暂时无法使用本功能。如需使用完整功能，请使用中国移动手机开通139邮箱。<a href='javascript:top.$App.show(\"account\",{anchor:\"accountAdmin\"}); $Msg.getCurrent().close();'>绑定手机账号</a>", { isHtml: true });
        } else {
            $Msg.alert("尊敬的用户：您暂时无法使用本功能。如需使用完整功能，请使用中国移动手机开通139邮箱。");
        }
    },

    /**
    *返回用户省份编号
    *@returns {String}
    */
    getProvCode: function () {
        window.PROVCODE = M139.Text.Cookie.get("provCode");
        if (window.PROVCODE) {
            return window.PROVCODE;
        }else{
            return this.getUserDataObj().provCode + "";
        }
    },

    /**
    *返回用户地区编号（城市），如果数据不具备返回空
    *@returns {String}
    */
    getAreaCode: function () {
        //cookie中的userdata没有areaCode这个属性
        return this.tryGetUDValue("areaCode");
    },

    /**
    *获得用户账号列表 返回[{"name":"lifula@139.com","type":"common"},{"name":"15889394143@139.com","type":"mobile"},{"name":"719094764@139.com","type":"fetion"}]
    *@return {Array} 无数据返回null
    */
    getAccountList: function () {
        try {
            var data = $App.getConfig("UserData");
            if (!data || !data.uidList) {
                return [];
            }

            var map = {
                "0": "common",
                "1": "fetion",
                "2": "mobile",
                "3": "passid"
            };

            var sortvalue = {
                "0": 4,
                "1": 2,
                "2": 3,
                "3": 1
            };

            var accountList = [];
            var hasMobile = false;

            for (var i=0, l=data.uidList, m=l.length, n; i < m, n=l[i]; i++) {
                accountList.push({ sortid: sortvalue[n.type] || sortvalue["0"], name: n.name, type: map[n.type] || map["0"] });
                hasMobile = hasMobile || n.type == "2";
            }

            if (!hasMobile && data.provCode !== "83") {
                accountList.push({ sortid: sortvalue["2"], name: $App.getAccountWithLocalDomain($Mobile.remove86(data.UID)), type: map["2"] });
            }

            accountList.sort(function(a, b){ return b.sortid - a.sortid });

            return accountList;

        } catch (e) { }
        return [];
    },

    /**
    *获得用户账号列表 返回["lifula@139.com", "15889394143@139.com", "719094764@139.com"]
    *@return {Array} 无数据返回空数组
    */
    getAccountListArray: function () {
        var list = this.getAccountList();
        var account = [];
        if (list) {
            for (var i = 0; i < list.length; i++) {
                //排除互联网账号的 号码@139.com 邮箱    最好是接口输出的时候就排除掉
                if (this.isInternetUser() && this.isInternetUserNumberEmail(list[i])) {
                    continue;
                }
                account.push(list[i].name);
            }
        }
        return account;
    },

    /**
    *判断互联网用户 号码@139.com 是否为假的手机号邮件地址
    *@param {String} email 号码@139.com
    *@return {Boolean} 无数据返回空数组
    */
    isInternetUserNumberEmail: function (email) {
        return M139.Text.Email.getAccount(email) == this.getShortUid();
    },

    /**
    *返回用户默认发信账号，异常返回:手机号@139.com
    *@returns {String}
    */
    getDefaultSender: function () {
        try {
            //todo
            return $App.getView("top").getDefaultSender();
        } catch (e) {
            if (!this.isInternetUser()) {
                return this.getShortUid() + "@" + $App.getMailDomain();
            } else {
                throw "$User.getDefaultSender()";
            }
        }
    },
    /**
    *设置默认发信账号
    *@returns {String}
    */
    setDefaultSender: function (account, type, callback) {
        //todo
        return $App.getView("top").setDefaultSender(account, type, callback);
    },

    /**
    *获取上一次登录时间，返回：2012-12-12 08:57:25，异常返回空字符
    *@returns {String}
    */
    getLastLoginDate: function () {
        return this.tryGetUDValue("lastLoginDate");
    },
    /**
    *获得用户登录使用的账号名（异常返回手机号，外网账号返回默认发信号）
    *@returns {String}
    */
    getLoginName: function () {
        var result = this.tryGetUDValue("loginName", this.getShortUid());
        if (/^8680/.test(result)) {
            result = M139.Text.Email.getAccount(this.getDefaultSender())
        }
        return result;
    },

    /**
    *获得用户手机卡类型（动感、神州行、全球通等），异常返回空字符
    *@returns {String}
    */
    getCardType: function () {
        return this.tryGetUDValue("cardType");
    },

    /**
    *获得用户套餐值(0010,0015,0016,0017)，异常返回空字符
    *@returns {String}
    */
    getServiceItem: function () {
        return this.tryGetUDValue("serviceItem");
    },

    /**
    *异步获取套餐数据
    *@param {Function} callback 回调函数
    */
    getMealData: function (callback) {
        var self = this;
        if (!this.isChinaMobileUser()) {//暂不请求套餐接口（后台会超时）
            return;
        }

        /*
        M139.RichMail.API.call("meal:getMealInfo", '', function (result) {
            if (result.responseData && result.responseData.code && result.responseData.code == 'S_OK') {
                var data = result.responseData["var"];
                if (self.packageName == '') {
                    self.packageName = data.serviceName;
                }
                callback && callback(data);
            } else {
                self.logger.error("getMealInfo returndata error", "[meal:getMealInfo]", result);
            }
        });
        */

        top.M139.Timing.waitForReady("$App.getConfig('mealInfo')", function () { 
            var data = $App.getConfig('mealInfo');
            if (self.packageName == '') {
                self.packageName = data.serviceName;
            }
            callback && callback(data);
        });
    },

    /**
    *获得用户套餐名（免费版、5元版、20元版等）
    *@returns {String}
    */
    getPackage: function () {
        return this.packageName;
    },
    packageName: '', //套餐名称

    /**
    *获得用户积分信息,不具备数据返回null
    *@returns {Object}
    */
    getUserIntegral: function () {
        return this.tryGetUDValue("mainUserIntegral", null);
    },
    /**
    *返回我的应用配置数据，不具备返回null
    *@returns {Object}
    */
    getMyApp: function () {
        return this.tryGetUDValue("myapp", null);
    },
    /**
    *返回我的应用ID
    *@returns {string}
    */
    getMyAppIdByKey: function(_key) {
        var apps = this.getMyApp();
		var result = $.grep(apps,function(val,n){
			return val.key == _key;
		});
		if(result && result[0]){return result[0].id}
		return null;
    },	
    /**
    *返回UserConfig用户配置参数表信息，不具备返回null
    *@returns {Object}
    */
    getUserConfig: function () {
        return this.tryGetUDValue("mainUserConfig", null);
    },
    /**
    *返回用户实验室信息，不具备返回null
    *@returns {Object}
    */
    getUecInfo: function () {
        return this.tryGetUDValue("uecInfo", null);
    },
    /**
    *返回uidList(用户账号列表)，不具备返回[]，不建议使用
    *@returns {Array}
    */
    getUidList: function () {
        return this.tryGetUDValue("uidList", []);
    },

    /**
    *套餐常量
    */
    levelEnum: {//用户等级
        free0010: "0010", //广东免费
        free0015: "0015", //非广东免费
        vip5: "0016", //5版
        vip20: "0017"//20版
    },

    /**
    * 【不推荐直接调用】获得用户套餐信息（最大发件个数、最大附件大小等）,不具备数据返回{}无属性对象
    * @returns {Object}
    */
    getVipInfo: function () {
        return this.tryGetUDValue("vipInfo", {});
    },

    /**
    * 传入键值，获取用户套餐配置值
    * @param {Number} _default 默认值
    * @returns {Number}
    */
    getCapacity: function (key, _default) {
        var map = {
            "diskfilesize": "DISK_1000001",
            "filesharecapacity": "DISK_1000002",
            "filesharesavedays": "DISK_1000003",

            "transcribetimelen": "MAIL_2000001",
            "mailgsendlimit": "MAIL_2000002",
            "maildaylimit": "MAIL_2000003",
            "addrstorenum": "MAIL_2000004",
            "maxannexsize": "MAIL_2000005",

            "vipidentity": "MAIL_2000006",
            "letterpaperid": "MAIL_2000007",
            "congracardid": "MAIL_2000008",
            "postcardid": "MAIL_2000009",
            "dermaid": "MAIL_2000010"
        };

        _default = typeof (_default) == "undefined" ? 0 : Number(_default);

        var max = _default;

        var vipinfo = this.getVipInfo();
        if (vipinfo[map[key]]) {
            max = parseInt(vipinfo[map[key]], 10);
        }

        if (isNaN(max)) {
            max = _default;
        }

        return max;
    },

    /**
    *返回发邮件最大收件人个数，无数据返回50
    *@returns {Number}
    */
    getMaxSend: function () {
        var max = 50;

        max = this.getCapacity("mailgsendlimit", max);

        // 兼容代码，服务端vipinfo返回失败时，不至出错。
        if (max < 50) {
            max = 50;
        }

        var serviceItem = $User.getServiceItem();
        if (max < 100 && serviceItem == this.levelEnum.vip5) {
            max = 100;
        } else {
            if (max < 100 && serviceItem == this.levelEnum.vip20) {
                max = 200;
            }
        }

        return max;
    },

    /**
    * 返回通讯录套餐联系人上限
    * @return {Number}
    */
    getMaxContactLimit: function () {
        var max = 3000;

        max = this.getCapacity("addrstorenum", max);

        if (max < 3000) {
            max = 3000;
        }

        var serviceItem = $User.getServiceItem();
        if (max < 3000 && serviceItem == this.levelEnum.vip5) {
            max = 6000;
        } else {
            if (max < 3000 && serviceItem == this.levelEnum.vip20) {
                max = 6000;
            }
        }

        //如果调用时，通讯录数据已加载，则该规则生效。
        //如果免费用户现有人数已超3000，则将上限放宽至4000
        var _model = $App.getModel("contacts");
        if (_model) {
            var _count = _model.getContactsCount();
            if (_count > 3000 && max < 4000) {
                max = 4000;
            }
        }

        return max;
    },

    /**
    *获得群邮件数据,无数据返回null
    *@returns {Object}
    */
    getGroupMailInfo: function () {
        return this.tryGetUDValue("groupMailInfo", null);
    },

    /**
    *返回用户发件人姓名，异常返回""
    *@returns {String}
    */
    getTrueName: function () {
        return this.tryGetUAttrValue("trueName", "");
    },
    getSendName: function () {
        var name = this.getTrueName() || this.getAliasName().replace(/@.+/, "") || this.getUid().replace(/^86/, "");
        return name;
    },
    /**
    *返回高级搜索是否开通 1|0，异常返回0
    *@returns {Number}
    */
    getFtsflag: function () {
        return this.tryGetUAttrValue("fts_flag", 0);
    },

    /**
    *返回默认每页显示邮件数，无数据返回默认值20
    *@returns {Number}
    */
    getDefaultPageSize: function () {
        return this.tryGetUAttrValue("defaultPageSize", 20);
    },
	
    /**
    *返回默认邮件列表密度
    *@returns {Number}
    */
    getPageStyle: function () {
		var val = $App.getCustomAttrs('pageStyle') || 1;
        return this.getPageStyleByKey(val);
    },	
	
    /**
    *返回默认邮件列表密度，无数据返回1(适中)
    *@returns {Number}
    */
    getPageStyleByKey: function (key) {
		var map = {
			'3':' td-small',
			'1':'',
			'2':' td-big'
		}
		return map[key] || '';
    },	
	
    /**
    *获取是否带原邮件回复:0或1，无数据返回默认值1
    *@returns {Number}
    */
    getReplyWithQuote: function () {
        return this.tryGetUAttrValue("replyWithQuote", 0);
    },

    /**
    *获得“邮件到达通知”配置数据，无数据返回null
    *@returns {Object}
    */
    getMailNotifyInfo: function () {
        return this.tryGetPDataValue("mailNotifyInfo", null);
    },
    /**
    *获得“邮箱伴侣”是否开通,这里返回字符串的"true"和"false" =_=
    *@returns {String}
    */
    getPartner: function () {
        return this.tryGetPDataValue("partner", "false");
    },

    /**
    *获得PushEmail是否开通,这里返回字符串的"true"和"false" =_=
    *@returns {String}
    */
    getPushemail: function () {
        return this.tryGetPDataValue("pushemail", "false");
    },

    /**
    *获得短彩信赠送、已发条数信息对象，无数据返回null
    *@returns {Object}
    */
    getSmsMMsInfo: function () {
        return $App.getConfig("PersonalData").smsMMsInfo || null
    },

    /**
    *获得自写彩信赠送条数，无数据返回""
    *@returns {String}
    */
    getPresentMmsCount: function () {
        return this.tryGetObjectValue(this.getSmsMMsInfo(), "PresentMmsCount", "");
    },

    /**
    *获得自写短信赠送条数，无数据返回""
    *@returns {String}
    */
    getPresentSmsCount: function () {
        return this.tryGetObjectValue(this.getSmsMMsInfo(), "PresentSmsCount", "");
    },

    /**
    *获得自写彩信已用条数，无数据返回""
    *@returns {String}
    */
    getUsedMmsCount: function () {
        return this.tryGetObjectValue(this.getSmsMMsInfo(), "UsedMmsCount", "");
    },
    getFreeSmsCount: function () {
        var count = this.getPresentSmsCount() - this.getUsedSmsCount();
        return count >= 0 ? count : 0;
    },
    getFreeMmsCount: function () {
        var count = this.getPresentMmsCount() - this.getUsedMmsCount();
        return count >= 0 ? count : 0;
    },
    needMailPartner: function () {
        var provCode = top.$User.getProvCode();
        if (provCode == 1 || provCode == 10 || provCode == 7) {
            return this.getPartner() == "false";

        } else {
            return false;
        }

    },
    /**
    *获得自写短信已用条数，无数据返回""
    *@returns {String}
    */
    getUsedSmsCount: function () {
        return this.tryGetObjectValue(this.getSmsMMsInfo(), "UsedSmsCount", "");
    },

    /**
    *获得用户的邮箱概要信息：已用空间、文件夹个数、未读邮件数
    *@returns {Object}
    */
    getMessageInfo: function () {
        return $App.getConfig("MessageInfo") || null;
    },

    /**
    *获得用户的邮箱概要信息：文件夹个数，无数据返回""
    *@returns {String}
    */
    getFolderCount: function () {
        return this.tryGetObjectValue(this.getMessageInfo(), "folderCount", "");
    },

    /**
    *获得用户的邮箱概要信息：获取邮箱容量，无数据返回""
    *@returns {String}
    */
    getLimitMessageSize: function () {
        return this.tryGetObjectValue(this.getMessageInfo(), "limitMessageSize", "");
    },

    /**
    *获得用户的邮箱概要信息：获取邮件总数，无数据返回""
    *@returns {String}
    */
    getMessageCount: function () {
        return this.tryGetObjectValue(this.getMessageInfo(), "messageCount", "");
    },

    /**
    *获得用户的邮箱概要信息：获取已用邮件容量，无数据返回""
    *@returns {String}
    */
    getMessageSize: function () {
        return this.tryGetObjectValue(this.getMessageInfo(), "messageSize", "");
    },

    /**
    *获得用户的邮箱概要信息：获取未读邮件总数，无数据返回""
    *@returns {String}
    */
    getUnreadMessageCount: function () {
        return this.tryGetObjectValue(this.getMessageInfo(), "unreadMessageCount", "");
    },



    /**
    *当前用户等级
    *@returns {string} 等级字符串
    */
    getUserLevel: function () {
        var serviceItem = this.getServiceItem();
        for (var e in this.levelEnum) {
            if (serviceItem && $.trim(serviceItem).toLowerCase() == $.trim(this.levelEnum[e]).toLowerCase()) {
                return serviceItem;
            }
        }
        //没有找到套餐定义，则返回免费用户
        return this.levelEnum.free0010;
    },
    getServerTime: function () {
        /*if ($App.getConfig("PersonalData")) {
        return $App.getConfig("PersonalData").serverDateTime;
        } else {
        return new Date();
        }*/
    },
    /**
    *得到等级字符
    *@param {string} type 标识如何组合vip字符
    *@returns {string} 等级字符串
    */
    getVipStr: function (type) {
        switch (type) {
            case "5,20":
                return this.levelEnum.vip5 + "," + this.levelEnum.vip20;
            case "20":
                return this.levelEnum.vip20;
            default:
                return this.levelEnum.free0010 + "," + this.levelEnum.free0015 + "," + this.levelEnum.vip5 + "," + this.levelEnum.vip20;
        }
    },

    /**
    *单元测试接口
    *@inner
    */
    unitTest: function () {
        for (var func in this) {
            if (func.indexOf("get") == 0 && _.isFunction(this[func])) {
                console.log(func + ":" + this[func]());
            }
        }
    }
}));

window.$User = new M2012.UserModel();
})(jQuery, _, M139);
﻿/**
 * @fileOverview 定义标准版的App类对象M2012.MainApplication
 */


(function (jQuery, Backbone, _, M139) {

    function enqueueMailInfo(mailinfo) {
        var _this = this;

        M139.core.utilCreateScriptTag(
            {
                id: "contact_inbox_async_method",
                src: $App.getResourceHost() + "/m2012/js/packs/m2012_contacts_saveinbox_async.pack.js",
                charset: "utf-8"
            },
            function() {
                //重写掉域内方法，达到第一次读信时，仅加载一次异步函数。
                enqueueMailInfo = function(_mailinfo) {
                    $App.trigger('app:mailreaded#savecontact', _mailinfo);
                };

                $App.trigger('app:mailreaded#savecontact', mailinfo);
            }
        );
    }

    var $ = jQuery;
    var superClass = M139.PageApplication;
    var isFirstLoadGetInfoSet = true;
    var isFirstLoadInitConfigData = true;
    var reloadFolderFirst = true;
    M139.namespace("M2012.MainApplication", superClass.extend(
    /**@lends M2012.MainApplication.prototype*/
   {
   /** 
   *顶层窗口的App类
   *@constructs M2012.MainApplication
   *@extends M139.PageApplication
   *@param {Object} options 初始化参数集
   *@example
   */
   initialize: function (options) {
       superClass.prototype.initialize.apply(this, arguments);
   },

   defaults: {
       /**@field*/
       name: "M2012.MainApplication"
   },

   /**主函数入口*/
   run: function () {
       // 赋值sid方便调用。
       window.sid = $T.Html.encode($App.query.sid); 

       // 新窗口写信：隐藏边栏，突出写信主体
       // 判断URL中包含新窗口写信的标识，且hash中没有字段表明新窗口状态已结束
       if (this.isNewWinCompose()) {
            $('#sub, #divTab, #header').hide();
            $('#top').children().not('a:first').hide()
            $('#top>a:first').attr('href', 'javascript:;').css('cursor', 'default');
           $('#main').removeClass('main').addClass("main_write").hide();
           $('#logoArea').addClass('Loading_Hidden_Top');
           $(window).bind('beforeunload', function() {
              var curTab = $App.getCurrentTab();
              if (curTab.name.indexOf('compose_') > -1 && $App.isNewWinCompose()) {
                  var mainView = $($App.getCurrentTab().element).find("iframe").get(0).contentWindow.mainView;
                  var hasEdited = mainView && mainView.model.compare();
                  if (hasEdited) {
                      return mainView.model.tipWords['CANCEL_SEND'];
                  }
              }
           });
       }

       this.registerView("folder", new M2012.Folder.View.FolderMain());
       this.loadLevel = 0;

       this.initConfigData();
       this.initEvents();

       this.initModels();


       this.initApi(); //初始化全局公共函数
       this.initSubViews();
       this.initOldTimesAdapter(); //旧版适配器
       this.initProductView(); //加载运营业务 暂不开放
       this.initSsoRedirect(); //页面跳转
	   this.getDiskAttConf();//获取超大附件是否自动存网盘的设置
       //注册频道，以模块的group || channel做为频道名
       this.registerChannel("welcome", { leftNav: "mail" ,defaultTab:"welcome"});
       this.registerChannel("addr", { leftNav: "none", defaultTab: "addr", hideTab: true });
       this.registerChannel("disk", { leftNav: "none", defaultTab: "diskDev", hideTab: true });
       this.registerChannel("calendar", { leftNav: "none", defaultTab: "calendar", hideTab: true });
       this.registerChannel("subscribe", { leftNav: "none", defaultTab: "googSubscription" });
       this.registerChannel("billCharge", { leftNav: "none", defaultTab: "billCharge", hideTab: true });
       this.registerChannel("note", { leftNav: "none",hideTab: false, withinMail: true});
       this.registerChannel("groupMail", { leftNav: "none", hideTab: false, withinMail: true });
       this.registerChannel("setting", { leftNav: function(){return ""}, defaultTab: "mail", hideTab: false, withinMail: true });
   },

   /**绑定事件处理
   *@inner
   **/
   initEvents: function () {
       var self = this;

        this.on("folderRendered", function () { //文件夹加载完成
            this.onResize();
        });

        var headerHeight = $(".headerTopMenu").height();

		function resizeMainView(){
			var bodyHeight = $(document.body).height();
			$("#mainContentBox").height(bodyHeight - headerHeight);
		}

		resizeMainView();

       $(window).resize(function () {
	       resizeMainView();
           self.onResize();
       });

       //全局快捷操作
       top.$GlobalEvent.on("keydown", function (e) {
           $App.keyReply(e.event, e.window);
       });
	   
	   //全局点击事件事件处理
	   top.$GlobalEvent.on("click", function (e) {
            if( M139.UI.TipMailView && M139.UI.TipMailView.rollTitleConfig && M139.UI.TipMailView.rollTitleConfig.run === 1){
				M139.UI.TipMailView.reSetDocTitle(); //还原浏览器标题
			}
       });
	   

       //超时显示重新登录对话框
       this.on("change:sessionOut", function (model, sessionOut) {
           if (sessionOut) {
               this.showSessionOutDialog();
           }
       });

       //通讯录主数据需要更新
       this.on("change:contact_maindata", function (model, value) {
           self.initContactData();
       });

       this.on("sms_send", function (args) { //短信已发条数++
           var count = args.count;
           var info = $User.getSmsMMsInfo();
           if (info) {
               info.UsedSmsCount = Number(info.UsedSmsCount) + count;
           }
       });
       this.on("mms_send", function (args) { //彩信已发条数++
           var count = args.count;
           var info = $User.getSmsMMsInfo();
           if (info) {
               info.UsedMmsCount = Number(info.UsedMmsCount) + count;
           }
       });

       if ($B.is.ie) {
           this.on("closeTab", function () {
               M139.Dom.fixIEFocus();
           });
       }
	  this.on("addCalendar", function(data,options){//添加日程
       		self.addCalendar(data,options);
	  });
       //用于欢迎页动态消息的局部刷新，需要放在顶层
	  this.on("showTab", function (m) {
	      if (m.name == "welcome") {
	          if (top.$App.dyinfoChanged || top.$App.dyinfoChanged1) {
	              var welcomeView = top.document.getElementById("welcome").contentWindow.welcomeView;
	              welcomeView && welcomeView.reloadProd();
	          }
              /*
	          //用于欢迎页唤起的的遮罩显示
	          if (top.showWelcomeMask != 'showed' && !top.SiteConfig.closeWelcomeMask && top.$User.getPartId() != '1' && location.host.indexOf(3) < 0) {
	              self.showWelcomeMask();
	          }*/

	          
	      }
	  })

        if (SiteConfig.saveinboxcontact) {
            var _this = this;
            _this.on('readmail', function(mailinfo) {
                enqueueMailInfo(mailinfo);
            });
        }

       //监控页面放大缩小，提示ctrl+0
       setTimeout(function () {
           try {
               if (!($B.is.ie && $B.getVersion() < 8)) {
                   M2012.UI.Tip.ZoomTip.watchZoom();
               }
           } catch (e) { }
       }, 5000);

       /**
        *加载异常后检测网络链接 trigger from m139.httpclient etc..
        */
       this.on("httperror", function (e) {
           if (e.isTimeout || e.status == 401 || e.status == 502 || e.loadResourceError) {
               M2012.UI.Tip.NetHealthCheck.check();
           }
       });

       // 统计日志 - 首页收件箱固定标签点击
       $('#divTab li').live("click", function () {
            var id = $(this).attr('tabid');
            if (id == 'mailbox_1') {
               BH('click_mailbox_tab');
           }
       });
   },

   showWelcomeMask: function () {
       var self = this;
       //默认加载页不是首页且第一次加载
       if (top.showWelcomeMask != 'loaded') {
           //不弹的情况：1.有设置默认显示版块，且不是欢迎页；2. 从1.0跳进来，打开指定标签页
           if (($Url.queryString('tab') && $Url.queryString('tab') != "welcome" )|| $Url.queryString('id')) {
               top.showWelcomeMask = 'loaded';
               return;
           }
           //标记已经弹过，再切换到欢迎就不会弹了
           top.showWelcomeMask = 'showed';
       }
       

       //等待数据加载完成
       top.M139.Timing.waitForReady("top.$App.getConfig('UserData')", function () {
           //3个if return，只为保证用户在欢迎页弹出遮罩；
           if (!top.$App.getConfig('UserData')) return;
           if (UserData.mainUserConfig && UserData.mainUserConfig.shownewuserguide && UserData.mainUserConfig.shownewuserguide[0] == "1") return;
           if ($App.getCurrentTab().name != "welcome") {
               top.showWelcomeMask = 'loaded';
               return;
           }
           if (!top.$App.getUserCustomInfo("newLoginGuide")) {
               top.$App.setUserCustomInfoNew({ "newLoginGuide": 1 }, function () {
                   _appendHtml('newLoginGuide');
               })
           }
       });


       function _appendHtml(html) {
           var html = self.template[html];
           $(top.document.body).append(html).find('maskContent_1').show();
           var content = $('#maskContent');

           //是否显示余额
           var isShowCharge = false;
           if (top.$User.getProvCode() == "1" && $("body").width() > 978) {
               isShowCharge = true;
               content.find('li').eq(2).find('a.showNext').text('下一个');
           }

           content.find('.showNext').click(function () {
               var li = $(this).parents('li').eq(0);
               li.hide();
               if (li.next().length > 0) {
                   var nextLi = li.next().show();
               }else if (isShowCharge) {
                   $('#chargeContent').show();
               }else {
                   hideAll();
               }
           })

           content.find('.closeGuide').click(function () { hideAll(); });
           $('#closeMaskCharge,#welcomeMask').click(function () { hideAll(); });
       }

       function hideAll() {
           $('#welcomeMask,#maskContent,#chargeContent').hide();

       }
   },

   template: {
       newLoginGuide: [
           '<div id="welcomeMask" class="layer_mask closeGuide" style="overflow: hidden; z-index: 5009;"></div>',
            '<style>',
            '.newGuideWrap{}',
            '.newGuideWrap .guideLayer{position:fixed;_position:absolute;z-index:5010;display:none;}',
            '.newGuideWrap .guide_01{display:block;width:813px;height:241px;left:50%;top:50%;margin:-120px 0 0 -406px;background:url(../images/201312/guide_01.png) no-repeat;}',
            '.newGuideWrap .guide_02{width:611px;height:246px;left:0;top:0;background:url(../images/201312/guide_02.png) no-repeat;}',
            '.newGuideWrap .guide_03{width:813px;height:241px;left:0;bottom:0;background:url(../images/201312/guide_03.png) no-repeat;}',
            '.newGuideWrap .closeGl{width:28px;height:28px;cursor:pointer;position:absolute;top:5px;right:5px;background:url(../images/201312/guide_close.png) no-repeat;}',
            '.newGuideWrap .guideTxtArea{position:absolute;top:105px;left:360px;color:white;}',
            '.newGuideWrap .btnG,.newGuideWrap .btnG span,.newGuideWrap .btnTb,.newGuideWrap .btnTb span{height:28px;line-height:28px;overflow:hidden;width:80px;text-align:center;font-size:14px;padding:0;}',
            '.newGuideWrap .btnTb,.newGuideWrap .btnTb span{border:0;}',
             '</style>',
           '<ol class="newGuideWrap" id="maskContent">',
             '<li class="guideLayer guide_01">',
                 '<div class="guideTxtArea">',
                     '<p class="fz_18" style="color: white;">了解新版首页框架变化，使用起来更顺畅</p>',
                     '<p class="mt_20"><a hidefocus="1" class="btnG showNext" href="javascript:void(0)"><span>开始了解</span></a><a hidefocus="1" class="btnTb ml_20 closeGuide" href="javascript:void(0)" ><span>跳 过</span></a></p>',
                 '</div>',
                 '<a href="javascript:;" class="closeGl closeGuide" style="top:10px;right:132px;"></a>',
             '</li>',
             '<li class="guideLayer guide_02">',
                 '<div class="guideTxtArea" style="top:160px;left:195px;">',
                     '<p class="fz_18" style="color: white;">核心功能全新组合　一目了然</p>',
                     '<p class="mt_20 ta_c"><a hidefocus="1" class="btnG showNext" href="javascript:void(0)" ><span>下一个</span></a></p>',
                 '</div>',
                 '<a href="javascript:;" class="closeGl closeGuide" style="top:77px;right:134px;"></a>',
             '</li>',
             '<li class="guideLayer guide_03" >',
                 '<div class="guideTxtArea" style="top:115px;left:413px;width:335px;">',
                     '<p class="fz_18" style="color: white;">特色应用 :  短信  彩信   发贺卡   附件夹…</p>',
                     '<p class="mt_20 ta_c"><a hidefocus="1" class="btnG showNext" href="javascript:void(0)" ><span>我知道了</span></a></p>',
                 '</div>',
                 '<a href="javascript:;"  class="closeGl closeGuide" style="top:25px;right:6px;" ></a>',
             '</li>',
         '</ol>',
       '<div class="callsGuidePop" id="chargeContent" style="display:none"><a href="javascript:" class="nextA" id="closeMaskCharge"></a></div>'].join("")
   },

   /**装载模块
   *@inner
   **/
   initModels: function () {


   },

   /** 页面跳转 */
   initSsoRedirect: function () {
       var ssoredirect = new M2012.SsoRedirect();
       var self=this;
       this.on("folderLoaded", function () {
           if (self.isDefaultEntryInvoke) { return; }
           self.isDefaultEntryInvoke = true;
           //进入默认标签
           var ssoId = $Url.queryString("id");
           if (!ssoId) {
               var defTab = self.getView("top").getDefaultEntrytab();
               if (defTab) {
                   var defTabGoto = {
                       /*'welcome': function() {
                          $App.show('welcome');
                       },*/
                       "addr": function () {
                          $App.show('addr');
                       },
                       "calendar": function () {
                           $App.show('calendar');
                       },
                       "googSubscription": function () {
                           $App.show('googSubscription');
                       },
                       "mailbox_1": function () {
                           //等待邮件基本参数加载成功后才能进收件箱
                           function gotoMailbox() {
                               $App.off("userAttrsLoad", gotoMailbox);
                               $App.showMailbox(1);
                           }
                           $App.on("userAttrsLoad", gotoMailbox);
                       },
                       'diskDev': function() {
                           $App.show('diskDev');
                       }
                   }
                   if (defTabGoto[defTab]) {
                       defTabGoto[defTab]();
                   }
               }
           }
       });
   },

    /** 加载运营业务
    此JS被合并到welcome.prod.main.pack.js里面了
    */
   initProductView: function () {


       setTimeout(function () { //异步执行，避免prodFuns还未定义
           $App.prodFuns = top.ProductFuns;
           var pfs = top.$App.prodFuns;
           //top.$App.on("userDataLoad", function () {//请不要加在这里面，防止两次加载，用户设置到欢迎页面时
           top.M139.Timing.waitForReady('top.$App.getConfig("UserData")', function () {

               if (top.SiteConfig.onlineTips && !top.$User.isNotChinaMobileUser()) pfs.showOnlineTips();

               //ie下问题
               setTimeout(function () {

                   if (top.SiteConfig.isShowLazyCard) pfs.loadLazyCard();

               }, 1000);

           });

           pfs.loadOperateTips();
       }, 100);
   },
   onUserDataComplete: function (callback) {
       if (!this.completeCallbackList) {
           this.completeCallbackList = [];
       }
       this.completeCallbackList.push(callback);
       this.checkUserDataComplete();


   },
   checkUserDataComplete: function () {
       if (this.loadLevel >= 2) {
           if (this.completeCallbackList) {
               /*for (var i = 0; i < this.completeCallbackList.length; i++) {
                   this.completeCallbackList[i]();
               }*/
               while (this.completeCallbackList.length>0) {
                   var fun = this.completeCallbackList.shift();
                   fun();
               }
           }
       }
   },
   /**加载用户信息数据
   @inner
   */
   initConfigData: function () {
       var self = this;

      // this.getMergeInfoData(); //合并接口

       this.initContactData();
       

       var loadCount = 0;
       this.loadAttrs1(function (o) {//加载user:getInitData
           loadCount++;
           checkComplete(o);
           //等待getInitData成功之后才加载文件夹
           
       });
       
       /*this.loadAttrs2(function (o) {//加载用户配置user:getAttrs
           loadCount++;
           checkComplete(o);

       });*/

       var attrsAll = {};
       function checkComplete(o) {
           /*for (elem in o) { //将两个attrs取并集
           if (elem) {
           attrsAll[elem] = o[elem];
           }
           }*/
           //if (loadCount == 2) { //loadattr1和loadattr2都加载成功了
               self.loadLevel++;
               self.isUserAttrsLoad = true;
               self.trigger("userAttrsLoad", self.getConfig("UserAttrsAll"));
               self.checkUserDataComplete();
               
           //}
       }

       this.getMainData();

        //getPersonal
        /*
        M139.RichMail.API.call("user:getPersonal", null, function (response) {
            if (response.responseData && response.responseData.code == "S_OK") {
               var ud = response.responseData["var"];
               self.registerConfig("PersonalData", ud);
               self.trigger("personalDataLoad", ud);
            }
        });*/
        
        /*
        top.M139.Timing.waitForReady("$App.getConfig('userMobileSetting')", function () { 
            var ud = $App.getConfig('userMobileSetting');
            self.registerConfig("PersonalData", ud);
            self.trigger("personalDataLoad", ud);
        });*/


       if (window.MessageInfo) {
           this.registerConfig("MessageInfo", MessageInfo);
       }

       $App.on("userAttrChange", function (args) {
           var _original_callback = args && args.callback;
           args = $.extend(args, {
               "callback": function () { //重新加载所有的用户数据
                   $App.getView("top").renderAccountList(self.getConfig("UserData")); //重新生成顶部导航

                   if (_original_callback) {
                       _original_callback();
                   }
               }
           });

           self.reloadUserAttrs(args);
       });

       //adlink
       this.getAdLinkData();
       //this.loadOperateTips();
   },
   //加载通讯录数据，必须在getMainData之后调用，因为通讯录的接口需要usernumber todo get usernumber from cookie
   initContactData: function (userNumber) {
       var self = this;
       var contacts = M2012.Contacts.getModel();
       this.registerModel("contacts", contacts);
       contacts.loadMainData({
           //testUrl:"/m2012/js/test/html/contactsData.js",//用测试数据
           //userNumber: $User.getUid()
       }, function (data) {
           self.registerConfig("ContactData", data);
           self.trigger("contactLoad", data);
       });

       contacts.on("update", function (options) {
           self.trigger("contactUpdate", options);
       });
   },


    //初始化个人信息
    initUserMainData:function(ud,callback){
        var self = this;
        if(ud){
            if (ud.UID == "8613632599010") { //测试桩代码
                ud.UID = "8680000000000";
            }
            self.registerConfig("UserData", ud);
            self.trigger("userDataLoad", ud);
            if (callback) { callback(ud) }                 
        }
        //self.logger.error("userMainData data error", "[info:getInfoSet]", response);
    },

    //初始化定义数据
    initMainInfoData:function(callback){
        var self = this;
        this.loadMWGetInfoSet(function (response) {
            
            if (response.responseData && response.responseData.code == "S_OK") {
                var data = response.responseData["var"];

		//邮箱体检
                if(data.healthyHistory){
                    self.registerConfig("healthyHistory", data.healthyHistory);
                }else{
                    self.logger.error("healthyHistory data error", "[info:getInfoSet]", response);
                }
                
                //用户的大量个人信息
                if(data.userMainData){
                    self.initUserMainData(data.userMainData,callback);
                }else{
                    self.logger.error("userMainData data error", "[info:getInfoSet]", response);
                }

                //套餐信息
                if(data.mealInfo){
                    self.registerConfig("mealInfo", data.mealInfo);
                }else{
                    self.logger.error("mealInfo data error", "[info:getInfoSet]", response);
                }

                //消息中心
                if(data.infoCenter){
                    self.registerConfig("infoCenter", data.infoCenter);
                }else{
                    self.logger.error("infoCenter data error", "[info:getInfoSet]", response);
                }

             
                //到达通知，邮箱伴侣，短信赠送条数已发条数
                if(data.userMobileSetting){
                    self.registerConfig("PersonalData", data.userMobileSetting);
                    self.trigger("personalDataLoad", data.userMobileSetting);
                }else{
                    self.logger.error("userMobileSetting data error", "[info:getInfoSet]", response);
                }

              
                //好友生日
                if(data.birthdayRemind){
                    self.registerConfig("birthdayRemind", data.birthdayRemind);
                }else{
                    self.logger.error("birthdayRemind data error", "[info:getInfoSet]", response);
                }
                self.loadLevel++;
                self.isInfoSetLoad = true;
                self.trigger("infoSetLoad", data);
                self.checkUserDataComplete();
               

            }else{
                self.logger.error("info:getInfoSet", "[info:getInfoSet]", response)
            }

       }); 
    },

    /**
       深复制json，使用欢迎页加载json，如果欢迎页刷新，对象将失效，所以要做克隆
    */
    deepCloneJSON: function (json) {
        if (!json) return json;
        if (typeof json !== "object") {
            return json;
        } else {
            if (_.isArray(json)) {
                var newArr = [];
                for (var i = 0, len = json.length; i < len; i++) {
                    newArr.push(arguments.callee.call(this, json[i]));
                }
                return newArr;
            }else{
                var newObj = {};
                for (var key in json) {
                    if (json.hasOwnProperty(key)) {
                        newObj[key] = arguments.callee.call(this, json[key]);
                    }
                }
                return newObj;
            }
        }
    },

    /**
       判断是否显示欢迎页，外网用户不显示欢迎页 
    */
    isShowWelcomePage: function () {
        var iframe = document.getElementById("welcome");
        if (iframe && iframe.tagName === "IFRAME") {
            return true;
        }else{
            return $User.isChinaMobileUser();
        }
    },

    loadMWGetInfoSet: function (callback) {
        if (SiteConfig.m2012NodeServerRelease && this.isShowWelcomePage() && isFirstLoadGetInfoSet) {
            //第一次加载，尝试读欢迎页内联JSON
            var data = getWelcomeInlinedJSON();
            if (data) {
                setTimeout(function () {
                    inlinedCallback(data, true);
                }, 0);
            } else {
                this.on("welcome_getInfoSet_load", function (data) {
                    inlinedCallback(data, true);
                });
            }
        } else {
            M139.RichMail.API.call("info:getInfoSet", null, callback);
        }
        isFirstLoadGetInfoSet = false;
        function inlinedCallback(data, todoClone) {
            if (todoClone) {
                data = $App.deepCloneJSON(data);
            }
            callback({
                responseData: data
            });
            inlinedCallback = new Function();//防止欢迎页和页面自己加载的调用2次回调
        }
        function getWelcomeInlinedJSON() {
            var json = null;
            try{
                json = document.getElementById("welcome").contentWindow.inlinedGetInfoSetJSON;
            } catch (e) { }
            return json;
        }
    },

    loadRMInitDataConfig: function (callback) {
        if (SiteConfig.m2012NodeServerRelease && this.isShowWelcomePage() && isFirstLoadInitConfigData) {
            //第一次加载，尝试读欢迎页内联JSON
            var data = getWelcomeInlinedJSON();
            if (data) {
                setTimeout(function () {
                    inlinedCallback(data, true);
                }, 0);
            } else {
                this.on("welcome_getInitDataConfig_load", function (data) {
                    clearInterval(waitTimer);
                    inlinedCallback(data, true);
                });
                //如果欢迎页1秒内未加载出来
                var waitTimer = setTimeout(function () {
                    M139.RichMail.API.call("user:getInitDataConfig", {visiblePurgeBoxFlag: 1} , function (response) {
                        inlinedCallback(response.responseData);
                    });
                }, 1000);
            }
        } else {
            M139.RichMail.API.call("user:getInitDataConfig", {visiblePurgeBoxFlag: 1} , callback);
        }
        isFirstLoadInitConfigData = false;
        function inlinedCallback(data, todoClone) {
            if (todoClone) {
                data = $App.deepCloneJSON(data);
            }
            callback({
                responseData: data
            });
            inlinedCallback = new Function();//防止欢迎页和页面自己加载的调用2次回调
        }
        function getWelcomeInlinedJSON() {
            var json = null;
            try {
                json = document.getElementById("welcome").contentWindow.inlinedInitDataConfigJSON;
            } catch (e) { }
            return json;
        }
    },

   /* 加载主要接口数据（合并7个接口，对应如下）
      "mealInfo":"meal:getMealInfo", //套餐信息
      "infoCenter":"user:getInfoCenter" //消息中心
      "userMainData":"user:getMainData" //用户的大量个人信息
      "userMobileSetting":"user:getPersonal" //到达通知，邮箱伴侣，短信赠送条数已发条数
      "singInInfo":"poperations:singInit" //签到信息
      "weatherInfo":"weather:getDefaultWeather" //天气预报
      "birthdayRemind":"card:birthdayRemind" //原贺卡站点的已发生日提醒联系人接口   
   */
   getMainData: function (callback) {
        var self = this;
        
        if(!$App.getConfig('UserData')){ //第一次
            self.initMainInfoData(callback);
        }else{ //下一次
            M139.RichMail.API.call("user:getMainData", null, function (response) {
                if (response.responseData && response.responseData.code == "S_OK") {
                    var ud = response.responseData["var"];
                    self.initUserMainData(ud,callback);
                }else{
                    self.logger.error("getMainData data error", "[user:getMainData]", response)
                }
            });
        }
   },
   //获取是否自动存网盘
   getDiskAttConf: function(callback){
        var self = this;

        if (typeof callback !== "function") {
            callback = $.noop;
        }

        M139.RichMail.API.call("disk:getDiskAttConf", null, function (result) {
	        var data = result.responseData || {};
            if (data.code == "S_OK") {
                $App.setConfig('DiskAttConf', 'autoSaveToDisk', data['var'].largerAttSave);
            } else {
                self.logger.error("getDiskAttConf data error", "[disk:getDiskAttConf]", result);
            }
            callback(data);
        });
   },
   //设置是否自动存网盘
   setDiskAttConf: function(enabled, callback){
        var self = this;
        if (typeof callback !== "function") {
            callback = $.noop;
        }

        M139.RichMail.API.call("disk:updateDiskAttConf", {"enable": String(Boolean(enabled))}, function (result) {
	        var data = result.responseData || {};
            if(data.code == "S_OK") {
                $App.setConfig('DiskAttConf', 'autoSaveToDisk', Boolean(enabled) ? "0" : "1");
            } else {
                self.logger.error("updateDiskAttConf failed", "[disk:updateDiskAttConf]", result);
            }
	        callback(data);
        })
   },

    /** 获取广告数据 */
    getAdLinkData: function (callback) {
        var self = this;
        var url = '/sharpapi/userconfig/service/ajaxhandler.ashx?func=user:adlink&sid=' + sid;
        var gurl = M139.HttpRouter.getNoProxyUrl(url);
        $.getScript(gurl, function() {
            if (AdLink) {
                self.registerConfig("AdLink", AdLink);
                callback && callback(AdLink);
            } else {
                callback && callback(null);
            }
        });
    },


   //通过main_ajax加载userAttrs数据，只有一部分
   loadAttrs1: function (callback, onloading) {
       var self = this;
       this.loadRMInitDataConfig(function (response) {
           if (response.responseData.code == "S_OK") {
               //var ud = M139.JSON.tryEval(M139.Text.Cookie.get("UserData"));
               var data = response.responseData["var"];

               //注册从rm加载的用户属性
               if (data.userAttrs) { self.registerConfig("UserAttrs", data.userAttrs); } //用户基本参数
               if (data.messageInfo) { self.registerConfig("MessageInfo", data.messageInfo); } //邮件总数，未读总数，邮件容量
               if (data.PopList) {
                   self.registerConfig("PopList", data.PopList);
                   window.PopList = data.PopList; //容错。
               } //代收列表
               if (data.SignList) { self.registerConfig("SignList", data.SignList); } //签名列表
               if (data.folderList) { self.registerConfig("FolderList", data.folderList); } //文件夹列表

               //注册user:getAttrs
               if (data.userConfig) { self.registerConfig("UserAttrsAll", data.userConfig); }

               if ($.isFunction(onloading)) {
                   onloading(self.getConfig("UserAttrs"));
               }
               self.registerConfig("InitData", response.responseData);  //存储getInitData返回值
               //加载文件夹
               self.getView("folder").render(true, function () {
                   $App.trigger("folderLoaded", {}); //文件夹首次加载消息
                   if(reloadFolderFirst){
                      setTimeout('$App.trigger("reloadFolder");reloadFolderFirst=false;',200); 
                   }
               });

               if (callback) { callback(self.getConfig("UserAttrs")); }

               M139.RichMail.API.call("user:moveHOMail", {});//割接账单
           }

       });
   },
   //通过getAttrs加载userAttrs数据，只有另外一部分
   loadAttrs2: function (callback) {
       var self = this;
       //从服务端加载所有的用户配置信息
       var data = {
           attrIds: []
       }
       $RM.getAttrs(data, function (result) {
           self.registerConfig("UserAttrsAll", result["var"]);
           callback(result["var"]);
       });

   },
   reloadUserAttrs: function (args) {
       var self = this;
       var loaded = 0;
       function loadComplate() {
           loaded++;
           if (loaded == 2) {
               $App.trigger("userAttrsLoad", self.getConfig("UserAttrsAll"));
               $App.trigger("userDataLoad", self.getConfig("UserData"));
               if (args && $.isFunction(args.callback)) {
                   args.callback();
               }
           }
       }
       this.loadAttrs1(loadComplate, function (userattrs) {
           if (args && typeof (args.trueName) != "undefined") { //后台接口取不到最新的truename，直接改本地变量
               userattrs.trueName = args.trueName;
           }
       });
       //this.loadAttrs2(loadComplate);
       this.getMainData(loadComplate);

   },
   
   /**@inner*/
   changeSkin : function(name){
   		var skinName = name || $User.getSkinName();
   		var link = $("#skinLink");
   		var href = link.attr('href');

      // 根据当天时间段变化的皮肤，进行匹配
      if(isAlternateSkin(skinName)){
        skinName = chooseAlternateSkin(skinName);
      }

   		href = href.replace(/skin_[^_]+/, skinName);
   		if ($B.is.firefox) {
            //火狐下先预加载css,否则切换过程会渲染凌乱
          $('<img src="' + href + '"/>').bind("error", function () {
              setTimeout(function () {
                  link.attr('href', href);
              }, 500);
          });
      } else {
          link.attr('href', href);
      }

      var bgImg = $('#skinBgImg');
      if (skinName.indexOf('_clarit') > -1) {
          var src = '../images/skin/'+ skinName.split('_')[1] +'/skinBody.jpg';
          bgImg.attr('src', src);
          $('#skinBgSub').show();
      } else {
          bgImg.attr('src', '');
          $('#skinBgSub').hide();
      }
       
        
   		setTimeout(function () {

          //处理1.0的iframe
   		    eachFrames(window, function (win) {
   		        if (win.Utils && win.Utils.loadSkinCss) {
   		            win.Utils.loadSkinCss("", win.document);
   		        }
   		    });

          // 处理2.0
          var moduleArr = ['#welcome', '#addr', '#calendar', '#diskDev', '#googSubscription', '#groupMail'];
          for (var i = moduleArr.length; i--;) {
              var iframe = $(moduleArr[i])[0];
              if (iframe) {
                  try {
                      $App.setModuleSkinCSS(iframe.contentWindow.document);
                  } catch (e) { console.log(e); }
              }
          }

   		    function eachFrames(win, func) {
   		        try {
   		            var frames = win.frames;
   		            for (var i = 0; i < frames.length; i++) {
   		                try {
   		                    func(frames[i]);
   		                    eachFrames(frames[i], func);
   		                } catch (e) { }
   		            }
   		        } catch (e) { }
   		    }
   		}, 100);
   },

   setModuleSkinCSS: function(doc) {
      if (!doc) {
          throw new Error('请传入document对象');
          return;
      }

      var skinName = top.$User.getSkinName();
      // 根据当天时间段变化的皮肤，进行匹配
      if(isAlternateSkin(skinName)){
          skinName = chooseAlternateSkin(skinName);
      }
      var link = $('#moduleSkinCSS', doc || document);
      var href = link.attr('href');

      // 样式节点已存在
      if (link[0]) {
          if (href.indexOf(skinName) == -1) {
              href = href.replace(/skin_[^.]+/, skinName);
              link.attr('href', href);
          }
      // 初次加载
      } else {
          href = top.m2012ResourceDomain + '/m2012/css/skin/' + skinName + '.css'
          var version = top.getResourceVersion(skinName + '.css')
          if (version) {
              href += '?v=' + version;
          }
          $('head:eq(0)', doc).append('<link id="moduleSkinCSS" rel="stylesheet" href="' + href + '" type="text/css" />');
      }
   },

   /**
    * top.$App.trigger("addCalendar",{startTime:"0800",endTime:"1000",extInfos:[{appName:''}]},
    *                            {fnSuccess:function(){alert(1);}}
    *             );
    */
   addCalendar:function(data,callbackObj){
   		callbackObj = callbackObj || {};
   		var callName = callbackObj.callName || 'addBirthdayCalendar';
   		//初始回调函数
 	 	var fnback = function(){};
     	var fnSuccess = callbackObj.fnSuccess || fnback,
	           fnFail = callbackObj.fnFail || fnback , 
	          fnError = fnError || fnback;
	    //初始基本数据
     	data =  $.extend({comeFrom:0,calendarType:10,labelId:6,//生日标签
	     					recMySms:1,recMyEmail:0,beforeTime:15,
	     					sendInterval : 6,enable:1,beforeType:0,
	     					startTime:"0800",endTime:"2359"
	                        },data);
	    //调用
	 	top.M139.RichMail.API.call('calendar:'+callName, data, function(res){
	 	 	
	 	 		if( !res || typeof res != 'object' ){
                    fnError();
                    return;
                }
                
                var json = res.responseData;
                if( !json || typeof json != 'object' ){//出错
                    fnError();
                    return;
                }
                
                var code = json['code'];
                if( code == 'S_OK' ){ //成功
                    var data = json['var'] || {};
                    fnSuccess( data, json ); 
                } else {
                    fnFail( code, json ); 
                }
	 	 });
   	
   },
   /**@inner*/
   initSubViews: function () {
       //页面主容器
       var self = this;
       var containerMain = document.getElementById("div_main");

       this.registerView("tabpage", new TabPageView({ container: containerMain}));
       this.registerView("mailbox", new M2012.Mailbox.View.Main());
       this.registerView("mailbox_other",new M2012.Mailbox.View.Main({ multiInstance: true}));
     
     
       this.getView("tabpage").render(); //标签页    
     
       this.registerView("tabmenu", new M2012.TabMenu.View());     //标签下拉菜单

       this.registerView("remind", new M2012.Remind.View());
       this.registerView("top", new M2012.Main.View.TopView());
       this.getView("top").render();
       //固定标签，读取配置数据    
       // 必须放在"top"视图注册之后，存在依赖关系
       this.createFixedTabs();


       this.registerView("contextmenu", new M2012.Mailbox.View.ContextMenu());
       var mailboxModel = this.getView("mailbox").model;
       if ($B.is.webkit || $B.is.firefox) {
           setTimeout(function () {
               //mailboxModel.fillPreloadData();
               /*var composeFrame =$("<iframe src=\"/m2012/html/compose.html?sid=" + $App.getSid() + "\" style=\"display:none\"></iframe>");
               $(document.body).append(composeFrame);
               composeFrame.load(function () { //预加载写信页资源，加载成功后移除
                   setTimeout(function () {
                       composeFrame.attr("src", "");
                       composeFrame.remove();
                   }, 1000);
               });*/
               $.get("/m2012/html/compose.html?sid=" + $App.getSid());
               /*$.get("/m2012/html/editor_blank.htm?sid=" + $App.getSid());
               if (window.Config_FileVersion) { //预加载写信页js
                   new Image().src=(m2012ResourceDomain + "/m2012/js/packs/compose.html.pack.js?v=" + window.Config_FileVersion["compose.html.pack.js"]);
               }*/
           }, 2000);
       }
       this.registerView("command", new M2012.Mailbox.View.Command({ model: mailboxModel })); //实例化command命令执行类

       if ($User.isChinaMobileUser()) {
           var fetionImView = new M2012.Fetionim.View();
           fetionImView.render();
       }else{
           $('#fetionElemTop').hide();
       }
   },
   /** 创建固定标签 
   * 要区分是否设置过固定标签 
   * 如从未设置过则显示：欢迎页、通讯录、日历、精品订阅（云邮局） 【非移动：欢迎页、通讯录、精品订阅】
   * 设置过则显示：按照设置的显示，若固定标签不包含收件箱，则默认显示收件箱（移动用户可关闭）。
   */ 
   createFixedTabs: function () {

       var self = this;
       var frameView = new FrameView({ parent: this.getView("tabpage") });

       self.getView("tabpage").createOrignTabs(["mailbox_1"], self.getView("mailbox"));
       if ($User.isChinaMobileUser()) { //是移动用户才显示欢迎页
           self.show("welcome");
       }

       top.$App.onUserDataComplete(function () {
           self.getView("top").showTopFixedTabs();           
           // 由于搜索提示语初始化需要依据当前模块，所以放在这里初始化
           $App.getView('top').preInitSearch();
           var fixedtabs = self.getView("tabpage").model.getFixedTabsData(); //固定标签数据
           setTimeout(function () {
               /*if (fixedtabs[0] && $.trim(fixedtabs[0]) != "/>") {
                   self.getView("tabpage").createOrignTabs(fixedtabs, frameView); //打开固定标签
               }
               if ($App.getCustomAttrs('hasSetFixedTabs') == '' || $App.getCustomAttrs('fixedtabs').indexOf('mailbox') === -1) {
                   self.getView("tabpage").createOrignTabs(["mailbox_1"], self.getView("mailbox")); //未设置过的或不固定收件箱
               }*/
               $App.trigger("initSsoRedirect", {});
               //TODO 改变标签页顺序,收件箱放最后
               if ($App.query.tab && !$App.query.id) {
                   var tabDiv = document.getElementById('divTab');
                   var tabItems = tabDiv.getElementsByTagName('li');
                   for (var i = 0; i < tabItems.length; i++) {
                       var tabItem = tabItems[i];
                       //收件箱不在最后,要调整
                       if (tabItem.getAttribute('tabid') == "mailbox_1" && i != tabItems.length - 1) {
                           tabItem.parentNode.insertBefore(tabItem, tabItems[tabItems.length - 1]);
                           break;
                       }
                   }
               }
           }, 100);

       });
       //$('#tabsMenuIco').show();

   },

   initOldTimesAdapter: function () {

       var vm = new M2012.MatrixVM();
       vm.start();


   },

   _defResource: "http://images.139cm.com",

   getResourceHost: function () {
       var rescfg = top.m2012ResourceDomain;

       if (rescfg) {
           return rescfg;
       }

       try {
           rescfg = top.domainList.global.rmResourcePath;
       } catch (ex) {
       }

       rescfg = rescfg.match(/^(http:\/\/)?([^\/]+)/i)[0];
       if (rescfg) {
           return rescfg;
       }

       return this._defResource;
   },

   getResourcePath: function () {
       try {
           return top.domainList.global.rmResourcePath;
       } catch (ex) {
           try {
               return top.rmResourcePath;
           } catch (ex1) {

           }
       }
       return this._defResource + "/m2012";
   },
   getSiteConfig: function (key) {
       return SiteConfig[key];
   },
   /**
   *增加一些快速使用的API
   *@inner
   */
   initApi: function () {
       jQuery.extend(this,
       /**@lends M2012.MainApplication.prototype*/
               {
               /**
               *获得sid
               */
               getSid: function () {
                   return $T.Html.encode(this.query.sid);
               },

               /**
               *获取邮件域名:139.com,rd139com,hmg1.rd139.com
               */
               getMailDomain: function () {
                   return SiteConfig.mailDomain || "139.com";
               },

               /**
               * 使用本域邮件域名来组合成一个帐号
               * @param {String} account 邮件帐号，无邮件域
               */
               getAccountWithLocalDomain: function (account) {
                   return account + "@" + $App.getMailDomain();
               },

               /**
               * 使用本域邮件域名来组合成一个帐号
               * @param {String} account 邮件帐号（完整，带邮件域）
               */
               isLocalDomainAccount: function (fullaccount) {
                   return $Email.getDomain(fullaccount) === $App.getMailDomain();
               },


               //获取是否带原邮件回复 todo 直接调用$User
               getReplyWithQuote: function () {
                   return $User.getReplyWithQuote();
               },

               /**
               *获取代收账户列表
               */
               getPopList: function () {
                   return $App.getConfig("PopList") ? $App.getConfig("PopList") : [];
               },

               /**
               *获取签名列表
               */
               getSignList: function () {
                   return $App.getConfig("SignList") ? $App.getConfig("SignList") : [];
               },

               //是否信窗口读信
               isNewWin: function () {
                   return location.search.indexOf("t=newwin") > -1;
               },

               //是否会话模式命令
               isSessionCommand: function (command) {
                  var map = {
                      'delete':true,
                      'move':true,
                      'mark':true
                  };
                  var flag = map[command] && $App.isSessionMode() && $App.isSessionFid($App.getCurrentFid());
                  if ($App.getCurrentTab().group == 'mailbox' || $App.getCurrentTab().group.indexOf('mailsub_') >=0) { //列表页
                      return flag && !$App.getCurrentTab().view.model.get('isSearchMode');
                  }else{ //读信页
                     return flag;
                  }
               },

               /**
               *读邮件,如果是列表中存在的邮件，第二个参数mailData可以不传递，如果是列表中不存在的邮件，则需要传递
               *@param {String} mid 邮件的id
               *@param {Boolean} win 是否新窗口读信
               *@param {number} currFid 当前文件夹
               */
               readMail: function (mid, win, currFid, options) {
                   var self = this;
                   var readmailview = new M2012.ReadMail.View();
                   var returnobj = readmailview.callReadMail(mid, win, currFid, options);
                   if (returnobj) {
                       return returnobj;
                   }
               },


               /**  
               添加黑白名单 
               *@param {Object} e 点击的元素  $(e.currentTarget).attr("key")  key的值："black","white"
               *@param {Object} options 黑白名单的名称options={name:"dfs@fsdf.fsd"}
               */
               addBlackWhite: function (e, options, callback) {
                   if (typeof (top.addBlackWhiteView) != "undefined") {
                       top.addBlackWhiteView.addBlackWhite(e, options, callback);
                   }
                   else {
                       M139.registerJS("M2012.Settings.Spam", "packs/spam.html.pack.js?v=" + Math.random());
                       M139.requireJS(['M2012.Settings.Spam'], function () {
                           top.addBlackWhiteView = new M2012.Settings.Spam.View();
                           top.addBlackWhiteView.addBlackWhite(e, options, callback);
                       });
                   }
               },

               /**  读信正文输出 */
               writeContent: function (dataSource, win) {
                   var readmailcontentview = new M2012.ReadMail.View.ReadMailContent();
                   readmailcontentview.writeContent(dataSource, win);
               },

               showBill: function (type) {
                   //$("#billTab li").removeClass("on");
                   var m = this.getView("mailbox_other").model;
                   
                   if (type == 2) { //我的账单
                       //$("#billTab li").eq(1).addClass("on");
                       m.set("billTab", 0);
                       BH("service_mail_load");
                       this.searchMail({
                           fid: 1, exceptFids: [4], isFullSearch: 0, flags: { billFlag: 1 }, condictions: [
                               {
                                   field: "logoType",
                                   operator: "GE",
                                   value: 0
                               },
                               {
                               field: "logoType",
                               operator: "LT",
                               value: 2
                           }]
                       });
                   } else if (type == 1) {//我的服务
                       //$("#billTab li").eq(2).addClass("on");
                       m.set("billTab", 1);
                       BH("my_service_load");
                       this.searchMail({
                           fid: 1, exceptFids: [4], isFullSearch: 0, flags: { billFlag: 1 }, condictions: [{
                               field: "logoType",
                               operator: "GE",
                               value: 2
                           }]
                       });
                   } else if (type == 4) {//语音信箱
                       //$("#billTab li").eq(2).addClass("on");
                       m.set("billTab", 3);
                       BH("my_service_load");
                       this.searchMail({
                           fid: 1, exceptFids: [4], isFullSearch: 0, flags: { billFlag: 1 }, condictions: [{
                               field: "logoType",
                               operator: "=",
                               value: 4
                           }]
                       });
                   }
               },
               showSubscribe: function (sendId, subscribeName) {
                
                   var view;
                   // 订阅邮件入口调用showSubscribe（true），要进行区分
                   if (sendId && typeof sendId != 'boolean') {
                       view = new M2012.Mailbox.View.Main({ multiInstance: true, subscribeName: subscribeName ? subscribeName : '', isSearch: true });
                   } else {
                       view = $App.getView("mailbox_other");
                   }

                   // 从“订阅邮件”进入，搜索范围为收件箱
                   if (typeof sendId == 'boolean') {
                      view.model.set('fid', 1);
                   } else {
                    view.model.set('fid', $App.getCurrentFid());// 订阅新开标签model由于没执行appView.on("showMailbox"事件，model没有设置fid为当前文件夹ID，默认值为1
                   }
                   
                   var searchOptions = {
                            fid: $App.getCurrentFid(), 
                            exceptFids: [4], 
                            isFullSearch: 0, 
                            flags: { subscriptionFlag: 1 },
                            sessionEnable: sendId && typeof sendId != 'boolean' ? 0 : 2,
                            condictions: sendId && typeof sendId != 'boolean' ? 
                                         [{ field: "sendId", value: sendId, operator: "EQ" }] :
                                         [{ field: "sendId", value: 0, operator: "GT" }, { field: "sendId", value: '9223372036854775807', operator: "LT" }]
                   };
                            
                   view.prepareSearch(searchOptions);
                   if (!sendId || typeof sendId == 'boolean') { sendId = 0; }

                   //重置变量
                   view.model.set("isVipMode", false);
                   view.model.set("isTaskMode", false);
                   view.model.set("isTaskbacklogMode",false);
                   view.model.set("isTaskdoneMode",false);
                   view.model.set("isContactsMail", false);

                   $App.showPage({ name: "mailsub_" + sendId, view: view });
               },
               //注：获取当前邮件列表视图，只适用于邮件列表
               getCurrentView: function () {
                   return this.getMailboxView();
               },
               isMailbox:function(){
                   var current = this.getCurrentTab();
                   if (current.name.indexOf("mailsub") >= 0 || current.name.indexOf("mailbox") >= 0) {
                       return true;
                   }
                   return false;
               },

               // 该方法不适用于读信页
               // 需对读信页做特殊处理
               getMailboxView: function () {
                   var current = this.getCurrentTab();
                   if (current && current.name.indexOf("mailsub") >= 0) {
                       return current.view;
                   } else {
                       return this.getView("mailbox");
                   }
               },
               /**
               *打开文件夹
               *@param {Number} fid 文件夹id，1收件箱，2草稿箱，3已发送，4已删除，8我的账单
               */
               showMailbox: function (fid, isOpenFolder) {
                   var view = this.getView("mailbox");
                   if (fid > 1) {
                       view=this.getView("mailbox_other")
                   }

                   if (fid == 8) {
                       this.showBill(2);
                       return;
                   } else if (fid == 9) {
                       this.showSubscribe();
                       return;
                   }


                   if (this.getView("folder").model.isLock(fid)) {//检查文件夹是否加锁，
                       if (!this.getView("folder").model.get("passwordChecked")) { //未验证过密码
                           this.showUnlock(fid);
                           return;
                       }
                   }
                   view.model.set("pageIndex", 1); //重置为第1页
                   view.model.set("isSearchMode", false); //重置为非搜索状态
                   view.model.set("isVipMode", false);
                   view.model.set("isTaskMode", false);
                   view.model.set("isContactsMail", false); //重置往来邮件模式
                   view.model.set("IamFromLaiwang", false); //重置往来邮件模式

                   this.trigger("showMailbox", { fid: fid,view:view });
               },
               doCommand: function (commandName, options) {
                   if (!options) { options = {}; }
                   options.command = commandName;
                   $App.trigger("mailCommand", options)
               },
               showUnlock: function (fid, mid) {
                   new M2012.Folder.View.Unlock({ fid: fid, mid: mid || null, model: this.getView("folder").model }).render();
               },
               getLayout: function () {
                  var layout = $App.getMailboxView().model.get("layout");
                  // FIX:收件箱多标签后读信页获取model不准确
                  // 这里根据“读信页签对应必是list布局”进行校正
                  if ($App.getCurrentTab().name.indexOf('readmail_') > -1) {
                      layout = 'list';
                  }
                   return layout;
               },
               flipPage: function (direction, callback) { //邮件列表翻页
                   this.getView("mailbox").toolbarView.flipPage(direction, callback);
               },
               searchMail: function (options) {
                   var view = this.getView("mailbox_other");
                   view.prepareSearch(options);
                   //往来邮件搜索更多的时候，把当前邮件的邮箱地址传递
                   if(arguments[1]){
                       view.model.set("isContactsMailAndTheEmailIs", arguments[1]);
                   }
                   if(options.isVip){
	                   BH("vip_mail_load");
                   }
                   if (options) {
                       // options.order && view.model.set("order", options.order);
                       view.model.set("isVipMode", options.isVip ? true : false);
                       view.model.set("isTaskMode", options.isTaskmail ? true : false);
                       view.model.set("isTaskbacklogMode", options.isTaskmail && options.flags.taskFlag == 1 ? true : false);
                       view.model.set("isTaskdoneMode", options.isTaskmail && options.flags.taskFlag == 2 ? true : false);
                       view.model.set("isContactsMail", options.isContactsMail ? true : false);
                   }
                   this.trigger("showMailbox", { fid: 1,isSearch:true,view:view }); //文件夹fid传1只是为了避免非空检测，实际搜索的fid条件=0
                   //this.getView("mailbox").searchMail(keyword);
               },
               searchVip: function () {
                   this.getMailboxView().model.searchVip();
               },
               searchTaskmail: function (options) {
                   this.getMailboxView().model.searchTaskmail(options);
               },
               getMailDataByMid: function (mid) {
                   var result = this.getMailboxView().model.getMailById(mid);
                   if (!result) {
                       result = (this.getView("mailbox").model.getMailById(mid) || this.getView("mailbox_other").model.getMailById(mid))
                   }
                   return result;
               },
               getFreshMail: function (count, callback, options) {
                   return this.getMailboxView().model.getFreshMail(count, callback, options);
               },
               /**
               *根据标签id获得我的标签数据对象
               *@param {Number} tagsId 标签的id，即fid
               */
               getTagsById: function (tagsId) {
                   return this.getView("folder").model.getTagsById(tagsId);
               },
               /***
               *根据颜色id获取我的标签颜色值
               *@param {Number} color
               *@returns {String} 返回#xxxxxx的颜色值
               */
               getTagColor: function (color) {
                   return this.getView("folder").model.getColor(color);
               },
               /***
               *判断自定义文件夹是否可被POP
               *@returns {Boolean} 
               */
               checkCustomFolderPopFlag: function () {
                   var custom = $App.getFolders("custom")[0];
                   if (custom && custom.pop3Flag == 1) {
                       return true;
                   } else {
                       return false;
                   }
               },
               /***
               *设置当前标签页的标题
               *@param {String} title 标题
               */
               setTitle: function (title,name) {
                   this.getView("tabpage").setTitle(title,name);
               },
               setIcon: function (state) {
                   $App.getView("tabpage").tab.setStateIcon(this.getCurrentTab().name, state);
               },
               /***
               *设置透明层
               *@param {obj} id 透明层的外层容器
               *@param {obj} item 和透明层同级的容器 需要减去它的高度
               */
               setOpacityLayer: function (id, item) {
                   var itemHeight = 0;
                   if (item) {
                       var paddingTop = item.css("paddingTop");
                       paddingTop = paddingTop.replace("px", "");
                       var paddingBottom = item.css("paddingBottom");
                       paddingBottom = paddingTop.replace("px", "");
                       itemHeight = item.height() + parseInt(paddingTop) + parseInt(paddingBottom);
                   }
                   var height = id.height() - itemHeight;
                   var top = id.css("paddingTop");
                   top = top.replace("px", "");
                   top = parseInt(top) + parseInt(itemHeight);
                   var len = id.find(".blackbanner").length;
                   var html = '<div style="top: {0}px; height:{1}px; z-index:10; " class="blackbanner"></div>';
                   html = $T.Utils.format(html, [top, height]);
                   if (len == 0) {
                       id.append(html);
                   }

               },
               showChannel:function(name){
                   this.getView("tabpage").showChannel(name);
               },
               /***
               * 获取当前的标签页数据对象
               */
               getCurrentTab: function () {
                   return this.getView("tabpage").model.getCurrent();
               },
               //得到指定的标签页对象
               getTabByName: function (key) {
                   return this.getView("tabpage").model.getModule(key);
               },
               //使指定的标签页失效，切换时重绘
               validateTab: function (name) {
                   var tab;
                   if (name) {
                       tab = $App.getTabByName(name);
                   } else {
                       tab = $App.getCurrentTab();
                   }
                   if (tab) {
                       tab.isRendered = false;
                   }
               },
               registerChannel: function (tabName, renderFunc) {
                   this.getView("tabpage").registerChannel(tabName, renderFunc);
               },
               /***
               * 关闭当前标签页
               */
               close: function (name) {
                   return this.getView("tabpage").close(name);
               },

               /***
               * 关闭指定标签页
               */
               closeTab: function (tabName) {
                   return this.getView("tabpage").close(tabName);
               },
               activeTab:function(tabName){
                   return this.getView("tabpage").activeTab(tabName);
               },
               clearTabCache:function(tabName){
                   return this.getView("tabpage").clearTabCache(tabName);
               },
               closeAllTab: function () {
                   return this.getView("tabpage").closeAllTab();
               },
               getCurrentFid: function () {
                   return this.getCurrentView().model.get("fid");
               },
               /***
               *根据文件夹id获取文件夹数据对象
               *@param {Number} fid 文件夹id
               *@returns {Object}
               */
               getFolderById: function (fid) {
                   return this.getView("folder").model.getFolderById(fid);
               },
               /***
               *获取文件夹列表，此函数必须要等文件夹加载后才可调用。
               *@param {String} type 文件夹类型：1.system系统文件夹 2.custom 自定义文件夹  3.tag 标签文件夹　4.pop 代收文件夹
               *@returns {Array} 特定的文件夹列表
               */
               getFolders: function (type) {
                   return this.getView("folder").model.getFolders(type);

               },
               getFolderType: function (fid) {
                   return this.getView("folder").model.getFolderType(fid);
               },

               getFolderByFolderName: function (name) {
                   return this.getView("folder").model.getFolderByFolderName(name);
               },

               /***
               *创建文件夹
               *@param {String} folderName 文件夹名称  
               *@param {String} from 发件人邮件地址，创建分类规则   
               *@param {Boolean} dealHistoryMail 是否对历史邮件分拣
               *@returns {Object} 文件夹信息
               */
               addFolder: function (folderName, from, callback) {
                   return this.getView("folder").model.addFolder(folderName, from, callback);
               },

               /***
               *批量创建文件夹
               *@param {String} folderNames 文件夹名称  
               *@param {function} callback 
               */
               addFolders: function (folderNames, callback) {
                   return this.getView("folder").model.addFolders(folderNames, callback);
               },

               /***
               *创建标签
               *@param {String} tagName 标签名称  
               *@param {String} from 发件人邮件地址，创建分类规则   
               */
               addTag: function (tagName, color, from, callback) {
                   return this.getView("folder").model.addTag(tagName, color, from, callback);
               },

               /***
               *验证文件夹名称
               *@param {String} folderName 文件夹名称  
               */
               checkFolderName: function (folderName, obj) {
                   return this.getView("folder").model.checkFolderName(folderName, obj);
               },
               checkTagName: function (tagName, obj) {
                   return this.getView("folder").model.checkTagName(tagName, obj);
               },
               /**
               * 判断是否代收文件夹
               * @param {number} fid 文件夹id
               */
               isPopFolder: function (fid) {
                   return this.getView('folder').model.isPopFolder(fid);
               },
               /**是否是标签文件夹
               */
               isTagFolder: function (fid) {
                   return this.getView('folder').model.isTagFolder(fid);
               },
               getAddrNameByEmail: function (email) {
                   return $App.getModel("contacts").getAddrNameByEmail(email);
               },
               /***
               *判断是否会话模式
               */
               isSessionMode: function () {
                   var userAttrs = $App.getConfig("UserAttrs");
                   if (userAttrs) {
                       return userAttrs.sessionMode == 1 ? true : false;
                   } else {
                       return false;
                   }
               },

               /**
               * 判断是否会话文件夹
               * 非会话文件夹：已发送(3),草稿箱（2）已删除（4）垃圾邮件（5）保留文件夹（10）
               * 非会话文件夹：我的标签
               */
               isSessionFid: function (fid) {
                   var notSessionFids = [2, 3, 4, 5, 10];
                   var flag = true;

                   if ($.inArray(fid, notSessionFids) > -1 || !fid) {
                       flag = false;
                   }

                   if (flag && $App.getFolders('tag')) {
                       var tagsFolders = $App.getFolders('tag');
                       $.each($App.getFolders('tag'), function (index, val) {
                           if (tagsFolders[index].fid == fid) {
                               flag = false;
                               return false;
                           }
                       });
                   }

                   return flag;
               },

               /** 判断是否会话邮件mid */
               isSessionMid: function (mid) {
                   var flag = false;
                   if (mid) {
                       var data = $App.getMailDataByMid(mid) || null;
                       if (data && data.mailNum && data.mailNum > 1) {
                           flag = true;
                       }
                   }
                   return flag;

               },

               /** 新窗口读信 */
               openNewWin: function (mid) {
                   /*var url = 'http://' + location.host + '/m2012/html/newwinreadmail.html?t=newwin&mid='+mid;
                   window.open(url); 
                   */

                   var url = 'http://' + location.host + '/m2012/html/newwinreadmail.html?t=newwin&mid=' + mid;
                   var r = document.documentElement; //防止窗口被浏览器拦截
                   var f = document.createElement("form");
                   f.target = "_blank";
                   f.method = "get";
                   $(f).append('<input type="hidden" name="t" value="newwin" />');
                   $(f).append('<input type="hidden" name="mid" value="' + mid + '" />');
                   $(f).append('<input type="hidden" name="sid" value="' + $App.getSid() + '" />');
                   r.insertBefore(f, r.childNodes[0]);
                   f.action = url;
                   f.submit();

               },

               /**
               * 读信模式切换
               * @param {number} mode 0 - 设置标准模式  1 - 设置会话模式
               */
               setReadMailMode: function (mode, callback, onerror) {
                   var options = { flag: mode };
                   M139.RichMail.API.call("mbox:setSessionMode", options, function (result) {
                       if (result.responseData.code && result.responseData.code == 'S_OK') {
                           top.$App.setConfig("UserAttrs", "sessionMode", mode);
                           var userAttrs = top.$App.getConfig("UserAttrs");
                           userAttrs.sessionMode = mode;
                           callback && callback(mode);
                       } else {
                           if (onerror && result.responseData) {
                               onerror(result.responseData.code);
                           }
                           ;
                       }
                   });
               },
               /**
               * 回复 / 回复全部
               * @param type 0-回复 1-回复全部
               * @param mid 原信ID
               * @param withAttach 是否带附件回复  'true'-是 'false'-否
               */
                   /**
                 * 回复 / 回复全部
                 * @param type 0-回复 1-回复全部
                 * @param mid 原信ID
                 * @param withAttach 是否带附件回复  'true'-是 'false'-否
                 */
               reply: function (type, mid, withAttach) {
                   var params = {};
                   var replyType = 'reply';
                   if (type === 1) {
                       replyType = 'replyAll';
                   }
                   params.type = replyType;
                   params.mid = mid;
                   params.withAttach = withAttach;
                   params.lastTabName = $App.getCurrentTab().name;
                   params.userAccount = top.$User.getDefaultSender();

                   var tabName = $App.getCurrentTab().name;
                 
                   this.show('compose', params);
                   this.getView("tabpage").replace(tabName, $App.getCurrentTab().name);
               },
                   /**
                   * 转发
                   * @param mid 原信ID
                   */
               forward: function (mid) {
                   var params = {};
                   params.type = 'forward';
                   params.mid = mid;
                   params.lastTabName = $App.getCurrentTab().name;

                   //add by zsx 把代收邮件的账户传入
                   if (arguments[1] && arguments[1]["userAccount"]) {
                       params.userAccount = arguments[1].userAccount;
                   }

                   // 获取当前tab的name（新开标签后tabname会发生变化）
                   // 判断是否需要是替换当前标签（新开标签后model和view会发生变化）
                   // 这两个操作必须放在新开标签前
                   var tabName = $App.getCurrentTab().name;
                   var isReadMail = this.isReadMail();
                   var isReadSessionMail = this.isReadSessionMail();

                   this.show('compose', params);
                   if (isReadMail && !isReadSessionMail) {
                       this.getView("tabpage").replace(tabName, $App.getCurrentTab().name);
                   }
               },

               isReadMail: function() {
                  var curTab = $App.getCurrentTab();
                  return curTab.name.indexOf("readmail") > -1;
               },

               isReadSessionMail: function() {
                  var curTab = $App.getCurrentTab();
                  var curView = $App.getCurrentTab().view;
                  var covMailList = curView && curView.$el && curView.$el.find('#covMailSummaryList')[0];

                  // 普通模式下根据'#covMailSummaryList'元素是否存在进行判断
                  var condition1 = curTab.name.indexOf("readmail") > -1 && covMailList;
                  // 分栏模式下根据'#covMailSummaryList'元素是否存在进行判断
                  var condition2 = $('#readWrap').find('#covMailSummaryList')[0];
                  // 普通模式下还可以根据当前所读邮件下是否包含多封邮件进行判断（弥补'#covMailSummaryList'元素尚未创建的情况，用于toolbar）
                  var condition3 = curTab.name.indexOf("readmail") > -1 && curView.model.get('total') > 1;
                  if( condition1 || condition2 || condition3) {
                      return true;
                  } else {
                      return false;
                  }
               },
               /**
               * 作为附件转发
               * @param mid 原信ID
               * @param subject 原信主题
               */
               forwardAsAttach: function (mid, subject) {
                   var params = {};
                   params.type = 'forwardAsAttach';
                   params.ids = mid;
                   params.subject = subject;
                   params.lastTabName = $App.getCurrentTab().name;
                   //add by zsx 把代收邮件的账户传入
                   if(arguments[2] && arguments[2]["userAccount"]){
                   		params.userAccount = arguments[2].userAccount;
                   }
                   var tabName = $App.getCurrentTab().name;
                   var isReadMail = this.isReadMail();
                   var isReadSessionMail = this.isReadSessionMail();

                   if (isReadMail && !isReadSessionMail) {
                       setTimeout(function () {
                           $App.closeTab(tabName);
                       }, 500);
                   }
                   this.show('compose', params);
               },
               /**
               * 恢复草稿
               * @param mid 原信ID
               */
               restoreDraft: function (mid) {
                   var params = {};
                   params.type = 'draft';
                   params.mid = mid;
                   this.show('compose', params);
               },
               /**
               * 编辑邮件再次发送
               * @param mid 原信ID
               */
               editMessage: function (mid) {
                   var params = {};
                   params.type = 'resend';
                   params.mid = mid;
                   this.show('compose', params);
               },
               /**
               * 发送电子名片
               * @param sd
               */
               sendVcard: function (sd) {
                   var params = {};
                   params.type = 'vCard';
                   params.sd = sd;
                   this.show('compose', params);
               },
               /**
               * 打开写信页同时显示大附件上传框
               */
               uploadLargeAttach: function () {
                   var params = {};
                   params.type = 'uploadLargeAttach';
                   this.show('compose', params);
               },
               getAttrs: function (attrName) {
                   var attrs = $App.getConfig("UserAttrs");
                   var attrs2 = $App.getConfig("UserAttrsAll");
                   if (attrs && attrs[attrName]) {
                       return attrs[attrName];
                   } else if (attrs2 && attrs2[attrName]) {
                       return attrs2[attrName];
                   } else {
                       return "";
                   }


               },
               setAttrs: function (attrList, callback) {
                   var data = {
                       attrs: attrList
                   };
                   $RM.setAttrs(data, function (result) {
                       if (result["code"] == "S_OK") {
                           var attrs = $App.getConfig("UserAttrsAll");
                           for (elem in attrList) {
                               attrs[elem] = attrList[elem];
                           }
                           if (callback) { callback(result); }
                       }
                   });
               },
               /*获取rm自定义字段，如果字段不存在返回为空
               注：为保持规范，所有的自定义字段要在此注释中声明
               unfold:文件夹折叠状态*/
               getCustomAttrs: function (key) {//获取自定义字段

                   var v = this.getAttrs("_custom_" + key); //rm后台存储以_custom_为前缀
                   if (v) {
                       return v.trim();
                   } else {
                       return "";
                   }
               },
               /*设置rm自定义字段*/
               setCustomAttrs: function (key, val, callback) {//设置自定义字段
                   var realKey = "_custom_" + key;
                   var data = {};
                   if (val == "") { val = " " };//避免后台报错
                   data[realKey] = val;
                   this.setAttrs(data, callback);
               },
               /**
               *打开套餐升级引导
               */
               showOrderinfo: function () {
                   BH('show_orderinfo');
                   window.open("/m2012/html/set/feature_meal_guide/index.html?sid=" + $App.getSid());
               },
               /***
               用于修改os_user_config表的记录
               configId在数据库中是以整型定义的，重构接口时为了适应未来，接口定义为key和value的形式，在服务端做映射
               key值与configId的映射如下：
       
               // config=1用户天气预报显示的地区
               public final static String WEATHER_AREA = "WeatherArea";
       
               // config=7用户登录的时候上次选择的版本号
               public final static String LOGIN_VERSION = "LoginVersion";
       
               // config=8用户已经设置了固定密码
               public final static String CONSTANT_PASSWORD = "ConstantPassword";
       
               // config=9用户已经屏蔽了显示密码设置的向导
               public final static String PASSWORD_GUIDE = "PasswordGuide";
       
               // config=11：用户是否欠费，ConValue1=0表示不欠费，=1表示欠费
               public final static String IS_OWN_USER = "IsOwnUser";
       
               // config=13 新用户向导
               public final static String SHOW_NEW_USER_GUIDE = "ShowNewUserGuide";
       
               // config=14用于短信,判断是否设置了不再提示推荐邮箱伴侣
               public final static String PARTNER_PROMOTE_SMS = "PartnerPromoteSms";
       
               // config=15用于彩信,判断是否设置了不再提示推荐邮箱伴侣
               public final static String PARTNER_PROMOTE_MMS = "PartnerPromoteMms";
       
               // config=17标准版换肤
       
               public final static String SKIN = "Skin";
       
               // config=19记录用户换肤标识
               public final static String SKIN_FLAG = "SkinFlag";
               // config=20 新邮件到达提示设置
               public final static String NEW_MAIL_TIPS = "NewmailTips";
               // config=21是否保存下发短信
               public final static String SAVE_SMS = "SaveSms";
               // config=22自定义功能入口
               public final static String CUSTOM_APP = "CustomApp";
               // config=23 最后一次邮件代收时间
               public final static String LAST_POP_DATE = "LastPopDate";
       
               // config=27邮箱换号记录
               public final static String CHANGE_NUMBER_RECORD = "ChangeNumberRecord";
       
               // config=29冻结用户
               public final static String IS_FREEZE_USER = "IsFreezeUser";
               // config=31高级活跃需求
       
               public final static String USER_CUSTOM_INFO = "UserCustomInfo";
               // config=32短信双通道
       
               public final static String DUAL_CHANNEL = "DualChannel";
               // config=33不安全密码登录
               public final static String UNSAFE_PASSWORD = "UnsafePassword";
               // config=34tips使用
               public final static String GUIDE_TIPS = "GuideTips";
               // config=35 异步注册请求受理：1-受理 0-受理后已登录
               public final static String REGISTER_SYNC_RESULT = "RegisterSyncResult";
               // config=36 外网用户注册设置问题
               public final static String EXTERNAL_QUESTION = "ExternalQuestion";
               // config=37 外网用户注册设置问题对应的答案
               public final static String EXTERNAL_ANSWER = "ExternalAnswer";
               // config=38外网用户注册设置的邮箱地址
               public final static String EXTERNAL_EMAIL = "ExternalEmail";
               // config=39标准版2.0的换肤属性
               public final static String SKIN_PATH2 = "SkinPath2";
               // config=600通讯录的隐私设置
               */
               setUserConfigInfo: function (key, val, callback) {
                   M139.RichMail.API.call("user:setUserConfigInfo", { configTag: key, configValue: val },
                               function (result) {
                                   if (callback) { callback(result); }
                               }
                           )
               }
           });
   },
   getUserConfigInfo: function (key, type) {
       key = key.toLowerCase();
       var data = $App.getConfig('UserData').mainUserConfig;
       if (data[key] && data[key].length == 2) {
           if (type == undefined) {
               return data[key][1];
           } else {
               return data[key][type];
           }
       } else {
           return "";
       }
   },
   setMailTips: function (value) {
       this.setUserConfigInfo("newmailtips", value);
       this.getMainData()
   },
   getUserCustomInfo: function (key) {
       try {
           var text = top.$App.getUserConfigInfo("usercustominfo");
       } catch (e) {
           return;
       }
       if (text) {
           var reg = new RegExp("(?:^|&)" + key + "=(\\d+)");
           var match = text.match(reg);
           if (match) {
               return match[1];
           }
           return;
       }
       return;
   },
       /*
       设置os_userconfig表中configId=31的数据，以json方式传值，支持任意类型的key和value，
       注意key和value中不能包含&符号，调用成功后才会触发callback.
      $App.setUserCustomInfoNew({userName:"golden sky",age:32},
          function(result){
            console.warn(result.mainUserConfig.usercustominfo)
          }
      );
 
       */
   setUserCustomInfoNew: function (json, callback) {
       var config = $User.getUserConfig();
       var oldData = {};
       if (config && config["usercustominfo"] && config["usercustominfo"].length>1) {
           oldValue = config["usercustominfo"][1];
           if (oldValue.indexOf("&") == 0) {
               oldValue = oldValue.substring(1);
           }
           oldData = $T.Url.getQueryObj("?" + oldValue);
       } else if (config && !config["usercustominfo"]) {//数据加载成功，但是usercustominfo从未写入过
           oldData = {};
       } else { //容错，如果用户数据未加载时不写入，避免值被覆盖
           return;
       }

       var newData = $.extend(oldData, json);
       var self = this; 
       this.setUserConfigInfo("usercustominfo", $T.Url.urlEncodeObj(newData), function () {
           self.getMainData(callback);
          
       });
   },
   setUserCustomInfo: function (key, value, callback) {
       var self = this;
       var newValue = "";
       var isRightParam = !isNaN(key) && !isNaN(value) && key >= 0 && key <= 101 && value >= 0 && value <= 9;
       //var oldValue = $User.getUserConfig()["usercustominfo"][1] || "";
       var oldValue = '';
       if ($User.getUserConfig() && $User.getUserConfig()["usercustominfo"] && $User.getUserConfig()["usercustominfo"][1]) {
           oldValue = $User.getUserConfig()["usercustominfo"][1];
       } else { //容错，如果用户数据未加载时不写入，避免值被覆盖
           return;
       }
       if (isRightParam) {
           var reg = new RegExp("(?:^|&)" + key + "=\\d+");
           if (reg.test(oldValue)) {
               var newValue = oldValue.replace(reg, "&" + key + "=" + value);
           } else {
               var newValue = oldValue + "&" + key + "=" + value;
           }

       };
       self.setUserConfigInfo("usercustominfo", newValue);
       self.getMainData()
       if (callback) { callback() }
       return value;
   },
   onResize: function () {
       var fv = $App.getView("folder");
       if (fv) {
           fv.resizeSideBar();
       }
       //var mainHeight = $(document.body).height() - $("#div_main").offset().top;
       var mainHeight = $D.getWinHeight() - $("#div_main").offset().top;//写死性能高
       var currentModule = this.getCurrentTab() && this.getCurrentTab().name;
       if ($B.is.ie && $B.getVersion() <= 8 && currentModule && (currentModule == 'mailbox_1' || currentModule.indexOf('mailsub_') > -1 || currentModule.indexOf('readmail_') > -1)) {
          $("#div_main:eq(0)").height(mainHeight - 4); //减去的5是框架边框的高度
       } else {
          $("#div_main:eq(0)").height(mainHeight - 5); //减去的5是框架边框的高度
       }

       this.getView("tabpage").resize();

       // 透明皮肤的背景图片需要动态计算大小
      var subOffsetTop = $("#div_main").offset().top || 0;
       var winW = $D.getWinWidth() > 1280 ? $D.getWinWidth() : 1280;
       var winH = winW * 0.625;
       $('#skinBgImg').css({width: winW, height: winH});
       if ($User.getSkinName().indexOf('_clarit') > -1) {
            $('#skinBgSub').height($D.getWinHeight() - subOffsetTop);
       }
       $(".skinBody").css({width: winW, height: $D.getWinHeight(),overflow: 'hidden'});
   },
   /**在tabpageview中显示指定的view,传入对象的name表示模块英文名（唯一），view为指定的view
   * @example 
   * $App.showPage({name:"readmail_"+mid,view:readmailView})
   */
   showPage: function (pageObj) {
       var m = this.getView("tabpage").model;
       var prevModule = null;
       //1.未创建过  2.像写信页这种多实例模块，每次无条件重新创建新模块
       if (!m.existModule(pageObj.name) || pageObj.mutiple) {
           m.createModule(pageObj);
       } else {
           var module = m.getModule(pageObj.name);
           module.view = pageObj.view; //替换为新生的view
           module.isRendered = false; //需要刷新
           if (pageObj.name.indexOf("mailsub") >= 0) {
               this.disposeView(pageObj.name);//邮件列表多实例，清除原来的事件绑定，避免多次绑定
           }
           //pageObj.view.render.call(pageObj.view,true);//如果已存在则重新渲染
       }
       //m.set("isRendered", true);
       prevModule = m.get("currentModule");
       if (pageObj.name == prevModule) {
           m.set("currentModule", null); //先置为空才能触发改变
       }
       m.set("currentModule", pageObj.name, pageObj.group);
       this.trigger("showPage", { "name": pageObj.name, "prev": prevModule });
   },
   disposeView: function (name) {
       view = $App.getTabByName(name).view;
       if (view) {
           $(view.el).off();
           view.undelegateEvents();
       }
   },
   /**
   * 根据key值在tagpage中显示一个iframe页，此函数已不再使用，为了兼容而保留，请调用show，
   */
   showFrame: function (key) {
       var frameView = new FrameView({ parent: this.getView("tabpage") });

       this.showPage({ name: key, view: frameView });

   },
   showUrl: function (url, title,group) {
       var frameView = new FrameView({ parent: this.getView("tabpage"), url: url, title: title });
       this.showPage({ name: "frame_" + Math.random(), view: frameView ,group:(group || title)});
   },
   showHtml: function (html, title) {
       var frameView = new FrameView({ parent: this.getView("tabpage"), html: html, title: title });
       this.showPage({ name: "frame_" + title, view: frameView });

   },

   openThirdParty: function (key) {
       var link = FrameModel.getLinkByKey(key);
       var url = link.url;
       url += url.indexOf("?") > -1 ? "&sid=" : "?sid=";
       url = SiteConfig.ssoInterface + "/GetUserByKeyEncrypt?url=" + encodeURIComponent(url) + "&comeFrom=" + link.comefrom + "&sid=" + top.sid;
       window.open(url);
   },

   //封装云邮局订阅接口
   //传参特殊，@param必须是json格式的字符串，如‘{"comeFrom":503,"columnId":38530}’
   subscribe:function(param){
      var url = top.getDomain('image') + "subscribe/inner/bis/subscribe?sid=" + top.sid;
      M139.RichMail.API.call(url, param); //自动订阅
   },
   
   /***
   * 根据key值在tagpage中显示一个iframe页,param将会转化为页面的get参数
   * @param {String} key 注册的标签键值
   * @param {Object} param 加往iframe的url get参数
   * @param {Object} options 选项参数集合
   * @param {Object} options.inputData 传递数据集合给子页面
   */
   show: function (key, param, options) {
        var options = options || {};
		var link = FrameModel.getLinkByKey(key);
		var pageOp = null, frameView = null;

		if (link) {
            if (link["target"] == "_blank") {
                window.open(link.url);
            } else {
                frameView = new FrameView({ parent: $App.getView("tabpage"), param: param, inputData: options.inputData });
	            pageOp = {
	                name: key, view: frameView, title: link["title"], group: link["group"],
	                channel: link["channel"], mutiple: link["mutiple"], data: options
	            };
	            if (options && options.title) {
	                pageOp.title = options.title;
	            }
	            this.showPage(pageOp);
            }
        }
    },

   /**
   * 系统发信给自己
   * @param {Object} options 
   * @param {String} options.from  系统邮箱帐号
   * @param {String} options.subject 邮件标题
   * @param {String} options.content 邮件内容
   */
   mailToMe: function (options, callback) {
       if (options.subject && options.content) {
           M139.RichMail.API.call("user:mailToMe", options, function (response) {
               callback && callback(response.responseData.code);
           });
       }
   },

   /**
   * 获取附件下载路径
   * @param {Object} file  
   * @param {String} file.mid 附件id
   * @param {String} file.offset 附件offset
   * @param {int} file.size 附件大小
   * @param {String} file.name 附件名称
   * @param {String} file.encode 附件编码
   * @param {int} file.attachType 附件类型
   * @example 
   * $App.getDownLoadUrl({
   mid:'xxx',
   offset:'xxx', 
   size:'xxx', 
   type:'xxx', 
   encoding:'xxx',  
   });    
   */
   getDownLoadUrl: function (file) {
       if (file) {
           var url = "/RmWeb/view.do";
           return M139.Text.Url.makeUrl(url, {
               func: 'attach:download',
               mid: file.mid,
               offset: file.offset,
               size: file.size,
               name: encodeURIComponent(file.name),
               sid: $App.getSid(),
               type: file.attachType,
               encoding: file.encode
           }) + '&name=' + encodeURIComponent(file.name); //filename用makeurl用IE下载会乱码
       } else {
           return '';
       }
   },

   jumpTo: function (key, options) {
       var embedList = ["attachlist", "greetingcard", "postcard", "sms", "mms", "fax", "diskDev", "quicklyShare", "calendar", "groupMail", "dingyuezhongxin", "addrWhoAddMe", "addrWhoWantAddMe","health"];
       if ($App.getSiteConfig("embedRelease") && $.inArray(key, embedList) >= 0) {//内嵌版的增值业务
           if (key == "sms" || key == "mms") {
               if (!$User.checkAvaibleForMobile()) {
                   return;
               }
           }
           
           if(key === "quicklyShare"){
           		var isOldDisk = options && options.isOldDisk;
	       		if(top.SiteConfig.isQuicklyShare && isOldDisk != 'true'){
	       			$App.show("quicklyShare", options);
	       		}else{
	       			$App.show("quicklyShareOld", options);
	       		}
	       		return;
	       }
	       
	       if(key === "diskDev"){
	       		if(top.SiteConfig.isDiskDev){
	       			$App.show("diskDev", options);
	       		}else{
	       			$App.show("diskDevOld", options);
	       		}
	       		return;
	       }

           $App.show(key, options);
           return;
       }
       if (key == "voiceMail") { this.showBill(4); return;}
       //精品订阅特殊处理
       if (/jpdy/gi.test(key)) {
           $App.show(key, options);
           return;
       }

       //老版本的设置生日
       if (key == "baseData") {
           $App.show("account", { anchor: "basePersonalInfo" });
           return;
       }

       var url = "/main.htm?func=global:execTemp&sid=" + $App.getSid() + "&id=" + key + "&fromM2012=1";
       var flag = $App.getCustomAttrs('jumpFlag');
       if (options) {
           url = M139.Text.Url.makeUrl(url, options);
       }
       if (flag != '') {
           window.open(url);
       } else {
           $Msg.confirm(
                   '标准版2.0尚在Beta阶段，您将进入标准版(旧版)的对应功能页面。确定要进入标准版(旧版)的对应功能页面吗？',
                   function () {
                       window.open(url);
                       if ($('#checkJump:checked').length > 0) {
                           $App.setCustomAttrs('jumpFlag', 1);
                       }
                       return false;
                   },
                   {
                       dialogTitle: '页面跳转',
                       icon: "warn"
                   }
               );
           //插入节点
           var checkHtml = '<input type="checkbox" id="checkJump" /> <label for="checkJump">不再提示</label>';
           $('.BottomTip').html(checkHtml);
       }


   },

   /** 控制读信的高度 */
   readmailResize: function (mid) {
       var iframe = $('iframe[id=mid_' + mid + ']');
       if (iframe) {
           var h = iframe.contents().height();
           iframe.height(h);
       }
   },

   /** 获取当前读信mid */
   getCurrMailMid: function () {
       var mid = null;
       var tabname = $App.getCurrentTab().name;
       if (tabname.indexOf('readmail_') > -1) {
           mid = tabname.split('_')[1];
       }
       var splitrmtop = $('#readWrap .readMail-left'); //上下
       var splitrmleft = $('#readWrap .mailSectionWrap'); //左右
       if (splitrmtop.length > 0 && splitrmtop.attr('id')) {
           mid = splitrmtop.attr('id').split('_')[1];
       }
       if (splitrmleft.length > 0 && splitrmleft.attr('id')) {
           mid = splitrmleft.attr('id').split('_')[1];
       }
       return mid;
   },

   /** 快捷键回复 */
   keyReply: function (e, win) {
       /*if (!e.shiftKey) {
       return;
       }*/


       //如果是在输入框输入，不触发快捷键
       var target = e.target;
       if (/input|textarea/i.test(target.tagName)) {
           return;
       } else if (win && win.location.href.indexOf("blank.htm") > -1) {
           //编辑器输入也不触发
           return;
       }

       var keycode = e.keyCode;
       var mids = [];
       var currmid;


       //快捷回复
       var args = {
           attach: false,
           command: "reply",
           mids: mids,
           all: false
       };
       if (e.shiftKey && keycode == 65) { //shift+a
           currmid = $App.getCurrMailMid();
           currmid && mids.push(currmid);
           args.all = true;
       }
       if (e.shiftKey && keycode == 82) { //shift+r
           currmid = $App.getCurrMailMid();
           currmid && mids.push(currmid);
       }

       mids.length > 0 && $App.trigger("mailCommand", args);

       //快捷写信
       if (e.shiftKey && keycode == 67) { //shift+c
           $App.show('compose');
       }

       //搜索快捷键 "/"
       if (keycode == 191) { // /
           var tb_mailSearch = $("#tb_mailSearch");
           if ($B.is.firefox) { //火狐浏览器默认搜索快捷键为 /
               tb_mailSearch.focus();
               setTimeout(function () {
                   var val = tb_mailSearch.val();
                   tb_mailSearch.val(val.substring(0, val.length - 1));
               }, 0);
           } else {
               setTimeout(function () {
                   tb_mailSearch.focus();
               }, 0);
           }
       }
   },

   openDialog: function (title, className, options) {
       if (!options) { options = {} }
       if (!M2012["View"]) {
           M2012["View"] = {};
       }
       if (eval(className)) {
           loadCallback();
       } else {
           M139.core.registerJS(className, "richmail/dialog/" + className.toLowerCase() + ".js");
           M139.core.requireJS([className], loadCallback);
       }
       function loadCallback() {
           //var view = eval("new " + className + "(options)");
           var view_class = eval(className);
           var view = new view_class(options);
           if (view.button1Click) {
               var button1Click = function () {
                   view.button1Click.call(view);
               }
           }

           options.dialogTitle = title;
           var dialog = $Msg.showHTML(view.render(), button1Click, null, null, options);
           view.dialog = dialog;
           view.el = dialog.el;
           if (view.onRender) { view.onRender(); }


       }
   },

   /**
   *判断是否已超时
   *@returns {Boolean}
   */
   isSessionOut: function () {
       return !!this.get("sessionOut");
   },

   /**
   *检查是否超时，并弹出重新登录对话框
   */
   checkSessionOut: function () {
       var sessionOut = this.isSessionOut();
       if (sessionOut) {
           this.showSessionOutDialog();
       }
       return sessionOut;
   },

   /**
   *设置状态为超时
   */
   setSessionOut: function () {
       this.showSessionOutDialog();
       this.set("sessionOut", true);
   },

   /**
   *显示超时，要重新登录的对话框(js是异步加载的，所以不是马上弹出)
   */
   showSessionOutDialog: function () {
       if (M2012.UI.Dialog.SessionOut) {
           showDialog();
       } else {
           M139.core.utilCreateScriptTag({ src: "/m2012/js/ui/dialog/m2012.ui.dialog.sessionout.js" }, showDialog);
       }
       function showDialog() {
           //防止一次弹多个
           if (!$App.get("sessionOutDialogShow")) {
               $App.set("sessionOutDialogShow", true);
               new M2012.UI.Dialog.SessionOut().render().on("remove", function () {
                   $App.set("sessionOutDialogShow", false);
               });
               
           }
       }
   },
   
    /**
   *options为{func:function(){}}形式，用于点击绑定的异步调用
   */
   showOauthDialog: function(options){
       if (M2012.UI.Dialog.BindOauth) {
           showDialog();
       } else {
           M139.core.utilCreateScriptTag({ src: "/m2012/js/ui/dialog/m2012.ui.dialog.bindoauth.js" }, showDialog);
       }
       function showDialog() {
           if (!$App.get("showOauthDialogShow")) {
               $App.set("showOauthDialogShow", true);
               new M2012.UI.Dialog.BindOauth(options).render().on("remove", function () {
                   $App.set("showOauthDialogShow", false);
               });
           }
       }

   },

   /**
   *http请求M139.RichMail.API.call()返回后调用
   */
   onHttpClientResponse: function (client, res) {
       if (res && res.responseData && res.responseData.code && res.responseData.code != "S_OK") {
           var errorCode = res.responseData.errorCode;
           var code = res.responseData.code.toLowerCase();
           var summary = res.responseData.summary;
           //2011,2012 = 基础邮箱超时
           //S_FALSE = 中间件超时
           if (errorCode == "2011" || errorCode == "2012" || code == "fa_invalid_session" || (summary && summary.indexOf("RMKEY") > -1)) {
               //|| code == "s_false"
               //超时
               this.setSessionOut();
           }
           //上报日志
           M139.Logger.sendClientLog({
               level: "ERROR",
               name: "RichMailHttpClient",
               url: client.requestOptions.url,
               errorMsg: "Not Response S_OK",
               responseText: res.responseText
           });
       }
       /*
       //监测到sid不一致
       var OsSSOSid="";
       var userData=Utils.getCookie("UserData");
       if(userData && userData.indexOf("ssoSid")>=0){
       OsSSOSid=Utils.getCookie("UserData").match(/ssoSid:['"](.+?)['"]/)[1];
       }
       */
   },
   // 自适应  返回写信页iframe
   getComposeIframe: function () {
       var iframes = $(".main-iframe");
       for (var i = 0; i < iframes.length; i++) {
           var iframe = iframes[i];
           if ($(iframe).attr('src').indexOf('compose') > -1) {
               return iframe;
           }
       }
   },

   /** 读写信图片缩放工具栏 */
   showImgEditor: function (doc) {
       var imgs = doc.find("img");
       if((imgs && imgs.length > 0)){
       if (window.ImgEditorMenu) {
           ImgEditorMenu.mouseEvent(doc);
       } else {
               window.setTimeout(function(){
           M139.core.utilCreateScriptTag({
               id: "imgeditor",
               src: "/m2012/js/richmail/readmail/m2012.readmail.imgeditormenu.js",
               charset: "utf-8"
           }, function () {
               ImgEditorMenu.mouseEvent(doc);
           });
               },1000);
           }
       }
   },

   /** 获取系统帐号 */
   getSysAccount: function () {
       return ['subscribe@139.com', 'homemail@139.com', 'admin@139.com', 'postmaster@139.com', 'idea@139.com', 'antispam@139.com', 
       'ued@139.com', 'mail139@139.com', 'uec@139.com', 'service@139.com', 'mail139_holiday@139.com', 'kefu@139.com', 'administrator@139.com', 
       'hostmaster@139.com', 'webmaster@139.com', 'club@139.com', 'port@139.com', 'mail139_vip@139.com', 'szlvsechuxing@139.com', 
       'subscribe-topic@139.com', 'care@139.com'];
   },

    /** 获取会话邮件切换到完整模式内容 */
    getSessionDataContent:function(){
        var sessionData = top.M139.PageApplication.getTopApp().sessionPostData,
            content = '';
        if( sessionData && sessionData.content ){
            content = sessionData.content;
        }
        M139.PageApplication.getTopApp().sessionPostData = null; //清空
        return content;
    },

    /**
       获取body的高度 又确保不引发重绘
    */
   getBodyHeight: function () {
       var h;
       if (window.innerHeight) {
           h = window.innerHeight;
       } else {
           var welcome = document.getElementById("welcome");
           if (welcome && welcome.tagName == "IFRAME") {
               var frameH = parseInt(welcome.style.height);
           }
           if (frameH) {
               h = frameH + 112;
           } else {
               h = $D.getWinHeight();
           }
       }
       return h;
   },
  closeWriteOkPage: function() {
      var tabs = $App.getView('tabpage').tab.tabs;
      for (var tabName in tabs) {
          if (tabName.indexOf('compose_') > -1 && $App.getTabByName(tabName).data.status) {
              $App.closeTab(tabName);
          }
      }

   },
       /**判断当前是否为写信新窗口*/
   isNewWinCompose: function () {
       var t = top.$T.Url.queryString("t");
       if (t == 'win_compose' && top.location.hash.indexOf("newwin_done") == -1) {
           return true;
       } else {
           return false;
       }
   },

   /**写信新窗口还原成完整界面*/
   closeNewWinCompose: function (needShowNewWinComposeLink) {
       needShowNewWinComposeLink && this.trigger("closeNewWinCompose");
       if (this.isNewWinCompose()) {
           top.location.hash = "#newwin_done";
           setTimeout(function () {
              $('#logoArea').removeClass('Loading_Hidden_Top');
              $('#main').removeClass("main_write").addClass('main');
              $('#sub, #divTab, #header').show();
              $('#top').children().show()
              $('#top>a:first').attr('href', 'javascript:$App.show("welcome");').css('cursor', 'pointer');
           }, 100);
       }
   }


}));

})(jQuery, Backbone, _, M139);
﻿/**
 * @fileOverview 页面跳转
 */

(function (jQuery, Backbone, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    M139.namespace("M2012.SsoRedirect", superClass.extend(
    /**@lends M2012.SsoRedirect.prototype*/
   {
     
       initialize: function (options) {
           superClass.prototype.initialize.apply(this, arguments);
           var self = this;
		   
		   $App.on("initSsoRedirect",function(){
				self.ssoRedirect(); //避免在固定标签前插入
		   });
		     
           
       },

       defaults: {
           name: "M2012.SsoRedirect"
       },

       /**绑定事件处理
       *@inner
       **/
        initEvents: function () {
           var self = this;
           
        },
       
        SsoConfig:{
            compose:function(){ $App.show('compose')},
            "Send.aspx":function(){	Links.show("sms");	},
            "MMSSend.aspx":function(){	Links.show("mms");	},
            "SendFax.aspx":function(){	Links.show("fax");	},
            "contactlist.aspx":function(){	Links.show("addr");	},
            "Clone/default.aspx":function(){  Links.show("migrate");	},
            pushmail:function(){ Links.show("pushemail");},
            timeset:function(){	Links.show("timeset");}, //已失效
            mails:function(){
                M139.Timing.waitForReady('top.$App.getView("folder").model.folders', function () { 
                    $App.showMailbox(1);
	            });
            },
            "/mailnotify.aspx":function(){$App.show('notice');},
            "/LoginSMS.aspx":function(){$App.show('notice');}
        },
		
		/**
		* 判断来源，执行回调
		* @param {function} callback
		*/
		ssoComposeAction:function(id, actionType, callback){
			if(!id || "string" != typeof id){
				return;
			}
        var item = {
	        music: {//12530音乐站点
	            exe: function(id, call){
                    //查询歌曲url
	                var url = "http://mdll.10086.cn/" + "newweb/jsp/music_service/music_info_4_139.jsp?id={0}",                //彩铃推荐给好友的信纸模板
	                	subject = "好友{0}向您推荐了歌曲《{1}》，快来试听吧";//参数0：好友手机号，参数1：歌曲名
					//参数0：歌曲名，参数1：歌手名，参数2：试听地址，参数3：资源服务器路径
	                	contentTemplate = '<table style="margin:0;font-family:Arial, Helvetica, sans-serif; width:100%;background:#F4F9FF;" align="center" cellpadding="0" cellspacing="0"><tbody><tr>\
									<td style="background:url({3}/images/myRings_mail_top_x.png)" width="235"><img src="{3}/images/myRings_mail_logo.png" alt="logoImg" height="53" width="235"></td>\
									<td style="background:url({3}/images/myRings_mail_top_x.png)">&nbsp;</td>\
									<td width="5"><img src="{3}/images/myRings_mail_top_r.png" alt="bgImg" height="53" width="5"></td></tr></tbody></table><table style="margin:0;font-family:Arial, Helvetica, sans-serif; width:100%;background:#F4F9FF;" align="center" cellpadding="0" cellspacing="0"><tbody><tr><td width="20"></td><td><table style="border-bottom:1px #efefef solid;" cellpadding="0" width="100%"><tbody><tr><td style="padding-bottom: 48px; font-size: 14px; font-family: Arial,Helvetica,sans-serif;" valign="top"><table style="margin:16px auto;width:100%;color:#333;"><tbody><tr><td style="font-size: 12px;">\
									<h2 style="color:#FF6600;font-size:12px;">{0}</h2>\
									<p style="margin:8px 0;">歌手：<span>{1}</span></p>\
									<p style="margin:8px 0;">试听地址：<a style="color:#666" href="{2}" target="_blank">{2}</a></p></td></tr><tr><td style="font-size: 12px;"></td></tr></tbody></table></td></tr></tbody></table><table cellpadding="0" style="border-top:1px #fff solid" width="100%"><tr><td style="width:190px;text-align:right;font-size:14px;font-family:Arial, Helvetica, sans-serif;color:#0739ac;line-height:2.5;"><strong>139邮箱</strong><a href="http://mail.10086.cn/" style="margin-left:.5em;color:#0739ac" target="_blank">mail.10086.cn</a></td><td style="text-align:right;font-size:12px;font-family:Arial, Helvetica, sans-serif;line-height:2.5;color:#555555;">感谢您一直以来的支持，我们将不断创新，为您带来更好的邮箱体验!</td><td width="10"></td></tr></table></td><td width="20"></td></tr></tbody></table></td></tr></tbody></table>';
	                	singerId = "",//歌手ID
	 					singerName = "",//歌手名
	 					songName = "",//歌曲名
	 					songId = "",//歌曲ID
	 					userNumber = $User.getUid() || "";
                    //请求音乐接口得到歌曲详细信息
                    "undefined" != typeof searchResult && (searchResult = "")
					//76修改到此
                    try {
                        $.getScript(url.format(id), function(){
	                        if (searchResult &&
	                        "object" == typeof searchResult &&
	                        searchResult.songList) {
	                            singerId = searchResult.songList.singerId || "";
	                            singerName = searchResult.songList.singerName || "";
	                            songName = searchResult.songList.songName || "";
	                            songId = searchResult.songList.songId || "";
	                            userNumber = userNumber.replace(/^86/, "")
								//调用写信接口								
								top.$App.show("compose",null,{inputData:{
									subject: subject.format(userNumber, songName), 
									content:content.format(songName, singerName, 'http://music.10086.cn/'+'newweb/qk/qkshow/' + songId + '/t/139mail.html', "http://images.139cm.com/rm/coremail" )}
								});
							}
                            call && call();
                        }, "utf-8", null)
                    } 
	                catch (e) {
                }
	            }
            },
				feixin: {},//飞信
				mm: {},//应用商城
				shequ: {},//说客
				cmpay: {},//手栅支付
				game: {},//游戏
				jiathis:{//jiathis分享接口ba
					exe:function(id, call){

                        var api = "user:getShareData";
                        var data = {
                            id: id
                        };

                        var options = {
                            onrouter: function (router) {
                                router.addRouter("setting", [api]);
                            }
                        };

                        $RM.call(api, data, callback, options);

                        function callback(result) {
                            if (result && result.responseData) {
                                result = result.responseData;
                                if (result.code === "S_OK") {
                                    result = result['var'] || {};

                                    //调用写信接口
                                    top.$App.show("compose", null, { inputData: {
                                        subject: result.title || "", //标题
                                        content: result.content + '<br>' + result.title
                                    }});
                                    call && call();
                                    return true;
                                }
                            }
                            return false;
                        }
					}
				}
			},
			pArr = null, //参数数组
			key = "", //行为来源，对应item的key
			id = "", //行为数据源id
			//来源
			from = actionType && "string" == typeof actionType && actionType.toLowerCase().trim() ||"";
			//用正则得到参数数组
			pArr = from.match(/(\S+)\_(\S+)/i);
			//得到键值
			key = pArr && pArr[1] || "";
			//得到id
			id = pArr && pArr[2] || "";
			//根据配置执行方法，否则运行默认写信页
			item[key] && item[key].exe ? item[key].exe(id, callback) : CM.show();
			item = pArr = null;
		},

       
        ssoRedirect:function(){
			var self = this;
            var id= $T.Url.queryString("id"),//分类，对应下面的case
	        to = $T.Url.queryString("to"),
            draftId = $T.Url.queryString("draftId"),
            t = $T.Url.queryString("t"),
	        c_composeitem=$T.Url.queryString("c_composeitem"),//写信行为分类
	        _goto=$T.Url.queryString("goto"),
	        smsShareId = $T.Url.queryString("ShareSmsId"),
	        searchString = location.search,
	        mobilePhone="",//手机号
	        idReg=/id=\d+/gi,//从cookie中读取id正则
	        itemReg=/c_composeitem=\S+_\d+/gi,//从cookie中读取item正则
	        mobilePhoneReg=/user=\S+/gi,//从cookie中读取手机号正则
	        aIdMatch=null,//id正则计算结果
	        aItemMatch=null,//item正则计算结果
	        aMobilePhoneMatch=null,//user正则计算结果
	        cookieDomain='.mail.' + document.domain,//cookie域
	        sParamFromCookie="",//从cookie中得到参数
	        messageExpiresTime=null,//如果是短信分享，记录短信分享ID的cookie超时时间
	        fileid = $T.Url.queryString("c_fileid");//彩云sso登录文件id
                        
            // 新窗口写信
            if ($App.isNewWinCompose()) {

                $('#main').show();

                if (draftId && draftId != 'null' && draftId != 'undefined' && location.hash.indexOf("newwin_") == -1) {
                    location.hash = "#newwin_";
                    $App.show('compose', { type: 'draft', mid: draftId });
                } else {
                    CM.show(); // 打开新的写信页
                }

                return;
            }

	        //单元测试，清空变量，模拟.net端cookie设置
	        //id=c_composeitem=mobilePhone="";
	        //Utils.setCookie("mailshare","id=2|c_composeitem=music_199|user=13691910301",new Date(2012,10,10),cookieDomain);
	        /**
	         * sunsc:第三方sso登录后通过.net透传得到cookie。url优先->cookie(使用完立即删除)
	         * cookie数据格式如：
	         * 12530:id=2|c_composeitem=music_199|user=13691910301
	         * jiathis:id=2|c_composeitem=jiathis_12
	         * 发短信:id=2|c_composeitem=message_
	         * 其中id是功能分类，下面会用case。c_composeitem对应ssoComposeAction方法中的item方法
	         * 如果id != 2，则有可能是需要跳转到其他业务，则不处理分享请求
	         */
	        if(!id || !c_composeitem || "string"!=typeof id || "string"!=c_composeitem){
		        //得到cookie
		        sParamFromCookie= $T.Cookie.get("mailshare")||"";
		        if(sParamFromCookie && "string"==typeof sParamFromCookie && sParamFromCookie.indexOf("|")>-1){
			        //取id
			        aIdMatch=sParamFromCookie.match(idReg);
			        id=aIdMatch && aIdMatch[0] || "";
			        id= id && id.replace("id=","");
			        //取c_composeitem
                    aItemMatch = sParamFromCookie.match(itemReg);
			        c_composeitem=aItemMatch && aItemMatch[0]||"";
                    c_composeitem = c_composeitem && c_composeitem.replace("c_composeitem=", "");
			        //如果是12530站点登录，增加读到cookie中的手机号逻辑
			        if(c_composeitem.indexOf("music")>-1){
				        //取user，手机号码
				        aMobilePhoneMatch=sParamFromCookie.match(mobilePhoneReg);
				        mobilePhone=aMobilePhoneMatch && aMobilePhoneMatch[0]||"";
				        mobilePhone=mobilePhone && mobilePhone.replace("user=", "");
				        //比较sso登录cookie中的号码和当前登录用户手机号是否一样。
				        if(mobilePhone.replace(/^86/gi,"")!=top.UserData.userNumber.replace(/^86/gi,"")){
					        //清空变量，sso登录后不做操作。
					        id=c_composeitem=mobilePhone="";
				        }
			        }
			        //jiathis短信分享
			        if (c_composeitem.indexOf("message") > -1) {
				        messageExpiresTime=new Date();
				        messageExpiresTime.setMinutes(messageExpiresTime.getMinutes()+1);
				        $T.Cookie.set("shareMsgId",c_composeitem.replace("message_",""),messageExpiresTime,cookieDomain);
			        }

                    //删除cookie
                    $T.Cookie.set({
                        domain: cookieDomain,
                        name: "mailshare",
                        value: ""
                    });

			        idReg=itemReg=aIdMatch=aItemMatch=null;
		        }
	        }
	        searchString = searchString.replace("?", "&");
	        //排除原有的一些参数
	        searchString = searchString.replace(/&style=[^&]+|&uid=[^&]+|&sid=[^&]+|&funcid=[^&]+|&reload=[^&]+|&id=[^&]+/ig, "");
	        if(id){
	            if(/\D/.test(id)){
	                if(LinkConfig[id]){
	                    //Links.show(id,searchString);
	                    setTimeout(function () {
	                        top.$App.show(id, searchString);
	                    }, 200);
	                    return true;
	                }else{
	                	if(id && id.indexOf('dingyuezhongxin') != -1){ // add by tkh 云邮局相关的跳转
	                		var mpostParams = id.split('_'); // dingyuezhongxin_columnId_pageType_columnName
	                		
	                		if(mpostParams.length === 1){
	                			$App.show("googSubscription");
	                			return;
	                		}
	                		
	                		if(mpostParams.length === 2){// 跳转到云邮局栏目详情页
	                			$App.show("googSubscription", {cid : mpostParams[1], comeFrom : '1003'});
	                			return;
	                		}
	                		
	                		if(mpostParams.length > 2){
	                			var columnId = mpostParams[1];
				        		var pageType = mpostParams[2];
				        		var columnName = '';
				        		if(mpostParams.length === 4){
				        			var tempName = mpostParams[3].replace(/\s+/, '');
				        			columnName = tempName?tempName : '云邮局';
				        		}
				        		
				        		if(pageType == 1){ // 跳转到我的报刊页
				        			$App.show("googSubscription", {cid : columnId, mtype : 0});
				        		}else if(pageType == 2){ // 跳转到云邮局在线服务页（仅限服务号columnId）
				        			$App.show("googSubscription");
				        			$App.show("mpostOnlineService", null, {
						            	title : columnName,
						            	key : columnId,
						            	inputData : {
						            		columnId : columnId,
						            		columnName : columnName
						            	}
						            });
				        		}else if(pageType == 3){ // 跳转到云邮局专题详情页
				        			// dingyuezhongxin_columnId_pageType_topic-activite-3/topic-activite-3
				        			if(columnName){
				        				columnName = columnName.replace(/\-/g, '_');
				        			}
				        			$App.show("googSubscription", {topicid : columnId, mtype : 3, templatename : columnName});
				        		}
	                		}
	                		return true;
	                	}
	                	
	                    Links.show(id,searchString); //跳转旧版处理
	                    return true;
	                }
	            }else{
			        if(id.match(/\d+/ig)){
				        switch (id) {
				            case "0": {//邮件列表
				                M139.Timing.waitForReady('top.$App.getView("folder").model.folders', function () {
				                    //$App.showMailbox(1);
				                    $App.getView("mailbox").model.getFreshUnread(function (mid) {
				                        $App.readMail(mid);
				                    });
				                });
				                break;
				            }
					        case "1":{//邮件搜索
						        Links.show("searchadvance",searchString);
						        break;
					        }
					        case "2":{//写信   
					        	var options = {} 
					        	if(c_composeitem == "setCompose"){
					        		options = {
					        			subject:"新版邮箱第一印象",
					        			content:["电脑登录标准版2.3，惊觉信息架构升级，真真高大上。<br/>",
					        			"手机登录酷版，体验html5技术与贴心交互，快就一个字。<br/>",
					        			"为新版邮箱点139个赞！"].join('')
					        		}
					        	}
					        	if(to){
					        		options.receiver = to;
					        	}
					            if(!$.isEmptyObject(options)){
					            	$App.show("compose",null,{inputData:options});
					            }else{
					            	self.ssoComposeAction(id,c_composeitem);
					            }
						        break;
					        }
					        case "4":{//邮箱伴侣,新版暂无邮箱伴侣
						        $App.show("mobile",searchString);
						        break;
						        
					        }
					        case "5":{//网络书签
						        Links.show("weblink",searchString);
						        break;
					        }
					        case "6":{//好友推荐
						        Links.show("invite",searchString);
						        break;
					        }
					        case "8":{//自写短信
						        Links.show("sms",searchString);
						        break;
					        }
					        case "9":{//自写彩信
						        Links.show("mms",searchString);
						        break;
					        }
					        case "10":{//修改密码
						        Links.show("password",searchString);
						        break;
					        }
					        case "11":{//日程提醒
						        Links.show("calendar",searchString);
						        break;
					        }
					        case "12":{//资讯中心
						        Links.show("rss",searchString);
						        break;
					        }
					        case "13":{//修改别名
						        //Links.show("accountManage",searchString);
						        $App.show('account');
						        break;
					        }
					        case "14":{//传真
						        //处理从社区版本打开传真页面时，打开是旧版的w问题，因此需要替换掉URL参数style=?
						        Links.show("fax",searchString.replace(/style=\d+/gi,""));
						        break;
					        }
	                        case "15"://读信
	                            {
	                    	        M139.Timing.waitForReady('top.$App.getView("folder").model.folders', function () { 
                                        var source = 'interface';
                                        var mid = $T.Url.queryString('mid') || $T.Url.queryString('box_mid');
		                                var fid = $T.Url.queryString("fid") || "1";                  
                                        if(mid){
                                            var returnObj = $App.readMail(mid,false,fid,{source:source});
                                            if(returnObj){
                                                $App.showPage({ name: returnObj.name, view: returnObj.view });
                                                
                                                function callback_readmail() {
                                                    $App.trigger("reloadFolder", { reload: true });
                                                    $App.off(callback_readmail);//只执行一次
                                                }
                                                $App.on('letterInfoReady', callback_readmail);//读信成功后再刷新
                                            }
                                        }               
	                                });
	                                break;
	                            }
					        case "16":{
						            Links.show("homemail",searchString);
						            break;
						        }
					        case "17":{
						        Links.show("diskDev",searchString);
						        break;
						        }
					        case "18":{
						        Links.show("postcard",searchString);
						        break;}
					        case "9":{
						        Links.show("postcard",searchString);
						        break;}
					        case "8":{
						        Links.show("greetingcard",searchString);
						        break;
						        }
					        case "20":{
						        /*CM.show({ //视频邮件
							        videomail: 1
						        });*/
						        $App.show('compose');
						        break;
						        }
					        case "21":{
						        Links.show('quicklyShare',searchString); //文件快递
						        break;
					        }
				            case "22": 
				                M139.Timing.waitForReady('top.$App.getView("folder").model.folders', function () { 
                                    $App.showMailbox(8);  //账单中心
	                            });
						        break;
					            //跳转进手机彩云的我的共享功能
					        case "23"://彩云登录跳转
						        Links.show("diskDev",searchString+"&goid=12");
						        break;
					        //跳转进手机彩云的好友共享对话框
					        case "24"://彩云登录跳转
						        Links.show("diskDev",searchString.replace("c_fileid","fileid")+"&goid=13");
						        break;
					        case "25":{//安全锁 社区按本用到
						        //Links.show('secretfolder');
						        $App.show("account",{anchor:"lock"}); 
						        break;
					        }
					        case "28":{//邮箱设置首页 社区按本用到
						        //Links.show('optionindex');
						        $App.show('account');
						        break;
					        }
					        case "29":{//设置签名 社区按本用到
						        //Links.show('signature');
						        $App.show("account",{anchor:"sign"}); 
						        break;
					        }
					        case "30":{//设置奥运，外域登录
					            /* 
					            if(top.SiteConfig.OlympicMail){
					                Utils.waitForReady("top.OM",function(){
						              top.OM.openTourchPage('login');
						            });
					            }
					           */
					            $Msg.alert('活动已经结束');
					            break;
					        }
					        case "31":{//设置加油，外域登录
					            /*if(top.SiteConfig.CheerUpOlympic){
					                 Utils.waitForReady("top.CU",function(){
						                top.CU.openTourchPage('login');
						             });
					            }*/
					            $Msg.alert('活动已经结束');
					            break;
					        }
					         case "32": {//打开签到，外域登录
				                /*if (top.SiteConfig.CheckIn) {
				                    Utils.waitForReady('$("iframe[name=\'welcome\']")[0].contentWindow.CheckIn._ajax', function () {
				                         $("iframe[name = 'welcome']")[0].contentWindow.CheckIn.showface();
        				                
				                    });
				                }*/
				                //console.log('打开签到页面');
				                $App.show('welcome');
				                break;
				            }
				            case "33":{ //精品订阅，标题有点问题
			                	M139.Timing.waitForReady('top.$App.getView("folder").model.folders', function () { 
                                    $App.showMailbox(9);
			                	});
			                	break;
				            }
				            case "34":{//已经有用，活动插件tips
				            	
				            }

				            case "35": {//任务邮件
				                M139.Timing.waitForReady('top.$App.getView("folder").model.folders', function () {
				                    appView.searchTaskmail();
				                });
				                break;
				            }
				            case "36": {//运营快速唤起
				                M139.Timing.waitForReady('top.$App.getView("folder").model.folders', function () {
				                    $App.showMailbox(1);
				                    var params = location.search;
				                    params = params.slice(1);
				                    params = params.split('&')
				                    for (var i = 0; i < params.length; i++) {
				                        if (typeof params[i] == "string") {
				                            var paramsValue = params[i].split('=');
				                            if (paramsValue[0] == 'params') {
				                                params = paramsValue[1];
				                                break;
				                            }
				                        }
				                    }
				                    params = decodeURIComponent(params);
				                    $Evocation.create(params)
				                });
				                break;
				            }
				            case "37": {//咪咕音乐
				                $App.show('myrings');
				                break;
				            }
				            case "38": {//精品订阅
				                top.$App.show('googSubscription');
				                break;
				            }
				            case "39": {//日历
				                top.Links.show('calendar_search','&search=日历服务');;
				                break;
				            }
							case "40": {//已发送
				                $App.showMailbox(3);
				                break;
				            }
				            case "41": { //日历广场
				                $App.show('calendar_square', searchString);
				                break;
				            }
				            case "42": { //创建活动
				                $App.show('addcalendar', searchString);
				                break;
				            }
				            case "43": { //搜索活动
				                $App.show('calendar_search', searchString);
				                break;
				            }
				            case "44": { //创建日历
				                $App.show('createCalendar', searchString);
				                break;
				            }
				            case "45": { //日历消息（消息盒子)
				                $App.show('calendar_msg');
				                break;
				            }
				            case "46": { //管理日历
				                $App.show('calendar_manage');
				                break;
				            }
							case "47": {//账单生活-主页
				                $App.show("billLifeNew", searchString);
				                break;
				            }
							case "48": {//账单生活-水费
				                $App.show("billLifeNew", "&lc=pay.waterselect&provcode=0&areacode=0&from=1&fromtype=1");
				                break;
				            }
							case "49": {//账单生活-电费
				                $App.show("billLifeNew", "&lc=pay.electricselect&provcode=0&areacode=0&from=1&fromtype=1");
				                break;
				            }
							case "50": {//账单生活-燃气
				                $App.show("billLifeNew", "&lc=pay.gasselect&provcode=0&areacode=0&from=1&fromtype=1");
				                break;
							}
				            case "51": {
				                $App.show('lottery', { originID: 3 });
				                break;
				            }
				            case "52": {
				                Links.show("greetingcard", searchString);
				                break;
				            }
				            case "53": {
				                $App.show('myScore');
				                break;
				            }
				            case "54": {
				                $App.show('myScore', {flag: '3' });
				                break;
				            }
				            case "55": {
				                $App.show('myScore', {flag: '4' });
				                break;
				            }
				            case "60": {
				                $App.show('smartLife');
				                break;
				            }
				            default:
						        { //邮件列表
							        M139.Timing.waitForReady('top.$App.getView("folder").model.folders', function () { 
                                        $App.showMailbox(1);
	                                });
							        return true;
						        }
				        }
			        }else{
				        Links.show(id,searchString);
			        }
		            return true;
		        }
	        }else if(_goto){
		        _goto=_goto.toLowerCase();
		        for(elem in this.SsoConfig){
			        var key=elem.toLowerCase();
			        if(_goto.indexOf(key)>=0){
				        var func=this.SsoConfig[elem];
				        func();
				        return true;
			        }
		        }
		        
		        
		        for(elem in LinkConfig){
			        var url=LinkConfig[elem]["url"].replace(/{stylePath}/ig,"").toLowerCase();
			        if (_goto.indexOf(url) >= 0) {
				        Links.show(elem,searchString);
				        return true;
			        }
		        }
		        
	        }else if(smsShareId){
	            Links.show("smsShare", "&ShareSmsId=" + smsShareId);
	            return true;
	        }else{
	            return false;
	        }
         }
     
     
     
   }));

})(jQuery, Backbone, _, M139);
﻿//添加到命名空间中
//？？文件夹名称格式验证
M139.namespace("M2012.Folder.Model", {
    FolderModel: Backbone.Model.extend({
        /* rm后台文件夹定义
        case 1: // 收件箱
        case 2: // 草稿箱
        case 3: // 已发送
        case 4: // 已删除
        case 5: // 垃圾邮件
        case 6: // 病毒文件夹
        case 7: //  purge_box文件夹 
        case 8: // 我的帐单
        case 9: // 我的订阅
        case 10: // 归档邮件
        case 11: // 广告文件夹
        case 12: // 保留1
        */

        SysFolderId: {  //文件夹id定义
            inbox: 1,
            draft: 2,
            sent: 3,
            deleted: 4,
            junk: 5,
            virus: 6,
            delBack: 7,
            bill: 8,
            archive: 10,
            subscribe: 9,
            advertise: 11,
            business: 12 //商讯生活
        },
        foldertype: {
            system: 1, //系统文件夹
            manager: 2, //管理文件夹 
            custom: 3, //用户文件夹
            tag: 5, //标签文件夹,
            pop: -3//代收文件夹，rm返回的type和自定义文件夹相同，为了与之区分开，定义为-3
        },
        specialtagNames:{
            important:"重要任务",
            urgent:"紧急任务"
        },
        callApi: M139.RichMail.API.call,

        logger : new top.M139.Logger({
			name : "M2012.Folder.Model.FolderModel"
		}),
        //初始化
        initialize: function () {

        },
        //定义默认值
        defaults: {
            //文件夹默认的折叠状态
            unfoldCustom: false,
            unfoldTag: false,
            unfoldPop: false,
            unreadStarCount: 0,
            totalStarCount: 0
        },
          //清除自己的数据
        clear: function () {
            this.destroy();
        },
        getTop: function () {
            var topWindow = M139.PageApplication.getTopAppWindow();
            return topWindow;
        },
        getStarObj: function () {
            var unreadStarCount = this.get("unreadStarCount");
            var result = {
                count: unreadStarCount > 0 ? "<var class='fw_b'>(" + unreadStarCount + ")</var>" : "",
                style: unreadStarCount > 0 ? "" : "",
                title: unreadStarCount > 0 ? $T.Utils.format("{0}封未读邮件", [unreadStarCount]):'星标邮件'
            }
            return result;
        },

        getTaskObj: function () {
            var count = this.get("todoTaskCount");
            var totalCount = this.get("totalTaskCount");
            var style1 = count > 0 ? "" : "display:none;";
            //var style2 = count > 0 ? "font-weight: bold;" : "";
            var result = {
                count: count > 0 ? "<var class='fw_b'>(" + count + ")</var>" : "",
                style: style1, // + style2,
                title: count > 0 ? $T.Utils.format("{0}封任务邮件", [count]) : "待办任务"
            };
            return result;
        },
        getBillObj: function () {
            var newBillCount = this.get("newBillCount");
            var result = {
                count: newBillCount > 0 ? "<var class='fw_b'>(" + newBillCount + ")</var>" : "",
                style: newBillCount > 0 ? "" : "",
                title: newBillCount > 0 ? ($T.Utils.format("{0}封未读邮件", [newBillCount])) : "服务邮件"
            }
            return result;
        },
        getSubscribeObj: function () {
            var newCount = this.get("newSubscriptionCount");
            var result = {
                count: newCount > 0 ? "<var class='fw_b'>(" + newCount + ")</var>" : "",
                style: newCount > 0 ? "" : "",
                title: newCount > 0 ? $T.Utils.format("{0}封未读邮件", [newCount]) : "订阅邮件"
            }
            return result;
        },
        setPopFolders: function () {
            var self = this;
            function clearCustomFolder(fid) {
                self.customFolders=$.grep(self.customFolders, function (n, i) {
                    if (n.fid == fid) {
                        return false;
                    } else {
                        return true;
                    }
                })
            }
            this.pop = _.filter(this.folders, function (item) { //代收文件夹的type不是3，需要通过代收账号关联fid来获取
                
                var popItem = self.getPopItem(item.fid);
                
                if (popItem != null) {
                    if (!item.encoded) {
                        item.encoded = true;//防止执行两次转义
                        item.name = $TextUtils.htmlEncode(item.name);//xss
                    }
                    clearCustomFolder(item.fid);//清道夫
                    item.popId = popItem.popId;
                    item.email = popItem.email;
                    return true;
                }
                //return item.type === self.foldertype.pop; 
            });
        },
        //3个类型的文件夹，系统，自定义，和标签，分别存放。
        //外部取数据时，先调用fetchFolderList 然后再取这3个属性来分别获取数据。
        _resetFolders: function (allFolders) {
            this.folders = allFolders; //加个替身
            var self = this;
            this.customFolders = _.filter(allFolders, function (item) {
                //type=3且不是代收文件夹的
                return (item.type === self.foldertype.custom && !self.isPopFolder(item.fid));
            });
            this.customFolders.sort(function (a, b) {
                return a.location - b.location;
            });
            this.systemFolders = _.filter(allFolders, function (item) {
                if (item.fid == 7) {
                    //item.name = "邮件备份"
                    return false;
                }else if (item.fid == 8) {
                    //item.name = "账单中心"
                    return false;
                } else if (item.fid == 9) {
                    //item.name = "我的订阅"
                    return false;
                } else if (item.fid == 12) { //商讯生活
                    item.name = "商讯生活";
                }
                return item.type === self.foldertype.system || item.type === 2;
            }); //包含type=2的管理文件夹
            this.tags = _.filter(allFolders, function (item) { return item.type === self.foldertype.tag; });
            this.setPopFolders();

            this.trigger('change:folders');
        },

        //获取文件夹列表 ,默认获取全部文件夹，传入type可限定自定义，代收和标签，type 取值参见FOLDERTYPE定义:
        fetchFolderList: function (type, callback, reload) {
            this.trigger('Process');

            if (!callback || !(_.isFunction(callback))) {
                throw new Error('fetchFolderList 第2个参数必须是函数');
            }
            if (!type || _.isNaN(type)) {
                throw new Error('fetchFolderList 第1个参数必须是number 类型的数字');
            }

            if (!reload && (this.folders && this.folders.length !== 0)) {
                callback(this._GetDataByType(type));
                return;
            }

            var self = this;
            console.warn("isFirstLoad:" + this.get("isFirstLoad"));
            if (this.get("isFirstLoad")) { //首次加载节约getAllFolders
                var initData = $App.getConfig("InitData");
                var data = {
                    responseData: {
                        code: "S_OK",
                        "unreadMessageCount": initData["var"].messageInfo["unreadMessageCount"],
                        "unreadStarCount": initData.unreadStarCount,
                        "totalStarCount": initData.totalStarCount,
                        "todoTaskCount": initData.todoTaskCount,
                        "totalTaskCount": initData.totalTaskCount,
                        "totalBillCount": initData.totalBillCount,
                        "newBillCount": initData.newBillCount,
                        "totalSubscriptionCount": initData.totalSubscriptionCount,
                        "newSubscriptionCount": initData.newSubscriptionCount,
                        "var": initData["var"].folderList

                    }
                }
                self.setFoldersData(data);
                self.trigger('ProcessCompleted');
                callback(self._GetDataByType(type));
            } else {
                this.callApi("mbox:getAllFolders", {command:1, visiblePurgeBoxFlag: 1}, function (res) {
                    self.setFoldersData(res);
                    self.trigger('ProcessCompleted');
                    callback(self._GetDataByType(type));
                });
            }
 
        },
        
        setFoldersData: function (res) { //存储文件夹数据到本地变量中
            this.set("unreadMessageCount", res.responseData["unreadMessageCount"]); //保存当前邮件数，用于检查新邮件
            this.set("unreadStarCount", res.responseData["unreadStarCount"]); //未读星标
            this.set("totalStarCount", res.responseData["totalStarCount"]);
            this.set("todoTaskCount", res.responseData["todoTaskCount"] || 0 ); //任务邮件
            this.set("totalTaskCount", res.responseData["totalTaskCount"] || 0);



            this.set("totalBillCount", res.responseData["totalBillCount"] || 0);
            this.set("newBillCount", res.responseData["newBillCount"] || 0);
            this.set("totalSubscriptionCount", res.responseData["totalSubscriptionCount"] || 0);
            this.set("newSubscriptionCount", res.responseData["newSubscriptionCount"] || 0);
			//add by zhangsixue 当所有文件夹未未加密但是总属性显示加密的情况下使用到此属性，兼容服务端BUG!!!
			this.set("passFlag",res.responseData["passFlag"] || 0);
            this.allFolders = res.responseData['var'];
            this._resetFolders(this.allFolders);
        },
        _GetDataByType: function (type) {
            switch (type) {
                case this.foldertype.system: return this.systemFolders;
                case this.foldertype.tag: return this.tags;
                case this.foldertype.custom: return this.customFolders;
                case this.foldertype.pop: return this.pop;
                    //全部文件夹，排除标签
                default: return (this.systemFolders.concat(this.customFolders)).concat(this.pop); //
                    //return this.allFolders;
            }

        },
        /***
        * 获取文件夹，此函数必须要等文件夹加载后才可调用。默认无参数返回全部文件夹，1.system系统文件夹 2.custom 自定义文件夹  3.tag 标签文件夹　4.pop 代收文件夹
        */
        getFolders: function (type) {
            var i_type = this.foldertype[type]
            return this._GetDataByType(i_type);
        },
        /***
        * 根据文件夹id获取文件夹类型
        */
        getFolderType: function (fid) {
            var f = this.getFolderById(fid);
            if (fid == 7 || fid == 8 || fid == 9 || fid == 11 || fid == 12) { return this.foldertype.system }
            
            var type = f.type;

            if (type == this.foldertype.custom) {
                return this.isPopFolder(fid) ? this.foldertype.pop : this.foldertype.custom;
            } else {
                return type;
            }

        },
        //获取邮件数量
        getMailCount: function (type) {
            var list = this.getFolders(type);
            var stats = { 'messageCount': 0, 'messageSize': 0, 'unreadMessageCount': 0, 'unreadMessageSize': 0, 'attachmentNum': 0 }

            $(list).each(function (i, n) {
                stats["messageCount"] += n.stats["messageCount"];
                stats["messageSize"] += n.stats["messageSize"];
                stats["unreadMessageCount"] += n.stats["unreadMessageCount"];
                stats["unreadMessageSize"] += n.stats["unreadMessageSize"];
                stats["attachmentNum"] += n.stats["attachmentNum"];
            });
            return stats;
        },
        isPopFolder: function (fid) {
            return this.getPopItem(fid) != null;
        },
        getPopItem: function (fid) {
            var popItem = null;
            try {
                var app = this.getTop().$App;
                if (app && app.getPopList) { //QQ浏览器异步代码可能比同步代码先执行，造成这里initApi还未执行到，引起getPopList未定义
                    var popList = app.getPopList();
                    $(popList).each(function (idx) {
                        if (this.fid == fid) {
                            popItem = this;
                        }
                    });
                }
            } catch (ex) { }
            return popItem;

        },
        //是否是标签文件夹
        isTagFolder: function (fid) {
            var found = false;
            $(this.tags).each(function (idx) {
                if (this.fid == fid) {
                    found = true;
                }
            });
            return found;
        },
        //根据id获取文件夹
        getFolderById: function (fid) {
            if (!fid || _.isNaN(fid)) {
                //throw new Error('getFolderById：传入number类型的参数');
                fid = 1;
            }
            return _.find(this.folders, function (item) { return item.fid === fid; });
        },

        /**
        *根据文件夹名称获取文件夹
        */
        getFolderByFolderName: function (folderName) {
            if (!folderName || !(_.isString(folderName))) {
                throw new Error('folderName：传入string类型的参数');
            }
            return _.find(this.folders, function (item) {
                return item.name === folderName;
            });
        },
        getTagByTagName: function (tagName) {
            if (!tagName || !(_.isString(tagName))) {
                throw new Error('folderName：传入string类型的参数');
            }
            return _.find(this.tags, function (item) {
                return item.name === tagName;
            });
        },
        messages: {
            forderNameNull: "文件夹名称不能为空",
            forderSpecialStringError: "文件夹中不能包含特殊字符！",
            forderNameOverError: "文件夹名字不能超过16个字母或者8个汉字！",
            folderExist: "文件夹&nbsp;<b>{0}</b>&nbsp;已存在！",
            unvalidRule: '抱歉，您所设置的规则无效，请返回重新设置！',
            clearFolder: '是否清空文件夹?',
            delFolder: '确定要删除该文件夹吗？',
            delTags: '确定要删除该标签吗？',
            folderLocked: '文件夹被加锁，请先<a id="unlockFolder" href="javascript:;" hidefocus="true">解锁</a>',
            notClearFolder: '文件夹不为空，请先清空文件夹',
            mailAddrError: '请输入完整的Email地址，如zhangsan@example.com',
			mailAddrError2: '邮箱地址不正确，邮箱地址如果为多个，请用分号隔开。',
            folderCreateSuccess: '文件夹新建成功',
            folderCreateFail: '文件夹新建失败',
            tagCreateSuccess: '标签新建成功',
            tagCreateFail: '标签新建失败',
            renameFolderSuccess: '文件夹重命名成功',
            renameFolderFail: '文件夹重命名失败',
            renameTagSuccess: '标签重命名成功',
            renameTagFail: '标签重命名失败',
            deleteFolderSuccess: '文件夹删除成功',
            deleteFolderFail: '文件夹删除失败',
            deleteTagSuccess: '标签删除成功',
            deleteTagFail: '标签删除失败',
            moreThan100: '你要创建的收信规则已达到100个的上限，请删除不必要的收信规则后再试',
            clearSuccess: '文件夹清空成功'
        },
        alertWindow: function (text, obj) {
            var self = this;
            var dialog = this.getTop().$Msg.alert(
                    text,
                    {
                        dialogTitle: "系统提示",
                        icon: "warn",
                        isHtml: true,
                        onClose: function (e) {
                            if (obj && obj["id"]) {
                                obj["id"].focus();
                            }
                            if (obj && obj["status"] && obj["status"] == "rename") {
                                obj["id"].select().focus();
                            }
                        }
                    }
                );
            if (obj && obj.unlock) {
                dialog.$el.find("#unlockFolder").click(function (e) {
                    top.$App.show('accountLock', { type: 'unlock' });
                    dialog.close();
                    e.preventDefault();
                })
            }
        },
        checkTagName: function (tagName, skipCount) {//验证标签名称，此函数和checkFolderName流程不一样，返回提示语

            if (tagName == "") {
                return "标签名称不能为空";
            }
            var regex = /^[^\\\/*$"'<>|\^\&\!\%]+$/; /**/
            if (!tagName.match(regex)) {
                return "标签名称中不能包含特殊字符";
            }
            var len = $T.Utils.getBytes(tagName)
            if (len > 16) {
                return "标签名称不能超过16个字母或8个汉字"
            }
            if (!skipCount && this.tags.length >= 50) {
                return "最多可以新建50个标签"

            }
            var result = $.grep(this.tags, function (n, i) {
                return n.name.trim() == tagName.trim();
            });
            if (result.length > 0) {
                return "标签 " + tagName + " 已存在";
            }
            return "";

        },
        //验证文件夹名称
        checkFolderName: function (folderName, obj) {
            var self = this;

            var regex = /^[^\\\/*$"'<>|\^\&\!\%]+$/; /**/
            if (folderName == "") {
                this.alertWindow(self.messages.forderNameNull, obj);
                return false;
            }
            if (!folderName.match(regex)) {
                this.alertWindow(self.messages.forderSpecialStringError, obj);
                return false;
            }
            if (folderName == "我的账单" || folderName == "我的订阅") {
                this.alertWindow($T.Utils.format(self.messages.folderExist, [folderName]), obj);
                return false;
            }
            var len = $T.Utils.getBytes(folderName);
            if (len > 16) {
                this.alertWindow(self.messages.forderNameOverError, obj);
                return false;
            }
            if (this.systemFolders.length + this.customFolders.length >= 100) {
                if (obj && obj.status == "rename") {
                    return true;
                } else {
                    this.alertWindow("最多可以新建100个文件夹", obj);
                    return false;
                }

            }
            try {
                for (var i = 0; i < self.allFolders.length; i++) {
                    if (self.allFolders[i]["name"].trim() == folderName.trim() && self.allFolders[i]["type"] != 5) {//文件夹可以标签重名
                        this.alertWindow($T.Utils.format(self.messages.folderExist, [folderName]), obj);
                        return false;
                    }
                }

            }
            catch (ex) {
                //alert(ex);
            }

            return true;
        },
        checkFolderPassword: function (fid, password, callback) {

            var self = this;


            var options = {
                fid: fid, //rm必须要传这个加密文件夹的fid，否则不工作，
                order: "date",
                desc: 1,
                start: 1,
                total: 1,
                folderPass: password
            }

            this.callApi("mbox:listMessages", options, function (result) {
                var isSuccess = result.responseData["code"] == "S_OK";
                callback(isSuccess);
            });
        },

        //返回ture为未锁
        isLock: function (fid) {
            if (!fid || _.isNaN(fid)) {
                throw new Error('传入number类型的参数');
            }
            var f = this.getFolderById(fid);
            if (f) {
                return f.folderPassFlag ? true : false;
            } else {
                return false;
            }
            //return _.find(this.folders, function (item) { return item.fid === fid; }).folderPassFlag === 0;
        },


        //私有函数 每次view中操作一个folder时候，使用这个方法来取到当前操作的dom对应的folder的id
        _getCurrentOpItem: function (eventTag, prefix) {
            return _.find(this.allFolders, function (item) {
                return parseInt(eventTag.target.id.replace(prefix, '')) === item.fid;
            });
        },

        //私有，用来获取新建立tag时，获取最新的tag颜色。
        _getNewColor: function () {
            var temp = [];
            _.each(this.tags, function (num) { temp.push(num.folderColor); });
            var max = _.max(this.tags, function (item) { return item.folderColor; }).folderColor;
            return _.difference(max + 2, temp)[0];
        },

        //私有，获取文件夹的排序number，用于排序的
        _getMaxFolderLocationId: function () {
            //folder的类型是3
            var self = this;
            if (_.find(this.customFolders, function (item) { return item.type === self.foldertype.custom; })) {
                return _.max(this.customFolders, function (item) { return item.location; }).location;
            }
            //原来的编号顺序是从10001开始，这里沿用
            return 10001;
        },

        //私有，建立标签的时候用到
        _getMaxTagLocationId: function () {
            //tag 类型是5
            var self = this;
            if (_.find(this.tags, function (item) { return item.type === self.foldertype.tag; })) {
                return _.max(this.tags, function (item) { return item.location; }).location;
            }
            //原来的编号是从30002开始这里沿用
            return 30002;
        },

        //这里传递时object对象，
        deleteFolder: function (folderId, folderType, moveToInbox) {
            if (!folderId || _.isNaN(folderId)) {
                throw new Error('deleteFolder 第1个参数必须是 string 类型的密码');
            }
            var self = this;
            var moveToFid = moveToInbox ? 1 : 4; //判断是移到收件箱还是已删除    1 收件箱   4  已删除
            this.trigger('Process');
            this.callApi("global:sequential", { items: [
                { func: "mbox:deleteFolders", "var": { fid: folderId, type: folderType, moveToFid: moveToFid} },
                { func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }
            ]
            }, function (res) {
                self.allFolders = res.responseData['var'];
                //if(){

                //}
                self._resetFolders(self.allFolders);
                var Foldertext = self.messages.deleteFolderSuccess;
                var Tagtext = self.messages.deleteTagSuccess;
                if ($App.getFolderById(folderId).type == 3) {
                    top.M139.UI.TipMessage.show(Foldertext, { delay: 2000 });
                } else {
                    top.M139.UI.TipMessage.show(Tagtext, { delay: 2000 });
                }
                self.getTop().appView.trigger('reloadFolder', { reload: true, comefrom: "deleteFolder", fid: folderId });
            });
        },
        /** 
        给文件夹或标签自动加上过滤器        
        fid：文件夹或标签id
        dealHistory是否对历史邮件进行处理( 0: 只对即时邮处理，   1:只对历史邮件处理，  2: 对即时邮件和历史邮件都进行处理)
        */
        addFilterToFolderTag: function (fid, email, dealHistory,callback) {
            if (dealHistory == undefined) { dealHistory = 0; }

            var folderType = this.getFolderType(fid); //获取文件夹类型
            var dealType;
            var postItems = {
                opType: "add", name: "cx", ignoreCase: 1, conditionsRelation: 1, rulePiority: 1, filterId: -1,
                fromType: 1, dealType: -1, forwardBakup: 1, from: email, sortId: 1,onOff:0,fromRelation:0,
                folderId: 0 //只对收件箱处理
            }

            if (folderType == this.foldertype.tag) { //标签
                postItems["dealType"] = 5; //5表示标签
                postItems["attachLabel"] = fid;
                postItems["dealHistoryMail"] = dealHistory; //是否对历史邮件进行处理    
                //postItems["from"] = email;

            } else {
                postItems["dealType"] = 2; //2表示文件夹
                postItems["moveToFolder"] = fid;
                postItems["dealHistoryMail"] = dealHistory;
                //postItems["from"] = email;
            }
            //folder
            this.callApi("user:setFilter_139", {
                items: [postItems]

            }, function (res) {
                callback(res.responseData);
                /*if (res.data.responseData.code && res.data.responseData.code === 'S_OK') {
                    M139.UI.TipMessage.show("邮件分类规则创建成功", { delay: 3000 });
                    if (dealHistory) {
                    $App.trigger("reloadFolder");
                    $App.trigger("showMailbox");
                    }
                }else{
                    M139.UI.TipMessage.show("遇到异常，规则创建失败，请重试", { className:"msgRed",delay: 3000 });

                }*/
            });



        },
        //添加文件夹
        addFolder: function (folderName, from, callback) {
            //alert(this._getMaxFolderLocationId());
            var self = this;
            this.maxSortId = '';
            this.trigger('Process');
            this.callApi("global:sequential", { items: [
                { func: "mbox:createUserFolder", "var": { items: [{ name: folderName, type: this.foldertype.custom, parentId: 0, pop3Flag: 0, folderPassFlag: 0, location: (this._getMaxFolderLocationId() + 1)}]} },
                { func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }
            ]
            }, function (res) {
                self.allFolders = res.responseData['var'];
                var code = res.responseData['code'];
                if (code == "S_OK") {
                    self._resetFolders(self.allFolders);
                    top.appView.trigger('reloadFolder', { reload: true });
                    top.M139.UI.TipMessage.show(self.messages.folderCreateSuccess, { delay: 2000 });
                } else {
                    self.alertWindow(self.messages.folderCreateFail);
                    return
                }
                setTimeout(function () {//新增文件夹时，根据自定义文件夹的pop3Flag状态设置是否可以POP  延时请求
                    var popFlag = top.$App.checkCustomFolderPopFlag();
                    popFlag = popFlag ? 1 : 0;
                    var obj = { pop3Flag: popFlag, type: 4, fid: top.$App.getFolderByFolderName(folderName).fid }
                    self.callApi("mbox:updateFolders2", obj, function (res) {
                        top.appView.trigger('reloadFolder', { reload: true });
                    });
                }, 1000);
                var len = self.allFolders.length;
                for (var i = 0; i < len; i++) {
                    if (self.allFolders[i].name == folderName) {
                        var forderId = self.allFolders[i].fid;
                        break;
                    }
                }
                if (from) { //添加文件夹时同时添加过滤器
                    self.callApi("user:getFilter_139", {filterFlag: 0,reqFrom: 0}, function (e) {
                        var max = 0;
                        $.each(e["responseData"]["var"], function (i, o) {
                            max = Math.max(max, o.sortId);
                        });
                        self.callApi("user:setFilter_139", { items: [
                { opType: "add", ignoreCase: 1, forwardBakup: 1, name: "cx", fromType: 1, forwardBakup: 1, dealHistoryMail: 0, conditionsRelation: 1, dealType: 2, moveToFolder: forderId, from: from, filterId: -1, sortId: max + 1 ,onOff:0}
                    ]
                        }, function (e) {
                        });
                    });
                }

                if (callback) {
                    callback(self.getFolderByFolderName(folderName));
                }
            });
        },

        /**
        * 批量添加文件夹
        * @param  {Array}  folderName  文件夹数组
        */
        addFolders: function (folderName, callback) {
            var self = this;
            var folderItem = [];
            for (var i = 0; i < folderName.length; i++) {
                folderItem.push({ func: "mbox:createUserFolder", "var": { items: [{ name: folderName[i], type: this.foldertype.custom, parentId: 0, pop3Flag: 0, folderPassFlag: 0, location: (this._getMaxFolderLocationId() + (1 + i))}]} });
            }
            folderItem.push({ func: "mbox:getAllFolders", "var": { stats: 1, type: 0} });
            this.callApi("global:sequential", { items: folderItem }, function (res) {
                self.allFolders = res.responseData['var'];
                self._resetFolders(self.allFolders);
                self.getTop().appView.trigger('reloadFolder', { reload: true });
                if (callback) { callback(res.responseData['var']) }
            });
        },


        //这个是给文件夹改名
        renameFolder: function (folderId, newName) {
            if (!folderId || !(_.isNumber(folderId))) {
                throw new Error('renameFolder 第1个参数必须是 number 类型的文件id');
            }
            if (!newName || !(_.isString(newName))) {
                throw new Error('renameFolder 第2个参数必须是 string 类型的文件名称');
            }
            var self = this;
            this.trigger('Process');
            this.callApi("global:sequential", { items: [
                { func: "mbox:updateFolders", "var": { items: [{ fid: folderId, name: newName, type: this.foldertype.system, folderPassFlag: 0}]} },
                { func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }
            ]
            }, function (res) {
                self.allFolders = res.responseData['var'];
                var code = res.responseData['code'];
                if (code == "S_OK") {
                    self._resetFolders(self.allFolders);
                    top.appView.trigger('reloadFolder', { reload: true });
                    if ($App.getFolderById(folderId).type == 3) {
                        top.M139.UI.TipMessage.show(self.messages.renameFolderSuccess, { delay: 2000 });
                    } else {
                        top.M139.UI.TipMessage.show(self.messages.renameTagSuccess, { delay: 2000 });
                    }

                } else {
                    if ($App.getFolderById(folderId).type == 3) {
                        self.alertWindow(self.messages.renameFolderFail);
                    } else {
                        self.alertWindow(self.messages.renameTagFail);
                    }
                }
            });
        },
        //获取文件夹默认折叠状态 0 总是折叠 1 有未读是展开(默认) 2 总是展开
        getUnfoldStatus: function (type) {
            var unfoldStatus = $App.getCustomAttrs("unfold");
            if (unfoldStatus == "") {
				return 0;
				/* if (type == "tag" || type == "custom") { //标签默认折叠
                    return 0
                }
                else {
                    return 1;
                }
				*/
            }
            var map = { "custom": 0, "tag": 1, "pop": 2 };
            return Number(unfoldStatus.substr(map[type], 1));

        },
        //设置文件夹默认折叠状态 0 总是折叠 1 有未读是展开(默认) 2 总是展开
        setUnfoldStatus: function (type, val, callback) {
            var unfoldStatus = $App.getCustomAttrs("unfold").split("");
            if (unfoldStatus.length == 0) {
                unfoldStatus = [1, 1, 1]; //初始化
            }
            var map = { "custom": 0, "tag": 1, "pop": 2 };
            unfoldStatus[map[type]] = val;
            $App.setCustomAttrs("unfold", unfoldStatus.join(""), callback)
        },
        //文件夹是显示还是隐藏
        changeFolderStatus: function (folderId, hideFlag) {
            if (!folderId || !(_.isNumber(folderId))) {
                throw new Error('folderId 第1个参数必须是 number 类型的文件id');
            }
            var self = this;
            this.trigger('Process');
            this.callApi("global:sequential", { items: [
                { func: "mbox:updateFolders", "var": { items: [{ fid: folderId, hideFlag: hideFlag, type: 7}]} },
                { func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }
            ]
            }, function (res) {
                self.allFolders = res.responseData['var'];
                self._resetFolders(self.allFolders);

                self.getTop().appView.trigger('reloadFolder', { reload: true });


            });
        },


        //清空文件夹数据

        clearFolder: function (folderId, callback) {
            if (!folderId || !(_.isNumber(folderId))) {
                throw new Error('clearFolder 第1个参数必须是 number 类型的文件id');
            }
            var self = this;
            this.trigger('Process');

            var paramUpdate = { func: "mbox:updateMessagesAll", "var": { fid: folderId, newFid: 4, type: "move"} };
            if (folderId == 4) {//已删除文件夹，清空表示彻底删除
                paramUpdate = { func: "mbox:updateMessagesAll", "var": { fid: folderId, type: "delete"} }
            }
            this.callApi("global:sequential", { items: [
                paramUpdate,
                { func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }
            ]
            }, function (res) {
                self.allFolders = res.responseData['var'];
                self._resetFolders(self.allFolders);
                self.getTop().appView.trigger('reloadFolder', { reload: true });
                top.M139.UI.TipMessage.show(self.messages.clearSuccess, { delay: 2000 });
                if (callback) { callback() };
            });
        },

        //过滤文件夹
        filterFolder: function (args, callback) {
            var self = this;
            this.trigger('Process');
            self.callApi("user:getFilter_139", {filterFlag: 0,reqFrom: 0}, function (e) {
                var max = 0;
                var data = e["responseData"]["var"];
                $.each(data, function (i, o) {
                    max = Math.max(max, o.sortId);
                });
                args[0].sortId = max + 1;
                if (callback && callback(data)) {
                } else { 
                    return false
                }
                self.callApi("global:sequential2", { items: [
                { func: "user:setFilter_139", "var": { items: args} }
            ]
                }, function (res) {
                    self.callApi("mbox:getAllFolders", { stats: 1, type: 0},function(res) {
                        self.allFolders = res.responseData['var'];
                        self._resetFolders(self.allFolders);
                        self.getTop().appView.trigger('reloadFolder', { reload: true });
                    }) 
                    
                });
            });
            /*
            this.callApi("user:setFilter_New", { items: args }, function (res) {
            self.trigger('ProcessCompleted');
            self.trigger('change:folders');
            self.getTop().appView.trigger('reloadFolder', true);
            });*/
        },
        /*重新排序文件夹的位置（location）
        算法思路：将所有的文件夹fid放入一个数组中，将拖动起始位置到结束的两个fid对调，然后将所有文件夹重新洗牌。
        重新洗牌就是这个算法的全部，使用序列化接口调用mbox:updateFolders，从10001开始重新写入每个文件夹的location
        */
        resetPosition: function (sourceIndex, targetIndex, callback) {
            var self = this;
            //var sourceFolder = this.getFolderById(sourceFid);
            //var targetFolder = this.getFolderById(targetFid);
            var fidList = []; //复制一个fid数组
            $(this.customFolders).each(function (i, n) {
                fidList.push(n.fid);
            });

            //var sourceIndex=1;var targetIndex=4;
            console.log("原始fidList:" + fidList);
            console.log(sourceIndex + "---" + targetIndex);
            var sourceFid = fidList.splice(sourceIndex, 1); //移除源fid
            if (sourceIndex > targetIndex) { //还原因上一步splice引起的索引变化
                targetIndex += 1
            }
            fidList.splice(targetIndex, 0, sourceFid[0]); //插入新位置
            console.log("排序后fidList：" + fidList);



            var postItems = [];
            var startPosition = 10001
            $(fidList).each(function (i, n) {

                postItems.push({
                    func: "mbox:updateFolders",
                    "var": {
                        items: { fid: n, type: 2, location: startPosition + i * 10 }
                    }
                });

            });
            postItems.push({ func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }); //增加刷新文件夹指令
            console.log(postItems);
            this.callApi("global:sequential", {
                items: postItems
            }, function (res) {
                self.allFolders = res.responseData['var'];
                self._resetFolders(self.allFolders);

                self.getTop().appView.trigger('reloadFolder', { reload: true });
                if (callback) { callback(res.responseData['var']); }
            });


        },
		//标签
		resetPosition2: function(sourceIndex, targetIndex, callback){
			var self = this;
            var fidList = []; //复制一个fid数组
            $(this.tags).each(function (i, n) {
                fidList.push(n.fid);
            });
			
			console.log("原始fidList2:" + fidList);
            console.log(sourceIndex + "---" + targetIndex);
            var sourceFid = fidList.splice(sourceIndex, 1); //移除源fid
            if (sourceIndex > targetIndex) { //还原因上一步splice引起的索引变化
                targetIndex += 1
            }
            fidList.splice(targetIndex, 0, sourceFid[0]); //插入新位置
            console.log("排序后fidList2：" + fidList);
			
			var postItems = [];
            var startPosition = 30001;
            $(fidList).each(function (i, n) {

                postItems.push({
                    func: "mbox:updateFolders",
                    "var": {
                        items: { fid: n, type: 2, location: startPosition + i * 10 }
                    }
                });

            });
            postItems.push({ func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }); //增加刷新文件夹指令
            console.log(postItems);
            this.callApi("global:sequential", {
                items: postItems
            }, function (res) {
                self.allFolders = res.responseData['var'];
                self._resetFolders(self.allFolders);

                self.getTop().appView.trigger('reloadFolder', { reload: true });
                if (callback) { callback(res.responseData['var']); }
            });
		},
		getInboxSub:function(){
		    var v = $App.getCustomAttrs("inboxSub");
		    if (v) {

		        this.set("inboxSub", v.split(","));
		         
		        return this.get("inboxSub");
		    }
		    return [];
		},
		setInboxSub: function (fid, show) {
		    var arr = this.get("inboxSub");
		    if (!arr) { arr = []; }

		    if (show) { //添加
		        arr.push(fid);
		        BH("show_inboxSub_on");
		    } else {
		        $(arr).each(function (i, n) {
		            if (n == fid) {
		                arr.splice(i, 1);
		            }
		        });
		        BH("show_inboxSub_off");
		    }

		    //this.set("inboxSub", arr);
		    $App.setCustomAttrs("inboxSub", arr.join(","), function () {
		        $App.trigger("reloadFolder", { reload: true });
		    });

		},
        /***
        * 获取预设的tag颜色表
        */
        getAllColor: function () {
            //定义颜色表
            return ["#FF0000", "#FF9900", "#C19A00", "#00A301", "#009898", "#CCCC99", "#FF6633", "#CC6666", "#AD33AD", "#9900FF", "#99CC66", "#66CCCC", "#3399FF", "#2B8787", "#855C85", "#6699FF", "#3385D6", "#335CAD", "#5F27B3", "#262ED7", "#D5D2C0", "#B5BFCA", "#999999", "#666666", "#333333", "#729C3B", "#58A8B4", "#5883BF", "#6D72BA", "#E3A325", "#DA8A22", "#B34731", "#BB4C91", "#995AAE", "#CC0000", "#FCD468", "#FF9966", "#CC99CC", "#CC9999", "#AD855C"]
        },
        /***
        * 获取标签的RGB颜色值
        */
        getColor: function (i) {
            var arr = this.getAllColor();
            //做容错处理，防止数组越界
            if (typeof (i) != "undefined") {
                i = i % arr.length;
                if (i < 0)
                    i = 0;
                else if (i >= arr.length) {
                    i = arr.length - 1;
                }
                return arr[i]
            }
            return arr;
        },
        //给tag改变颜色
        changeFolderColor: function (folderId, colorId) {
            if (!folderId || !(_.isNumber(folderId))) {
                throw new Error('changeFolderColor 第1个参数必须是 number 类型的文件id');
            }
            //alert('fid:' + fid + '  colorId:' + colorId);
            //修改颜色:
            var self = this;
            this.trigger('Process');
            this.callApi("global:sequential", { items: [
                { func: "mbox:updateFolders", "var": { items: [{ fid: folderId, type: this.foldertype.tag, folderColor: colorId}]} },
                { func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }
            ]
            }, function (res) {
                self.allFolders = res.responseData['var'];
                self._resetFolders(self.allFolders);
                self.getTop().appView.trigger('reloadFolder', { reload: true });
                //self.trigger('change:folders');
            });
        },
        createSpecialTag: function () {
            var isCreated = $App.getCustomAttrs("specialTag");
            if (!isCreated) {
                $App.setCustomAttrs("specialTag", 1);
                if (this.tags.length < 50) {
                    var arr = [{ name: this.specialtagNames["important"], color: 12 }, { name: this.specialtagNames["urgent"], color: 0 }];
                    for (var i = 0; i < arr.length; i++) {
                        if (!this.getTagByTagName(arr[i].name)) {
                            this.addTag(arr[i].name, arr[i].color);
                        }
                    }
                }
            }
        },
        //添加一个tag
        addTag: function (fname, color, from, callback) {
            if (!fname || !(_.isString(fname))) {
                throw new Error('addTag 第2个参数必须是 number 类型的颜色id');
            }
            var self = this;
            this.trigger('Process');
            if (color == undefined) {
                color = this._getNewColor();
            }

            
            var locationId = (this._getMaxTagLocationId() + 50);
            //特殊处理紧急重要标签
            if (fname == this.specialtagNames["important"]) {
                locationId = 30000;
            } else if (fname == this.specialtagNames["urgent"]) {
                locationId = 30001;
            }

            this.callApi("global:sequential", { items: [
                { func: "mbox:createUserFolder", "var": { items: [{ location: locationId, name: fname, parentId: 0, pop3Flag: 0, folderPassFlag: 0, folderColor: color, type: 5 }] } },
                { func: "mbox:getAllFolders", "var": { stats: 1, type: 0} }
            ]
            }, function (res) {
                self.allFolders = res.responseData['var'];
                self._resetFolders(self.allFolders);

                if (from) { //是同时添加过滤器
                    var folder = self.getFolderByFolderName(fname); //根据名称获取刚刚添加的标签文件夹 todo folder and tagname maybe confiction
                    if (folder) { //容错
                        var labelId = folder.fid;
                        self.callApi("user:getFilter_139", {filterFlag: 0,reqFrom: 0}, function (e) {
                            var max = 0;
                            $.each(e["responseData"]["var"], function (i, o) {
                                max = Math.max(max, o.sortId);
                            });
                            self.callApi("user:setFilter_139", { items: [
		                { opType: "add", ignoreCase: 1, forwardBakup: 1, name: "cx", fromType: 1, dealType: 5, conditionsRelation: 1, attachLabel: labelId, from: from, filterId: -1, sortId: max + 1,onOff:0 }
                        ]
                            }, function (res) {
                            });
                        });
                    }

                }
                var text = self.messages.tagCreateSuccess;
                M139.UI.TipMessage.show(text, { delay: 3000 });

                self.getTop().appView.trigger('reloadFolder', { reload: true });
                if (callback) { callback(self.getTagByTagName(fname)); }
            });
        },
        /***
        * 根据id获取标签
        */
        getTagsById: function (tagIds) {
            /*var result = $.grep(this.tags, function (n, i) {
            var result = $.inArray(n.fid, tagIds);
            return result >= 0;
            })*/
            var result = [];
            for (var i = 0; i < tagIds.length; i++) {
                var tagId = tagIds[i];
                var row = $.grep(this.tags, function (n, i) {
                    return n.fid == tagId;
                });
                if (row.length > 0) {
                    result.push(row[0]);
                }
            }
            return result;
        },
        //获取文件夹下拉菜单
        getFolderDropItems: function (options) {
            function getFolderItems(key) {
                var folderList = $App.getFolders(key);
                var itemsFolder = [];
                $(folderList).each(function (idx, folderItem) {
                    var text = folderItem["name"];
                    var lock = folderItem.folderPassFlag;
                    var item = { text: text, data: folderItem["fid"], lock: lock };
                    if(lock && lock == 1){
                        text += '<i class="i_lock ml_5 mb_5"></i>';
                        item = { html: text, data: folderItem["fid"], lock: lock };
                    }
                    itemsFolder.push(item);
                });
                return itemsFolder;
            }
            var firstItem = [];
            if (options && options.showAll) {//显示全部文件夹
                firstItem = [{ text: "全部文件夹", data: 0 }, { isLine: true}];
            }
            var folderMain = firstItem.concat(getFolderItems("system"));
            var folderCustom = getFolderItems("custom");
            var folderPop = getFolderItems("pop");

            folderCustom[0] && folderMain.push({ isLine: true });
			folderMain = folderMain.concat(folderCustom);
			folderPop[0] && folderMain.push({ isLine: true });
            folderMain = folderMain.concat(folderPop);

            if (options && options.showAdd) {//显示添加文件夹
                folderMain = folderMain.concat([{ isLine: true }, { text: "添加文件夹...", data: -2}]);
            }
            return folderMain;
        },
        //获取标签下拉items
        getTagItem: function (options) {
            var tagList = $App.getFolders("tag");
            var itemsTag = [];
            if (options && options.showNoLimit) {
                itemsTag = [{ html: "不限", labelId: -1}];
            }

            $(tagList).each(function (idx, folderItem) {
                var isSpecial = (folderItem["name"] == "重要任务");
                var color = $App.getTagColor(folderItem["folderColor"]);
                var tagItemHtml = ['<span class="text"><span class="tagMin',  isSpecial ? " tagJJ" : "", '" style="border-color:', color, '"><span class="tagBody" style="background-color:',
            color, ';border-color:', color,
            , '">', isSpecial ? ' <i class="i_jj"></i>' : "", '</span></span><span class="tagText">',
            folderItem["name"], '</span></span>'].join("");
                //tagItemHtml="<b>"+folderItem["name"]+"</b>"
                itemsTag.push({
                    html: tagItemHtml, command: "tag",
                    labelId: folderItem["fid"]
                });
            });

            if (options && options.showAdd) {
                itemsTag = itemsTag.concat([{ html: "新建标签...", labelId: -2}]);
            }
            return itemsTag;
        },
        renderFunctions: {
            getMailCount: function () {
                var count = this.DataRow["stats"]["unreadMessageCount"]; //新邮件数
                return count > 0 ? "<var class='fw_b'>(" + count + ")</var>" : ""; //大于0才显示

            },
            getTitle: function () {
                var d = this.DataRow;
                return d.stats.unreadMessageCount > 0 ? $T.Utils.format("{0}封未读邮件", [d.stats.unreadMessageCount]) : $T.Utils.format("{0}", [d.name]);
            },
            getStyle: function () {
                return this.DataRow["stats"]["unreadMessageCount"] > 0 ? "" : "";
			},
            getSpecialTag:function(type){
                var isSpecial = (this.DataRow["name"] == "重要任务")
                if (isSpecial) {
                    return type == 1 ? " tagJJ" : "<i class=\"i_jj\"></i>";
                } else {
                    return "";
                } 
            },
            getEmail: function () {
                var row = this.DataRow;
                var fid = row["fid"];
                var popList = $App.getPopList();
                var result = $.grep(popList, function (item, i) {
                    if (item.fid == fid) {
                        row["email"] = item["email"];
                        return true;
                    } else {
                        return false;
                    }
                })
                //grep返回值为数组，另外后台可能有脏数据，多个代收账号有可能共用同一个文件夹
                if (result && result.length > 0) {
                    return result[0]["email"];
                } else { //出错了，没找到
                    return row["name"];
                }
            },
            getLock: function () {
                if (this.DataRow["folderPassFlag"]) {
                    return "<i class=\"i_lock mr_5\"></i>";
                } else {
                    return "";
                }
            },
            getColor: function () {
                var color = Number(this.DataRow["folderColor"]);
                return this.model.getColor(color);

            },
            maxLength: function (field, len) {
                return $T.Utils.getTextOverFlow2(field, Number(len), true);
            }

        }

    })
});

﻿M139.namespace("M2012.Folder.View", {
FolderMain :Backbone.View.extend({
el:"#sb_h", //folder_main改为sb_h
template:"",
events:{
    "click #folder_main li a[fid]": "folderClick",
	"click #list_folder_other li a[fid]": "folderClick",
    "click #btn_addFolder": "addFolder",
    "click #btn_clear": "clearFolder",
    "click #btn_clearJunk": "clearFolder"
    //"click #btn_setCustom": "openSetting",
    //"click #btn_groupMail":"showGroupMail"
    //"click #folder_other": "unfold"
},
initialize: function(){
   //alert("hello");
   this.model=new M2012.Folder.Model.FolderModel();
   
   var folderCustomView=new M2012.Folder.View.FolderCustom({model:this.model});
   var folderPopView=new M2012.Folder.View.FolderPop({model:this.model});
   var folderTagView=new M2012.Folder.View.FolderTag({model:this.model});
   this.folderTagView = folderTagView;
   this.model.set("isFirstLoad", true);
   var self=this;
   appView.on("change:star",function(){
   		self.render();
   })
   //刷新文件夹 
   appView.on("reloadFolder", function (e) {
       if (e && e.callback) { //如果有callback则执行，用户刷新文件夹的后续操作
           self.render(true, e.callback);
       } else {
           self.render(true);
       }

       self.validateMailCount();
       
       self.resizeSideBar();

       if (e && e.comefrom == "deleteFolder") {
           var obj = $App.getTabByName("mailbox_" + e.fid);
           if (obj) {
               $App.close(obj.name);
           }
       }
   })
   $("#sidebar").find(".subListScrollCon").scroll(function () {
       if (this.scrollTop > 0) {
           $(".subListScrollTop").show();
       } else {
           $(".subListScrollTop").hide();
       }
   });
   //读取未读邮件，减少文件夹未读数
   appView.on("reduceFolderMail",function(e){
        var fid = e.fid;
        var folder = self.model.getFolderById(fid);
        if (folder.stats.unreadMessageCount > 0) {//避免负数
            folder.stats.unreadMessageCount -= 1;
        }
	
        messageTotal = $User.getMessageInfo();
        if (messageTotal.unreadMessageCount) {
            var unreadLockCount = 0;
            messageTotal.unreadMessageCount--;

            $($App.getFolders()).each(function(i,n){
              if($App.getView("folder").model.isLock(n.fid)){
                unreadLockCount += $App.getFolderById(n.fid).stats.unreadMessageCount;
              }
            });

            if(messageTotal.unreadMessageCount <= unreadLockCount){
              $Evocation.msgBoxHot.hide();
            }
        }else{
             //用于消息提醒盒子的红点展示判断
            $Evocation.msgBoxHot.hide();
        }
        self.reduceBillSub();
        var type = self.model.getFolderType(fid);
        if (type == self.model.foldertype.system) {
            self.render();
            folderCustomView.render();//因为要重新生成自定义文件夹的tips
        } else if (type == self.model.foldertype.custom) {
            folderCustomView.render();
        } else if (type == self.model.foldertype.pop) {
            folderPopView.render();
        }
        
        self.validateMailCount();
        if ($App.getMailboxView().model.get("isSearchMode")) {
            var isStarMail =(e && e.isStar)
            self.reduceStarSearchMail(isStarMail);//星标邮件减少，搜索结果未读数减少
        }

        if (e && e.isVip) {
            var stats = self.model.get("vipMailStats");
            if(stats.unreadMessageCount>0){
                stats.unreadMessageCount -= 1;
            }
        }

   		
   })
    // add by tkh 读取未读群邮件，减少tag未读数
    /*
   appView.on("reduceGroupMail",function(){
        self.getOtherMailCount(self.model.systemFolders);
   })*/
   //读取未读邮件，减少tag未读数
   appView.on("reduceTagMail",function(e){
        var label = e.label;
   		var tagArr=self.model.getTagsById(label);
   		$(tagArr).each(function (i, m) {
   		    if (m.stats.unreadMessageCount > 0) { //避免负数
   		        m.stats.unreadMessageCount -= 1;
   		    }
   		})
   		folderTagView.render();
   		self.validateMailCount();
   })
   appView.on("unfoldCommand", function (e) {
       var flag = true;
       if (e.flag!=undefined) {
           flag = e.flag;
       }
       if (e.type == "folder" || e.type == "custom") {
           folderCustomView.unfold(flag);
       } else if (e.type == "tag") {
           folderTagView.unfold(flag);
       } else if (e.type == "pop") {
           folderPopView.unfold(flag);
       } else if (e.type == "other") {
           self.unfold(flag);
       }
   })
   $App.on("change:contact_maindata", function () {
       self.renderVipMailCount(true);
   });
   /*$App.on("contactLoad", function () {
       setTimeout(function () { //延时等待数据组装
           self.renderVipMailCount();
       }, 1000);
   });*/

 
  
   this.autoReceive();
  
},
loadUnfoldStatus: function () {
    var self = this;
    M139.Timing.waitForReady("$App.getConfig(\"PopList\")", function (attrs) {
        setTimeout(function () { //延时，避免收件箱的dom还未生成
            loadStatusInner("custom");
            loadStatusInner("pop");
            loadStatusInner("tag");
            function loadStatusInner(type) {
                var status = self.model.getUnfoldStatus(type);
                var flag = false;
                if (status == 2) { //总是展开
                    flag = true;
                } else if (status == 1) { //有未读时展开
                    var stats = self.model.getMailCount(type);
                    if (stats.unreadMessageCount > 0) {
                        flag = true;
                    }
                }
                
                $App.trigger("unfoldCommand", { type: type, flag: flag });
            }
        }, 500);
    })
},
reduceBillSub:function(){
    var mm = $App.getMailboxView().model;
    var fm = $App.getView("folder").model;
    if(mm.isBillMode()){
        fm.set("newBillCount", fm.get("newBillCount") - 1);
    }else if(mm.isSubscribeMode() ){
        fm.set("newSubscriptionCount", fm.get("newSubscriptionCount") - 1);
    }
},
reduceStarSearchMail: function (isStar) {
    var self = this;
    var mailboxModel = $App.getMailboxView().model;
    if (isStar) {//星标邮件减少
        var unreadStarCount = self.model.get("unreadStarCount");
        if (unreadStarCount > 0) {
            self.model.set("unreadStarCount",unreadStarCount - 1);
        }
        this.folderTagView.renderStarMail();
        //var obj = this.model.getStarObj();
        //$("#li_star a").html("星标邮件"+obj.count).attr("title",obj.title).attr("style",obj.style);
    }

    if (mailboxModel.get("isSearchMode")) {
        var searchStats = mailboxModel.get("searchStats");
        if (searchStats.unreadMessageCount > 0) {
            searchStats.unreadMessageCount -= 1;
        }
    }
},
refreshTaskCount:function(todoCount,totalCount){
    todoCount = this.model.get("todoTaskCount") + todoCount;
    totalCount = this.model.get("totalTaskCount") + totalCount;
    todoCount = todoCount > 0 ? todoCount : 0;
    totalCount = totalCount > 0 ? totalCount : 0;
    this.model.set({"todoTaskCount" : todoCount});
    this.model.set({"totalTaskCount" : totalCount});
    this.renderTaskMail();
},
renderBillSub:function(){
    var obj = this.model.getBillObj();
    $("#li_bill").attr({ "style": obj.style });
    $("#li_bill a").attr("title", obj.title).html('<i class="i_m_money"></i>服务邮件' + obj.count);

    obj = this.model.getSubscribeObj();
    $("#li_subscribe").attr({ "style": obj.style });
    $("#li_subscribe a").attr("title", obj.title).html('<i class="i_m_rss"></i>订阅邮件' + obj.count);
},
renderTaskMail:function(){
    var obj = this.model.getTaskObj();
    $("#li_remind").attr({ "style": obj.style });
    $("#li_remind a").attr("title", obj.title).html('<i class="i_cDon"></i>待办任务' + obj.count);
},
validateMailCount: function () { //告知欢迎页等模块需要重新加载
    var module = $App.getTabByName("welcome");
    if (module) {
        module.isRendered = false;
        module.data = { reload: true };
    }

    /*if (module.name == "welcome") {
        var result = module.view.render(false); //执行当前模块的render
        module.isRendered = true;//表示已显示过
    }else{
        $App.getTabByName("welcome").isRendered = false;
    }*/


},
setButtonVisible: function () {
    var folderInfo = this.model.getFolderById(4);
    if (folderInfo.stats.messageCount == 0) {
        $("#btn_clear").hide();
    }
    /*folderInfo = this.model.getFolderById(5);
    if (folderInfo && folderInfo.stats.messageCount == 0) {
        $("#btn_clearJunk").hide();
    }*/
},
//自动收取新邮件
autoReceive: function () {
    var self = this;
    try{
    	
    	// update by tkh  调PNS接口自动收信
    	if(self.autoReceiveTimer){
    		clearTimeout(self.autoReceiveTimer);
    	}
    	self.autoReceiveTimer = setTimeout(function(){
    	    //self.model.autoReceiveMail();
    	    new M2012.Model.Pns.PnsModel().startRequestPns();
    	}, 1000 * 5);
    }catch(ex){
        //alert(ex);
    }
},
render:function (reload,callback){
    var self=this;
    //this.template=$T.Html.decode($(self.el).html());
    function renderFunc(dataSource){
        //var htmlStr=_.template(self.template,dataSource);
        //$(self.el).html(htmlStr).show();
        var rp=new Repeater($("#template_folderMain").val()); //传入dom元素，dom元素即做为容器又做为模板字符串
     		var html=rp.DataBind(dataSource); //数据源绑定后即直接生成dom
     		$('#folder_main').html(html);
     		self.renderBillSub();

    		//其它文件夹分离绑定
    		/*var otherRp= new Repeater($("#template_otherFolders").val()); 
     		var otherHtml= otherRp.DataBind(dataSource); 
     		$('#list_folder_other').html(otherHtml);
    		


     		var icon = $("#folder_other").find("[name=i_unfoldOther]");
     		if (self.model.get("unfoldOther") && icon.hasClass("t_blackRight")) { //原来是展开状态，恢复展开
     		    self.unfold(true);
     		}*/
     		if (reload) {
     		    self.model.trigger("folderDataChange");//文件夹数据加载完成，通知各文件夹列表view执行render
     		}
     		appView.trigger("folderRendered");//通知appview文件夹渲染已完成
     		if (callback) {
     		    callback();
     		}

     		self.setButtonVisible();

     		if (self.model.get("isFirstLoad")) {
     		    self.loadUnfoldStatus();
     		}
     		self.model.set("isFirstLoad",false);
    }
    
    
    this.getDataSource(renderFunc,reload);
    
    
},


/**
*重设左边栏的高度
*当浏览器窗口高度<=其他文件夹就出现整个滚动条
*/
resizeSideBar: function () {
    setTimeout(function () {
        
        var sidebar = $("#sidebar .subListScrollCon"); //容器
        var bottomHeight = 150;//150是底部特色应用的高度，因为加载有延时，动态计算麻烦先写固定值
        var appHeight = $("#myapp").height();
        if (appHeight > 30) {
            bottomHeight = appHeight+10;
        }
        var height = $App.getBodyHeight() - sidebar.offset().top - bottomHeight; 
        $("#sb_h").height($App.getBodyHeight() - sidebar.offset().top);
        //console.log(sidebar[0].scrollHeight , height);
        if (sidebar[0].scrollHeight > height) {
            sidebar.height(height);
        } else if (sidebar[0].scrollHeight == height) {
            sidebar.css("height", "");//清除高度
        }else {
            $(".subListScrollTop").hide();
        }
       

	}, 10);
},
getDisplay: function (folder) { //是否显示该文件夹
    if (folder.stats.messageCount == 0) { //无邮件
        /*if (folder.hideFlag == 1) { //隐藏文件夹标识
            return "display:none";
        }*/
        var sys=this.model.SysFolderId;
        if (folder.fid == sys.advertise || folder.fid == sys.business || folder.fid == sys.virus || folder.fid == sys.junk || folder.fid == sys.archive) {
            return "display:none"; 
        }
    }
    return "";
},
    /*
getOtherMailCount: function (folderList) { //获取更多文件夹的邮件数量
    var unreadCount=0;
    var totalCount = 0;
    var groupMailInfo=$User.getGroupMailInfo();
    if (groupMailInfo) {
        var unreadG= Number(groupMailInfo.unread);
        var totalG= Number(groupMailInfo.totalMail);
        unreadCount += unreadG;
        totalCount += totalG; 

        var elem = $("#btn_groupMail");
        if (unreadG > 0) {
            elem.html("群邮件<var class='fw_b'>("+unreadG+")</var>");
        }else{
        	// add by tkh 用户删掉最后一封群邮件后，重新渲染
        	elem.html("群邮件");
        }
        elem.attr("title", unreadG > 0 ? $T.Utils.format("{0}封未读邮件", [unreadG]) : "群邮件");
    }
    var folderIdList = [4,5,6,10,11,12]; //草稿箱已经移出其它文件夹
    for (var i = 0; i < folderList.length; i++) {
        var folder = folderList[i];
        if ($.inArray(folder.fid, folderIdList) >= 0) {
            unreadCount += folder.stats.unreadMessageCount;
            totalCount += folder.stats.messageCount;
        }

    }
    setTimeout(function () {//做下延时，躲过被系统文件夹重绘时覆盖掉。
        console.log("render othermail count");
        var elem = $("#folder_other");
        elem.attr("title", unreadCount > 0 ?$T.Utils.format("{0}封未读邮件", [ unreadCount]) : "其他文件夹");
        //elem.attr("style", unreadCount > 0 ? "font-weight: bold;" : "");
        elem.find("span").html(unreadCount > 0 ? "<var class='fw_b'>(" + unreadCount + ")</var>" : "");
    }, 100);

},*/
showGroupMail:function(){
    $App.jumpTo("groupMail");
    /*M139.core.utilCreateScriptTag(
    {
        id: "groupMail_scriptId",
        src: "/m2012/js/matrixvm/m2011.matrixvm.groupmail.js",
        charset: "utf-8"
    },
    function () {
        $App.jumpTo("groupMail");
    }
    )*/
},
renderVipMailCount: function (refresh) { //获取vip邮件数量
    var self = this;
    function renderVipCountInner (stats) {
        if (stats) {
            self.model.set("vipMailStats", stats);
            var elem = $("#li_vip span");
            if (stats.unreadMessageCount > 0) {
                var count = stats.unreadMessageCount > 0 ? ("(" + stats.unreadMessageCount + ")") : "";
                var title = $T.Utils.format("{0}封未读邮件", [stats.unreadMessageCount]);
                

                elem.attr('title', title);
                //$("#li_vip a").css("font-weight", "bold");
                elem.html("VIP邮件" + "<var class='fw_b'>(" + stats.unreadMessageCount + ")</var>").attr("title", title);
            } else {
                var title = "VIP邮件";
                elem.attr('title', title);
                elem.html("VIP邮件");
            }
        }
    }
    if (this.model.get("vipMailStats") &&  !refresh) { //用缓存刷新界面
        renderVipCountInner(this.model.get("vipMailStats"));
    } else { 
        if( $App.getCurrentTab().name.match(/mailsub_[^0]/)){//订阅多实例邮件列表刷新时不能刷新vip，否则覆盖搜索结果
            return ;
        }
        var mailboxModel = $App.getView("mailbox").model;
        mailboxModel.getVipMailCount(renderVipCountInner);
    }
},
getDataSource:function(callback,reload){
	var self=this;
	function rebuildDataFunc(result){
	  
       var list=result;
       var folderids=self.model.SysFolderId;
       var result = { //初始化星标邮件、任务邮件
           star: self.model.getStarObj(),
           task: self.model.getTaskObj()
           };

       for(elem in folderids){
        if(elem){
            var folderObj=$.grep(list,function(n,i){    //查找对应的文件夹
                return n.fid==folderids[elem];
            });
            if(folderObj && folderObj.length>0){
                result[elem]={};

                if(folderObj[0].stats.unreadMessageCount>0){
                	result[elem].count="<var class='fw_b'>("+folderObj[0].stats.unreadMessageCount+")</var>";
                    //result[elem].style="font-weight: bold;";
                }else{
                	result[elem].count="";
                    result[elem].style="";
                }
                /*if (elem == "bill" || elem == "subscribe") { //账单和订阅加锁图标
                    if (folderObj[0] && folderObj[0].folderPassFlag) {
                        result[elem].lock = "<i class=\"i_lock mr_5\"></i>";
                    } else {
                        result[elem].lock = "";
                    }
                }*/

                result[elem].style =result[elem].style+ self.getDisplay(folderObj[0]);
                result[elem].title =folderObj[0].stats.unreadMessageCount > 0 ? $T.Utils.format("{0}封未读邮件", [folderObj[0].stats.unreadMessageCount]) : $T.Utils.format("{0}", [folderObj[0].name]);
                

            }else{//如果文件夹不存在，构造默认数据容错
                result[elem] = {};
                result[elem].style = self.getDisplay({ fid: folderids[elem], stats: { messageCount: 0 } });
            }
            
        }
       }

        //必须等待群邮件数量加载后，才可显示更多文件夹的邮件数量
        /*
        M139.Timing.waitForReady("$User.getGroupMailInfo()", function () {
               
            self.getOtherMailCount(list);
        });*/


        $App.getModel("contacts").requireData(function () { //显示vip邮件数量
            var delay = self.model.get("isFirstLoad") ? 2000 :0;//首次加载需要延时等待通讯录的VM数据组装
            setTimeout(function () {
                M139.Timing.waitForReady("Contacts.data.vipDetails", function () { //增加waitfor,确保vipmail已经组装了
                    self.renderVipMailCount();
                });
            }, delay);
        });
       
        
       callback(result); //异步返回值
	}
	if (reload) {
	    //self.model.set("vipMailStats", null);//清空vip邮件数，在渲染的时候会重新获取
		this.model.fetchFolderList(this.model.foldertype.system,rebuildDataFunc,true);	
	}else{
		rebuildDataFunc(this.model.systemFolders);
	}
	
},
folderClick:function(event){
	var element=(event.srcElement || event.target);
	var fidStr = $(element).parents("li[fid]").attr("fid");
	if(fidStr!="" && element.tagName!= "I"){
		$App.showMailbox(Number(fidStr));
	}
},
clearFolder: function (e) {
    var target=e.target || e.srcElement;
    var fid = $(target).parents("[fid]").attr("fid");
    
    $App.trigger("mailCommand",{command:"clear",fid:Number(fid)});
},
openSetting: function () {
    $App.openDialog("个性化设置", "M2012.View.UnfoldSetting", {type:"custom", width: 383, height: 120,buttons:["确定","取消"] });
},
    /*
unfold: function (flag) { //展开更多文件夹
    var self = this;
    
    //var element = $(event.srcElement || event.target);
    //element = element.parents("li").find("i");
    var element = $('#folder_other').find("[name=i_unfoldOther]");
    if (flag==true && element.hasClass("t_blackDown")) {
        return;
    } else if (flag == false && element.hasClass("t_blackRight")) {
        return;
    }
    element.toggleClass(function (idx, className) {
        element.removeClass(); //移除所有class
        //return className == "i_plus" ? "i_minus2" : "i_plus";
    	return className.indexOf("t_blackRight") > -1 ? "triangle t_blackDown":"triangle t_blackRight";
	});


    self.model.set("unfoldOther", element.hasClass("t_blackDown"));


    $("#list_folder_other").toggle();
    this.resizeSideBar();
},*/
addFolder: function () {
    $App.trigger("mailCommand", { command: "addFolder" });
}

})
});
M139.namespace("M2012.Folder.View", {
FolderCustom :Backbone.View.extend({
el: "#customfolder_list",     

template: ['<a bh="left_foldermanager" hidefocus id="folder_inbox" href="javascript:;"  >',
				'<i name="i_unfold" class="triangle t_blackRight" bh="left_unfoldInbox"></i>',
                '<span>我的文件夹</span>',
				'<i class="i_add" id="btn_addfolder" bh="left_createFolder" title="添加文件夹"></i>',
				'<i class="i_set" id="btn_setCustom" bh="left_inboxSetting" onClick="return false" title="我的文件夹个性化设置"></i>',
			'</a>',
			'<div id="folder_custom" style="display:none">',
			   '<ul class="small" style="display:block;">',
               '<!--item start-->',
               '<li fid="$fid"><a hidefocus href="javascript:void(0)" fid="$fid"  title="@getTitle()" @getStyle() >@getLock() @maxLength(name,10)',
               	'@getMailCount()</a></li>',
               '<!--item end-->',
             '</ul>',
			 '</div>'].join(""),			 
events:{
	"click #folder_custom li[fid]":"folderClick",
	"click #btn_addfolder": "addFolder",
	"click #btn_setCustom": "openSetting", 
	//"click #folder_inbox span": "showFolderManage",
	"click #folder_inbox":"unfold"
},
initialize: function(options){
   var self=this;
   this.model=options.model;
   this.model.on("folderDataChange", function () { //文件夹数据源发生改变时调用render
       M139.Timing.waitForReady("$App.getConfig(\"PopList\")", function () {
           setTimeout(function () { //改成异步，让代收文件夹先渲染，否则会多出代收的文件夹
               self.el = "#customfolder_list";//收件箱显示后才有容器el
               self.render();
           }, 10);
       });
   });
  
},
render:function (){
    var self=this;
    //this.template=$T.Html.decode($(self.el).html());


    this.getDataSource(function(dataSource){
        var rp=new Repeater(self.template); //传入dom元素，dom元素即做为容器又做为模板字符串
        rp.Functions = self.model.renderFunctions;
        var html = rp.DataBind(dataSource); //数据源绑定后即直接生成dom
 		$(self.el).html(html);
		
 		var subFids = self.model.getInboxSub();
 		var sendedbox = $("#li_sendedbox");

 		$("#folder_main").find("li[isCustom]").remove();//先清场

 		$(subFids).each(function (i, n) {
 		    var subFolder = $("#folder_custom").find("li[fid=" + n + "]");
		        
 		    subFolder.attr("isCustom", 1);//打上印记，便于刷新的时候清场
 		    sendedbox.before(subFolder);

 		});
 		
		//标题处理
 		var stats = self.model.getMailCount("custom");
 		var title = stats.unreadMessageCount > 0 ? $T.Utils.format("{0}封未读邮件", [stats.unreadMessageCount]) : "我的文件夹";
		var customContainer = $('#folder_inbox');
		customContainer.attr('title',title);
		if (stats.unreadMessageCount > 0) {
			var unreadMessageCount = '<var class="fw_b">(' + stats.unreadMessageCount + ')</var>';
 		    //customContainer.css("font-weight", "bold"); //有未读加粗
 		    customContainer.find("span").html(String.format("我的文件夹{0}", [unreadMessageCount]));
 		}
		
		/*
 		$Hint.register($("#folder_inbox"), self.renderCustomTips(dataSource));
 		$Hint.on("show", function (args) {
 		    if ($(args.sender).attr("id") == "folder_inbox") { //判断tips
 		        if (args.el.html()=="") { //无二级目录
 		            args.isShow = false;
 		        }else if ($("#folder_inbox").find("[name=i_unfold]").hasClass("t_blackDown")) {
 		            args.isShow = false;
 		        }
 		    }
 		    
 		});
		*/
 		var icon = $("#folder_inbox").find("[name=i_unfold]");
 		if (dataSource.length == 0) { //无自定义文件夹时隐藏加号
 		    icon.remove();
 		} else if (self.model.get("unfoldCustom") && icon.hasClass("t_blackRight")) { //原来是展开状态，恢复展开
 		    self.unfold(true);
 		}
 		/*if (self.model.get("isFirstLoad")) {
 		    var status = self.model.getUnfoldStatus("custom");
 		    if (status == 2 || (status == 1 && stats.unreadMessageCount>0)) {
 		        self.unfold(true);
 		    } else {
 		        self.unfold(false);
 		    }
 		}*/

    });
    
},
renderCustomTips: function (dataSource) {
    var data = dataSource.concat();//复制数组
    data=$.grep(data, function (a) { //筛选有未读邮件的
        return a.stats.unreadMessageCount > 0;
    });
    if (data.length == 0) {//无未读邮件
        return;
    }
    data.sort(function (a,b) { //按新邮件数对文件夹排序
        return  b.stats.unreadMessageCount-a.stats.unreadMessageCount;
    });
    var isMore=false;
    if (data.length > 4) {
        data=data.slice(0,4);//截取前4个文件夹
        isMore=true;
    }

    //data = [$App.getFolderById(1)].concat(data);//加入收件箱
    var template = ['<div id="tip_inbox" style="width:170px;"><!--item start-->',
        '<div><a fid="$fid" href="javascript:appView.showMailbox($fid)">@getName(name)($stats.unreadMessageCount)</a>'
        , '</div><!--item end-->',isMore?"......":"",'</div>'].join("");
    var rp = new Repeater(template); //传入dom元素，dom元素即做为容器又做为模板字符串
    rp.Functions = {
        getName: function (name) {
            return $T.Utils.getTextOverFlow2(name, Number(12), true);
        }
    }
    var html = rp.DataBind(data); //数据源绑定后即直接生成dom
    /*$("#tip_inbox a").live("click", clickHandler);
    function clickHandler() {
        $("#tip_inbox a").die("click", clickHandler);//回收
        $App.showMailbox(Number(Number($(this).attr("fid"))));
    }*/
    return html;



},
pushOtherFolder: function (customFolders) {
     
        var folderList = this.model.getFolders("system");
        var folderIdList = [5, 6, 10, 11, 12]; //广告文件夹、商讯生活等
        
        function inCustom(fid) { //判断是否已经添加过
            var result = false;
            $.grep(customFolders,function (n, i) {
                if (fid == n.fid) {
                    result = true;
                    return;
                }
            });
            return result;
        }

        for (var i = 0; i < folderList.length; i++) {
            var folder = folderList[i];
            if ($.inArray(folder.fid, folderIdList) >= 0 && !inCustom(folder.fid)) {
                customFolders.push(folder);
                folderList.splice(i, 1);//从系统文件夹中移除
                i--;
                //unreadCount += folder.stats.unreadMessageCount;
                //totalCount += folder.stats.messageCount;
            }

        }
     
     
},
getDataSource:function(callback){
	var self=this;
	this.model.fetchFolderList(this.model.foldertype.custom, function (result) {
	    self.pushOtherFolder(result);
	       callback(result); //异步返回值
    });
},
folderClick:function(event){
	var element=(event.srcElement || event.target);
	var fidStr=$(element).parents("li[fid]").attr("fid");
	if(fidStr!=""){
		$App.showMailbox(Number(fidStr));
	}
},
addFolder: function () {
    $App.trigger("mailCommand", { command: "addFolder" });
	//new M2012.Folder.View.AddFolder({model:this.model}).render();

},
openSetting: function () { //个性化设置
    $App.openDialog("个性化设置", "M2012.View.UnfoldSetting", {type:"custom", width: 383, height: 120,buttons:["确定","取消"] });
},
showFolderManage: function(){ //文件夹管理页
	$App.show('tags');
},
unfold:function(flag){
    var self=this;
	
	//判断点击是否折叠
	var eventElement;
	var _event = flag;
	if(typeof(_event) !== 'boolean'){
		eventElement = _event.srcElement || _event.target;
	}
	if( eventElement && eventElement.id ){
		var elemId = eventElement.id;
		if (elemId === 'btn_addfolder' || elemId === 'btn_setCustom') {
			return;
		}
	}
	
    var element = $("#folder_inbox").find("[name=i_unfold]");
    if (flag == true && element.hasClass("t_blackDown")) {
        return;
    } else if (flag == false && element.hasClass("t_blackRight")) {
        return;
    }
	element.toggleClass(function(idx,className){
	    element.removeClass();//移除所有class
		return className.indexOf("t_blackRight") > -1 ? "triangle t_blackDown":"triangle t_blackRight";
	});

		
	self.model.set("unfoldCustom", element.hasClass("t_blackDown"));
	
	if ($("#folder_custom ul").children().length > 0) {
	    $("#folder_custom").toggle();
	} else { //无数据时隐藏，避免ie下的占用高度
	    $("#folder_custom").hide();
	}

	$App.getView("folder").resizeSideBar();
}
})
   
});
M139.namespace("M2012.Folder.View", {
FolderPop :Backbone.View.extend({
el:"#pop_list",
template: ['<a bh="left_pop" hidefocus id="fd_popStat" href="javascript:void(0)"><i name="i_unfold" class="triangle t_blackRight" bh="left_unfoldPop"></i><span>代收邮箱</span><i id="btn_addpop" title="添加代收邮箱" name="addpop" class="i_add" bh="left_createPop"></i><i class="i_set" title="代收文件夹个性化设置" onClick="return false" id="btn_setPop" bh="left_popSetting"></i></a>',
             '<ul class="small" style="display:none;" id="folder_pop">',
               '<!--item start-->',
               '<li  fid="$fid"><a href="javascript:" title="@getTitle()" @getStyle()>@getLock()<span class="otheMail">@maxLength(name,10)',
               	'</span><span class="otheMailNum">@getMailCount()</span></a></li>',
               '<!--item end-->'].join(""),
events:{
	"click #pop_list li[fid]":"folderClick",
	"click #btn_addpop": "addPop",
	"click #btn_setPop": "openSetting",
	"click #fd_popStat": "unfold"
//	"click #fd_popStat span": "popClick"
},
initialize: function(options){
   var self=this;
   this.model=options.model;

   this.model.on("folderDataChange", function () { //文件夹数据源发生改变时调用render
       M139.Timing.waitForReady("$App.getConfig(\"PopList\")", function () {
           self.model.setPopFolders();
           self.render();
       });
   		
   		
   });
  
},
render:function (){
    var self=this;
    //this.template=$T.Html.decode($(self.el).html());
    this.getDataSource(function (dataSource) {
        var rp=new Repeater(self.template); //传入dom元素，dom元素即做为容器又做为模板字符串
        rp.Functions = self.model.renderFunctions;
 		var html=rp.DataBind(dataSource); //数据源绑定后即直接生成dom
 		$(self.el).html(html);

 		var stats = self.model.getMailCount("pop");
 		//var title = $T.Utils.format("代收文件夹中共有{0}封邮件，其中新邮件{1}封", [stats.messageCount, stats.unreadMessageCount]);
 		//$("#fd_popStat").attr("title", title);
 		
 		if (stats.unreadMessageCount > 0) {
 		   // $("#fd_popStat").css("font-weight", "bold"); //有未读加粗
 		    var unreadMessageCount = '<var class="fw_b">(' + stats.unreadMessageCount + ')</var>';
			$("#fd_popStat span").html($T.Utils.format("代收邮箱{0}", [unreadMessageCount]));

 		}
    var title = stats.unreadMessageCount > 0 ? $T.Utils.format("{0}封未读邮件", [stats.unreadMessageCount]) : '代收邮箱';
      $("#fd_popStat").attr("title", title);

		/*
 		$Hint.register($("#fd_popStat"), self.renderCustomTips(dataSource));
 		$Hint.on("show", function (args) {
 		    if ($(args.sender).attr("id") == "fd_popStat") { //判断tips
 		        if (args.el.html() == "") { //无二级目录
 		            args.isShow = false;
 		        }else if ($("#fd_popStat").find("[name=i_unfold]").hasClass("t_blackDown")) {
 		            args.isShow = false;
 		        }
 		    }

 		});
		*/

 		var icon = $("#pop_list").find("[name=i_unfold]");
 		if (dataSource.length == 0) {
 		    icon.remove();
 		}else if (self.model.get("unfoldPop") && icon.hasClass("t_blackRight")) { //原来是展开状态，恢复展开
 		    self.unfold({ target: icon });
 		}

 

    });
    
},
renderCustomTips: function (dataSource) {
    var data = dataSource.concat();//复制数组
    data = $.grep(data, function (a) { //筛选有未读邮件的
        return a.stats.unreadMessageCount > 0;
    });

    if (data.length == 0) {//无代收或代收目录无新邮件
        return;
    }
    var isMore = false;
    if (data.length > 4) {
        data = data.slice(0, 4);//截取前4个文件夹
        isMore = true;
    }

    var template = ['<div id="tip_inbox" style="width:230px;"><!--item start-->',
        '<div><a fid="$fid" href="javascript:appView.showMailbox($fid)">$name($stats.unreadMessageCount)</a>'
        , '</div><!--item end-->',isMore?"......":"",'</div>'].join("");
    var rp = new Repeater(template); //传入dom元素，dom元素即做为容器又做为模板字符串
    var html = rp.DataBind(data); //数据源绑定后即直接生成dom

    return html;



},
getDataSource:function(callback){
	var self=this;
	this.model.fetchFolderList(this.model.foldertype.pop,function(result){
	       callback(result); //异步返回值
    });
},
folderClick:function(event){
	var element=(event.srcElement || event.target);
	var fidStr=$(element).parents("li[fid]").attr("fid");
	if(fidStr!=""){
		$App.showMailbox(Number(fidStr));
	}
},
popClick: function () {
    $App.show("popmail");
    return false;
},
addPop:function(event){
    $App.show("addpop");
	return false;
},
openSetting: function () {
    //alert("show setting");

    $App.openDialog("个性化设置", "M2012.View.UnfoldSetting", { type: "pop", width: 383, height: 120, buttons: ["确定", "取消"] });
    
},
unfold: function (flag) {
    var self = this;
    
	//判断点击是否折叠
	var eventElement;
	var _event = flag;
	if(typeof(_event) !== 'boolean'){
		eventElement = _event.srcElement || _event.target;
	}
	if( eventElement && eventElement.id ){
		var elemId = eventElement.id;
		if (elemId === 'btn_addpop' || elemId === 'btn_setPop') {
			return;
		}
	}
	
    var element = $(this.el).find("[name=i_unfold]");
    if (flag==true && element.hasClass("t_blackDown")) {
        return;
    } else if (flag == false && element.hasClass("t_blackRight")) {
        return;
    }
	element.toggleClass(function(idx,className){
		element.removeClass();//移除所有class
		//return className=="i_plus" ? "i_minus2":"i_plus";
		return className.indexOf("t_blackRight") > -1 ? "triangle t_blackDown":"triangle t_blackRight";
	});
	
	self.model.set("unfoldPop", element.hasClass("t_blackDown"));
	
	element.parent().next().toggle();

	$App.getView("folder").resizeSideBar();
}
})
});
﻿M139.namespace("M2012.Folder.View", {
    FolderTag: Backbone.View.extend({
        el: "#tag_list",
        template: ['<a bh="left_tag" hidefocus id="fd_tagStat" href="javascript:"><i name="i_unfold" class="triangle t_blackRight" bh="left_unfoldTag"></i><span>我的标签</span><i class="i_add" title="添加标签" id="btn_addtag" bh="left_createTag"></i><i title="标签个性化设置" class="i_set" id="btn_setTag" onClick="return false"></i></a>',
             '<ul class="small" style="display:none;" id="folder_tag">',
             
               '<!--item start-->',
               '<li fid="$fid"><a href="javascript:" title="@getTitle()" @getStyle()><span class="tagMin@getSpecialTag(1)" style="border-color:@getColor()"><span class="tagBody" style="border-color:@getColor();background-color:@getColor();">@getSpecialTag(2)</span></span>',
               	'<span class="tagText">@maxLength(name,10)@getMailCount() </span></a></li>',
  			  '<!--item end-->',
              '</ul>'].join(""),
        events: {
            "click #tag_list li[fid]": "folderClick",
            "click #btn_addtag":"addTag",
            //"click i[name=i_unfold]": "unfold",
            "click #btn_setTag": "openSetting",
			"click #fd_tagStat": "unfold"
            //"click #fd_tagStat span": "myTagClick"
        },
        initialize: function (options) {
            var self = this;
            this.model = options.model;
            this.isFirstLoad = true;
            this.model.on("folderDataChange", function () { //文件夹数据源发生改变时调用render
                self.render();
            });

        },
        renderStarMail:function(){
            var obj = this.model.getStarObj()//初始化星标邮件
            $("#li_star").attr({ "style": obj.style });
            $("#li_star a").attr("title", obj.title);
            $("#li_star span").html(obj.count);

        },
        render: function () {
            var self = this;
            //this.template=$T.Html.decode($(self.el).html());
            this.getDataSource(function (dataSource) {
               
                var rp = new Repeater(self.template); //传入dom元素，dom元素即做为容器又做为模板字符串
                rp.model = self.model;//重要，赋值model引用，用于自定义函数中使用
                rp.Functions = self.model.renderFunctions;
                var html = rp.DataBind(dataSource); //数据源绑定后即直接生成dom
                $(self.el).html(html);
                //self.renderStarMail();
                var stats = self.model.getMailCount("tag");
                //stats.messageCount+=self.model.get("totalStarCount"); 
                //stats.unreadMessageCount += self.model.get("unreadStarCount");
                var title =stats.unreadMessageCount > 0 ? $T.Utils.format("{0}封未读邮件", [stats.unreadMessageCount]) : "我的标签";
                $("#fd_tagStat").attr("title", title);
                
                if (stats.unreadMessageCount > 0) {
                    //$("#fd_tagStat").css("font-weight", "bold"); //有未读加粗
					var unreadMessageCount = '<var class="fw_b">(' + stats.unreadMessageCount + ')</var>';
                    $("#fd_tagStat span").html($T.Utils.format("我的标签{0}", [unreadMessageCount]));
                }

                var icon = $("#tag_list").find("[name=i_unfold]");
                if (dataSource.length == 0) {
                    //icon.remove();
                }else if (self.model.get("unfoldTag") && icon.hasClass("t_blackRight")) { //原来是展开状态，恢复展开
                    self.unfold({ target: icon });
                }

                if (self.isFirstLoad) {
                    M139.Timing.waitForReady("$App.getConfig('UserAttrsAll')", function (attrs) {
                        self.model.createSpecialTag();
                    });
                }
             
            });
            this.isFirstLoad = false;
        },
        getDataSource: function (callback) {
            var self = this;
            this.model.fetchFolderList(this.model.foldertype.tag, function (result) {
                callback(result); //异步返回值
            });
        },
        addTag: function () {
            $App.trigger("mailCommand", { command: "addTag" });
        	//new M2012.Folder.View.AddTag({model:this.model}).render();
        },
        folderClick: function (event) {
            var element = (event.srcElement || event.target);
            var fidStr = $(element).parents("li[fid]").attr("fid");
            if (fidStr != "") {
                $App.showMailbox(Number(fidStr));
            }
        },
        myTagClick:function(event){
            $App.show("tags");
	    return false;
        },
        openSetting: function () {
            $App.openDialog("个性化设置", "M2012.View.UnfoldSetting", { type: "tag", width: 383, height: 120, buttons: ["确定", "取消"] });
        },
        /***
        * 折叠文件夹
        */
        unfold: function (flag) {
            var self = this;
            
			//点击操作元素不折叠
			var eventElement;
			var _event = flag;
			if(typeof(_event) !== 'boolean'){
				eventElement = _event.srcElement || _event.target;
			}
			if( eventElement && eventElement.id ){
				var elemId = eventElement.id;
				if (elemId === 'btn_addtag' || elemId === 'btn_setTag') {
					return;
				}
			}
			
            var element = $(this.el).find("[name=i_unfold]");
            if (flag==true && element.hasClass("t_blackDown")) {
                return; 
            } else if (flag == false && element.hasClass("t_blackRight")) {
                return;
            }
            element.toggleClass(function (idx, className) {
                element.removeClass(); //移除所有class
                //return className == "i_plus" ? "i_minus2" : "i_plus";
            	return className.indexOf("t_blackRight") > -1 ? "triangle t_blackDown":"triangle t_blackRight";
			});
            
            self.model.set("unfoldTag", element.hasClass("t_blackDown"));
            
            element.parent().next().toggle();

            $App.getView("folder").resizeSideBar();
        }
    })
});
﻿M139.namespace("M2012.Folder.View", {
    AddFolder: Backbone.View.extend({
        el: ".boxIframeMain",
        template: ['<fieldset class="boxIframeText">',
               '<legend class="hide">新建文件夹并移动到</legend>',
               '<ul class="form">',
                 '<li class="formLine">',
                   '<label class="label">文件夹名称：</label>',
                   '<div class="element">',
                     '<div class="mb_5">',
                       '<input id="tb_foldername" type="" value="" class="iText">',
                     '</div>',
                    '<div class="mb_5" id="div_filterContact">',
                       '<input type="checkbox" id="chk_filter" value="" class="mr_5">',
                       '<label for="chk_filter">收取指定联系人邮件到该文件夹</label>',
                       '<input type="text" class="iText" placeholder="如sample@139.com" id="tb_address" style="display:none">',
                     '</div><div id="contactSelector" style="display:none">您可以选择通讯录中的联系人</div>',
                   '</div>',
                 '</li>',
               '</ul>',
             '</fieldset>'].join(""),
        events: {

        },
        initialize: function (options) {
            var self = this;
            console.log(options)
            this.model = options.model;
            options.email = "";
            if (options.email) {
                this.email = options.email; //有初始的邮件地址
            }
            if (options.comefrom) { this.comefrom = options.comefrom; }
            if (options.mid) {
                this.midForMove = options.mid;
            }
        },
        createContactSelector: function () {
            var self = this;
            if (!this.contactSelector) { //保持单例
                this.contactSelector = new M2012.UI.Widget.Contacts.View({
                    container: document.getElementById("contactSelector"),
                    showCreateAddr: false,
                    showSelfAddr: false,
                    showAddGroup:false,
                    filter: "email"
                }).render().on("select", function (e) {
                    if (e.isGroup) { //添加整组
                        //alert(JSON.stringify(e.value));

                    } else {
						//要求可以添加多个
                        var email = $Email.getEmail(e.value);
						var emailhad = $("#tb_address").val();
						var emailAtLast = "";
						if(!emailhad){
							emailAtLast = email;
						}else if(emailhad && emailhad.indexOf(email) > -1){
							emailAtLast = emailhad;
						}else{
							emailAtLast = emailhad + ";" + email;
						}
                        $("#tb_address").val(emailAtLast);
                    }
                });


            }
            setTimeout(function () {
                self.dialog.setMiddle();
            }, 100);
        },
        render: function () {
            var self = this;
            this.dialog = $Msg.showHTML(this.template, function (e) { self.addFolder(e) }, {
                dialogTitle: "新建文件夹",
                buttons: ["确定", "取消"]

            });
            this.el = this.dialog.el;

            $(this.el).find("#chk_filter").click(function () {

                if ($(this).attr("checked")) {
                    $(self.el).find("#tb_address").show();
                    $(self.el).find("#contactSelector").show();
                    self.createContactSelector();
                } else {
                    $(self.el).find("#tb_address").hide();
                    $(self.el).find("#contactSelector").hide();
                    self.dialog.setMiddle();
                }

            });

            if (this.email) {
                $(this.el).find("#chk_filter").attr("checked", true);
                $(self.el).find("#tb_address").show().val(this.email);
            }
            if (this.comefrom == "autoFilter") {
                $(this.el).find("#div_filterContact").hide();
            }

        },
        addFolder: function (e) {
            var self = this;
            var from = null;
			//标签与文件夹，发件人可以添加多个！
			function isAllEmail(str){
				var tmpArr = str.split(";");
				for(var i =0, t=tmpArr.length; i< t; i++){
					if(!$Email.getEmail(tmpArr[i])){
						return false;
						break;
					}
				}
				return true;
			}
            if ($(this.el).find("#chk_filter").attr("checked")) {
                from = $(this.el).find("#tb_address").val();
            //    from = $Email.getEmail(from);
                if (from == "" || !isAllEmail(from)) {
                    $Msg.alert("邮箱地址不正确，邮箱地址如果为多个，请用分号隔开。");
                    e.cancel = true;
                    return;
                }
            }
            var folderName = $("#tb_foldername").val();
            //var checkResult = this.model.checkFolderName(folderName);
            if (this.model.checkFolderName(folderName)) { //检查合法性
                this.model.addFolder(folderName, from, function (info) {


                    if (self.midForMove) { //添加成功后转移邮件到该文件夹
                        $App.trigger("mailCommand", { command: "move", fid: info.fid, mids: self.midForMove });
                    }

                    $App.trigger("addFolderComplete", {
                        comefrom: self.comefrom,
                        info: info, name: folderName
                    });
                    BH("left_addFolder_ok");

                });
            } else {

               e.cancel = true;
            
            }
        }

    })
});


M139.namespace("M2012.Folder.View", {
AddTag:Backbone.View.extend({
el:".boxIframeMain",
template:[ '<ul class="form">',
         '<li class="formLine">',
           '<label class="label">标签名称：</label>',
           '<div class="element p_relative">',
             '<div class="setTag">',
 			  '<input id="tb_tagname" type="" value="" maxLength="16" class="iText">',
 			  '<div class="mailThemeBg" id="btn_colorselect">',
 				'<span class="tagMin tagOrange"><span class="tagBody"></span></span><i class="i_triangle_d"></i>',
 			  '</div>',
 			'</div>',
 			'<div class="mb_5" id="div_filterContact">',
               '<input type="checkbox" id="chk_filter" value="" class="mr_5">',
               '<label for="chk_filter">给指定联系人的邮件贴标签</label>',
               '<input type="text" class="iText" placeholder="如sample@139.com" id="tb_address" style="display:none">',
             '</div><div id="contactSelector" style="display:none">您可以选择通讯录中的联系人</div>',
           '</div>',
         '</li>',
       '</ul>'].join(""),
events:{
"click #btn_colorselect":"showColorTable"
},
initialize: function(options){
   var self=this;
   
   this.model = options.model;
   if (options.comefrom) { this.comefrom = options.comefrom; }
   if (options.mid) {
       this.midForMove = options.mid;//创建成功后自动标记
   }
   this.selectedColor = 3;
   
},
createContactSelector: function () {
    var self = this;
    if (!this.contactSelector) { //保持单例
        this.contactSelector = new M2012.UI.Widget.Contacts.View({
            container: document.getElementById("contactSelector"),
            showCreateAddr:false,
            showSelfAddr: false,
            showAddGroup:false,
            filter: "email"
        }).render().on("select", function (e) {
            if (e.isGroup) { //添加整组
                //alert(JSON.stringify(e.value));
            } else {
			//要求可以添加多个
				var email = $Email.getEmail(e.value);
				var emailhad = $("#tb_address").val();
				var emailAtLast = "";
				if(!emailhad){
					emailAtLast = email;
				}else if(emailhad && emailhad.indexOf(email) > -1){
					emailAtLast = emailhad;
				}else{
					emailAtLast = emailhad + ";" + email;
				}
				$("#tb_address").val(emailAtLast);                
            }
        });

       
    }
    setTimeout(function () {
        self.dialog.setMiddle();
    }, 100);
},
render:function (){
	var self=this;
	
	this.dialog=$Msg.showHTML(this.template,function(e){self.addTag(e)},{
		dialogTitle:"新建标签",
        buttons:["确定","取消"]

	});

    this.el=$(".boxIframeMain");
    $("#btn_colorselect").click(function(e){
    	self.showColorTable(this);
    });

    $(this.el).find("#chk_filter").click(function () {
        if ($(this).attr("checked")) {
            $(self.el).find("#tb_address").show();
            $(self.el).find("#contactSelector").show();
            self.createContactSelector();
        } else {
            $(self.el).find("#tb_address").hide();
            $(self.el).find("#contactSelector").hide();
            self.dialog.setMiddle();
        }
    });

    if (this.comefrom == "autoFilterTag") {
        $(this.el).find("#div_filterContact").hide();
    }
    
},
showColorTable:function(target){
	var self=this;
	var items=[];
	var colorArr=this.model.getAllColor();
	$(colorArr).each(function(i,n){
	    var html = ['<span class="tagMin" style="border-color:', n, '"><span class="tagBody" style="border-color:',n,';background-color:', n, '"></span></span>'].join("");
		items.push({html:html,value:i});
	});
	M2012.UI.PopMenu.create({
	    //width:300,
            items:items,
            onItemClick: function (item) {
                self.selectedColor = item.value;
            	
            	var selectedColor=self.model.getColor(item.value);
          		$(target).find(".tagBody").css("background-color",selectedColor);
            },
            template :[ '<div class="menuPop shadow show creatTagpop" style="top:0;left:0;z-index:9100">',
       '<ul>',
       '</ul>',
    '</div>'].join(""),
        maxHeight:"120px",
            left:($(target).offset().left)+"px",
            top:($(target).offset().top+20)+"px"
    });

},
addTag: function () {
    var self = this;

	var tagName = $("#tb_tagname").val();
	var error = this.model.checkTagName(tagName);//标签名合法性检测
	var from = null;
	//标签与文件夹，发件人可以添加多个！
			function isAllEmail(str){
				var tmpArr = str.split(";");
				for(var i =0, t=tmpArr.length; i< t; i++){
					if(!$Email.getEmail(tmpArr[i])){
						return false;
						break;
					}
				}
				return true;
			}
	if ($(this.el).find("#chk_filter").attr("checked")) {
	    from = $(this.el).find("#tb_address").val();
	//    from = $Email.getEmail(from);
	    if (from == "" || !isAllEmail(from)) {
	        error = "邮箱地址不正确，邮箱地址如果为多个，请用分号隔开。";
	    }
	}
	if (error) {
	    $Msg.alert(error);

	    e.cancel = true;
	    return false;
	}
	this.model.addTag(tagName, self.selectedColor, from, function (info) {


	    if (self.midForMove) { //添加成功后转移邮件到该文件夹
	        $App.trigger("mailCommand", {
	            command: "tag", labelId: info.fid,
	            mids: self.midForMove
	        });
	    }

	    $App.trigger("addTagComplete", {
	        comefrom: self.comefrom,
	        info: info, name: tagName
	    });

	    BH("left_addTag_ok");
	});
}

})
});
﻿M139.namespace("M2012.Folder.View", {
    Unlock: Backbone.View.extend({
        el: ".boxIframeMain",
        template: ['<div class="mailunlock">',
 		  	'<p>该范围已设置安全锁，访问需要验证密码</p>',
 			'<div class="error" id="div_passError" style="display:none">安全锁密码有误</div>',
 			'<ul class="form">',
 				'<li class="formLine">',
 					'<label class="label">安全锁密码：</label>',
 					'<div class="element">',
 						'<input type="password" id="tb_password" value="" class="iText" style="width:180px;"> <a id="lock_forget" href="javascript:" class="ml_5">忘记密码</a>',
 					'</div>',
 				 '</li> ',
 			'</ul>		',
 		'</div>'].join(""),
        events: {

    },
    initialize: function (options) {
        var self = this;
        this.model = options.model;
        this.fid = options.fid;
        this.mid = options.mid;
    },
    render: function () {
        var self = this;
        var dialog = $Msg.showHTML(this.template, function () {
            return self.checkPassword();
        },
                {
                    name:"safeLock",
                    dialogTitle: "安全锁",
                    buttons: ["确定", "取消"]

                });
        if (dialog) {//避免多次点击的时候弹出多个框
            dialog.on("close", function (e) {

                var rel = 1;
                if (e.event) {
                    rel = $(e.event.target).attr("rel") || $(e.event.target).parents("[rel]").attr("rel");
                }
                if (rel == "0" && !self.model.get("passwordChecked")) { //点击确定，并且密码校验失败时，禁止关闭
                    e.cancel = true;
                }
            });
            this.dialog = dialog;
            this.el = dialog.el;
            $("#lock_forget").click(function () {
                top.appView.show('lockForget');
                self.dialog.close();
                return false;
            });
        }

        if (!$User.isChinaMobileUser()) {
            $("#lock_forget").hide();
        }

        /*
        $(this.el).find("#chk_filter").click(function () {
        $(self.el).find("#tb_address").show();
        });*/


    },
    checkPassword: function () {
        var self = this;
        //$App.getView("mailbox").model.set("folderPass", $("#tb_password").val());

        this.model.checkFolderPassword(self.fid, $("#tb_password").val(), function (result) {
            if (result) {
                self.model.set("passwordChecked", true);
                self.dialog.close();
                if (self.mid) { //刷新读信
                    $App.close();
                    setTimeout(function () {
                        $App.readMail(self.mid);
                    }, 200)
                } else {
                    $App.showMailbox(self.fid);
                }

            } else {
                $(self.el).find("#div_passError").show();
                $("#tb_password").focus(function () {
                    $(self.el).find("#div_passError").hide();
                });
            }
        });

        return false;


    }

})
});
﻿M139.namespace("M2012.Folder.View", {
    //$App.trigger("mailCommand",{command:"autoFilter",email:"aaa@139.com"})
    AutoFilter: Backbone.View.extend({
        el: ".boxIframeMain",
        template: [
        '<ul class="form " style="padding-bottom:0px;">',
                
                '<li class="formLine pl_20" id="tips_autofilter"></li>',
                '<li class="formLine">',
                               '<label class="label " style="text-align:left;padding-left:26px;width:auto;"><input type="radio" class="mr_5" value="folder" id="folder" name="actionType"><span class="formlineText">移动到</span>',
                                '</label>',
                                 '<div class="" style="float:left;">',
                                    '<div class="dropDown dropDown-sortnew" id="dropdown_autofilterFolder" style="">',
                                            
                                     '</div>',
                                '</div> ',                         
                '</li>',
                '<li class="formLine">',
                               ' <label class="label " style="text-align:left;padding-left:26px;width:auto;"><input type="radio" class="mr_5" value="tag" id="tag" name="actionType"><span class="formlineText">标记为</span>',
                                '</label>',
                                 '<div class="" style="float:left;">',
                                    '<div class="dropDown dropDown-sortnew" id="dropdown_autofilterTag" style="">',
                                     '</div>',
                                '</div> ',                         
                '</li>',
                '<li class="formLine">',
                               ' <label class="label " style="text-align:left;padding-left:26px;width:auto;"><input type="radio" class="mr_5" value="del" name="actionType" id = "del"><span class="formlineText">直接删除邮件</span>',
                                '</label>',
                                                         
                '</li>',

                '<li class="formLine pl_20 pr_20 pt_5"><label for="history_autofilter" class="pt_10 pb_10" style="display:block; border-top:1px #cccccc dotted;text-align:right;"><input type="checkbox" class="mr_5" id="history_autofilter" value="">对历史邮件也执行此规则</label></li>',
            '</ul>', 
             '<div class="boxIframeBtn"><span class="bibText"><a id="btn_showfilter" href="javascript:">进入收信规则详细设置</a> </span><span class="bibBtn"> <a href="javascript:void(0)" class="btnSure" id="classifySure" bh="privateclassify_onclick"><span>确 定</span></a>&nbsp;<a href="javascript:void(0)" class="btnNormal" id="classifyCencel"><span>取 消</span></a> </span></div>',             
        '</div>'
             ].join(""),
       simpleItem:[ '<li class="formLine pl_15 pr_15 pt_5">',
                            '<div class="text-warp">',
                               '<label><input type="checkbox" id="{itemid}" class="mr_5" value="{from}">{itemvalue}&lt{from}&gt </label>',
                               '<span class="check-input" style="width:165px;height:25px;line-height:25px;display:block;float:right;"><input type="text" id="{itemname}" class="iText" style="width:158px;" value="{itemvalue}"></span>',
                            '</div>',
                        '</li>'
                       ].join(''),
           
        sucessDialog:['系统将按您设定的规则处理该联系人的邮件。'].join(""),  
            
        failDialog:['您可以在”设置&nbsp;&gt;&nbsp;<a href="javascript:;" >收信规则</a>“中重新建立创建收信规则。'].join(""), 
        events: {
            //"click #btn_colorselect": "showColorTable"
        },
        dropMenu:[],
        initialize: function (options) {
            var self = this;

            this.model = options.model;
            this.actionType = options.actionType;
            this.email = options.email || "";
            this.fromname = options.name;
            


            $App.on("addTagComplete", function (args) {
                if (args && args.info && args.comefrom == "autoFilterTag") { //添加标签成功后，给dropmenu添加一行
                    //self.addFilter(args.info.fid);
                    var tagItemHtml = ['<span class="text"><span class="tagMin tagOrange"><span class="tagBody" style="background-color:',
                    $App.getTagColor(args.info["folderColor"]),
                    , '"></span></span><span class="tagText">',
                    args.info["name"], '</span></span>'].join("");
                    var len = self.dropMenu[0].getCount();
                    self.dropMenu[0].addItem({ html: tagItemHtml, labelId: args.info.fid }, len - 1);
                    self.dropMenu[0].setSelectedIndex(len - 1);
                } 
            });
            $App.on("addFolderComplete", function (args) { //添加文件夹成功后，给dropmenu添加一行
                if (args && args.info && args.comefrom == "autoFilter") {
                    var len = self.dropMenu[1].getCount();
                    self.dropMenu[1].addItem({ text: args.info.name, data: args.info.fid }, len - 1);
                    self.dropMenu[1].setSelectedIndex(len - 1);
                }
            });
            //todo add off
        },
        addFilter: function () {
            var self = this; 
            if ($("input#folder").prop("checked")) {
                var i = 1
            } else if ($("input#tag").prop("checked")) {
                var i = 0
            } else if ($("input#del").prop("checked")) {
                var  delFid= 4;
            };
            var item = (this.dropMenu[i]&&this.dropMenu[i].getSelectedItem()) || {};
            var fid = delFid || item.data || item.labelId;
            var dealHistory = $("#history_autofilter").attr("checked") ? 2 : 0;// 取值范围0:只对即时邮件处理 1:只对历史邮件处理，  2: 对即时邮件和历史邮件都进行处理)
            this.model.addFilterToFolderTag(fid,this.email,dealHistory,function(res) {
                if (res.code && res.code === 'S_OK') {
                    M139.UI.TipMessage.show("收信规则创建成功", { delay: 3000 });
                    
                        self.showSucessDialog();
                        $App.trigger("reloadFolder");
                        $App.trigger("showMailbox");
                        
                    }else{
                        M139.UI.TipMessage.show("遇到异常，规则创建失败，请重试", { className:"msgRed",delay: 3000 });

                    
                }
            });
        },
        render: function () {
            var self = this;
            var title = "快速创建收信规则" ;
            var dialog=$Msg.showHTML(this.template, function () { self.addFilter() }, {
                dialogTitle: title

            });
            $("#tips_autofilter").html('以后收到<span class="green ml_5 mr_5">'+this.fromname+'&lt '+this.email+'&gt  </span>的邮件时：<a href="#" title="收信时，对邮件进行自动分类，轻松管理联系人的邮件。"><i class="i_wenhao"></i></a>');
            $("#btn_showfilter").click(function () {
                $App.show("createType");
                dialog.close();
            });
            this.renderDropdown();
            $("[name=actionType]").click(function() {
                if (!$("#history_autofilter").prop("checked")) {
                    $("#history_autofilter").attr("checked",true);
                };
            })

            //$(this.el).find("#dropdown_autofilter");
             $("#classifySure").click(function() {
                if (!$("input#folder").prop("checked") && !$("input#tag").prop("checked") && !$("input#del").prop("checked")) {
                    top.M139.UI.TipMessage.show("请选择一项操作",{className:"msgOrange", delay: 1000 });
                    return;
                }else{
                    self.addFilter()
                    dialog.close();
                }
                

            } );
             $("#classifyCencel").click(function() {
                dialog.close()
             } );

        },
        /**
        * 分类邮件成功提示框
        * @param {number} total 邮件分类成功数量
        */
        showSucessDialog:function(){
          
            var html = this.sucessDialog
            $Msg.alert(html,{
                title:'收信规则创建成功',
                dialogTitle:'创建收信规则',
                icon:'ok', 
                isHtml:true
            });
        },
        
        /**
        * 分类邮件失败提示框
        */
        showFailDialog:function(){
            var html = this.failDialog;
            $Msg.alert(html,{
                title:'收信规则创建失败',
                dialogTitle:'收信规则创建失败',
                icon:'fail', 
                isHtml:true
            });      
        },
        renderDropdown: function () {
            var self = this;
                var menuItems = this.model.getFolderDropItems({ showAdd: true });
                this.dropMenu[1] = M2012.UI.DropMenu.create({
                    //defaultText: "全部邮件",
                    selectedIndex: 0,
                    menuItems: menuItems,
                    container: $("#dropdown_autofilterFolder"),
                    width: "150px"
                });
                this.dropMenu[1].on("change", function (item) {
                    //alert(item.data);
                    if (item.data == -2) {
                        $App.trigger("mailCommand", {
                            command: "addFolder",
                            comefrom: "autoFilter" //来源
                        });
                    }
                });
                var tagItems = $App.getView("folder").model.getTagItem({ showAdd: true });

                this.dropMenu[0] = M2012.UI.DropMenu.create({
                    defaultText: "不限",
                    selectedIndex: 0,
                    menuItems: tagItems,
                    container: $("#dropdown_autofilterTag"),
                    width: "150px"
                });
                this.dropMenu[0].on("change", function (item) {
                    var labelId = item.labelId;
                    //alert(labelId);
                    if (item.labelId == -2) {
                        $App.trigger("mailCommand", {
                            command: "addTag",
                            comefrom: "autoFilterTag"//来源 
                        });
                    }
                });
            

        }
      

    })
});
﻿/**   
* @fileOverview 邮件备注
*/
(function (jQuery, _, M139) {
    
    /**
    * @namespace 
    * 邮件备注,列表页备注,读信页备注
    */

    M139.namespace("M2012.Remark.Model",Backbone.Model.extend({
    
        defaults:{
             max:50,  
	      opType:null,  
		     mid:null,
	        memo:null  
	    },

	    remarkDataSource:function(callback){
	     
		    var options={
			    opType:this.get("opType"),
			       mid:this.get("mid")			  
		    }
    		
		    if(options.opType != 'get' ){
		        options.memo = this.get("memo") //add,update
		    }
		    
            M139.RichMail.API.call("mbox:mailMemo",options,function(result){
                if(result.responseData.code && result.responseData.code == 'S_OK'){
                    callback(result.responseData["var"]);
                }else{
                    //alert('接口异常');
                }
            });
            
	    }

}));

})(jQuery, _, M139);
/**
* @fileOverview 邮件备注视图
  * #listtips 列表页提示层 body结束前
  * #listremark 列表页编辑层 body结束前
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 邮件备注,列表页备注,读信页备注
    */

    M139.namespace('M2012.Remark.View', superClass.extend({
        /** 过滤空白 */
        filterNull: function (v) {
            return v.replace(/\s+/g, "").replace(/[\u3000]+/g, "").replace(/\$/ig, "");//过滤半角空格
        },

        initEvents: function () {

            //计算字数
            var self = this;
            var mid = self.model.get("mid");
            var el = $(self.el);

            var countText = function () {
                var nulltips = el.find(".nulltips");
                var This = this;
                var value = $(This).val();
                value = self.filterNull(value);
                value = value.replace(/\s+/g, " ");       //过滤半角空格
                value = value.replace(/[\u3000]+/g, " "); //过滤全角空格
                value = value.replace(/\$/ig, "");

                var thisval = value.length > self.max ? value.substr(0, self.max) : value;
                var inputlen = self.max - thisval.length;
                thisval.length > 0 ? nulltips.hide() : nulltips.show();
                $(this).val(thisval);
                el.find(".bibText .yel").html(inputlen);
            };

            el.find('a[name=remark_edit],a[name=remark_editlist]').live('click', function () {
                self.editRemark();
            });
            el.find('a[name=remark_delete]').live('click', function () {
                self.deleteConfirm();
            });
            el.find('a[name=remark_edit_cancel]').live('click', function () {
                self.editCancel();
            });
            el.find('a[name=remark_edit_save]').live('click', function () {
                self.editSave();
            });
            el.find('a[name=remark_add]').live('click', function () {
                self.addRemark();
            });

            el.find("textarea.remarkcontent")
               .live('keyup', countText)
               .live('focus', countText);

            //console.log(self.model.get('showtype'));
            if (self.model.get('showtype') == 'list') {
                //处理列表情况
                //鼠标在备注小图标上
                $('.dayAreaTable a.i_note_y').live('mouseover', function () {
                    var mid = $(this).attr("mid");
                    self.model.set({ mid: mid, showtype: 'list' });
                    self.showTips();
                    $('#listremark').remove();
                }).live('mouseleave', function () {
                    self.hideTips();
                });

                //鼠标在tips上   
                $('#listtips').live('mouseover', function () {
                    self.onTips();
                }).live('mouseleave', function () {
                    console.log('leave');
                    self.hideTips();
                });

                //消失编辑框
                var canceltimer;
                $('#listremark').live('mouseleave', function () {
                    canceltimer = setTimeout(function () {
                        $('#listremark').remove();
                    }, 500);
                }).live('mouseover', function () {
                    clearTimeout(canceltimer);
                });
            }


        },

        template: {

            //邮件列表备注提示层 td5加一个div
            tips: ['<div  class="remarkTips shadow" style="position:absolute;width:310px;{1}" id="{2}">',
                    '<div class="remarkTips-title clearfix">',
                        '<span class="fl fw_b">备注:</span>',
                        '<span class="fr"><a href="javascript:;" name="remark_editlist">编辑</a> <a href="javascript:;" name="remark_delete">删除</a></span>',
                    '</div>',
                    '<p style="text-align:left">{0}</p>',
                  '</div>'],

            //读信页备注显示
            show: ["<span class='rMl'>备&#12288;注：</span>",
                    "<div class='rMr'>",
                         "<div class='remarkTips shadow'>",
                             "<p>{0}</p>",
                             "<div class='remarkTips-title clearfix p_relative'>",
                                 "<span class='fr'>",
                                     "<a href='javascript:;' name='remark_edit' >编辑</a>&nbsp;&nbsp;",
                                     "<a href='javascript:;' name='remark_delete'>删除</a>",
                                 "</span>",
                             "</div>",
                         "</div>",
                    "</div>"],

            //备注编辑模版      
            edit: ['<div class="sTips shadow sTipsRemind" style="{2}" id="{3}">',
                    '<fieldset class="p_relative" >',
                        '<label class="nulltips" style="display:none;position:absolute;top:5px;left:5px;color:gray">请输入备注内容</label>',
                        '<legend class="hide"></legend>',
                        '<textarea class="remidText inShadow remarkcontent" name="remarktext" >{0}</textarea>',
                        '<div class="sTipsBtn">',
                            '<span class="bibText">还可输入<strong class="yel"></strong> 字</span>',
                            '<span class="bibBtn">',
                                '<a class="btnSure" href="javascript:void(0)" name="remark_edit_save" rel="{1}"><span>确 定</span></a>&nbsp;',
                                '<a class="btnNormal" href="javascript:void(0)" name="remark_edit_cancel" ><span>取 消</span></a>',
                            '</span>',
                        '</div>',
                    '</fieldset>',
                 '</div>']



        },

        initialize: function () {
            var self = this;
            this.model = new M2012.Remark.Model();
            this.showtemp = self.template.show.join('');
            this.edittemp = self.template.edit.join('');
            this.tipstemp = self.template.tips.join('');
            this.max = this.model.get("max");
            return superClass.prototype.initialize.apply(this, arguments);
        },

        /** 获取列表备注显示位置 */
        getPosition: function () {
            var self = this;
            var mid = self.model.get('mid');
            if (self.model.get("showtype") == 'list') {
                //var offset = $('#list_ico_'+mid).find('.i_note_y').offset();
                var offset = $($App.getMailboxView().el).find('#div_maillist tr[mid=' + mid + ']').find('.i_note_y').offset();
                var leftpx = offset.left + 11;
                var toppx = offset.top - 62;
                return $T.Utils.format('left:{0}px;top:{1}px;z-index:999', [leftpx, toppx]);
            } else {
                return '';
            }
        },

        /**
        *列表页备注提示
        */
        showTips: function () {
            var self = this;
            if ($('#listtips').length == 0) {
                var mid = self.model.get("mid");
                self.model.set({ opType: 'get' });
                self.model.remarkDataSource(function (dataSource) {
                    if (dataSource.memo != null) {
                        var html = $T.Utils.format(self.tipstemp, [$T.Utils.htmlEncode(dataSource.memo), self.getPosition(), 'listtips']);
                        $('#remarkContainer').append(html);
                    }
                });
            }
            clearTimeout(self.timer);
            $(".dayAreaTable").find(".sTips").remove(); //删除编辑框
        },

        /**
        * 鼠标在备注提示层上时不消失
        */
        onTips: function (e) {
            var self = this;
            clearTimeout(self.timer);
            $('#listtips').show();
        },

        /**
        * 鼠标移开时备注提示层消失
        */
        hideTips: function (e) {
            var self = this;
            self.timer = setTimeout(function () {
                $('#listtips').remove();
            }, 500);
        },

        /** 确认删除 */
        deleteConfirm: function () {
            var self = this;
            $Msg.confirm(
                '你确定要删除该邮件的备注吗？',
                function () {
                    self.deleteRemark();
                },
                {
                    icon: "warn"
                }
            );
        },

        /**
        * 删除备注
        */
        deleteRemark: function () {
            var self = this;
            var mid = self.model.get("mid");
            var remark = $(self.el).find(".remarkTips p").html();
            self.model.set({ opType: 'delete', mid: mid, memo: remark });
            self.model.remarkDataSource(function (dataSource) {
                self.editCancel();
                M139.UI.TipMessage.show("备注删除成功", { delay: 3000 });
                //列表页删除
                if (self.model.get("showtype") == 'list') {
                    $(self.el).find(".remarkTips").remove();
                    $App.trigger("showMailbox", { comefrom: "commandCallback" });
                    $App.validateTab("readmail_" + mid);
                }
                else {
                    $(self.el).find("#readremark_" + mid).html('').hide();
                    appView.trigger("mailboxDataChange");
                }
                $(self.el).find(".i_note_y").removeClass("i_note_y");
                self.refreshSplit();//分栏刷新
            });

        },

        /**
        * 读信页增加备注
        */
        addRemark: function () {
            var self = this;
            if ($(".sTipsRemind").length > 0) {
                self.repeatTips();
                return;
            }
            if (!$(self.el).find("i.i_note").hasClass("i_note_y") && $(self.el).find(".remarkcontent").length == 0) {
                var mid = self.model.get("mid");
                var style = "position:absolute;top:5px;right:100px";
                $(self.el).find(".readmialTool").after($T.Utils.format(self.edittemp, ['', 'add', style]));
                $(self.el).find(".remarkcontent").focus();
            }
        },

        /** 重复编辑框判断 */
        repeatTips: function () {
            M139.UI.TipMessage.show("如须编辑其他备注，请关闭正在编辑的备注 ", { delay: 3000 });
            $(".sTipsRemind")[0].focus();
        },

        /**
        *备注编辑
        */
        editRemark: function () {
            var self = this;
            if ($(".sTipsRemind").length > 0) {
                self.repeatTips();
                return;
            }
            var mid = self.model.get("mid");
            if (self.model.get("showtype") == 'list') { //列表
                var remark = $("#listtips p").html();
                var style = 'position:absolute;' + self.getPosition();
                $('#listremark').length == 0 && $('#remarkContainer').append($T.Utils.format(self.edittemp, [remark, 'update', style, 'listremark']));
                $('body').find("#listtips").remove();
            } else { //读信
                var remark = $(self.el).find("#readremark_" + mid + " .remarkTips p").html();
                var style = "position:absolute;top:-100px;right:0px";
                $(self.el).find("#readremark_" + mid + " .remarkTips-title").append($T.Utils.format(self.edittemp, [remark, 'update', style, 'rmremark']));
            }
            //$(self.el).find(".remarkcontent").focus();
            $T.Utils.textFocusEnd($(self.el).find(".remarkcontent")[0]);
        },

        showTopTips: function (optype) {
            if (optype == 'add') {
                M139.UI.TipMessage.show("备注添加成功", { delay: 3000 });
            } else {
                M139.UI.TipMessage.show("备注修改成功", { delay: 3000 });
            }
        },

        /**
        *取消编辑
        */
        editCancel: function () {
            var self = this;
            $(self.el).find(".sTips").remove();
        },

        /**
        * 保存备注
        */
        editSave: function (e) {

            var self = this;
            var resRemark = '';
            var mid = self.model.get("mid");
            var text = $(self.el).find(".remarkcontent");
            var remark = self.filterNull(text.val());
            var optype = $(self.el).find('a[name=remark_edit_save]').attr("rel"); //新增or编辑
            if (remark.length == 0) { return; }
            if (remark.length > this.max) {
                $Msg.alert("备注最多输入" + this.max + "字");
                return;
            }
            //remark = M139.Text.Utils.htmlEncode(remark);
            resRemark = $T.Utils.htmlEncode(remark); //encode处理
            self.model.set({ opType: optype, mid: mid, memo: remark });
            self.model.remarkDataSource(function (dataSource) {
                self.editCancel();
                self.showTopTips(optype); //顶部提示
                if (optype == 'add') {
                    BH('readmail_addremarkok');
                }
                if (self.model.get("showtype") == 'list') {
                    //列表页打开
                    if (optype == 'add') {
                        var html = $T.Utils.format(self.tipstemp, [$T.Utils.htmlEncode(dataSource.memo)], 'tipstemp');
                        $(self.el).append(html);
                    } else {
                        $(self.el).find(".remarkTips p").html(resRemark);
                    }
                    $App.validateTab("readmail_" + mid);
                    //会话邮件打开
                } else if (self.model.get("showtype") == 'sessionmail') {

                    $(self.el).find("#readremark_" + mid).html($T.Utils.format(self.showtemp, [resRemark])).show();
                    $(self.el).find("#readremark_" + mid + " .remarkTips p").html(resRemark);
                    //刷新列表
                    appView.trigger("mailboxDataChange");
                }
                else {

                    //读信页打开
                    $(self.el).find("#readremark_" + mid).html($T.Utils.format(self.showtemp, [resRemark])).show();
                    $(self.el).find("#readremark_" + mid + " .remarkTips p").html(resRemark);
                    appView.trigger("mailboxDataChange");
                }

                $(self.el).find(".i_note").addClass("i_note_y");
                self.refreshSplit();//分栏刷新
            });


        },

        //分栏读信同步刷新
        refreshSplit: function () {
            if (!/mailbox_|mailsub_/i.test($App.getCurrentTab().name)) { return }
            if ($App.getLayout() == 'left' || $App.getLayout() == 'top') {
                $App.trigger("showMailbox");
                $App.trigger("refreshSplitView");
            }
        },

        render: function () {
            var self = this;
            var mid = self.model.get("mid");
            self.model.remarkDataSource(function (dataSource) {
                if (dataSource.memo != null) {
                    var content = $T.Utils.format(self.showtemp, [$T.Utils.htmlEncode(dataSource.memo)]);
                    $(self.el).find("#readremark_" + mid).html(content).show();
                    //新窗口读信
                    if (location.search.indexOf("t=newwin") > -1) { $(".remarkTips-title .fr").v }
                }
            });
        }

    }));


    $D.appendHTML(document.body,'<div id="remarkContainer"></div>');
    var listremarkview = new M2012.Remark.View({ el: '#remarkContainer', showtype: 'list' });
    listremarkview.model.set({ mid: null, showtype: 'list' });
    listremarkview.initEvents();

})(jQuery, _, M139);



﻿/*处理pns消息
通过pnsResultHandle函数传入pns返回的json报文进行单元测试
例如：
(1)测试新邮件到达通知
$App.getModel("pnsModel").pnsResultHandle({"c":1,"msg":[{"type":70,"topic":"cccc","ctx":{"mailFrom":"铁喜光","imapId":"1327542421","mailSize":"7117","mailMsgId":"44820000095ac54f00000035","mailToAddr":"tiexg@139.com","unKnow":"unKnow","mailAttName":"","mailSenderFrom":"tiexg@139.com","msgContent":"ccccccccccccccc\n铁喜光\n邮箱：13590330157@139.com\n手机：13590330157","msgType":"70","mailFolder":"1"},"isAsk":0,"msgId":"bfe751ced501469daee08c80b5ca0299"}]});
(2)测试红色上角标推送
$App.getModel("pnsModel").pnsResultHandle({"c":1,"msg":[{"type":300,"topic":"null","ctx":"...","isAsk":0,"msgId":"13401410a0ba4848901fe344c16c0d83"}]});

*/
M139.namespace("M2012.Model.Pns", {
    PnsModel: Backbone.Model.extend({
 
        callApi: M139.RichMail.API.call,
        pnsUrl : '/pns/poll?sid=' + top.sid + '&comeFrom=1003', // PNS接口地址负责推送新邮件到前端 add by tkh
        updateMsgStatusUrl : '/subscribe/inner/bis/updateTipsMemcKey?sid='+top.sid, // 更改消息状态
        pnsErrorInterval : 1000*120, // 接口报错后下一次重新调接口的时间间隔
        pnsTimer: null, // 接口报错后需要用定时器再调一次接口，pnsTimer用于报错定时器ID
        //pns推送过来的消息类型
        msgTypes: {
            mailMsg: 70,
            calendarMsg: 100,
            superiorNum: 300,//上标数字
            operateMsg: 1012,
            msgBox:500,
            groupMailMsg : 201 // 群邮件消息
        },
        logger : new top.M139.Logger({
			name : "M2012.Folder.Model.FolderModel"
		}),
        //初始化
        initialize: function () {

            $App.registerModel("pnsModel", this);
        },

    
        // update by tkh  调服务端推送接口取新邮件信息
        startRequestPns: function () {
            var self = this;
            
            var options = {};
            options.method = 'get';
            options.timeout = self.pnsErrorInterval;
            options.error = function(){
            	self.callPns();
            	self.logger.error("newMailArrival callPns error");
            };
            options.ontimeout = function(){
            	self.callPns();
            	self.logger.error("newMailArrival callPns timeout");
            };
            options.isSendClientLog = false;
            
            M139.RichMail.API.call(self.pnsUrl, null, function(e) {
    			var result = e.responseData;
    			if (result) {
    			    //console.log(result);
        			if(result.errorCode){
        				self.callPns();
        				self.logger.error("newMailArrival returndata error", "[pns/poll]", result);
        			}else{
        			    self.pnsResultHandle(result);
        			    $App.trigger("pnsNewArrival",result);//留给以后扩展
        				self.callPns(500);
        				//self.autoReceiveMail();
        			}
        		}else{
        			self.callPns();
        			self.logger.error("newMailArrival returndata error", "[pns/poll]", result);
        		}
	        }, options);
        },

        // 返回之后重新请求接口 add by tkh
        callPns : function(seconds){
        	var self = this;
        	
        	// 判断用户是否登录超时
        	if(top.$App.isSessionOut()){
        		console.log('登录超时！不再请求PNS');
        		return;
        	}
        	
        	if(self.pnsTimer){
        		clearTimeout(self.pnsTimer);
        	}
        	self.pnsTimer = setTimeout(function(){
        	    self.startRequestPns();
        	}, seconds || self.pnsErrorInterval);
        },
        /*
        此函数可用于单元测试
        $App.getModel("pnsModel").pnsResultHandle({"c":1,"msg":[{"type":70,"topic":"cccc","ctx":{"mailFrom":"铁喜光","imapId":"1327542421","mailSize":"7117","mailMsgId":"44820000095ac54f00000035","mailToAddr":"tiexg@139.com","unKnow":"unKnow","mailAttName":"","mailSenderFrom":"tiexg@139.com","msgContent":"ccccccccccccccc\n铁喜光\n邮箱：13590330157@139.com\n手机：13590330157","msgType":"70","mailFolder":"1"},"isAsk":0,"msgId":"bfe751ced501469daee08c80b5ca0299"}]});
        
        */
        pnsResultHandle: function (result) {
            var self = this;
            if (result.c > 0) {   //c代表数量
                // update by xyx 新增推送日历消息
                var msgArr = result.msg;
                for (var i = 0, l = msgArr.length; i < l; i++) {
                    if (msgArr[i].type && (msgArr[i].type == this.msgTypes.mailMsg)) {
                        this.showNewMail(msgArr);
                    } else if (msgArr[i].type && (msgArr[i].type == this.msgTypes.calendarMsg)) {
                        this.showCalendarMsg(msgArr);
                    } else if (msgArr[i].type == this.msgTypes.operateMsg) {
                        this.showOperateTipMsg(msgArr);
                    } else if (msgArr[i].type == this.msgTypes.superiorNum) {
                        this.showSuperiorNum(msgArr);
                    } else if (msgArr[i].type == this.msgTypes.groupMailMsg) {
                        this.showGroupMailMsg(msgArr);
                    }
                }
            } else if (result.c == 0) {
                //console.log('超时返回！autoReceiveMail'); //清理满屏的控制台信息. 控制台输出没有意义,有需要应该上报
                self.logger.debug('超时返回！autoReceiveMail'); //只在测试线输出, 要在现网输出,在控制台输入"top.SiteConfig.isDev=true"并回车
            }
        },
        showNewMail: function (msgArr) {
            var mid = msgArr[0].ctx.mailMsgId;
            var options = { ids: [mid] };
            this.callApi("mbox:getMessageInfo", options, function (e) {
                if (e.responseData && e.responseData["var"]) {
                    var resultNew = e.responseData["var"];

                    $App.getView("folder").model.set("vipMailStats", null);
                    $App.getView("mailbox").model.set("freshMailList", resultNew);

                    $App.trigger("reloadFolder");
                    if ($App.getCurrentTab().name.indexOf("mailbox") >= 0) {
                        $App.trigger("mailboxDataChange", { render: true }); // 刷新邮件列表
                    }

                    $App.trigger("newMailArrival", resultNew); // 显示右下角邮件到达tip弹窗
                    $App.trigger("msgBoxMailArrival",resultNew); //显示消息提醒盒子的红点
                }
            });

        },

        // add by xyx   将pns推送过来的字符串(msgContent)转换为对象  20131010
        showCalendarMsg: function(msgArr){
            for(var i= 0, l=msgArr.length; i<l; i++){
                var strContent = msgArr[i].ctx.msgContent;
                var from = msgArr[i].ctx.mailFrom;
                var objContent = false;
                try {
                    objContent = JSON.parse(strContent);
                } catch (e) {
                }
                if (!objContent) {
                    try {
                        objContent = eval("("+strContent+")");
                    } catch (e) {
                    }
                }

                if (objContent) {
                    objContent.fromName = from;
                    $App.trigger("newCalendarMsg", objContent);
                } else {
                    top.M139.Logger.getDefaultLogger().error("日历通知tip报文异常", strContent);
                }
            }


        },

        showMsgBoxHot:function(msgArr){
            var self = this;
            var msgLen = 0;
            var mailLen = 0;
            var transfer = {  //只接收的消息
                groupmail_gin: 'addrGroupinvite',
                addr_mkpn: 'addrMaykown',
                calendar_cain: 'calendarInvite',
                calendar_cen: 'calendarActive',
                netdisk_tsen: 'cabinet',
                cpo_cpopu: 'myMagazine',
                cpo_cponm: 'magazineHome'
            };

            M139.RichMail.API.call("msg:getRemindMsg",{},function(response){
                var res = response.responseData;
                //处理消息盒子的消息
                if(res.code == 'S_OK'){
                    for(var i=0; i<res['var'].length; i++){
                        var msg = res['var'][i]
                        if(transfer[msg['msgType']] && msg.msgContent>0){
                            msgLen ++;
                        }
                    }
                }
                //如果有消息，红点亮
                if(msgLen){
                    top.$Evocation.msgBoxHot.show();
                }
            });
        },


        msgBoxHasNewMail:function(){
            //首次登录
            if(typeof $Evocation.hasNewMail == 'undefined'){
                return $User.getUnreadMessageCount();
            }else if($Evocation.hasNewMail){
                return 1
            }else{
                return 0
            }
        },

        showOperateTipMsg: function(msgArr) {
            for(var i= 0, l=msgArr.length; i<l; i++){
                var strContent = msgArr[i].ctx;
                var objContent = false;
                try {
                    objContent = JSON.parse(strContent);
                } catch (e) {
                }
                if (!objContent) {
                    try {
                        objContent = eval("("+strContent+")");
                    } catch (e) {
                    }
                }

                if (objContent) {
                    top.operatetipsview && top.operatetipsview.showTips([objContent]);
                } else {
                    top.M139.Logger.getDefaultLogger().error("智能运营与PNS对接报文异常", strContent);
                }
            }
        },
        
        // 修改云邮局消息状态
        updateMpostMsgStatus : function(){
        	var self = this;
        	
        	var data = {status : 2};
            M139.RichMail.API.call(self.updateMsgStatusUrl, data, function(result) {
    			var responseData = result.responseData;
                if (responseData && responseData.resultCode == 0) {
                	console.log('Function[updateMpostMsgStatus] update pushMsg.status suc!');
                } else {
                    console.log(result);
                	self.logger.error('Function[updateMpostMsgStatus] update pushMsg.status error!');
                }
	        }, {requestDataType: "Object2JSON"});
            
			mpdifyTopMsgStatus();
			
			function mpdifyTopMsgStatus(){
				var pushMsg = top.$App.pushMpostMsg;
	        	if(pushMsg){
	        		pushMsg.msg.status = data.status;
	        	}
			}
        },
        
        showSuperiorNum: function (msgArr) {
        	var self = this;
        	
        	//给目标结点加红点上标
            function addRedSuperior(target) {
            	// add by tkh
                target.addClass('p_relative');
            	
                if (target.children().length == 0) {
                    target.append('<i class="i-red_dot"></i>');
                    $(target).click(function () { //点击后红点消失
                        $(this).find("i").remove();
                    });
                }
            }
        	
            if (msgArr[0]) {
                
                // add by tkh 将云邮局消息保存到顶层，供云邮局内部判断我的报刊是否显示角标使用，避免云邮局内部发http请求取消息
            	var pushMpostMsg = M139.JSON.tryEval(msgArr[0].ctx);
            	var status = pushMpostMsg && pushMpostMsg.msg.status;
            	if(status != 4){
            		top.$App.pushMpostMsg = pushMpostMsg;
            		top.$App.trigger('renderNewMagazineIcon');
            	}
            	if(status == 1){
            		// addRedSuperior($("#toptab_googSubscription a")); // 由于邮箱要推出消息盒子，顶层的红点暂时屏蔽掉
                
	                // 通过once绑定事件，保证只执行一次
	                top.$App.once('updateMpostMsgStatus', function(){
	                	self.updateMpostMsgStatus();
	                });
            	}
            }
        },
        /**
         * 群邮件中的消息推送
         * add by lc
         * @param msgArr
         */
        showGroupMailMsg : function(msgArr) {
            if (this.lastMsgId == msgArr[0].msgId)
            {
                // 如果相等, 表示重复推送了, 丢弃
                console.warn && console.warn("the same msgid");
                return;
            }

            // 保留上次的消息ID, 防止重复
            this.lastMsgId = msgArr[0].msgId;

            var content = "";
            try {
                content = JSON.parse(msgArr[0].ctx);
            } catch (e) {
                if (!content) {
                    try {
                        // 某些IE下不支持JSON.parse
                        content = eval("("+msgArr[0].ctx+")");
                    } catch (e) {
                    }
                }
                console.warn && console.warn("json parse exception...");
            }

            if (Number(content.type) == 2) {
                // 处理群邮件新消息
                console.log && console.log(content);
                top.$App && top.$App.trigger("changeGroupMsgSum", content);
            }
        }
    })
});

﻿//create by zhangsixue 飞信转发模型层
(function (jQuery, Backbone, _, M139) {
	var $ = jQuery;
	M139.namespace("M2012.ReadMail.Fetion.Model", Backbone.Model.extend({
			selectedList : [],
			emailDetails:{},
			initialize : function () {
				this.dataSource = []; // 接口返回的原始数据
			},
			tipWords:{
				NO_TFETION_USER: '您不是飞信用户，无法使用此功能',
				BIND_FAIL : '由于网络超时，请刷新后重试',
				AT_LEAST_ONE_USER : '请至少选中一个飞信用户',
				SENDING : '正在发送中',
				SEND_SUCCESS: '发送成功',
				SEND_FAIL : '由于网络等原因发送失败，请重试。',
			//	MAX_2000_CHARSET : '飞信接收上限为2000字(包含发件人、主题和时间长度)',
				MAX_20_CONTACTS : '您最多可选择20位好友'
			},
			getFetionFriends : function (callback) {
				var self = this;
				top.$RM.call("together:getFetionFriends", {}, function (result) {
					var rD = result.responseData;
					if(rD){
						switch(rD.code){
							case 'S_OK' :
								self.dataSource = result.responseData['var']['fetionFriendsList'];
								callback && callback();
								break;
							case 'USER_NOT_EXIST' :
								self.flagCode = 1; //不属于飞信用户
								callback && callback();
								break;
							case 'USER_NOT_MOBILE' :
								self.flagCode = 2; //不属于移动用户
								callback && callback();
								break;
							case 'S_FAIL' :
								self.flagCode = 2;
								console.log("绑定失败");
								callback && callback();
								break;
							default :
								self.flagCode = 2;
								callback && callback();
								break;
						}
					}
					/*
					if(rD && rD.code == 'S_OK'){
						self.dataSource = result.responseData['var']['fetionFriendsList'];
					}else if(rD && rD.code == 'USER_NOT_EXIST'){
						self.flagCode = 1; //不属于飞信用户
					}else if(rD && rD.code == 'USER_NOT_MOBILE'){
						self.flagCode = 2; //不属于移动用户
					}
					if(rD && rD.code == 'S_FAIL'){
						console.log("绑定失败");
					}
					callback && callback();*/
					
				});
			},
			sendMailToFetio : function(callback){
				var self = this;
				var fetionIds = [];
				for(var i =0, l = self.selectedList.length; i < l ;i++ ){
					fetionIds.push(self.selectedList[i]["friendFetionNo"]);
				}
				var message = "发件人：" + self.emailDetails.sendAccount + "主 题：" + self.emailDetails.sendTitle + "时 间：" + self.emailDetails.sendTime + "正 文：" + self.emailDetails.sendContent;
				var data ={
					linkMans : fetionIds.join(","),
					message : message
				};
				top.$RM.call("together:sendMailToFetion", data, function(result){
				//	if(result.responseData && result.responseData.code == 'S_OK'){
						callback && callback(result);
				//	}else{
				//		console.log("发送失败！");
				//	}
					
				})
			},
			getContactsById : function (friendFetionNo) {
				var ds = this.dataSource;
				for (var i = 0; i < ds.length; i++) {
					var tmp = ds[i]["groupMembers"];
					for (var j = 0; j < tmp.length; j++) {
						if (friendFetionNo == tmp[j]["friendFetionNo"]) {
							return tmp[j];
							break;
						}
					}
				}
				return null;
			},
			isSelectedItem : function (item) {
				return $.inArray(item, this.selectedList) > -1;
			},
			isGreatThan20: function(){
				return this.selectedList.length >= 20
			},
			addSelectedItem : function (item) {
				if (this.isSelectedItem(item)) {
					return;
				} 
				this.selectedList.push(item);
			},
			removeSelectedItem : function (item) {
				if (this.isSelectedItem(item)) {
					var selectedList = this.selectedList;
					for (var j = 0; j < selectedList.length; j++) {
						if (item == selectedList[j]) {
							selectedList.splice(j, 1);
						}
					}
				}
			},
			setTheNumChoosed: function(){
				var num = this.selectedList.length;
				$("#numChoosed").html(num);
			},
			//之前的用正则取数据，放弃不用
			getCurrentMailContent: function(){
				//把个人信息带入发信的地方
				var currMid = $App.getCurrMailMid();
				var thisMailData =  M139.PageApplication.getTopApp().print[currMid];
				if(thisMailData){
					var sTitle = thisMailData["subject"];
				//	var sContent = thisMailData["html"]["content"].replace(/<script>.*?<\/script>/mig,"");
				//	var sContent = thisMailData["html"]["content"].replace(/<script>/ig,"&lt;script&gt;").replace(/<\/script>/ig,"&lt;/script&gt;");
				//	var sContent = thisMailData["html"]["content"].replace(/<script>/ig,"").replace(/<\/script>/ig,"").replace(/if\(callback\)parent\[callback\]\(window,"domready"\);/,"");
					var htmlContent = thisMailData["html"]["content"];
					var sContent = htmlContent.replace(/<script[^>]*?>[\s\S]*?<\/script>/mig,"");
					sContent = sContent.replace(/<table .*>.*?<\/table>/mig,"");//去表格
					sContent = sContent.replace(/<img .*>/,"");//去图片
					sContent = sContent.replace(/<style[^>]*?>[\s\S]*?<\/style>/mig,"");
					var filterText = $("<div>" + sContent + "</div>").text();
					var sTime = $Date.format("yyyy-MM-dd hh:mm:ss", new Date(thisMailData["sendDate"] * 1000));
					var data = {
						sendPersons: self.selectedList || [],
						sendTitle : sTitle || "",
						sendTime : sTime || "",
						sendContent: filterText || ""
					};
					return data;
				}
			},
			//纯文本读信
			getCurrentMailContent2 : function(callback){
				var currMid = $App.getCurrMailMid();
				var data = {
					fid : 0,
					mid : currMid,
					autoName : 1,
					markRead : 1,
					returnHeaders :{
						Sender :"",
						"X-RICHINFO" :""
					},
					filterStylesheets: 0,
					filterImages :0,
					filterLinks :0,
					keepWellFormed :0,
					header: 1,
					supportTNEF :1,
					returnAntispamInfo :1,
					mode: "text"

				};
				top.$RM.readMail(data,function(e){
					console.log(e);
					if(e && e.code == "S_OK"){
						callback && callback(e["var"]);
					}else{
						console.log("read mail fail！");
					}
					
				})
			}
		}));

})(jQuery, Backbone, _, M139);

﻿// create by  zhangsixue 飞信好友列表和组视图
(function (jQuery, Backbone, _, M139) {
	var superClass = M139.View.ViewBase;
	M139.namespace("M2012.ReadMail.Fetion.Group", superClass.extend({
			initialize : function (options) {
				var self  = this;
				self.model = options.model;
				var el = $D.getHTMLElement(options.container);
				el.innerHTML = self.buildGroupAndContacts(self.model.dataSource);
				self.setElement(el);
				self.render();
				self.initEvents();
				return superClass.prototype.initialize.apply(this, arguments);
			},
			templateGrop : '<a href="javascript:;" class="groupName" style="display: block;"><i class="i_downDot i_rightDot"></i>{Group} ({number}) </a>',
			templateItem : '<li friendFetionNo="{friendFetionNo}">\
								<a href="javascript:;" class="add_addr">添加</a>\
								<a href="javascript:;" class="add_addr add_addrh c_999">已添加</a>\
								<a class="MemName" href="javascript:;">{MemberName}</a>\
							</li>',
			render : function () {
			},
			events : {
				"click li[friendFetionNo]" : "onContactsItemClick",
				"click .groupName" : "onGroupNameClick"
			},
			initEvents : function () {
				$("li[friendFetionNo]").mouseenter(function () {
					var _this = $(this);
					_this.addClass("li-add");
				}).mouseleave(function () {
					var _this = $(this);
					_this.removeClass("li-add");
				});
			},
			onContactsItemClick : function (event) {
				if(this.model.isGreatThan20()){
					M139.Dom.flashElement(document.getElementById("forFlash"));//弹窗改为闪烁
				//	top.$Msg.alert(this.model.tipWords.MAX_20_CONTACTS);
					$("#forFlash").css("color","red");
					setTimeout(function(){
						$("#forFlash").css("color","");
					}, 600);
					return;
				}
				var cid = $(event.target).closest("li").attr("friendFetionNo");
				var c = this.model.getContactsById(cid);
				$("li[friendFetionNo='" + cid + "']").addClass("li-addh").addClass("check");
				this.model.addSelectedItem(c);
				this.trigger("select", c);
				this.model.setTheNumChoosed();
			},
			onGroupNameClick: function(event){
				var _this = $(event.currentTarget);
				_this.next("ul").toggle();
				_this.find("i").toggleClass("i_rightDot");
			},
			buildGroupAndContacts : function (data) {
				var self = this;
				var html = "";
				if(data.length == 0){
					html = '<p class="ta_c c_999">您的飞信通讯录中暂时没有好友</p>';
					return html;
				}
				for (var i = 0, l = data.length; i < l; i++) {
					var groupHtml = self.templateGrop.replace("{Group}", data[i].groupName).replace("{number}",data[i].groupMembers.length);
					var members = data[i]["groupMembers"];
					var membersHtml = "<ul class=\"second_menuFeiBar\" style=\"display: none;\">";
					for (var j = 0, m = members.length; j < m; j++) {
						var friendName = members[j].friendName == "" ? members[j].friendFetionNo : members[j].friendName;
						membersHtml += self.templateItem.replace("{MemberName}", friendName).replace("{friendFetionNo}", members[j].friendFetionNo);
					}
					html += "<li>" + groupHtml + membersHtml + "</ul></li>";
				}
				return html;
			}
		}));
})(jQuery, Backbone, _, M139);

﻿//create by zhangsixue 飞信转发视图包裹层
(function (jQuery, Backbone, _, M139) {
	var $ = jQuery;
	var superClass = M139.View.ViewBase;
	M139.namespace("M2012.ReadMail.Fetion.View", superClass.extend({

			initialize : function () {
				var self = this;
				this.model = new M2012.ReadMail.Fetion.Model();
				this.model.selectedList.length = 0;//初始化的时候清楚已经选中的数据
				this.showAll = false; //收起和显示的时候，设置标志。onShouqi
				this.model.getFetionFriends(function(){
					if(self.model.flagCode == 1){
						top.$User.iAmNotFetion = 1;//第二次的时候判断，为1的时候不属于飞信用户
						top.$Msg.alert(self.model.tipWords.NO_TFETION_USER);
						return;
					}else if(self.model.flagCode == 2){
						top.$User.iAmNotFetion = 2;//第二次的时候判断，为2的时候绑定失败
						top.$Msg.alert(self.model.tipWords.BIND_FAIL);
						return;
					}
					self.render();
				});
				
				return superClass.prototype.initialize.apply(this, arguments);
			},
			template : {
				selected : '<a href="javascript:;">{name}<i friendFetionNo="{friendFetionNo}" class="i_deletePson" style="display: inline-block;"></i></a>',
				container : ['<div class="feibarTips" id="feibarTips" style="width:246px;">',
								'<div class="feibarTitle">',
									'<a href="javascript:;" class="i_closeFei" id="closeFei"></a>',
									'<span class="i_fei fl"></span>',
									'<dl>',
										'<dt class="c_333">选择飞信好友</dt>',
										'<dd class="c_999">该封邮件将发送到好友的飞信</dd>',
									'</dl>',
								'</div>',
								'<div class="feibarBody" style="">',
									'<div class="feibarContact">',
										'<div class="contactsP" id="contactsP"></div>',
										'<p><span id="forFlash">您选择了<span>（<span id="numChoosed">0</span>/20）</span>位好友</span><a href="javascript:;" id="shouqi" class="ml_5">全部<i class="i_down"></i></a></p>',
									'</div>',
									'<div>',
										'<ul class="feibar_address sweb" id="feibar_address" style="height: 225px;">',
											/*'<li><a href="#" class=""><i class="i_downDot"></i>未分组的好友</a></li>',
											'<li>',
												'<a href="#" class=""><i class="i_rightDot"></i>我的好友</a>',
												'<ul class="second_menuFeiBar">',
													'<li><a href="#">红枫叶</a></li>',
													'<li class="check"><a href="#" class="add_addr">添加</a><a href="#">红枫叶</a></li>',
													'<li><a href="#">红枫叶</a></li>',
													'<li><a href="#">红枫叶</a></li>',
													'<li class="check"><a href="#" class="add_addr c_999">已添加</a><a href="#">红枫叶</a></li>',
													'<li><a href="#">红枫叶</a></li>',
												'</ul>',
											'</li>',*/
										'</ul>',
									'</div>',
								'</div>',
								'<div class="feiBotmBar clearfix">',
									'<span class="fr"><a style="margin-right: 5px;" href="javascript:;" class="btnTb" flg="1" id="sureAndNext"><span>确 定</span></a></span>',
								'</div>',
							'</div>'].join(""),
				sendHTMLtemplate: ['<div class="boxIframeText">',
											'<div class="" style="padding:5px 15px;">',
												'<dl class="scheduleRightBottomTips" style="line-height:25px;">',
													'<dd style="display:none;"><span>发件人：</span>{sendAccount}</dd>',
													'<dd style="display:none;"><span>主  题：</span>{sendTitle}</dd>',
													'<dd style="display:none;"><span>时  间：</span>{sendTime}</dd>',
													'<dd class="mt_5"><span style="display: none;">信件内容：</span>',
														'<div class="c_666" id="iamthemain">',
														'{sendContent}',
														'<a style="padding-left:5px;" href="javascript:;" id="showAll">查看全部</a>',
														'</div>',
														'<textarea id="editContent" style="width: 500px; height: 125px;">{editContent}</textarea>',
													'</dd>',
												'</dl>',
											'</div>',
											'<div style="padding: 10px; background: #f5f5f5; color:#666; border-top: 1px solid #dadada; ">',
												'<p>提示：<span id="numMaxTips">飞信接收上限为2000字，已输入<span id="currentNum">{currentNum}</span>字。</span></p>',
												'<p style="margin-left:35px;">好友不在线时，短信接收上限500字。</p>',
											'</div>',
								/*	'</div>',
									'<div class="boxIframeBtn">',
											'<span class="bibText gray"></span>',
											'<span class="bibBtn">',
												'<a href="javascript:void(0)" class="btnSure"><span>接 受</span></a> <a href="javascript:void(0)" class="btnNormal"><span>拒 绝</span></a>',
											'</span>',*/
									'</div>'].join("")

			},
			render : function () {
				var self = this;
				var cssjson = {top : 200,left : 300,"z-index" : 5002,position : "absolute"};
				self.el = $(this.template.container).appendTo(document.body).css(cssjson);
				self.setElement(self.el);
				var zIndex = self.$el.css("z-index") - 1;
				self.mask = M2012.ReadMail.Fetion.View.showMask({zIndex : zIndex}); //遮罩
				
				var group = new M2012.ReadMail.Fetion.Group({
						"model" : self.model,
						"container" : $("#feibar_address")
					}).on("select", function () {
						self.renderSelected();
						self.$contactsPHeight = self.$contactsP.height(); //每次点击的时候重新计算高度
						self.setHeight();
				});
				$D.setDragAble(self.$el[0], {
					handleElement: self.$el.find(".feibarTitle")[0]
				});
				self.$contactsP = self.$el.find("#contactsP");
				if(self.$contactsP.height() > 60){
					self.$contactsP.height(60);
					$("#shouqi").show();
				}else{
					$("#shouqi").hide();
				}
				this.initEvents();
			},
			setHeight : function(){
				if(this.showAll){
					//添加和删除的时候高度不用理，自己控制
					this.$contactsP.height("auto");
				}else{
					//如果高度大于56,则显示为56
					if(this.$contactsP.height() >= 56){
						this.$contactsP.height(56);
					}else{
						this.$contactsP.height("auto");
					}	
				}
				var has = true;
				var offset = this.$contactsP.offset();
				var left1 = offset.left;
				var right1 = left1 + this.$contactsP.width();
				var top1 = offset.top;
				var bottom1 = top1 + this.$contactsP.height();
				var obj={
					left: left1,
					right:right1,
					top:top1,
					bottom:bottom1
				};
				has = inBounds($("#contactsP").find("a").last(),obj);
				//高度小于56或者等于56且无香蕉
				if(this.$contactsP.height() < 56 || (this.$contactsP.height() == 56 && has)){
					//隐藏 交换按钮
					//height去掉
					$("#shouqi").hide();
					this.$contactsP.height("auto");
				}else{
					//显示 交换按钮
					$("#shouqi").show();
				}
				
				function inBounds(elem, bounds) {
					if (elem.top && elem.left) {
						var position = elem;
					} else {
						var position = $(elem).offset();
					}
					if (position.left >= bounds.left && position.top >= bounds.top
						&& position.left  <= bounds.right && position.top  <= bounds.bottom) {
						return true;
					} else {
						return false;
					}
				}
			},
			events : {
				"click #closeFei" : "onCloseFei",
				"click #shouqi" : "onShouqi",
				"click #sureAndNext" : "onSureAndNext"
			},
			initEvents : function () {
				var self = this;
				self.$contactsP.undelegate("click").delegate("i", "click", function (e) {
					var friendFetionNo = $(this).attr("friendFetionNo");
					var c = self.model.getContactsById(friendFetionNo);
					$("li[friendFetionNo='" + friendFetionNo + "']").removeClass();
					self.model.removeSelectedItem(c);
					self.renderSelected();
					self.model.setTheNumChoosed();
					self.setHeight();
				//	if(self.showFlag){//非折叠的时候，点击删除，才重新计算高度
					//	self.$contactsPHeight = self.$contactsP.height(); //每次点击的时候重新计算高度	
				//		$("#fiveMore").show();
				//	}else{ //折叠的时候，先还原高度，再计算总高度(供展示折叠用)，再隐藏部分高度（当前状态）
					//	self.$contactsP.height("auto");
					//	self.$contactsPHeight = self.$contactsP.height();
					//	self.$contactsP.height(self.hei);
				//		$("#fiveMore").hide();
				//	}
					
				});
			},
			onCloseFei : function(){
				//关闭的时候，因为为单例，所有的需要初始化
				this.model.selectedList.length = 0;
				this.showAll = false;
				$("#shouqi").hide();
				$("#contactsP").height(0);
				this.$el.hide();
				this.mask.hide();
				this.renderSelected();
				this.model.setTheNumChoosed();
				$("#shouqi").html("全部<i class=\"i_down\"></i>");
				$("#feibar_address").find("i").removeClass("i_rightDot").end().find("ul").hide();
				$("li[friendFetionNo]").removeClass();
			},
			onShouqi : function(e){
				if(this.model.selectedList.length == 0){
					return; //什么也没选中的话，点击不做处理
				}
				var _this = $(e.currentTarget);
				if(_this.text() == "全部"){
					_this.html("收起<i class=\"i_up\"></i>");
					this.showAll = true;
				}else{
					_this.html("全部<i class=\"i_down\"></i>");
					this.showAll = false;
				}
				this.hei = $("#five").height() + 11;
				this.setHeight();
		//		if(this.showFlag){
				//	this.$contactsP.animate({height: this.hei});
				//	this.showFlag = false;
		//			$("#fiveMore").show();
		//		}else{
				//	this.$contactsP.animate({height: this.$contactsPHeight});
				//	this.showFlag = true;
		//			$("#fiveMore").hide();
		//		}
				
			},
			onSureAndNext: function(){
				var self = this;
				if(self.model.selectedList.length == 0){
					top.$Msg.alert(self.model.tipWords.AT_LEAST_ONE_USER);
					return;
				}
				this.model.getCurrentMailContent2(function(e){
					self.model.emailDetails = {
						sendAccount :$Email.getName(e["account"]),
						sendTitle : e["subject"],
						sendTime : $Date.format("yyyy-MM-dd hh:mm:ss", new Date(e["sendDate"] * 1000)),
						sendContent : e["text"]["content"]
					};
					if($("#sureAndNext").attr("flg") == "1"){
						self.getSendHtmlTemplate();
					}
					$("#sureAndNext").attr("flg", 0);
				});
			},
			getSendHtmlTemplate: function(){
				var self = this; 
				var emailDetails = self.model.emailDetails;
			//	var title_subjet_time_LENGTH = emailDetails["sendAccount"].length + emailDetails["sendTitle"].length + emailDetails["sendTime"].length + 4 * 4;
				var title_subjet_time_LENGTH = 0;
				var sendContent = "发件人：" + emailDetails["sendAccount"] + " / 主 题：" + emailDetails["sendTitle"] + " / 时 间：" + emailDetails["sendTime"] + " / <br/>正文：" + emailDetails["sendContent"];
				var sendContent = sendContent.replace(/\r|\n|^\s|\s$/ig, "").replace(/\s+/ig," ").replace(/^\s|\s$/ig, "");
				var show200Char = sendContent.substr(0,250);
				var show2000Char = sendContent.substr(0,2000 - title_subjet_time_LENGTH);
				var thisHtml = M139.Text.Utils.format(self.template.sendHTMLtemplate,{
					sendAccount : emailDetails["sendAccount"],
					sendTitle : emailDetails["sendTitle"],
					sendTime : emailDetails["sendTime"],
					sendContent : show200Char,
					editContent : show2000Char.replace("<br/>", ""),
					currentNum : show2000Char.length
				});
				self.diag = top.$Msg.showHTML(
					thisHtml,
					function(){
						
						self.model.emailDetails.sendContent = $("#editContent").val();
						top.M139.UI.TipMessage.show(self.model.tipWords.SENDING);
						self.model.sendMailToFetio(function(result){
							if(result.responseData && result.responseData.code == 'S_OK'){
							//	top.$Msg.alert("发送成功");
								self.onCloseFei(); //成功才关闭
								top.M139.UI.TipMessage.show(self.model.tipWords.SEND_SUCCESS, {delay : 2000})
							}else{
								top.M139.UI.TipMessage.hide();
								top.$Msg.confirm(self.model.tipWords.SEND_FAIL, 
									function(){
										self.getSendHtmlTemplate();
									},function(){
										self.onCloseFei(); //关闭2个弹窗
										self.diag.close();
									},
									{"buttons": ["重试", "取消"]});
							}
						
						});
					},
					function(){
					//	$("#sureAndNext").attr("flg", 1);
						self.diag.close();
					//	self.model.selectedList.length = 0;
					//	self.showAll = false;
					//	self.model.setTheNumChoosed();
					//	$("#shouqi").hide();
					//	$("#contactsP").height(0);
					},
					{
						dialogTitle:"转发给飞信好友",
						width: 530,
						buttons:["确定","取消"]
					}
				).on("close",function(){
					$("#sureAndNext").attr("flg", 1);
				});
				
				$("#iamthemain").css({"width": 500,"height" : 125, "overflow-x" : "hidden","overflow-y":"auto"});
				$("#iamthemain").click(iamthemain);
				if(show2000Char.length <= 250){
					$("#showAll").hide();
				}else{
				//	$("#iamthemain").unbind("click");//大于200的时候不能不展开就编辑
				}
				$("#editContent").hide();
				$("#showAll").click(function(e){
					$("#iamthemain").html(show2000Char);
					$(this).hide();
					$("#iamthemain").click(iamthemain);
					$("#currentNum").html(show2000Char.length - title_subjet_time_LENGTH);
					e.stopPropagation();
				});
				
					function iamthemain(){
						$("#iamthemain").remove();
						var $editContent = $("#editContent");
						$editContent.show();
						$("#currentNum").html(show2000Char.length);
						M139.Timing.watchInputChange($editContent[0], function () {
							var currentContent = $editContent.val();
							$("#currentNum").html(currentContent.length);
							if($editContent.val().length > 2000 - title_subjet_time_LENGTH){
							//	top.$Msg.alert(self.model.tipWords.MAX_2000_CHARSET);
								M139.Dom.flashElement(document.getElementById("numMaxTips"));
								$editContent.val(currentContent.substr(0,2000 - title_subjet_time_LENGTH));
								$("#currentNum").html(currentContent.length);
								return false;
							}
						});
					}
			},
			renderSelected: function(){
				var html = this.bulidSelected();
			//	this.$el.find("#contactsP").html(html).height("auto"); //渲染的时候初始化高度
				this.$el.find("#contactsP").html(html);
			},
			bulidSelected : function () {
				var selectedList = this.model.selectedList;
				var length = selectedList.length;
				//前5个和后面的要不同的包裹
				var html = "<span id='five'>";
				styleDis = this.showFlag ? "" : "display:none;";
				for (var i = 0; i < length; i++) {
					var friendName = selectedList[i]["friendName"] == "" ? selectedList[i]["friendFetionNo"] : selectedList[i]["friendName"];
					html += this.template.selected.replace("{name}", friendName).replace("{friendFetionNo}", selectedList[i]["friendFetionNo"]);
					if( i == 4){
						html += "</span><span id='fiveMore'>";
					}
				}
				if(length < 5){
					html += "</span>";
				}
				if(length >= 5){
					html +="</span>";
				}
				return html;
			}
		}));
		
		$.extend(M2012.ReadMail.Fetion.View,{
			//单例
			create: function(){
				//第二次点击的时候执行，状态判断和数据读取在一个接口里面。
				if(top.$User.iAmNotFetion && top.$User.iAmNotFetion == 1){
					top.$Msg.alert("您不是飞信用户，无法使用此功能");
					return;
				}else if(top.$User.iAmNotFetion && top.$User.iAmNotFetion == 2){
					top.$Msg.alert("由于网络超时，请刷新后重试");
					return;
				}
				if(!this.fetionView){
					this.fetionView = new M2012.ReadMail.Fetion.View();
				}
				this.fetionView.mask && this.fetionView.mask.show();//第二次的时候，遮罩层要显示
				this.fetionView.$el.show();
				return;
			},
			//复制M2012.UI.DialogBasede的方法，如果用M2012.UI.DialogBase.showMask，后面再用M2012.UI.DialogBase弹窗，再次弹打开飞信面板，遮罩层会串，会找错遮罩层，
			masks: [],
			
			showMask: function (options) {
				var mask;
				options = options || {};
				var zIndex = options.zIndex;
				var opacity = options.opacity || 0.5;
				for (var i = 0; i < this.masks.length; i++) {
					if (this.masks[i].css("display") == "none") {
						mask = this.masks[i];
						break;
					}
				}
				if (!mask) {
					mask = createMask();
					this.masks.push(mask);
				}
				mask.css("z-index", zIndex);
				mask.css("opacity", opacity);
				mask.show();
				function createMask() {
					var el = $("<div class='layer_mask' style='overflow:hidden'></div>");
					if ($B.is.ie) {
						//ie6增加iframe 遮住<select>
						el.append("<iframe frameBorder='0' style='width:100%;height:100%;'></iframe>");
					}
					el.appendTo(document.body);
					return el;
				}
				return mask;
			}
		});
})(jQuery, Backbone, _, M139);

﻿M139.namespace("M2012.Mailbox.Model", { 
Mailbox : Backbone.Model.extend({
    defaults:{  //默认数据
		fid: 1, //当前文件夹，改变时触发显示收件箱
		layout:"list",//list:列表布局（默认），top:上下布局，left:左右布局
		pageIndex:1,//当前页
		pageSize: 20,//每页显示邮件数
		pageStyle: 1, //显示密度
		flipType: "common", //分页方式，scroll为滚动条下拉自动分页，common为普通上下箭头分页
		showSummary:true,//是否显示摘要
		showSize:true,//是否显示邮件大小
		isSearchMode:false,//是否是搜索模式
		isNewSearch: true,//是否是重新搜索
        isFullSearch:false,//是否全文检索
		order:"receiveDate", //排序字段
		desc: "1", //排序类型
        firstPageUnreadCount:null,//第一页的未读数
        mid:null,//上下左右分栏读信时当前的邮件
        billtype:null,
        specialFolderId:{adFolder:11,myBill:8,mySubscription:9}, //广告文件夹，我的账单，我的订阅
		//start:1,
        //total:20,
        preloadData:null,
		mailListData:[]　//邮件列表数据
 
    },
    isFirstLoad:true,
    getLayoutStr:function(layoutId){
        var map = {
            0: "list", 1: "top", 2: "left"
        }
        return map[layoutId];
    },
    initialize: function (options) {
        var self = this;
        $App.on("userAttrsLoad", function (attrs) {

            if (attrs["list_layout"]!=null) { //确保加载到了数据项
                self.set("layout", self.getLayoutStr(attrs["list_layout"]));//布局
            }
            //todo 
            var attrs2=$App.getConfig("UserAttrs");
            self.set("pageSize", attrs2.defaultPageSize || 20);//每页显示封数
			self.set("pageStyle",$App.getCustomAttrs('pageStyle') || 1);//样式
            self.set("showSize", attrs2.isShowSize == 1 ? true : false); //显示大小
            self.set("showSummary", attrs2.isShowContent == 1 ? true : false);//显示摘要
            self.set("isFullSearch", attrs2.fts_flag == 1 ? true : false);
            self.set("needReload", true); //禁用缓存（切换标签时立即刷新）

        })
    },
	nextPage:function(){
		this.set("pageIndex",this.get("pageIndex")+1);
	},
    //获取当前列表下的邮件总数量，自动判断普通邮件列表、会话邮件、搜索列表
	getPageCount: function (data) {
	    var messageCount = 0;
	    if (!this.get("isSearchMode")) { //正常列表
	        var fid = this.get("fid");
	        if ($App.isSessionMode() && $App.isSessionFid(fid)) { //(1)已删除文件夹不聚合，(2)标签文件夹不聚合
	            messageCount = this.get("sessionCount");//会话集的个数
            // 聚合二期处理
	        } else if (this.underClusterFolder()) {
	            messageCount = this.get("sessionCount");//会话集的个数
	        } else {
	            var folderInfo = this.getFolderInfo(fid);
	            if (!folderInfo) { return 1;}//容错
	            messageCount = folderInfo.stats.messageCount
	        }
	        

	    } else { //搜索列表
	        var stats = this.get("searchStats");
	        var sessionEnable = this.get("searchOptions") && this.get("searchOptions").sessionEnable;
	        messageCount = (sessionEnable == 2 && this.underClusterFolder()) ? stats.sessionCount : stats.messageCount;
	        
	    }
	    var result = Math.ceil(messageCount / this.get("pageSize"));
	    if(result<=0){result=1};//最小页数为1
	    return result;
	},
	getFolderInfo:function(){
	    //return  $App.getFolderById(this.get("fid"));
	    var folderInfo = {};
	    var fid = this.get("fid");
	    if (this.get("isSearchMode")) { //搜索模式
	        var searchStats = this.get("searchStats");//搜索时，邮件数在邮件列表返回的报文中
	        folderInfo = {
	            name: this.isUnreadMode() ? "未读邮件" : (this.isSubscribeMode() || this.isClusterColumn() || this.isClusterList() ? "订阅邮件" : "搜索结果"),
	            stats: {
	                messageCount: searchStats.messageCount,
	                unreadMessageCount: searchStats.unreadMessageCount //用搜索返回的数据填充。
	            }
	        }
			if(this.get("isContactsMail")){
				folderInfo["name"] = "与"+ top.$App.getAddrNameByEmail(this.get("isContactsMailAndTheEmailIs"))+"的往来邮件";
			}
	    } else {
	        folderInfo = $App.getFolderById(fid);
	        if (!folderInfo) { //数据容错，重新加载接口时如果数量为0不再输出以下数据
	            if (fid == 7) {
                    folderInfo = { fid: 7, type: 1, name: "邮件备份", stats: { messageCount: 0, unreadMessageCount: 0 } }
                }else if (fid == 8) {
	                folderInfo = { fid: 8,type:1, name: "账单中心", stats: {messageCount:0,unreadMessageCount:0}}
	            }else if (fid == 9) {
	                folderInfo = { fid: 9, type: 1, name: "精品订阅", stats: { messageCount: 0, unreadMessageCount: 0 } }
	            }else if (fid == 11) {
					folderInfo = { fid: 11, type: 1, name: "广告文件", stats: { messageCount: 0, unreadMessageCount: 0 } }
				}else if (fid == 12) {
					folderInfo = { fid: 12, type: 1, name: "商讯生活", stats: { messageCount: 0, unreadMessageCount: 0 } }
				}
	        }
	        else{
	        	if (fid == 7) {folderInfo.name = "邮件备份"}
	        }
	    }
	    return folderInfo;
	},
	callApi: M139.RichMail.API.call,
	getDataSource: function (callback) {//获取邮件列表
	    

	    if (this.get("showSize") == false && this.get("order") == "size") {//不显示邮件大小时，不能使用邮件大小排序
	        this.set("order", "receiveDate");
	        this.set("desc", 1);
	    }
	    if (this.get("fid") == 3 && this.get("order") == "from") { //发件箱纠正为使用收件人排序
	        this.set("order", "to");
	    }
		if(this.get("isContactsMail")){//如果是往来邮件
			this.searchContactsMail(callback);
		} else if(this.get("isSearchMode")){
			this.searchMail(callback);//如果是搜索模式
		} else {
            //预加载
		    if (this.isFirstLoad && this.get("fid") == 1 && this.get("preloadData")) {
		        this.isFirstLoad = false;
		        callback(this.get("preloadData"));
		    } else {
		        this.getMailList(callback);//普通模式
		    }
		}
	},
	clearPreloadData: function () { this.set("preloadData", null); },
	fillPreloadData: function () {
	    var self = this;
	    if (this.isPreload()) {
	        this.getMailList(function (data) {
	            self.set("preloadData", data);
	        });
	    }
	},
	isPreload: function () {//预加载邮件列表开关
	    return window.isPreloadUser && isPreloadUser();
	},
	getMailList: function (callback) {
	    var self = this;
	    var maxPageIndex = this.getPageCount();
	    if (this.get("pageIndex") > maxPageIndex) {//防止分页溢出(删除邮件后或其它操作引起当前页邮件减少不足一页)
	        this.set("pageIndex", maxPageIndex);
	    }
	    var start = (this.get("pageIndex") - 1) * this.get("pageSize") + 1;
		var options={
			fid:this.get("fid"),
			order:this.get("order"),
			desc:this.get("desc"),
			start:start,
			total:this.get("pageSize"),
			topFlag:"top"
		}
		/*if (this.get("folderPass") && this.get("folderPass")!="@ok") {
		    options.folderPass = this.get("folderPass");
		}*/
		if ($App.isSessionMode()) {
		    options.sessionEnable = 1; //要传参数会话邮件才生效
		} else {
		    options.sessionEnable = 2; //实现订阅邮件的聚合
		}
		
		$RM.getMailList(options, function (result) {
		    if ($App.isSessionMode() || self.underClusterFolder()) {
		        self.set("sessionCount", result.sessionCount);
		    }

		    if (self.get("fid") == 1) {
		        self.clusterSubscription(result["var"]);
		    }
		    if (result && result["code"] == "S_OK") {
		        callback(result["var"]);
		    } else {
		        M139.UI.TipMessage.hide();
		        if (result && result["errorCode"] == "2351011") {
		            $App.showUnlock(self.get("fid"));
		            $App.close();

		        } else {
		            //$Msg.alert("加载失败");
		        }
		    }
	    });
	},
	clusterSubscription: function (mailList) {
	    var subIndex = 0;
	    var firstSubscription;
	    var subjectArr = [];
	    for (var i = 0; i < mailList.length; i++) {
	        var mail = mailList[i];
	        if ( mail.subscriptionFlag == 1) {
	            if (subIndex == 0) { //第一封订阅
	                firstSubscription = mail;
	            } else {
	                if (mail.flags.read == 1) {
	                    //firstSubscription.flags.read = 1;
	                    
	                }
	                mailList.splice(i, 1); //删除此封邮件
	                i--;
	            }
	            subjectArr.push((subIndex+1)+"."+mail.subject);
	            subIndex++;
	        }
	    }
	    if (subIndex > 1) {
	        firstSubscription.clusterCount = subIndex;
	        firstSubscription.summary = subjectArr.join("");
	    }
	},
	//城市账单帐号列表
	billCityList:{
        "1": "10086@gd.chinamobile.com",
        "2": "10086@yn.chinamobile.com",
        "3": "10086@gx.chinamobile.com",
        "4": "account@139.com",
        "5": "10086@sd.chinamobile.com",
        "6": "beijing10086@bj.chinamobile.com",
        "7": "10086@ln.chinamobile.com",
        "8": "fj10086@139.com",
        "9": "10086@hl.chinamobile.com",
        "10": "10086@gz.chinamobile.com",
        "11": "ydkf@10086.ah.chinamobile.com",
        "12": "10086@gs.chinamobile.com",
        "13": "chinamobile@hi.chinamobile.com",
        "14": "hebei10086@139.com",
        "15": "10086@ha.chinamobile.com",
        "16": "hbmc10086@139.com",
        "17": "hnmcc.com@139.com",
        "18": "10086@jl.chinamobile.com",
        "19": "10086@js.chinamobile.com",
        "20": "10086@jx.chinamobile.com",
        "21": "10086@nm.chinamobile.com",
        "22": "10086@nx.chinamobile.com",
        "23": "10086@qh.chinamobile.com",
        "24": "10086@sx.chinamobile.com",
        "25": "10086@sn.chinamobile.com",
        "26": "10086@sc.chinamobile.com",
        "27": "10086@tj.chinamobile.com",
        "28": "10086@xz.chinamobile.com",
        "29": "10086@xj.chinamobile.com",
        "30": "10086@zj.chinamobile.com",
        "31": "10086@cq.chinamobile.com"
    },

    getBillTypeName: function(billtype){
    	var nameObj = {
    		'10':'移动账单',
    		'11':'生活账单',
    		'12':'金融账单',
    		'13':'其他账单'
    	};
    	return nameObj[billtype];
    },

	//修改账单类型
	updateBillType: function(callback) {
	    //RequestBuilder.needEncoding = false;

	    /*
	    RequestBuilder.call("mbox:updateBillType", param, function (result) {
	        RequestBuilder.needEncoding = true;
	        callback.call(RM, result["var"], result["stats"]);
	    }); */
		var self = this;
		var options = {
                fid: 0,
                recursive: 0,
                isSearch: 1,
                ignoreCase: 0,
                condictions: [
					{
						field: "from",
						operator: "contains",
						value: self.billCityList[$User.getProvCode()]
					}
				]
            };

		M139.RichMail.API.call("mbox:updateBillType", options, function(response) {
			if(response.responseData.code && response.responseData.code == "S_OK") {
				callback && callback({
					'var':response.responseData["var"],
					'stats':response.responseData["stats"] 
				});
			} else {
				//self.logger.error("positioncontent returndata error", "[unified:getUnifiedPositionContent]", response)
			}
		});

	    //修改为序列化接口，增加标记手机支付账单类型
	    var options2 =  {
	        fid: 0,
	        recursive: 0,
	        isSearch: 1,
	        ignoreCase: 0,
	        condictions: [
				{
				    field: "from",
				    operator: "contains",
				    value: "cmpay_bill@139.com" //全国手机支付的发件人统一是这个
				}
			]
	    };

		//RequestBuilder.call("mbox:updateBillType", param2, function (result) { });
		M139.RichMail.API.call("mbox:updateBillType", options2, function(response) { }); //暂时没有callback
	},

	//获取账单类型
	getBillTypeList: function(callback){
		var self = this;
		if(M139.HttpRouter.serverList['bill'].path != SiteConfig.billPath){
			M139.HttpRouter.serverList['bill'].path = SiteConfig.billPath;
		}
		M139.RichMail.API.call("bill:getTypeList", {}, function(response) {
			callback && callback(response.responseData);				
		}); 
	},

	//设置账单类型
	setBill: function(api,options,callback){
		var self = this;
		M139.RichMail.API.call(api, options, function(response) {
			callback && callback(response.responseData);	
		}); 
	},

	checkUnreadChange: function () { //检测第一页未读邮件是否变化,如果有变化则刷新文件夹
	    if(!this.get("isSearchMode")){ 
	        var isChange = false;
	        var data = this.get("mailListData");
	        var result=$.grep(data, function (n, i) {
	            if (n.flags && n.flags["read"] == 1) {
	                return true;
	            } else {
	                return false;
	            }
	        
	        });
	        var oldCount = this.get("firstPageUnreadCount");
	        if (oldCount!=null && (oldCount < result.length)) {
	            isChange = true;
	            $App.trigger("reloadFolder", {
	                callback: function () {
	                    $App.trigger("refreshCount"); //刷新工具栏
	                }
	            });
	        
	        }
	        this.set("firstPageUnreadCount", result.length);
	        return isChange;
	    }

	},
	getFreshUnread: function (callback) {
	    this.callApi("mbox:searchMessages",
            { fid: 0, isSearch: 1, start: 1, total: 5, order: "receiveDate", desc: 1, flags: { read: 1 } }, function (res) {
                if (res.responseData["var"] && res.responseData["var"].length > 0) {
                    var mid = res.responseData["var"][0].mid;
                    console.log(res.responseData["var"][0].subject);
                    console.log(mid);
                    callback(mid);
                }

            });
	    this.invalidateSearch();
	},
	//账单提醒tips用
	getFreshUnreadBill: function(callback){
		this.callApi("mbox:searchMessages",
            { fid: 0, isSearch: 1, start: 1, total: 5, order: "receiveDate", desc: 1, flags: { read: 1, billFlag:1} }, function (res) {
                if (res.responseData["var"] && res.responseData["var"].length > 0) {
                    var mail = res.responseData["var"][0]                    
                //    console.log(mail);
                    callback && callback(mail);
			}
            });
		this.invalidateSearch();
	},
    //获取收件箱最近的N封邮件
	getFreshMail: function (count,callback,options_add) {
	    var options={
	        fid:1,
	        order: "receiveDate",
	        desc:"1",
	        start:1,
	        total: count
	    }
	    if (options_add) {
	        for (elem in options_add) {
	            options[elem] = options_add[elem];
	        }
	    }
	    $RM.getMailList(options, function (result) {
	        if (callback) { callback(result["var"]); }
	    });

	},
	addLoadBehavior:function(){
	    var fid = this.get("fid");
	    var data = {
	        1: "mailbox_inbox_load", 2: "mailbox_draft_load", 3: "mailbox_sent_load", 4: "mailbox_deleted_load",
	        5: "mailbox_junk_load", 6: "mailbox_virus_load", 7:"mailbox_7_load", 8: "mailbox_bill_load",
	        9: "mailbox_subscribe_load", 11: "mailbox_ad_load"
	    }
	    if (this.isStarMode()) {//星标
	        BH("mailbox_star_load");
	    }else if (data[fid]) { //系统文件夹
	        BH(data[fid]);
	    } else {
	        var type = $App.getFolderType(fid);
	        if(type == 3) {
	            BH("mailbox_custom_load");
	        } else if (type == 5) { //tag
	            BH("mailbox_tag_load");
	        } else if (type == -3) { //pop
	            BH("mailbox_pop_load");
	        }
	    }
	},
    isApproachMode:function(){
        if (this.get("isSearchMode")) {
            if (this.isStarMode() || this.isVipMode() || this.isBillMode() || this.isSubscribeMode() || this.isTaskMode() || this.isUnreadMode()) {
                return false;
            }
            return true;
        }
        return false;
    },
	isStarMode: function () {//是否是星标邮件
	    if (this.get("isSearchMode")) {
	        options = this.get("searchOptions");
	        if (options && options.flags && options.flags.starFlag == 1) {
	            return true;
	        }
	    }
	    return false;
	},
	isVipMode:function(){ //是否是搜索vip邮件
	    if (this.get("isVipMode")) {
	        return true;
	    }
	    return false;
	},
	isBillMode: function () { //是否显示账单中心
	    if (this.get("isSearchMode")) {
	        options = this.get("searchOptions");
	        if (options && options.flags && options.flags.billFlag == 1) {
	            return true;
	        }
	    }
	    return false;
	},
	isSubscribeMode: function () { //是否显示账单中心
	    if (this.get("isSearchMode")) {
	        options = this.get("searchOptions");
	        if (options && options.flags && options.flags.subscriptionFlag == 1) {
	            return true;
	        }
	    }
	    return false;
	},
	isClusterList: function () {
	    var self = $App.getCurrentTab().view.model;
	    if (!self.get("isSearchMode")) {
	        return false;
	    }
	    var options = self.get("searchOptions");
	    var carr = options && options.condictions || [];
	    for (var i = 0, len = carr.length; i < len; i++) {
	        var item = carr[i];
	        if (item.field == "sendId" && item.value && item.operator == "EQ") {
	            return true;
	        }
	    }
	    return false;
	},
	isClusterColumn: function () {
	    var self = $App.getCurrentTab().view.model;
	    if (!self.get("isSearchMode")) {
	        return false;
	    }
	    var options = self.get("searchOptions");
	    var carr = options && options.condictions || [];
	    for (var i = 0, len = carr.length; i < len; i++) {
	        var item = carr[i];
	        if (item.field == "sendId" && item.value == 0 && item.operator == "GT") {
	            return true;
	        }
	    }
	    return false;
	},
	isUnreadMode: function () {
	    var op = this.get("searchOptions");
	    return this.get("isSearchMode") && op && op.flags && op.flags.read;
	},
    isTaskMode:function(){ //是否是搜索任务邮件
	    if (this.get("isSearchMode") && this.get("isTaskMode")) {
            return true;
	    }
	    return false;
	},
	isVipMail: function (email) {
	    var vipList = this.getVipEmails();
	    email = $Email.getEmailQuick(email);
	    if (vipList) {
	        return $.inArray(email,vipList)>=0;
	    }
	    return false;
	},
    //获取vip分组的邮件地址列表
	getVipEmails: function () {
	    var info;
        if(top.Contacts.getVipInfo){
            info = top.Contacts.getVipInfo();
        }
	    if (info) {
	        if (info.vipEmails && info.vipEmails.length > 0) {
	            return info.vipEmails;
	        }
	    }
	    return null;
	},
	getVipMailCount:function(callback){ //获取vip邮件数
	    var email = this.getVipEmails();
	    if (email) {
	        var options = {
	            fid: 0,
	            recursive: 0,
	            ignoreCase: 0,
	            isSearch: 1,
	            start: 1,
	            total: 20,
	            limit: 1000,
	            isFullSearch: 2,
	            "exceptFids": [4],
	            condictions: [{
	                "field": "from",
	                "operator": "contains",
	                "value": email.join(";")
	            }]
	        };
	        //var options = this.getVipSearchOptions(emails);

	        this.callApi("mbox:searchMessages", options, function (res) {


	            callback(res.responseData["stats"]);

	        });
	        this.invalidateSearch();

	    } else { callback({unreadMessageCount :0})}//无vip联系人，置空
	    
	},
    //添加vip联系人
	addVipContact: function (contactlist) {

	    
	    var vipC = top.Contacts.getVipInfo();
	    var groupId = vipC.vipGroupId;
	    /*if (!vipC.hasContact && vipList.length == 0) {
	        return;
	    }*/
	    var vipList = [];
	    for (var i = 0; i < contactlist.length; i++) {
	        vipList.push(contactlist[i].serialId);
	    }
	    var serialIds = vipList.join(',');
	    var options = { GroupId: groupId, GroupType: 1, SerialId: serialIds };
	    var contactModel = M2012.Contacts.getModel();
	    contactModel.modifyGroup(options, function () {
	        $Msg.alert("所选联系人已加为VIP联系人，其邮件已自动标记为“VIP邮件”。");
	        $App.trigger("vipContactsOnChange", { data: contactlist });
	    });
	},

    //搜索vip联系人邮件
	searchVip: function () {
	    var email = this.getVipEmails();
	    if (email) {
	        var options = {
	            "isVip": true,
	            "isFullSearch": 2,
	            "exceptFids":[4],
	            "condictions": [{
	                "field": "from",
	                "operator": "contains",
	                "value": email.join(";")
	            }]
	        };
	        $App.searchMail(options);
	    } else {
	        $App.show("vipEmpty");
	        $App.close("mailsub_0");//关闭已打开的vip标签（如果有）
	    }
	},
	clearVipCache: function () {
	    var folderModel = $App.getView("folder").model;
	    folderModel.set("vipMailStats", null);//清空vip邮件数，在渲染的时候会重新获取
	},
    //搜索任务邮件
	searchTaskmail: function (options) {
        var defaults = {
        	'order': 'taskDate',
        	'desc': 0,
            "isTaskmail": true,
            "flags":{taskFlag:1}
        };
        options = $.extend(defaults,options);
        $App.searchMail(options);
	},
	searchMail:function(callback){//搜索邮件
	    //var options=this.searchOptions;
	    var self=this;
		var start=(this.get("pageIndex")-1)*this.get("pageSize")+1;
		var options={
				fid: 0,
				recursive: 0,
				ignoreCase:0,
				isSearch:this.get("isNewSearch")?1:0,//是否重新搜索
				isFullSearch:this.get("isFullSearch")?1:2, //是否全文检索
				start:start,
				total:this.get("pageSize"),
				limit: 1000,
				order: this.get("order"),
				desc: this.get("desc")
			};
			
		var optionsAdd = this.get("searchOptions");
		options = $.extend(options, optionsAdd);
		
		//账单搜索特殊处理
		if(options.billType){
			options.billType = parseInt(options.billType);
			options.isFullSearch = false;
        	delete options.ignoreCase;
        	delete options.statType;
        	delete options.title;
		}

		this.set("lastSearchOptions", options);

		this.callApi("mbox:searchMessages", options, function (res) {
            /*if(res.responseData["code"] == 'FA_BAD_PASSWORD'){
                top.FF.alert('密码错误');
                return;
            }*/
            self.set("searchStats",res.responseData["stats"]);
            callback(res.responseData["var"], res.responseData["stats"]);
            BH("global_search_ok");
		});
		this.set("isNewSearch", 0);
		/**
		 * @2014-7-4 add by wn
		 * set bill_type 控制补投字段
		 */
		this.set("bill_type" , "0");
	}, 
	searchContactsMail:function(callback){//往来邮件
	    //var options=this.searchOptions;
	    var self=this;
		var start=(this.get("pageIndex")-1)*this.get("pageSize")+1;
	//	console.log(this.get('pageIndex'));

	/*	var options={
				fid: 0,
				recursive: 0,
				ignoreCase:0,
				isSearch:this.get("isNewSearch")?1:0,//是否重新搜索
				isFullSearch:this.get("isFullSearch")?1:2, //是否全文检索
				start:start,
				total:this.get("pageSize"),
				limit: 1000,
				order: this.get("order"),
				desc: this.get("desc")
			};*/
		var options = {
				start : start,
				total : this.get("pageSize")
			};	
		var optionsAdd = this.get("searchOptions");
		if(optionsAdd && optionsAdd.total){
			delete optionsAdd.total;
		}
		for(elem in optionsAdd){
			if(elem && elem != "start"){
				options[elem]=optionsAdd[elem];
			}
		}
		//往来邮件的时候，不需要搜索的那些参数
		if(options.isContactsMail || options.statType){
			delete options.isContactsMail;
			delete options.statType;
		}
		this.callApi("mbox:queryContactMessages", options, function (res) {
            /*if(res.responseData["code"] == 'FA_BAD_PASSWORD'){
                top.FF.alert('密码错误');
                return;
            }*/
            self.set("searchStats",res.responseData["stats"]);
            callback(res.responseData["var"], res.responseData["stats"]);
        });
	}, 
	getMailById: function (mid) {
	    var listData = this.get("mailListData");
	    var freshList = this.get("freshMailList"); //新邮件tips接收到的新邮件数组
	    if (listData && freshList && freshList.length > 0) {
	        listData = listData.concat(freshList);
	    }
	    if (listData) {
	        var result = $.grep(listData, function (item, i) {
	            return item["mid"] == mid;
	        });
	        if (result.length > 0) {
	            return result[0];
	        } else {
	            return null;
	        }
	    } else {
	        return null;
	    }
		
	},
    //全部标记为已读
	markAllRead: function (fid, type, callback) {
	    var self = this;
	    var unreadCount = 0;
	    this.clearVipCache();
	    if (!type) { //普通的单个文件夹
	        var data = {
	            fid: fid,
	            flags: { read: 2 },
	            type: "read",
	            value: "0"

	        }
	        var info = $App.getFolderById(fid); 
	        if (info && info.stats) {
	            unreadCount = info.stats.unreadMessageCount;
	        }
	        if (unreadCount>0) { //未读数>0
	            this.updateMessageAll(data, callback);
	        } else {
	            return false;
	        }
	    } else if (type == "star") { //星标邮件
	        unreadCount = $App.getView("folder").model.get("unreadStarCount");
	        if (unreadCount > 0) {
	            var searchOptions = {
	                "fid": 0,
	                "recursive": 0,
	                "ignoreCase": 0,
	                "isSearch": 1,
	                "start": 1,
	                "total": 20,
	                "flags": { "starFlag": 1 }
	            }
	            this.callApi("global:sequential", {
	                items: [
                            { func: "mbox:searchMessages", "var": searchOptions },
                            { func: "mbox:getSearchResult", "var": {} }
	                ]
	            }, function (res) {
	                var mids = res.responseData["var"].mid;
	                var attrs = {
	                    "type": "read",
	                    "value": 0
	                }
	                self.markMail(mids, attrs, function (response) {//标记所有的搜索结果为已读
	                    callback(response.responseData["var"]);
	                    self.clearVipCache();
	                });
	            });
	            this.invalidateSearch();
	        } else {
	            return false;
	        } 
	    } else if (type == "custom" || type == "pop" || type == "tag") { //所有的自定义文件夹和收件箱
	        var folders = $App.getFolders(type);
	        if (type == "custom") { //标记收件箱及自定义文件夹
	            folders.push($App.getFolderById(1));//加入收件箱
	        }
	        var postItems = [];
	        $(folders).each(function (i, n) {
	            if (n.stats) {
	                unreadCount = unreadCount + n.stats.unreadMessageCount;
	            }
	            
	            postItems.push({
	                func: "mbox:updateMessagesAll",
	                "var": {
	                    fid: n.fid,
	                    flags: { read: 2 },
	                    type: "read",
	                    value: "0"
	                }

	            });
	        });
	        if (unreadCount) {
	            this.callApi("global:sequential", {
	                items: postItems
	            }, function (res) {
	                var result = res.responseData["var"];
	                callback(1);
	                self.clearVipCache();
	            });
	        } else {
	            return false;
	        }
	    } else if (type == "search") {
	        this.callApi("mbox:getSearchResult", {}, function (res) {
	            var mids = res.responseData["var"].mid;
	            var attrs = {
	                "type": "read",
	                "value": 0
	            }
	            self.markMail(mids, attrs, function (response) {//标记所有的搜索结果为已读
	                callback(response.responseData["var"]);
	                self.clearVipCache();
	            });
	        });
	    }
	    //self.get("isSearchMode")
	    return true;

	},
    //全部删除未读
	deleteAllUnread: function (fid, callback) {
	    var data = {
	        fid: fid,
	        flags: { read: 2 },
	        type: "move",
	        newFid:4
	    }
	    this.updateMessageAll(data, callback);

	},
    //搜索结果全部删除（普通删除，移到已删除文件夹）
    deleteAllOrdinary: function (){
        var self = this;
        /*重新搜索，避免中途有其它搜索接口调用，覆盖搜索结果
        填坑：这里调用两个接口而不能使用sequential序列调用，因为搜索是通过中间件取了通讯录联系人的，sequential不支持通讯录，造成和前次结果不一致
        */
        this.callApi("mbox:searchMessages", this.get("lastSearchOptions"), function (res2) {
            self.callApi("mbox:getSearchResult",{}, function (res) {
                var result = res.responseData["var"];
                var superSelectResult = {};
                $.each(result.mid, function (k, v) {
                    superSelectResult[v] = null;
                });
                self.superSelectResult = superSelectResult;//保存超级全选结果
                $App.trigger("mailCommand", { command: "move", mids: result.mid, fid: 4 });

                M139.Logger.getDefaultLogger().info("Delete search result,count=" + result.mid.length, true);

            });
        });
    },

	updateMessageAll:function(data,callback){
	
	    this.callApi("mbox:updateMessagesAll", data, function (res) {
	        callback(res.responseData["var"]);
	    });

	},
    //超级全选
	superSelectAll: function (type,callback) {
	    var fid = this.get("fid");
	    var options = {
	        recursive: 0,
	        ignoreCase: 0,
	        isSearch: 1,
	        isFullSearch: 0,
	        start: 1,
	        total: 1,
	        limit: 10000
	    };
	    var folderInfo = this.getFolderInfo(fid);
	    if (folderInfo.type == 5) { //是标签文件夹，搜索参数为labelId
	        options.labelId = fid;
	    } else {
	        options.fid = fid;
	    }
	    if (type == "unread") { //未读
	        options.flags = { read: 1 };
	    }else if (type == "read") { //已读
	        options.flags = { read: 0 };
	    }
	    if (this.get("isSearchMode")) { //搜索模式
	        this.callApi("mbox:getSearchResult", {}, function (res) {
	            callback(res.responseData["var"]);
	        })
	    } else {
	        this.callApi("global:sequential", {
	            items: [
                        { func: "mbox:searchMessages", "var": options },
                        { func: "mbox:getSearchResult", "var": {} }
	            ]
	        }, function (res) {
	            callback(res.responseData["var"]);
	        });
	        this.invalidateSearch();
	    }

	},
	setAll: function (key,val) { //循环设置多实例的model值
	    var arr = ["mailbox", "mailbox_other"];
	    for(var i=0;i<arr.length;i++){
	        var view = $App.getView(arr[i]);
	        if (view && view.model) {
	            view.model.set(key, val);
	        }
	    }
	    
	},
	invalidateSearch:function(){
	    this.setAll("isNewSearch",true);
	},
	clearSuperSelect: function () { //清空超级全选
	    this.superSelectResult = {};
	},

	// 获取选中邮件的mid和sessionId数组对象
	// {mids:mid,sids:sessionId}
	getSelectedRow: function (el) {		
        var superSelectResult = $App.getMailboxView().model.superSelectResult;
		var mid=[];
		var sessionId=[];
	    for (var m in superSelectResult) {
	    	if (superSelectResult.hasOwnProperty(m)) {	    		
		    	var mail = superSelectResult[m];
		    	if (mail) {// 普通选择 + 跨页选择存储了mail信息
		    		mid.push(mail.mid);
		    		sessionId.push(mail.mailSession);
		    	} else {// 超级全选只存储了mid
		    		mid.push(m);
		    	}
	    	}
	    }

	    // 为了兼容拖拽转移邮件
	    if (el && mid.length == 0) {
	    	$(el).find(".dayAreaTable input[type=checkbox]:checked").each(function(idx){
				var sessionid = $(this).parents("tr").attr("sessionid") || '';
				mid.push($(this).parents("tr").attr("mid"));
				sessionid && sessionId.push(+sessionid);
			});
	    }
		
        return {mids:mid,sids:sessionId};
     },
    getPOPAccounts: function (options, callback) {
        var self = this;
        $RM.getPOPAccounts(options, function (result) {
            callback(result);
        });
    },
    syncPOPAccount: function (options, callback) {//收取代收邮件
        var self = this;
        if (options && options.id) {
            $RM.syncPOPAccount(options, function (res) {
                callback(res);
            });
        } else { //收取全部
            this.callApi("user:syncPOPAccountAll",{}, function (res) {
                callback(res);
            });
        }
    },
    //将email地址加入黑名单
    refuseMail:function(email,callback){
        /*$RM.getWhiteBlackList({type:0}, function (result) {
            if (result && result["var"]) {
                callback(result["var"]);
            }
        });*/
        var options = {
            opType: "add",
            type: 0,
            member:email
        }
        
        $RM.getWhiteBlackList({type:1}, function (result) { //获取白名单
            if (result && result["var"]) {
                var list = result["var"];
                var exists = $.grep(list, function (n, i) {
                    return n == email;
                });
                if (exists.length > 0) { //如果白名单中存在，则删除之
                    $RM.setWhiteBlackList({ opType: "delete", type: 1, member: email }, function () {
                        addBlack();
                    });
                } else {
                    addBlack();
                }
            }
        });
       
        function addBlack() {
            $RM.setWhiteBlackList(options, function (result) {
                if (result.errorCode == "2029") { //该地址在黑名单中已存在
                    callback(false); //
                } else {
                    callback(true);
                }

            });
        }

    },
    /*删除或转移最后一页的邮件后，分页数会减少，导致当前页数溢出（大于总页数），
    因为做了聚合邮件之后，sessionCount在文件夹的接口取不到了，只有在listMessages接口才能取到，如果不在客户端计算的话就要请求两次邮件列表。
    */
    reduceSessionCount: function (res) {
        var count = this.get("sessionCount");
        if (count && res.responseData && !isNaN(res.responseData["var"])) {
            this.set("sessionCount", count - Number(res.responseData["var"]))
        }
    },
    moveMail: function (mids, newFid, callback) {//转移邮件
        var self = this;
        // 因为增加了聚合邮件类型，为了兼容以前的接口
        // 只有普通邮件的时候，mids依然为数组
        // 包含聚合邮件的时候，mids为对象，包含一个普通邮件id数组和一个聚合邮件id数组
        var ids;
        var sendIds = [];
        var sendFlag = "";
        if (typeof mids == "object") {
            ids = mids.mids;
            sendIds = mids.sendIds;
            sendFlag = mids.sendFlag;
        } else {
            ids = mids;
        }
        this.callApi("mbox:moveMessages", { ids: ids, sendIds: sendIds, newFid: newFid, sendFlag: sendFlag }, function (res) {
	        callback(res);
	        self.clearVipCache();
	        if (newFid == 4) { //删除邮件时标记为已读
	            self.callApi("mbox:updateMessagesStatus", { ids: ids, type: "read", value: 0 }, null);
	        }
	        self.reduceSessionCount(res);
	       
        });
	},
	
	moveSessionMail:function(sessionIds,newFid,callback){//转移会话邮件
	    this.callApi("mbox:moveMessages", {sessionIds:sessionIds,newFid: newFid}, function (res) {
              callback(res);
        });
	},  
	
	backupMail: function (mids,backupType,callback) {  //备份到网盘
		var backupType = backupType || '';
	    M139.UI.TipMessage.show("邮件备份中...");
	    this.callApi("disk:backupMail", { mailIds: mids.join(","),backupType:backupType }, function (res) {
	        M139.UI.TipMessage.hide();
	        callback(res);
	    })
	    
	},

	savetoNote: function (mids, callback) {  //备份到网盘
	    M139.UI.TipMessage.show("邮件备份中...");
	    this.callApi("mnote:mailsToNote", { mids: mids.join(",") }, function (res) {
	        M139.UI.TipMessage.hide();
	        callback(res);
	    })	    
	},

	deleteMail: function (mids, callback) {//删除邮件
	    var self = this;
	    // 因为增加了聚合邮件类型，为了兼容以前的接口
	    // 只有普通邮件的时候，mids依然为数组
	    // 包含聚合邮件的时候，mids为对象，包含一个普通邮件id数组和一个聚合邮件id数组
	    var ids;
	    var sendIds = [];
	    var sendFlag = "";
	    if (typeof mids == "object") {
	        ids = mids.mids;
	        sendIds = mids.sendIds;
	        sendFlag = mids.sendFlag;
	    } else {
	        ids = mids;
	    }
	    this.callApi("mbox:deleteMessages", { ids: ids, sendIds: sendIds, sendFlag: sendFlag }, function (res) {
    	    callback(res);
    	    self.clearVipCache();
    	    self.reduceSessionCount(res);
        });
    }, 
    
	deleteSessionMail: function (sessionIds, callback) { //删除会话邮件
	    var self = this;
	    this.callApi("mbox:deleteMessages", { sessionIds: sessionIds}, function (res) {
    	    callback(res);
    	    self.clearVipCache();
        });
    },
        
    markMail: function (mids, attrs, callback) { //标记邮件
        var self = this;
		this.callApi("mbox:updateMessagesStatus", {ids:mids,type:attrs.type,value:attrs.value}, function (res) {
		    callback(res);
		    self.clearVipCache();
        });		
    },

    markSessionMail: function (sessionIds, attrs, callback) { //标记会话邮件
        var self = this;
        // 因为增加了聚合邮件类型，为了兼容以前的接口
        // 只有普通邮件的时候，mids依然为数组
        // 包含聚合邮件的时候，mids为对象，包含一个普通邮件id数组和一个聚合邮件id数组
        var ids;
        var sendIds = [];
        if (typeof sessionIds == "object") {
            mids = sessionIds.mids;
            sessionIds = sessionIds.sessionIds;
        } else {
            sessionIds = sessionIds;
        }
        this.callApi("mbox:updateMessagesStatus", { ids: mids, sessionIds: sessionIds, type: attrs.type, value: attrs.value }, function (res) {
            callback(res);
            //attrs.callback && attrs.callback();
            self.clearVipCache();
        });
    },

    addSpecialTagBehavior:function(tagId,key){
        var tagName = $App.getTagsById([tagId])
        if (tagName == "重要任务" || tagName == "紧急任务") {
            BH(key);
        }
    },
    addTagForMail: function (mids, labelId, callback) { //为邮件添加标签
        var self = this;
        var tagOverflow = false;
        $.each(mids,function(i,n){
            var mailInfo = self.getMailById(n);
            if (mailInfo && mailInfo.label && mailInfo.label.length >= 10) {
                tagOverflow = true;
            }
        })
        if (tagOverflow) {
            $Msg.alert("单封邮件的标签数量已超出系统上限，不能继续添加标签");
            M139.UI.TipMessage.hide();
            return;
        }
        
		this.callApi("mbox:updateMessagesLabel", {type:"add",ids:mids,labelId:labelId}, function (res) {
              callback(res);
        });
	},
	removeTagForMail: function (mids, labelId, callback) {//为邮件移除标签
	    var self = this;
		this.callApi("mbox:updateMessagesLabel", {type:"delete",ids:mids,labelId:labelId}, function (res) {
		    $(mids).each(function (i, n) { //修改数据源
		        var mailInfo = self.getMailById(n);
		        if (mailInfo && mailInfo.label) {
		            mailInfo.label = _.without(mailInfo.label, Number(labelId));
		        }
		    });
		    callback(res);
        });
	},
	getTagMenuItems: function () {
	    var tagList = $App.getFolders("tag");
	    var itemsTag = [];
	    $(tagList).each(function (idx, folderItem) {
	        var color = $App.getTagColor(folderItem["folderColor"]);
	        var isSpecial =  (folderItem["name"] == "重要任务");
	        
	        var tagItemHtml = ['<span class="text"><span class="tagMin', isSpecial?" tagJJ":"", '" style="border-color:', color, '"><span class="tagBody" style="background-color:',
	      	color,';border-color:',color,
	      	, '">', isSpecial ? ' <i class="i_jj"></i>' : "", '</span></span><span class="tagText">',
	      	folderItem["name"], '</span></span>'].join("");
	        //tagItemHtml="<b>"+folderItem["name"]+"</b>"
	        itemsTag.push({
	            html: tagItemHtml, command: "tag",
	            args: $App.isReadSessionMail() ? { labelId: folderItem["fid"], bh: 'cMail_toolbar_mark_label'} : { labelId: folderItem["fid"]}
	        });
	    });
	    itemsTag.push({ isLine: true });
	    itemsTag.push({ html: "新建标签", command: "tag", args: { labelId: -1,  bh: ($App.isReadSessionMail() ? 'cMail_tab_createTag' : '')} });
	    itemsTag.push({ html: "管理标签", command: "show", args: { key: "tags",  bh: ($App.isReadSessionMail() ? 'cMail_tab_manageTag' : '')} });
	    return itemsTag;
	},
	getMarkMenuItems: function (includeTag,fid) {
	    var items = [//($App.isReadSessionMail() ? 'cMail_toolbar_mark_starCancel' : 'toolbar_unstar')
                { text: "已读", command: "mark", args: { type: "read", value: 0, bh: ($App.isReadSessionMail() ? 'cMail_toolbar_mark_read' : 'toolbar_markread')} },
                { text: "未读", command: "mark", args: { type: "read", value: 1, bh:($App.isReadSessionMail() ? 'cMail_toolbar_mark_unread' : 'toolbar_markunread') } }
	    ];

	    // 订阅邮件只显示标记已读/未读
	    if (this.isSubscriptionMail() || this.isSubscribeMode()) return items;

	    items.push(
                { isLine: true },
                { text: "星标", command: "mark", args: { type: "starFlag", value: 1, bh:'toolbar_star' } },
                { text: "取消星标", command: "mark", args: { type: "starFlag", value: 0, bh:'toolbar_unstar' } }
        );

        if (!this.isTaskMode()) {
        	items.push(
                { isLine: true },
                { text: "置顶", command: "mark", args: { type: "top", value: 1, bh:'toolbar_sticky' } },
                { text: "取消置顶", command: "mark", args: { type: "top", value: 0, bh:'toolbar_unsticky' } }
        	);
        }

	    if (this.isStarMode()) { //在星标列表，只显示取消星标的菜单
	        items.splice(3, 1);
	    }
	      var searchFolder =$App.getMailboxView().model.get("searchOptions") ;
          if(fid === 2 || (searchFolder && searchFolder.fid === 2) || fid === 7){//在草稿箱里不显示未读和已读以及分割线
	    	items.shift();
	    	items.shift();
	    	items.shift();
	    }
	    if (includeTag) { //是否包含标签
	        items.push({ isLine: true });
	        items = items.concat(this.getTagMenuItems());
	        //items.push({ text: "我的标签", items: this.getTagMenuItems() });
	    }
	    return items;
	},
    //获取文件下拉菜单items
	getFolderMenuItems: function (key, options) {
	    var self = this;
	    if(!options){options={}}
      	var folderList=$App.getFolders(key);
      	var itemsFolder=[];
      	var command=options.command || "move";
        var fid = '';
        var curFid = $App.getCurrentView().model.get('fid');// 受收件箱多实例影响，此处使用$App.getCurrentFid()获取不准确
        if (options && options.fid) {
            curFid = options.fid;
        }
        $(folderList).each(function (idx, folderItem) {
            //排除当前文件夹，搜索模式下fid=1需要特殊处理
            fid = folderItem["fid"];
            if (self.get("isSearchMode") || !(command == "move" && curFid == fid)) {
                if(!self.isNotAllowMove(fid) || key!="system"){
                	var item = {
                        text: folderItem["name"], command: command,
                        args: { fid: fid }
                    };
                    if ($App.isReadSessionMail()) {
                    	if (fid == 3) {item.args.bh = 'cMail_toolbar_move_send';}
                    	else if (key == "custom") {item.args.bh = 'cMail_toolbar_move_custom';}
                    	else if (fid == 11) {item.args.bh = 'cMail_toolbar_move_add';}
                    }
                    itemsFolder.push(item);
                }
            }

        });
        if (!key || key == "custom") { //移动到，全部和自定义时出现新建文件夹菜单
            if (command == "move" && options.showCreate != false) {
                if (itemsFolder.length > 0) {
                    itemsFolder.push({ isLine: true });//cMail_toolbar_move_custom
                }
                itemsFolder.push({ html: "新建并移入…", command:"move",args: { fid: -1, bh: ($App.isReadSessionMail() ? 'cMail_toolbar_createFolder': '')} });
            }
        }
        return itemsFolder;
	},
    
    isNotAllowMove:function(fid){
        var notAllowFids = [2,4,5,7,6,8,9,11]; //不允许移动到 草稿箱、已删除、垃圾邮件、病毒文件夹
        return $.inArray(fid,notAllowFids) > -1;
    },

    // 当前是否处于可聚合文件夹
    underClusterFolder: function () {
        var curFid = $App.getCurrentFid();
        return curFid == 1 || $App.getFolderType(curFid) == 3;
    },

    getMailNum: function (mail) {
        var self = $App.getCurrentTab().view.model;
        var num = "";
        if (!mail) return num;
        if ($App.isSessionMode()) {
            num = self.get("isSearchMode") ? mail.sendTotalNum : mail.mailNum;
        } else {
            num = mail.sendTotalNum;
        }
        return num;
    },

    // 判断聚合邮件：是订阅邮件，且包含多封
    isClusterMail: function (mid) {
        var mail = this.getMailById(mid);
        var mailnum;
        var sendId;
        if (!mail) return false;

        sendId = mail.sendId;
        mailnum = this.getMailNum(mail);
        if (sendId > 0 && mailnum > 1 && this.underClusterFolder() && !this.isClusterList() && $App.getCurrentTab().name.indexOf('readmail_') == -1) {
            return true;
        } else {
            return false;
        }
    },

    // 判断订阅邮件
    isSubscriptionMail: function(mail) {
         if ($App.getCurrentTab().name.indexOf('readmail_') > -1) {
            var readingMail = M139.PageApplication.getTopApp().print[$App.getCurrMailMid()];
            if (readingMail && readingMail.headers && readingMail.headers.subscriptionFlag == 1) {
               return true;
            }
         }

         if (mail && mail.subscriptionFlag == 1) {
            return true;
         }

         return false;
    }
})
});

M139.namespace("M2012.Mailbox.View", {
    Main: Backbone.View.extend({
        template: {
            listHeader:'<div class="bgPadding"><table id="list_header" class="tableTitle">\
		<tbody>\
			<tr>\
				<td class="td1"><input type="checkbox" id="chk_mailist_all"/><i bh="mailbox_selectAllDrop" class="i_triangle_d" id="btn_checkMenu"></i></td>\
				<td class="td2"><a id="th_from" field="from" href="javascript:" hidefocus="true"><span>发件人</span><i class=""></i></a></td>\
				<td class="tdtitle"><a id="th_subject"  field="subject" href="javascript:" hidefocus="true"><span>主题</span><i class=""></i></a></td>\
				<td class="td3"><a id="th_date" field="receiveDate"  href="javascript:" hidefocus="true"><span>日期</span><i class=""></i></a></td>\
				<td class="td4"><a id="th_size" field="size"  href="javascript:" hidefocus="true"><span>大小</span><i class=""></i></a></td>\
				<td class="td5"></td>\
			</tr>\
		</tbody>\
	</table></div>',
            listHeaderLeft: '<div class="bgPadding"><table class="tableTitle" id="list_header">\
    <tbody>\
      <tr>\
        <td class="td1"><div class="tdsel"><!-- 选中时加上 class="tdselOn" --><input type="checkbox" id="chk_mailist_all"/><i bh="mailbox_selectAllDrop" class="i_triangle_d" id="btn_checkMenu"></i> </div></td>\
        <td class="tdtitle"></td>\
        <td class="td6"><div class="tdsel"><!-- 选中时加上 class="tdselOn" --> \
          <a href="javascript:" id="btn_sortMenu"><span>时间由新到旧</span><i class="i_triangle_d" ></i></a> </div></td>\
      </tr>\
    </tbody>\
  </table></div>'
        },
        initialize: function (options) {
            var self = this;
            
            if (options && options.multiInstance) { //多实例不再执行后面的 on监听，否则会重复监听
                this.model = $App.getView("mailbox").model.clone();
                this.model.set("multiInstance", true);
                this.model.set("searchIsComeformDefault", false);
                this.model.set("isTaskMode", false);
                //this.model.set("isTaskbacklogMode", false);
                this.model.set("subscribeName", options.subscribeName);
                options.isSearch && this.model.set("isSearchMode", true);
                return;
            } else { //单实例
                this.model = new M2012.Mailbox.Model.Mailbox();
            }

            function clearMailboxCache() {
                //清掉所有多实例的缓存
                var view = $App.getCurrentView();
                view.model.set("needReload", true);
                view = $App.getView("mailbox");
                view.model.set("needReload", true);
                view = $App.getView("mailbox_other");
                view.model.set("needReload", true);
            }
            appView.on("showMailbox", function (e) { //显示邮件列表事件,由appview分发mailbox的model 改变事件
                if (e && !isNaN(e.fid)) {
                    var currentModel = self.model;
                    function markCallBack(){
                            $App.trigger("reloadFolder", { reload: true });//数据已改变，通知文件夹列表刷新
                            //$App.on("folderRendered", onFolderLoaded);
                        }
                     if(e.fid === 2){//草稿箱刷新时全部标记为已读
                        currentModel.markAllRead(e.fid,false,markCallBack);
                    }


                    if (e.view) {
                        currentModel = e.view.model;//非收件箱的其它文件夹共用一个实例
                    }
                    currentModel.clearSuperSelect()//清空超级全选结果
                    if (e.fid != currentModel.get("fid")) { //切换文件夹时重置为第一页
                        currentModel.set("pageIndex", 1);
                        currentModel.set("firstPageUnreadCount", null);

                    }
                    if (!(e && e.comefrom == "commandCallback")) {
                        currentModel.set("mid", null);//清空mid选择项
                    }


                    currentModel.set("fid", e.fid);
                   
                    currentModel.set("needReload", true);
                    if (e.fid > 1 || e.isSearch) { //非收件箱的列表共用一个实例
                        $App.showPage({ name: "mailsub_0", view: $App.getView("mailbox_other") })
                    } else {
                        $App.showPage({ name: "mailbox_" + e.fid, view: self, group: "mailbox" })
                    }

                } else { //不传fid时，仅用于刷新
                    //self.render();
                    if ($App.getCurrentTab().group == "mailbox") {
                        self.render();
                    } else {
                        if (e && e.comefrom == "commandCallback") { //不如不在邮件列表操作，只清缓存，不切到收件箱
                            clearMailboxCache();

                            if ($App.getCurrentTab().name.indexOf("mailsub_") >= 0) {//订阅邮件多实例特殊处理
                                var v = $App.getMailboxView();
                                v.model.set("needReload", true);
                                v.render(true);
                            }
                            return;
                        }
                        
                        if ($App.getCurrentView().model.get("fid") > 1 || $App.getCurrentView().model.get("isSearchMode")) { //非收件箱的列表共用一个实例
                            $App.showPage({ name: "mailsub_0", view: $App.getView("mailbox_other") })
                        } else {
                            $App.showPage({ name: "mailbox_" + self.model.get("fid"), view: self, group: "mailbox" })
                        }
                        //$App.showPage({ name: "mailbox_" + self.model.get("fid"), view: self, group: "mailbox" });
                    }
                }

            });

            

            appView.on("mailboxDataChange", function (options) { //通知邮件列表数据发生改变，切换标签时需要刷新
                clearMailboxCache();
                var view = $App.getCurrentView();
                if (options && options.render) {
                    if ($App.isMailbox()) {
                        view.render();
                    }
                }
            });

            appView.on("reloadFolder", function () { //文件夹数据改变（添加、删除文件夹和标签时需要重新生成工具栏）
                var view = $App.getCurrentView();
                var model = view.model;
                clearMailboxCache();
                if (view.toolbarView) { //避免没打开收件箱时收到消息
                    view.toolbarView.render();
                    model.trigger("mabilbox_render", self.model.get("mailList"));
                }
            });

            appView.on("changeStar", function () { //标记星标时，如果是在星标搜索视图，同步刷新
                var model = $App.getCurrentView().model;
                if (model.isStarMode()) {
                    $App.trigger("showMailbox");
                }
            });



            appView.on("reduceFolderMail", function (e) {
                // setTimeout(function () {
                var view = $App.getCurrentView();
                if (view.toolbarView) {
                    view.toolbarView.refreshCount();//刷新未读数
                    view.listView.createSuperSelectMenu();//刷新未读数
                }
                // }, 100);
            });

        },

        //获取邮件列表容器，主要是区分账单中心特殊结构
        getMailListWrap: function (type) {
            var self = this;
            var fid = self.model.get('fid');
            var billType = self.model.get('billtype');
            var html = '';

            //我的账单列表结构
            var divMaillistWrap = {
                '0': "<div id='div_maillist' class='p_relative bgPadding' style='overflow-y:auto'></div>",
                '1': "<div id='div_maillist' class='p_relative bgPadding' ></div>"
            };

            //@2014-7-3 modify by wn 隐藏账单提示
            //
            // var myBillWrapHtml = ['<div class="billleft">',
            //     '<div class="billleftDiv">',
            //          '{0}',
            //     '</div>',
            //     '</div>',
            //     '<div class="billright">',
            //     '<div class="aside-bd aside-bd1" style="margin-left: 6px;">',
            //     '<div class="bill_box" style="display:none"><h3>温馨提示</h3><span class="ads_bill ads_bill1"><a href="javascript:;" id="showbillmanager" title="账单管理"></a></span></div>',
            //     '<div class="bill_box"><h3>我的账单：</h3>',
            //         '<ul id="mybillitem">',
            //              '<li><a href="javascript:;"  ><i class="i_bill"></i>全部账单</a></li>',
            //              '<li><a href="javascript:;"  data-billtype="10" ><i class="i_bill"></i>移动账单</a></li>',
            //              '<li><a href="javascript:;"  data-billtype="11" ><i class="i_bill"></i>生活账单</a></li>',
            //              '<li><a href="javascript:;"  data-billtype="12" ><i class="i_bill"></i>金融账单</a></li>',
            //              '<li><a href="javascript:;"  data-billtype="13" ><i class="i_bill"></i>其他账单</a></li>',
            //         '</ul>',
            //     '</div>',
            //     '</div>',
            //     '</div>',
            //     '<div id="myAccountList2" style="float:left; background: #fff; width: 214px;margin-left: -226px;border: 6px solid #fff;margin-top: 150px;"><a href="javascript:;"><i class="i_bill"></i><img src="/m2012/images/module/bill/bg_title.jpg" /></a></div>',
            //     '<div style="clear:both;"></div>'].join(""); 
                //清除浮动
            var myBillWrapHtml = ['<div class="billleft" >',
                '<div class=\"billleftDiv\"  style=\"margin:0px;\" >',
                     '{0}',
                '</div>',
                '</div>'].join("");
            //账单中心或账单搜索且不是分栏模式才显示
            if (self.model.isBillMode() && self.model.get("layout") != "left" && self.model.get("billTab")==0) {
                html = $T.Utils.format(myBillWrapHtml, [divMaillistWrap[type]]);
            } else {
                html = divMaillistWrap[type];
            }
            return html;
        },
        getListHeader: function () {
            if (this.model.get("layout") == "left") {
                return "";
                //return this.template["listHeaderLeft"];
            } else {
                var result = this.template["listHeader"];
                if (this.model.isBillMode() && this.model.get("billTab") == 0) {
                    result = "<div class=\"billleftDiv\" style='margin:0px;'>" + result + "</div>";
                }

                // 代办列表，表头不显示大小栏
                if (this.model.isTaskMode()) {
                    result = result.replace(/<td class="td4"><a id="th_size".+?<\/td>/ig, "")
                                   .replace(/日期/, '计划时间').replace(/<i class=""><\/i>/ig, '');
                }
                //邮件备份，不显示大小 
                var fid = this.model.get("fid");
                if(fid == 7){
                     result = result.replace(/<td class="td4"><a id="th_size".+?<\/td>/ig, "");
                }
                return result;
            }
        },

        render: function (isRendered) {
            var self = this;
            var el = $D.getHTMLElement(this.el);
            var $el = $(this.el);
            if (!isRendered || this.model.get("needReload")) { //第一次加载，或需要强制刷新时才重新显示
                this.model.set("needReload", false);
                if (!this.model.isApproachMode() || this.model.get("layout") == "left" || this.model.get('billtype')) {
                    el.innerHTML = "<div id='toolbar_div' class='bgPadding'></div>" + this.getListHeader()+ self.getMailListWrap(0);
                } else {
                    el.innerHTML = "<div id='toolbar_div' class='bgPadding'></div>"
                                + "<div id='div_mail' class='p_relative' style='overflow-y:auto'><!--[if lt ie 8]><div class='p_relative' style='+zoom:1;'><![endif]-->"
                                + "<div class='searchList'><div class='searchListdiv p_relative'>" //searchList fl=>searchList
                                + this.getListHeader()
                                + "<div id='div_maillist' class='p_relative bgPadding'></div>"
                                + "</div></div>"
                            //    + "<div id='div_searchclassify' class='searchFilter fl p_relative'></div><!--[if lt ie 8]></div><![endif]-->"
								+ "<div id='div_searchclassify' class='searchFilter'></div><!--[if lt ie 8]></div><![endif]-->"
                                + "</div>";
                }
                this.initSplitView(); //先初始化分栏

                var el1 = $el.find("#toolbar_div");//工具栏容器
                var el2 = $el.find("#div_maillist");//邮件列表容器

                if (!this.toolbarView) { //确保工具栏只创建一次
                    this.toolbarView = new M2012.Mailbox.View.Toolbar({ model: this.model, el: el1 });
                } else {
                    this.toolbarView.setElement(el1);
                }
                if (this.options.multiInstance) {//多实例
                    if (this.listView) {
                        $(this.listView.el).off();
                    }
                    this.listView = new M2012.Mailbox.View.ListView({ model: this.model, el: this.el });
                } else { //单例
                    this.listView = new M2012.Mailbox.View.ListView.prototype.createInstance({ model: this.model, el: this.el });
                }
                try {
                    if (this.model.isApproachMode()) {
                        var el3 = $el.find("#div_searchclassify");//逼近式搜索分类容器
                        this.searchClassify = new M2012.Mailbox.View.SearchClassify.prototype.createInstance({ model: this.model, el: el3 });
                    }
                } catch (e) { }
                
				if(top.$App.getView("mailbox").model.get("IamFromLaiwang")){
					$("#div_searchclassify").hide();
					$("#div_mail").addClass("searchListoff");
				}
                if (!top.$App.getView("mailbox_other").model.get("showSearchclassify")) {
                    $("#div_searchclassify").hide();
                    $("#div_mail").addClass("searchListoff");
                } else {
                    top.$App.getView("mailbox_other").model.set("showSearchclassify",false);
                }
				//$(this.el).hide();//先隐藏，等列表listview.js加载后再一次性显示，避免局部闪动。
                this.toolbarView.parentView = this;//设置父view引用
                this.toolbarView.render();
                this.listView.toolbarView = this.toolbarView;//设置按钮工具栏view引用
                this.listView.render();
            }

        },
        initSplitView: function () {
            var self = this;
            var listEl = $(this.el).find("#div_maillist");//注：div_maillist要从当前el中找，因为多标签页多个文件夹中的dom元素id相同
            var layout = this.model.get("layout");
            /*if ($App.getCurrentTab().name.indexOf("mailsub_") >= 0) {
                layout = "list";//订阅多实例强制列表模式
                this.model.set("layout", "list");
            }*/
            if (layout == "top") { //上下布局
                listEl.addClass("inboxWrap")
                .after(["<div id='mailbox_split' style='z-index:9;position:absolute;top:400px;left:0px;right:0px;' class='wrapMiddle'>",
                    "<span class='i_updown'></span></div>",
                    "<div id='readWrap' style='overflow:hidden' class='readWrap p_relative'></div>"].join(''));
                var splitBar = $(this.el).find("#mailbox_split");
                //splitBar.width($(self.el).width());
                var classEl = $(this.el).find('#div_searchclassify');
                var div_mail = $(this.el).find('#div_mail');
                //classEl.height($('#div_main').height()-$('#toolbar_div').height());
                classEl.height(1000);
                div_mail.css({ 'overflow-y': 'hidden' });

                //分栏的初始位置
                //splitBar.css("top",($("#div_maillist").offset().top + $("#div_maillist").height())+"px");
                var offset = { x: 0, y: -51 };//父容器的初始偏移量
                if (self.model.isApproachMode()) {
                    offset = { x: 0, y: -151 };//在逼近式搜索模式，增加了一个div，增加初始的偏移量
                }
                var b = [$("#div_main").offset().left, $("#div_main").offset().top + 100,
                    $D.getWinWidth(), $D.getWinHeight() - 100];
                $D.setDragAble(splitBar[0], {
                    //handleElement:"#tishen",
                    bounds: b,
                    orignOffset: offset,
                    lockX: true,
                    onDragStart: function (e) { },
                    onDragMove: function (e) {
                        self.listView.onResize();
                    },
                    onDragEnd: function (e) { }
                });
            } else if (layout == "left") { //左右布局
                var html = ['<div class="wrapMiddleMiddle" id="mailbox_split" style="z-index:9;height:700px;position:absolute;left:400px">',
                            '<div class="slHvalign">',
                            '<div class="slHvalignCnt">',
                            '<div class="slHvalignCntInner"> <span class="i_leftr"></span> </div>',
                            '</div></div></div>',
                            '<div class="readWrapRight" id="readWrap"></div>'];
                if (this.model.isApproachMode()) {
                    html = ['<div class="wrapMiddleMiddle" id="mailbox_split" style="z-index:9;height:700px;position:absolute;left:400px">',
                            '<div class="slHvalign"><div class="slHvalignCnt">',
                            '<div class="slHvalignCntInner"> <span class="i_leftr"></span> </div>',
                            '</div></div></div>',
                            '<div id="div_mail" class="p_relative" style="overflow-y:auto;margin-left:6px;float:left;_display:inline;">',
							'<!--[if lt ie 8]><div style="+zoom:1;position: relative;"><![endif]-->',
                            '<div class="searchList"><div class="searchListdiv" style="overflow:hidden;">',
                            '<div class="readWrapRight" id="readWrap" style="width:100%;margin-left:0;height:auto;position:relative;"></div>',
                            '</div></div>',
                        //    '<div id="div_searchclassify" class="searchFilter fl p_relative"></div>',改版后相对定位和fl不要了
							'<div id="div_searchclassify" class="searchFilter"></div>',
							'<!--[if lt ie 8]></div><![endif]-->',
                            '</div>'];
                }
                listEl.addClass("inboxWrapLeft").addClass("p_relative")
                .css({ 'overflow-y': 'auto' }).width(376)
                .after(html.join(""));

                var splitBar = $(this.el).find("#mailbox_split");
                splitBar.css({ left: listEl.width() + "px", position: "absolute" });// 24为外边距
                var b = [$("#div_main").offset().left + 100, $("#div_main").offset().top,
                    $D.getWinWidth() - 100, $D.getWinHeight() - 50];
                $D.setDragAble(splitBar[0], {
                    //handleElement:"#tishen",
                    bounds: b,
                    lockY: true,
                    onDragStart: function (e) { },
                    onDragMove: function (e) {
                        self.listView.onResize();
                    },
                    onDragEnd: function (e) { }
                });
            }
        },
        prepareSearch: function (options) {
            var isFullSearch = this.model.get("isFullSearch");
            if (typeof (options) == "string") {//关键字搜索
                var keyword = options;
                options = {
                    condictions: [{
                        field: "subject",
                        operator: "contains",
                        value: keyword
                    }, {
                        field: "from",
                        operator: "contains",
                        value: keyword
                    }, {
                        field: "to",
                        operator: "contains",
                        value: keyword
                    }]
                }
                if (isFullSearch) {
                    options.condictions.push({
                        field: "content",
                        operator: "contains",
                        value: keyword
                    }, {
                        field: "attachName",
                        operator: "contains",
                        value: keyword
                    });
                }
            }
            options.statType = 1;  //逼近式搜索

            var billtype = null; //账单搜索
            if (options.fid == this.model.get('specialFolderId').myBill) { //我的账单
                billtype = options.billType;
            }
            this.model.set({ billtype: billtype });
            this.model.set("pageIndex", 1);//重置页码为第一页
            this.model.set("isSearchMode", true);
            this.model.set("searchOptions", options);
            if (!options.approachSearch) {
                this.model.set("selected", null);
            }
        },

        onResize: function () {

        },

        getListHeaderHtml: function() {
            
        }

    }) //end of class
}); //end of namespace
﻿(function(){
    window.onload = function(){
     var mailboxModel = new top.M2012.Mailbox.Model.Mailbox();
    
        mailboxModel.getBillTypeList(function( result ){
            if ( result["var"] ) {
                var bills=result["var"]; 
                for (var i = 0, m = bills.length; i < m; i++) {
                    var initStatus = bills[i].status;
                    var initBusinessType = parseInt( bills[i].businessType , 10 ) ; 
                    if (initBusinessType === 11) { 
                            $("#ask_wrapper").show();
                    }
                }
            }
        });   
    };   

    function getDate(){
        var toDate = new Date();
        var FullYear = toDate.getFullYear(); //取当前年份
        var toMonth = toDate.getMonth() + 1; //取当前月份
        var toHao = toDate.getDate(); //取当前是几号
        var months = [];
        var years = [];
    //  var toMonth = 4 ; 测试用
        years = [FullYear, FullYear, FullYear];
        if(toHao < 20){
            months = [toMonth - 4,toMonth - 3,toMonth - 2];
        }else{
            months = [toMonth - 3,toMonth - 2,toMonth - 1];
        }
        for(var i =0; i < 3; i++){
            if(months[i] < 1){
                months[i] = months[i] + 12;
                years[i] = years[i] - 1;
            }
        }
        
        return {year: years, months: months};
    }
    
    function transDate(month){
        return month < 10 ? '0' + month : '' + month;
    }
    
    function getWhichHasOrder(callback){
        $RM.call("bill:getBatterypitcherBill",null,function(res){
        //  console.log(res);
            if(res["responseData"]["code"] == "S_OK"){
                callback && callback(res["responseData"]["billDates"]);
            }else{
                callback && callback([]);
            }
        });
    }

    function getHtmlContent(callback2){
        var date = getDate();
        var years = date.year;
        var months = date.months;
        var html = "";
        getWhichHasOrder(function(res){
            for(var len = months.length - 1, i = len; i >= 0; i--){
                var check= "";
                if(i == 2){
                    check = "checked='checked'";
                }
                var disabled = "";
                var dateValue = years[i] + transDate(months[i]);
                if($.inArray(dateValue, res) > -1){
                    disabled = "disabled='disabled' checked='checked'";
                }
                html +='<span class="mr_10"><input type="checkbox" value='+ dateValue +' name="month" id="month'+ i +'" '+ check + disabled +' class="mr_5"  /><label for="month'+ i +'">'+ years[i] +'年'+ months[i] +'月</label></span>\n';
            }
            callback2 && callback2(html);
        });
    }
 function alertCallback(){
        getHtmlContent(function(html){
            var htmlAlter = "<div id='htmlAlter' style='padding: 18px;'><p style='font-size: 14px;'>请选择需要补投话费账单的月份：</p><div style='padding: 10px 0px'>"+html+"</div></div>";
            top.$Msg.showHTML(htmlAlter,
            function(e){
                var checklist = top.$("#htmlAlter input[name='month']:checked:not(':disabled')");//选中的未被禁用的复选框
                var checklistValue =[];
                for(var i = 0; i < checklist.length; i++){
                    checklistValue.push(checklist.eq(i).val());
                }
                if(checklistValue.length == 0){
                    top.$Msg.alert("请至少选择一个补投月份。");
                    e.cancel = true;
                    return false;
                }
                top.$RM.call("bill:batterypitcherBill",{ billDate: checklistValue.join(",") },function(res){
                    if(res["responseData"]["code"] == "S_OK"){
                    //  for(var j = 0; j < checklistValue.length; j++){
                        //  top.$Cookie.set({name : checklistValue[j], value: checklistValue[j], expires: $Date.getDateByDays(new Date(), 7)});
                    //  }
                        top.$Msg.alert("您的话费账单补投申请已受理。我们会尽快为您安排补投，届时请留意“我的账单”新邮件。");
                    }else{
                        top.$Msg.alert("补投申请提交失败，请稍候再试。");
                    }
                });
            },
            function(){
            console.log("do nothing!");
            },
            {
                dialogTitle:'话费账单补投申请',
                buttons:['确定','取消'],
                width: 400,
                height: 80
            });
        });
    }
M139.namespace("M2012.Mailbox.View", {
    Toolbar: Backbone.View.extend({
        events: {
            "click #btn_unread": "onUnreadBtnClick",
            "click #popWriteMail": "onPopWriteMailClick",
            "click #syncPOPAccount": "onSyncPopAccountClick",
            "click #file_mail": "onFileMailClick",
            "click #classify_mail": "onClassifyMailClick",
            "click #classify_mail2": "onClassifyMailClick",
            "click #clean_mail": "onCleanMailClick",
            "click #btn_markUnread": "onMarkUnreadClick",
            "click #btn_deleteUnread": "onDeleteUnreadClick",
            "click #btn_deleteAllOrdinary": "onDeleteAllOrdinaryClick",
            "click a#btn_setting" : "onMailBoxSettingClick",
			"click a#btn_contactMailsTotal" : "onContactMailsTotalClick" ,
            /**
             * @2014-7-7 add by wn
             * 申请补投事件注册
             */
            "click a[data-ask]" : "onAskClick"
        },
        tipTemplate:['<div id="filterTip" class="tipsLayer filterTip" style="top:100px;left:450px;z-index:150;">',
                        '<div class="tipsLayerMain">',
                            '<div class="tipsLayerMainInner tipsLayerMainInner-singleLineTxt">',
                                '邮件太多？ <a href="javascript:" onClick="return false" class="classify_mail toclassify_mail" bh="mailbox_history"><span id="toclassify_mail" >试试创建收信规则</span></a>吧!',   
                            '</div>',
                        '</div>',
                        '<i class="i-tipsLayerArrow tipsBottomArrow"></i>',
                        '<a href="javascript:" id="closetip2" class="closeTipsLayerBtn closetip" title="关闭"><i class="i-closeTipsLayer"></i></a>',
                    '</div>'].join(""),
        initialize: function (options) {
            //alert("hello");
            var self = this;
            this.setElement(options.el);
            this.model = options.model;

            this.model.on("mabilbox_render", function (data) {
                var view = $App.getCurrentView().toolbarView;//多实例，找到当前的列表
                view.renderHeader();
                if (!data) {  //生成分页
                    data = view.model.get("mailListData");
                }
                view.createPager(data);
                //    self.renderSubscribeListIco();我的订阅打开的时候，不要需那两个模式
            });

            $App.on("refreshCount", function () { //监听刷新未读数
                self.refreshCount();
            })

            //add by zhangsixue
            $("#queryDelMessage").live("click", function () {
                BH({ key: 'set_pop_delquery' });
                top.$App.show('selfSearch', { type: 1 });
            })
            $("#daishoujiluchaxun").live("click", function () {
                BH({ key: 'set_pop_querylist' });
                top.$App.show('selfSearch', { type: 2 });
            })


        },
		onAskClick : function(){
            alertCallback();
        },
		/** 精品阅读模式 */
		renderSubscribeListIco:function(){
			var fid = this.model.get("fid");
			if(fid !== 9){return}
			if($(this.el).find('span.changeIco')[0]){return} //避免重复渲染
			var html = ['',
				'<span class="fl changeIco" style="margin:2px 20px 0 0">',
				'<a href="javascript:$App.show(\'myCloudSubscribe\');" class="readModel mr_10" title="在线阅读模式"></a>',
				'<a href="javascript:;" class="listModel listModelBlue" title="邮件列表模式"></a>',
				'</span>'].join('');				
				$(this.el).find('div.toolBarArray').prepend(html);
		},
		
		setTitle: function () {
		    var fid = this.model.get("fid");
		    var clearTabLogo = true;
		    //var clusterLogoInterval;
		    if ($App.getCurrentTab().name.indexOf("mail") != 0) { return; }//当前不是邮件列表
		    if (!this.model.get("subscribeName")) {
		        if (!this.model.get("isSearchMode")) { //搜索模式
		            var folderInfo = this.model.getFolderInfo(fid);
		            if (folderInfo) {
		                this.model.set("messageCount", folderInfo.stats.messageCount); //给model赋值邮件总数，在列表里会用到
		                $App.setTitle(folderInfo.name);
		            }
		        } else {
		            //var searchOptions = this.model.get("searchOptions");
		            if (this.model.isStarMode()) {
		                $App.setTitle("星标邮件");
		            } else if (this.model.isVipMode()) {
		                $App.setTitle("VIP邮件");
		            } else if (this.model.isBillMode()) {
		                $App.setTitle("服务邮件");
		            } else if (this.model.isSubscribeMode()) {
		                if (this.model.isClusterList()) {
		                    clearTabLogo = false;
		                }
		                var title = this.model.get("from");
		                title = title ? $Email.getName(title) : "订阅邮件";
		                $App.setTitle(title);
		            } else if (this.model.isTaskMode()) {
		                $App.setTitle("待办任务");
		            } else if (this.model.get('isContactsMail')) {
		                $App.setTitle("往来邮件");
		            } else if (this.model.isUnreadMode()) {
		                $App.setTitle("未读邮件");
		            } else {
		                $App.setTitle("邮件搜索");
		            }
		        }
		    } else if (this.model.get("multiInstance")) { //多实例
		        var title = this.model.get("subscribeName");
		        title = title ? $Email.getName(title) : "订阅邮件";
		        $App.setTitle(title);
		    }
		},


		getBillCharge: function () {
		    return '';
		    var tabTitle = $App.getCurrentTab().title;
		    if (tabTitle != "收件箱") {  //无奈之举，除了这中文名，没一个属性是唯一的
		        return ''
		    }
		    if (!top.SiteConfig.billAllowProvince) {
		        return "";
		    }
		    var province = top.SiteConfig.billAllowProvince[top.$User.getProvCode()];
		    var billChargeBar = '';
		    if (province) {
		        billChargeBar = '<div id="billChargeBar" style="display:none" class="yellowTips mb_10"><p style="height:24px; line-height:24px">7×24小时话费充值、精准业务推荐办理、引领信息生活、专注用户服务，智能化邮箱营业厅打造服务新体验—<a href="javascript:top.$App.show(\'billCharge\',{ct:\'main\',ac:\'index\'});">立即体验</a>。</p><a href="javascript:" class="yellowTips_close">×</a></div>';
		    }
		    return billChargeBar;
		},


        render: function () {
            var self = this;
            var fid = this.model.get("fid");

            this.setTitle();

            var toolbarHtml = [//'<div class="inboxHeader" id="inboxHeader"></div> 
            '<div class="toolBar">',
                '<ul class="toolBarUl">',
            //'<li class="mr_10"></li>',
            //'<li class=""></li>',
            //'<li class="mr_10 ml-1"></li>',
                '</ul>',
                '<div id="maillist_pager"></div>',
                '<div class="toolBarArray fr mr_5 p_relative"> <a href="javascript:" class="one on" id="btn_more" style="display:none"></a><a href="javascript:" id="btn_setting" class="two"></a> </div>',
                '</div>'].join("");

            //帐单余额显示
            var billCharge = this.getBillCharge();
            toolbarHtml += billCharge;

            //邮件封数显示
            toolbarHtml+='<p id="inboxHeader" class="mb_5 ml_10 clearfix"></p>';

            //我的订阅文件夹列表头部导航
            var isMySubscription = false;
            var showMailApp = false;
            if (this.model.isSubscribeMode()) {
                isMySubscription = true;
                toolbarHtml += ['<div style="height:24px;display:none" class="yellowTips mb_10" style="" id="cloudMailApp">',
                '<p style="height:24px; line-height:24px"></p>',
                '<a class="yellowTips_close" id="CloseloudMailApp" href="javascript:">×</a>',
                '</div>'].join('');
            }


			

            //我的账单文件夹列表头部导航
            var billtypeFlag = false;
            /*		if(fid == this.model.get('specialFolderId').myBill || (this.model.get('isSearchMode') && this.model.get('billtype'))){
            billtypeFlag = true;
            }*/
            if (this.model.isBillMode()) {
                billtypeFlag = true;
            }
            if (billtypeFlag) {
                var state = ["", ""]
                var current = this.model.get("billTab");
                current = current ? current : 0; 
                
                state[current] = "class=\"on\"";
                 
                
                /**
                 * @2014-7-4 modified by wn
                 * 避免能说明当前tab的值被清空.
                 * 为何要清空 billTab ?
                 * 
                 */
                // this.model.set("billTab",null);
                var myBillTabHtml = [
                '<div class="biitab">',
                '<div class="tab setTab" id="billTab">',
                    '<div class="tabTitle">',
                        '<ul>',
                            
                            '<li ' + state[0] + '><a hidefocus="1" href="javascript:;" onclick="$App.showBill(2)"> <span>我的账单</span></a></li>',
                             '<li ' + state[1] + '><a hidefocus="1" href="javascript:;" onclick="$App.showBill(1)"> <span>我的服务</span></a></li>',
                            //@2014-7-3 modify by wn 下线账单管理       
                            // '<li> <a hidefocus="1" tabid="billManage" href="javascript:$App.show(\'billManager\');$App.closeTab(\'mailbox_' + fid + '\')"> <span>账单管理</span> </a></li>',
                            '<li> <a hidefocus="1" tabid="billManage2" href="javascript:$App.show(\'billLife\');"> <span>账单生活</span> </a></li>',
                            '<li ' + state[3] + '><a hidefocus="1" href="javascript:;" onclick="$App.showBill(4)"> <span>语音信箱</span></a></li>',
                        '</ul>',
                    '</div>',
                    '</div>',
                '</div>'].join('');
                toolbarHtml = myBillTabHtml + toolbarHtml;
            }

            /** 待办任务 */
            var taskSearchFlag = false;
            if (this.model.isTaskMode()) {
                taskSearchFlag = true;
            }
            if (taskSearchFlag) {
                var css1 = 'on';
                var css2 = '';
                if (!this.model.get('isTaskbacklogMode')) {
                    css1 = '';
                    css2 = 'on';
                }
                /*var taskTabHtml = [
               '<div class="tab setTab" id="taskTab">',
                   '<div class="tabTitle">',
                       '<ul>',
                           '<li class="' + css1 + '"><a hidefocus="1" href="javascript:;" onclick="$App.searchTaskmail();"><span>待办任务</span></a></li>',
                           '<li class="' + css2 + '"><a hidefocus="1" href="javascript:$App.searchTaskmail({flags:{taskFlag:2}});" bh="taskmail_finish"><span>已完成</span></a></li>',
                       '</ul>',
                   '</div>',
               '</div>'].join('');
                toolbarHtml = taskTabHtml + toolbarHtml;*/
            }

            var toolbar = $(toolbarHtml);
            this.el.innerHTML = "";
            this.$el.append(toolbar);

            //邮箱账单显示接口
            if (billCharge) {
                top.M139.Timing.waitForReady("top.$App.getConfig('UserData')", function () {
                    var isPop = top.$App.getConfig('UserData');
                    if (isPop && isPop.mainUserConfig && isPop.mainUserConfig.usercustominfo) {
                        var lastShowTime = top.$App.getUserCustomInfo('billCharge');
                        if (typeof lastShowTime == 'undefined') {
                            self.showBillCharge();
                        } else if (lastShowTime.length == 8) {
                            var now = top.M139.Date.getServerTime();
                            now.setDate(now.getDate() - 1);
                            now = $Date.format('yyyyMMdd', now);
                            if (lastShowTime < now) {
                                self.showBillCharge();
                            }
                        }
                    }
                });
                
            }

            //云邮局App入口
            if (isMySubscription) {
                this.isShowMailApp();
            }

            this.$el.attr('style', '*position: relative;*z-index: 2;zoom:1;'); //防止ie6遮盖
            /*if ($.browser.msie && $.browser.version <= 7) { //ie6,7的工具栏折行问题。
            $("#maillist_pager").css("width", "130px");
            }*/

            var self = this;
            var toolbar = toolbar.find("ul.toolBarUl"); //button menu的容器
            var readmailOption = null;
            if (self.model.get("layout") != "list") { //左右、上下布局需要显示读信的回复、转发等工具栏
                readmailOption = {
                    mid: null,
                    mail: self.model.get("mailListData")
                };
            }

            this.menu = new M2012.Mailbox.View.MailMenu({ el: toolbar, model: this.model, readmail: readmailOption });

            this.menu.render();

            if (fid == "9") {
                this.$el.find("#subscribeTab a[tabid!='']").click(function () { //精品订阅切换
                    var tabid = $(this).attr('tabid');
                    if (tabid) {
                        $App.close('mailbox_9');
                        $App.show(tabid);
                    }
                });
                this.$el.find('#subscribefreeback').attr('href', 'http://uec.mail.10086.cn/jumpFeedbackRedirect.do?isdirect=1&nav=3&isfirst=1&sid=' + $App.getSid());
            }
            //邮件备份列表不显示设置按钮
            if(fid == "7"){
                this.$el.find("#btn_setting").hide();
            }
        },

        showBillCharge: function () {
            var self = this;
            self.$el.find('#billChargeBar').find('a.yellowTips_close').click(function () {
                self.$el.find('#billChargeBar').hide();
                now = $Date.format('yyyyMMdd', top.M139.Date.getServerTime());
                top.$App.setUserCustomInfoNew({ billCharge: now }, function (res) {
                    console.log(res);
                });
            });
            var billCharge = $App.get('billCharge');
            if (billCharge) {
                self._showBillCharge(billCharge);
            } else {
                $App.on("billChargeLoad",function(data){
                    self._showBillCharge(data);
                })
                /*
                top.M139.RichMail.API.call('mailoffice:getTipsinfo', {}, function (res) {
                    res = res.responseData;
                    if (res && res['code'] == "S_OK") {
                        var data = res['var'];
                        $App.set({ 'billCharge': data });
                        self._showBillCharge();
                    }
                }, { method: "GET" });*/

            }
        },

        _showBillCharge: function (data) {
            var self = this;
            if (!data) return;
            var billChargeBar = self.$el.find('#billChargeBar');
            var content = ['<p>' + data.tipsMsg,
                '<a class="ml_5" href="' + data.tipsUrl + '">' + data.tipsName + '</a>',
                '<a hidefocus="1" class="btnG ml_5" href="' + data.packageUrl + '"><span>' + data.packageName + '</span></a></p>',
                '<a href="javascript:" class="yellowTips_close">×</a>'].join('');
            billChargeBar.find('p').replaceWith(content);
        },

        createPager: function (data) {
            var self = this;

            this.$el.find("#maillist_pager").html(""); //先清除
            var pagerBottom = $($App.getCurrentTab().element).find("#maillist_pager_bottom");
            pagerBottom.html("");//先清除
            var pageCount =  this.model.get("fid") == 7 ? Math.ceil($App.getFolderById(7).stats.messageCount/this.model.get("pageSize")) : this.model.getPageCount(data);
            //var pageCount = this.model.getPageCount(data);
            //生成分页
            this.pager = M2012.UI.PageTurning.create({
                styleTemplate: 2,
                container: this.$el.find("#maillist_pager"),
                pageIndex: this.model.get("pageIndex"),
                maxPageButtonShow: 5,
                pageCount: pageCount
            });

            this.pager2 = M2012.UI.PageTurning.create({
                styleTemplate: 2,
                container: pagerBottom,
                pageIndex: this.model.get("pageIndex"),
                maxPageButtonShow: 5,
                pageCount: pageCount
            });

            function pageChange(index) {
                self.model.set("pageIndex", index);
                self.model.set("listPosition", 0);//重置滚动条
                self.parentView.listView.render(true);//$App.getView("mailbox").listView.render(true);           
                BH("mailbox_pager");
            }
            this.pager.on("pagechange", pageChange);
            this.pager2.on("pagechange", pageChange);
        },

        showMailApp:function(){
            var self = this;
            var content = $App.get('cloudMailAppContent');
            var cloudMailApp = self.$el.find("#cloudMailApp");
            if(content){
                cloudMailApp.show().find('p').replaceWith(content).show();
                $(window).trigger('resize');
            }else{
                $App.on('showCloudMailApp',function(options){
                    cloudMailApp.show().find('p').replaceWith(options.content);
                    $(window).trigger('resize');
                });
            }

            //设置显示频率，点击关闭后再不也显示
            cloudMailApp.find("a#CloseloudMailApp").click(function () {
                cloudMailApp.hide();
                top.$App.setUserCustomInfo(47, 2);
                $(window).trigger('resize');
            });

            //设置显示频率，一天只显示一次            
            var today = top.M139.Date.getServerTime();
            $Cookie.set({ 
                name: 'listCloudApp_' + top.UserData.UID, value: "1", 
                expires: top.$Date.getDateByDays(today, 1) 
            });
                        
        },

        //是否显示云邮局App
        isShowMailApp: function () {
            var self = this;
            top.M139.Timing.waitForReady("top.$App.getConfig('UserData')", function () {
                var isPop = top.$App.getConfig('UserData');
                if (isPop && isPop.mainUserConfig && isPop.mainUserConfig.usercustominfo) {
                    var showed = top.$App.getUserCustomInfo(47);                    
                    if (showed != '2') {//如果已经标示，再也不显示
                        var dayShowed = $Cookie.get('listCloudApp_' + top.UserData.UID);
                        if (!dayShowed) { 
                            self.showMailApp(); 
                        }                         
                    }
                }                
            })
        },

        //滑动翻页
        flipPage: function (direction, callback) {
            var self = this;
            var distinctIndex = this.model.get("pageIndex"); //目标页码
            if (direction == "next") {
                distinctIndex = distinctIndex + 1;
            } else if (direction == "prev") {
                distinctIndex = distinctIndex - 1;
            }
            this.pager.trigger("pagechange", distinctIndex);
            function dataComplate(args) {
                self.model.off("mabilbox_render", dataComplate);
                if (callback) {
                    callback(args);
                }
            }
            this.model.on("mabilbox_render", dataComplate);
        },

        addSelectFolderMenu: function (folderType) {
            /*var folderTypeName = "";
            if (folderType != 1 && folderType != 2) { //是自定义文件夹，代收，或tag
            //创建切换文件夹菜单
            var map = { 3: "custom", 5: "tag", "-3": "pop" };
            folderTypeName = map[folderType];
    
            } else {
            $("#btn_selectFolder").hide();//隐藏切换文件夹下拉箭头
            }*/


            var self = this;
            M2012.UI.PopMenu.createWhenClick({
                target: self.$el.find("#folderName"),
                items: this.model.getFolderMenuItems("all", { command: "open" }),
                onItemClick: function (item) {
                    $App.showMailbox(parseInt(item.args.fid));
                }
            });


        },
        refreshCount: function () {//刷新顶部数量
            var folderInfo = this.model.getFolderInfo(this.model.get("fid"));
            this.$el.find("#sp_unread").html(" " + folderInfo.stats.unreadMessageCount + " 封");
            //'<span id="sp_total">共 ', folderInfo.stats.messageCount, ' 封，</span>',
            var prefix = this.model.get('isContactsMail') ? ("与" + this.model.get('contactsEmail') + "的往来邮件&nbsp;") : "";
            this.$el.find("#sp_total").html(prefix+'共 ' + folderInfo.stats.messageCount + ' 封，');
        },

        onUnreadBtnClick: function () {
            var fid = this.model.get("fid");
            folderType = this.getFolderType();
            var options = { command: "viewUnread", "inherit": true };
            if (folderType == 5) { //标签
                options["fid"] = 0;
                options["label"] = [fid];
            } else {
                options["fid"] = fid;
            }
			if(this.model.get("IamFromLaiwang")){
				this.model.set("UnReadIamFromLaiwang",true);
				BH("rmcontact_clickUnreadMessage");//往来邮件未读 上报行为统计ID:104689
				this.model.set("UnReadMessageSTotalMessage",this.model.getFolderInfo().stats.messageCount);
			}
            $App.trigger("mailCommand", options);
        },

        onPopWriteMailClick: function () {
            var fid = this.model.get("fid");
            var folderInfo = this.model.getFolderInfo();
            var folderInfoName = { inputData: { userAccount: folderInfo.email } }
            $App.show('compose', null, folderInfoName);
        },
        
        //邮件代收入口
        onSyncPopAccountClick: function (e) {
            var self = this;
            var fid = this.model.get("fid");
            var folderInfo = this.model.getFolderInfo();
            var popId = folderInfo.popId;
            var jTarget = $(e.currentTarget);
            var options = {
                id: popId
            }
            var popReceive = this.model.get("popReceive");
            if (popReceive) {
                clearInterval(this.popTime)
            }
            this.model.set({ popReceive: true })
			var condition5 = '<img src="/m2012/images/global/loading.gif" width="16" height="16" /> 收取中 <span class="bl"><span class="fw_b black">{0}</span>/{1} </span>'; //正在收取代收邮件
            var html = $T.Utils.format(condition5, ["0", "0"]);
            jTarget.html(html);
            
            var condition6 = '<a bh="mailbox_pop_2" href="javascript:;">收取</a>'; //收取代收邮件的链接
            this.model.syncPOPAccount(options, function () {//代收邮件后每3秒刷新一次工具条，显示代收的进度
                self.popTime = setInterval(function () {
                    self.setIntervalPop(jTarget, condition6, condition5, popId, fid);
                }, "3000")
            });
        },
        //邮件归档入口
        onFileMailClick :function(){
            if (M2012.FileMail) {
                showDialog();
            } else {
                this.loadJsScript('filemail', 'filemail.html.pack.js', showDialog);
            }
            function showDialog() {
                M139.UI.TipMessage.show("正在加载中...");
                if ($("#filemailDialog").length < 1) {
                    var dialog = $Msg.showHTML("<div id='filemailDialog'></div>", null, null, null, {
                        dialogTitle: "邮件归档"
                    });
                    var filemailview = new M2012.FileMail.View({ el: '#filemailDialog' });
                    filemailview.model.set('dialog', dialog);
                    filemailview.initEvents();
                }
            }
        },
        
        //邮件分拣入口
        onClassifyMailClick :function(){
            if (M2012.ClassifyMail) {
                showDialog();
            } else {
                this.loadJsScript("classifymail", "classify.html.pack.js", showDialog);
            }
            function showDialog() {
                var maxFilterTotal = 100; //最大分拣规则
                var options = { filterFlag: 1 };
                top.M139.RichMail.API.call("user:getFilter_New", options, function (result) {
                    if (result && result.responseData && result.responseData.code === 'S_OK') {
                        if (result.responseData.filterTotal && result.responseData.filterTotal > maxFilterTotal) {
                            $App.show('type_new'); //跳到设置页
                        } else {
                            renderHtml();
                        }
                    } else {
                        $App.logger('[user:getFilter_New] return data error');
                        $Msg.alert('网络繁忙，请稍后重试！');
                    }
                });

                function renderHtml() {
                    M139.UI.TipMessage.show("正在加载中...");
                    if ($("#classifymailDialog").length < 1) {
                        var dialog = $Msg.showHTML("<div id='classifymailDialog' ></div>", null, null, null, {
                            dialogTitle: "快速创建收信规则",
                            width: 500
                        });
                        var classifymailview = new M2012.ClassifyMail.View({ el: '#classifymailDialog' });
                        classifymailview.model.set('dialog', dialog);
                        classifymailview.initEvents();
                    }
                }
            }
        },
        //邮件清理入口
        onCleanMailClick :function(){
            BH('mailbox_mailClean');
            if (M2012.CleanMail) {
                showDialog();
            } else {
                this.loadJsScript("cleanmail", "cleanmail.html.pack.js", showDialog);
            }

            function showDialog() {
                M139.UI.TipMessage.show("正在加载中...");
                if ($("#cleanmailDialog").length < 1) {
                    var dialog = $Msg.showHTML("<div id='cleanmailDialog' style='width:450px'></div>", null, null, null, {
                        dialogTitle: "邮件清理",
                        width: 452
                    });
                    var cleanmailview = new M2012.CleanMail.View({ el: '#cleanmailDialog' });
                    cleanmailview.model.set('dialog', dialog);
                    cleanmailview.initEvents();
                }
            }
        },
        //全部标已读
        onMarkUnreadClick: function () {
            var fid = this.model.get("fid");
            $App.trigger("mailCommand", { command: "markAll", fid: fid });
        },
        //全部删底删除未读
        onDeleteUnreadClick: function () {
            var fid = this.model.get("fid");
            $App.trigger("mailCommand", { command: "deleteAll", fid: fid });
        },
        //全部删除(普通删除，移到已删除文件夹)
        onDeleteAllOrdinaryClick: function () {
            var fid = this.model.get("fid");
            $App.trigger("mailCommand", { command: "deleteAllOrdinary", fid: fid });
        },

        onMailBoxSettingClick: function(){
            //收件箱有多个容器，要限定在当前文件夹中查找
            new M2012.Mailbox.View.MailSetting({ el: this.el }).render();
            BH("mailbox_setting");
        },
		onContactMailsTotalClick: function(){
			//往来邮件点击未读后，会显示全部多少封，点击全部后，要能显示全部
            var options = { command: "viewUnreadContactMails"};
			//do something
			BH("rmcontact_clickTotalMessage");//往来邮件，确定，上报行为统计ID:104690
            $App.trigger("mailCommand", options);
		},
        getFolderType: function () {
            var fid = this.model.get("fid");
            var folderInfo = this.model.getFolderInfo();
            var folderType = $App.getFolderType(fid);
            return folderType;
        },
        loadJsScript: function (id, src, callback) {
            //避免IE6重复加载
            if (id && $('#' + id)[0]) {
                callback && callback();
                return;
            }
            M139.core.utilCreateScriptTag(
            {
                id: id,
                src: src,
                charset: "utf-8"
            },
            function () {
                callback && callback();
            })
        },
        showClassifyTips: function() {
            var self = this;
            $("body").append(self.tipTemplate);
             M2012.UI.PopMenu.bindAutoHide({
                action:"click",
                element:$(".filterTip"),
                callback:function(){
                    $(".filterTip").hide();
                }
            });
            $(".toclassify_mail").click(function() {
                self.onClassifyMailClick();
                $(".filterTip").hide();
            })
            $(".closetip").click(function() {
                $(".filterTip").hide();
            })
            /*var template = [
                    '<div direction="bottom" top="10px">',
                        '邮件太多？',
                        '<a href="javascript:M2012.Mailbox.View.Toolbar.prototype.onClassifyMailClick();" onClick="M2012.Mailbox.View.Toolbar.prototype.onClassifyMailClick()" id="classify_mail2" bh="tipsclassify_onclick">试试创建收信规则</a>吧!',
                    '</div>'
                ].join('');
                operatetipsview.showTips([{'pageUrl':'index','positionId':'sp_total','elementId':'classify_mail','content':template}]);
            */
        },
        renderHeader: function () {
            var self = this;
            var fid = this.model.get("fid");
            var folderInfo = this.model.getFolderInfo();

            if ($App.getCurrentTab().title == '账单中心' && this.model.get('isSearchMode')) { //账单中心特殊处理
                var billtype = this.model.get('billtype');
                folderInfo["name"] = this.model.getBillTypeName(billtype) || '账单中心';
            }

            if (this.model.isTaskMode()) {
                folderInfo["name"] = this.model.get('isTaskbacklogMode') ? '待办任务' : '已完成';
            }

            if (!folderInfo) { return; } //容错
            var popId = null;

            popId = folderInfo.popId;
            var folderType = $App.getFolderType(fid); //folderInfo.type;
            var isContactsMail = this.model.get('isContactsMail')
            var prefix = isContactsMail ? ("与" + this.model.get('contactsEmail') + "的往来邮件，") : "";
            var headerHtml = [
            //'<strong id="folderName" bh="mailbox_folderDrop">', M139.Text.Html.encode(folderInfo["name"]),
            //'<i class="i_triangle_d" id="btn_selectFolder" bh="mailbox_folderDrop"></i>', '</strong>',
            '<span id="sp_total">', 
             prefix, 
            '共 '+folderInfo.stats.messageCount+' 封，', 
            '</span>',
            '<a href="javascript:" id="btn_unread" bh="mailbox_unread">未读邮件</a><span id="sp_unread"> ', folderInfo.stats.unreadMessageCount, ' 封</span>'];
            var searchFolder =$App.getMailboxView().model.get("searchOptions") ;
            if(fid === 2 || (searchFolder && searchFolder.fid === 2) || fid == 7) {//特殊处理草稿箱
                headerHtml = [ '<span id="sp_total">', prefix, '共 ', folderInfo.stats.messageCount, ' 封</span>'];

            };
            /**
            * 邮箱分类，归档，清理入口条件 
            * 邮箱清理：收件箱超过(>=)10000封邮件时唤出
            * 邮箱归档：收件箱超过(>=)10000封邮件且用户文件夹小于96个时唤出
            * 邮箱分类：收件箱超过499封且用户文件夹小于96个时唤出（待加：分类规则<100条）
            * 邮件代收：代收文件夹时加上邮件代收的工具条
            */
            var mcount1 = 199, mcount2 = 999 ,mcount3 = 9999 ,fcount = 96; //真实设置
            var folderInfoName = { inputData: { userAccount: folderInfo.email } }
            //var mcount1 = 10, mcount2 = 100, mcount3 = 200, fcount = 96; //测试数据
            var conditions = '';

            var condition0 = '，<a href="javascript:;"  id="btn_markUnread" bh="mailbox_markUnread">全部标为已读</a>|<a href="javascript:;" id="btn_deleteUnread" bh="mailbox_deleteUnread">彻底删除未读</a>';
            var condition1 = '，邮件太多， <a href="javascript:;" onClick="return false" id="classify_mail" class="classify_mail" bh="toolbarclassify_onclick">创建收信规则</a>吧!';
            //var condition2 = '，使用 <a href="javascript:;" onClick="return false" id="file_mail" bh="mailbox_mailFile">邮件归档</a><span class="line">|</span><a href="javascript:;" onClick="return false" id="classify_mail">邮件分类</a><span class="line">|</span><a href="javascript:;" onClick="return false" id="clean_mail">邮件清理</a> 为邮箱提速 '; //10000封以上且小于95个文件夹出现
            //var condition3 = '，使用 <a href="javascript:;" onClick="return false" id="clean_mail">邮件清理</a> 为邮箱提速 '; //>95个文件夹时且10000封以上出现
            var condition4 = '，<a href="javascript:;" bh="mailbox_pop_1" id="popWriteMail">写信</a><span class="line">|</span> <span id="syncPOPAccount"><a bh="mailbox_pop_2" href="javascript:;">收取</a></span><span class="line">|</span><span id="daishoujiluchaxun"><a href="javascript:;">代收记录查询</a></span> '; //文件夹为代收时出现
            //var condition5 = '<img src="/m2012/images/global/loading.gif" width="16" height="16" /> 收取中 <span class="bl"><span class="fw_b black">{0}</span>/{1} </span>'; //正在收取代收邮件
            //var condition6 = '<a bh="mailbox_pop_2" href="javascript:;">收取</a>'; //收取代收邮件的链接
            var condition7 = '<span class="inboxHeaderfr"><a bh="mailbox_pop_3" href="javascript:$App.show(\'addpop\')">添加</a><span class="line">|</span><a bh="mailbox_pop_4" href="javascript:$App.show(\'popmail\')" hidefocus="">管理代收邮箱</a></span>'; //代收工具条右侧的设置链接
            var condition8 = '，<a href="javascript:;" id="btn_deleteAllOrdinary">全部删除</a>';
			//往来邮件共多少封
			var condition9 = '，<a href="javascript:;" id="btn_contactMailsTotal">往来邮件</a> 共 {x} 封';
			var condition10 = '';

            var condition_custom = '<span class="inboxHeaderfr"><a href="javascript:$App.show(\'tags\')" hidefocus=""><i class="i_set"></i>&nbsp;管理文件夹</a></span>';
            var html_voice = '<span class="inboxHeaderfr"><a href="javascript:$App.show(\'voiceSetting\')" hidefocus=""><i class="i_set"></i>&nbsp;设置语音信箱</a></span>';;
            var condiction_autoDel = '<span>&nbsp;（邮件{0} 天后将{1}，去</span><a href="javascript:$App.show(\'preference_autoDelSet\')" hidefocus="">设置</a><span>）</span>';
            var condiction_delBack = '<span class="inboxHeaderfr"><a href="javascript:;" id="queryDelMessage">&nbsp;删信记录查询</a>&nbsp;|<a href="javascript:$App.showMailbox(7);">&nbsp;查看自动备份的邮件</a></span>';
            var html_vipmail = '<span class="inboxHeaderfr"><a href="javascript:$App.show(\'addrvipgroup\')" bh="manage_vip_contacts" hidefocus=""><i class="i_set"></i>&nbsp;管理vip联系人</a></span>';


            var mesCount = folderInfo.stats.messageCount;
            var filesCount = $App.getFolders('custom') ? $App.getFolders('custom').length : 0;

            var inboxHeader = this.$el.find('#inboxHeader:eq(0)');

            if (fid == 1 && folderInfo.stats.unreadMessageCount > 20) { //当未读邮件超过20封时出现，当满足其它条件时覆盖此条件
                conditions = condition0;
            }

            if (fid == 1 && mesCount > mcount1 && filesCount < fcount) {
                conditions = condition1;
            }
            function setCustominfo(key,value) {
                var text = top.$App.getUserConfigInfo("usercustominfo");
                var reg = new RegExp("(?:^|&)"+key+"=(\\d+)");
                        var match = text.match(reg);
                        if (match) {
                            text=text.replace(reg,"&"+key+"="+value);
                            $App.getConfig("UserData").mainUserConfig.usercustominfo[1] = text;
                        } else {
                            text = text + "&"+key+"="+value;
                            $App.getConfig("UserData").mainUserConfig.usercustominfo[1] = text;
                        }
                
            };
            /*
            if (fid == 1 && mesCount > mcount2) {
                if (!$App.getUserCustomInfo("above999") || $App.getUserCustomInfo("above999") == 0) {
                    $App.setUserCustomInfoNew({above999:1},function() {
                        setCustominfo("above999",1);
                        if ($App.getUserCustomInfo("above999") == 1 && (!$App.getUserCustomInfo("above999tips")||$App.getUserCustomInfo("above999tips") == 0)) {
                            self.showClassifyTips(); 
                            $App.setUserCustomInfoNew({above999tips:1},function() {
                            setCustominfo("above999tips",1);
                    })
                        }
                    });
                };    
            } else if(fid == 1 && mesCount < mcount2) {
                $App.setUserCustomInfoNew({above999:0},function() {
                    setCustominfo("above999",0);
                });
                $App.setUserCustomInfoNew({above999tips:0},function() {
                    setCustominfo("above999tips",0);
                }); 
            }
            if (fid == 1 && mesCount > mcount3) {
                if (!$App.getUserCustomInfo("above9999") || $App.getUserCustomInfo("above9999") == 0) {
                    $App.setUserCustomInfoNew({above9999:1},function() {
                        setCustominfo("above9999",1);
                        if ($App.getUserCustomInfo("above9999") == 1 && (!$App.getUserCustomInfo("above9999tips")||$App.getUserCustomInfo("above9999tips") == 0)) {
                            self.showClassifyTips();
                            $App.setUserCustomInfoNew({above9999tips:1},function() {
                            setCustominfo("above9999tips",1);
                            })
                        }
                    });
                };    
            } else if(fid == 1 && mesCount < mcount3) {
                $App.setUserCustomInfoNew({above9999:0},function() {
                    setCustominfo("above9999",0);
                });
                $App.setUserCustomInfoNew({above9999tips:0},function() {
                    setCustominfo("above9999tips",0);
                }); 
            }   */         
         
            if (fid == 4) { //已删除
                conditions = $T.Utils.format(condiction_autoDel, [folderInfo.keepPeriod, "彻底删除"]);
                conditions = folderInfo.keepPeriod > 0 ? condiction_delBack+conditions : condiction_delBack;
            } else if (fid == 8 && folderInfo.keepPeriod > 0) { //账单
                conditions = $T.Utils.format(condiction_autoDel, [folderInfo.keepPeriod, "账单"]);
            } else if (fid == 9 && folderInfo.keepPeriod > 0) { //订阅
                conditions = $T.Utils.format(condiction_autoDel, [folderInfo.keepPeriod, "订阅"]);
            }
            if (folderType == -3) {//如果是代收邮件列表
                conditions = condition4;
                headerHtml.unshift(condition7)
            }
            if (folderType == 3) { //自定义文件夹
                headerHtml.unshift(condition_custom); //插入前面，否则ie6折行
            }
            if (this.model.isBillMode() && this.model.get("billTab") == 3) { //语音信箱
                headerHtml.unshift(html_voice);
            }

            if (this.model.get("isVipMode")) { //加入vip管理
                headerHtml.unshift(html_vipmail);
            }
			//搜索的时候，且不为往来邮件的时候
            if (this.model.isApproachMode() && mesCount > 0 && !self.model.get("IamFromLaiwang")) {

                conditions = condition8;
            }

            
			//搜索的时候，且为往来邮件的时候初始化
			if (isContactsMail && mesCount > 0 && self.model.get("IamFromLaiwang")) {
				console.log(self.model.get("searchOptions"));
                conditions = condition10;
            }
			//搜索的时候，且为往来邮件，且点了未读后显示的
			if(isContactsMail && mesCount >= 0 && self.model.get("UnReadIamFromLaiwang")){
				var UnReadMessageSTotalMessage = self.model.get("UnReadMessageSTotalMessage");
                headerHtml.splice(2,1);// 删除“共xxx封，”
                headerHtml.splice(3,1, "<span>未读邮件</span>");//往来邮件的时候，点击未读邮件后，未读邮件不可点
				condition9 = condition9.replace("{x}",UnReadMessageSTotalMessage); //显示之前的总封数
				conditions = condition9;
			}
            headerHtml.push(conditions);
            /**
             * @add by wn 2014-7-4
             * 控制补投显示
             */
            var bill_type = self.model.get("bill_type") ;
            if( bill_type === undefined || bill_type === "0" || bill_type === "10" ){
                headerHtml.push("<span id='ask_wrapper' style='display:none;'><span> 未收到移动账单?</span> <a style='color:red;' data-ask='true' href='#'>申请补投</a></span>");
            }
            
            var inboxHeader = this.$el.find('#inboxHeader:eq(0)');

            if (this.model.isTaskMode()) {
                inboxHeader.remove();
            } else {
                inboxHeader[0].innerHTML = headerHtml.join('');
            }            

            if (self.model.isBillMode() && mesCount == 0) {
                inboxHeader.hide(); //账单中心特殊处理
            }
            
            if (mesCount == 0) {
                // 邮件数量为0时隐藏全部邮件数/未读邮件数
                // 当右侧存在链接时需要显示链接
                if (inboxHeader.find('.inboxHeaderfr').length) {
                    inboxHeader.children().not('span.inboxHeaderfr').hide()
                    // 临时方案
                    inboxHeader.find('span.inboxHeaderfr').addClass('mt_10');
                } else {
                    inboxHeader.hide();
                }
            } else {// 临时方案
                inboxHeader.find('span.inboxHeaderfr').removeClass('mt_10');
            }
            this.addSelectFolderMenu(folderType); //添加文件夹打开菜单
        },

        //代收邮件时的进度计时器
        setIntervalPop: function (This, syncText, loadingText, popId, fid) {
            top.$App.trigger('reloadFolder', { reload: true });
            var self = this;
            var options = {
                status: 1,
                id: popId
            };
            this.model.getPOPAccounts(options, function (result) {
                if (result["code"] != "S_OK") {
                    This.html(syncText);
                    clearInterval(self.popTime)
                    return
                }
                var status = result["var"][0]["status"];
                if(!status){
                    clearInterval(self.popTime);
                    return false;
                }
                var totalMail = status["messageCount"];
                var receiveMail = status["receivedMessageCount"];
                if (status["code"] && status["code"] == "RUNNING" && status["messageCount"] != 0 && top.$App) {
                    var html = $T.Utils.format(loadingText, [receiveMail, totalMail]);
                    This.html(html);
                } else {
                    This.html(syncText);
                    clearInterval(self.popTime)
                }
            });
        }

})
});


})();
﻿M139.namespace("M2012.Mailbox.View", {
    MailMenu: Backbone.View.extend({
        el: "",
        template: "",
        events: {
            //"click .mtitle":"subjectClick"
        },
        initialize: function (options) {
            //alert("hello");
            var self = this;
            this.el = options.el;
            this.model = options.model;
            this.readmail = options.readmail;

            /*
            this.model.on("change:mid", function (val) { //监听分栏读信改变mid
                self.readmail = {
                    mid: self.model.get("mid"),
                    mail: self.model.get("mailListData")
                };
            }); */

            this.model.on("mailSelectedChange", function (args) { //邮件选择数量改变
                self.setButtonVisible(args.count);
            });

        },

        BH2: function (key) {
            if ($App.getCurrentTab().group == "mailbox") {
                if (key) {
                    key = key.replace("toolbar_", "mailbox_");
                }
            }
            BH(key);
        },

        getElement: function () {
            if (!this._element) {
                if (typeof this.el == "string") {
                    this._element = $(this.el)[0];
                } else if (M139.Dom.isJQueryObj(this.el)) {
                    this._element = this.el[0];
                } else {
                    this._element = this.el;
                }
            }
            // return this._element;    
            // 会话模式下，在当前会话下彻底删除一封
            return $(this.el);
        },

        setButtonVisible: function (selectedCount) {

            if ($App.getLayout() == 'left' || $App.getLayout() == 'top') {
                var btns = $(this.el).find("#btn_reply,#btn_replyAll"); //2个以上按附件转发
                if (selectedCount <= 1) {
                    btns.show();
                } else {
                    //console.log(41);
                    //console.log(this.readmail);
                    /*if (!this.readmail) { //选中了多封邮件，并且没有分栏读信
                        btns.hide();
                    } */
                    btns.hide();
                }

                //显示更多菜单
                if (selectedCount > 0) {
                    var moreMemuBtn = $('.toolBarArray #btn_more');
                    moreMemuBtn.hide();
                }

            }

            // 待办任务列表下隐藏“举报”、“移动到”、“标记为置顶/取消置顶”
            if (this.model.isTaskMode()) {
                this.$el.find('li:contains("移动到")').remove();
                this.$el.find('li:contains("举报")').remove();
            }
            //邮件备份列表
            var fid = this.model.get("fid");
            if(fid == 7){
                $(this.el).find("li").remove();//ul.toolBarUl
                this.showReturnBtn(fid, {});
                this.showResumeDelBtn();
            }
        },

        /** 返回按钮 */
        showReturnBtn:function(fid,rm){
            var self = this;
            if(rm){
                var btn = document.createElement('li'); // $('<li class="mr_10"></li>');
                btn.className = "";
                $(self.el).append(btn);
                M2012.UI.MenuButton.create({
                    text: '返回',
                    container: btn,
                    onClick: function () {
                        //邮件备份返回到已删除
                        if (fid == 7) {
                            $App.showMailbox(4);
                        }
                        else{
                            $App.close();
                            $App.isReadSessionMail() && BH('cMail_toolbar_goback');
                        }
                    }
                });
                $(btn).find('a:eq(0)').removeClass('ml_6');
            }   
        },

        /** 回复按钮 */
        showReplyBtn:function(fid,rm){
            var self = this;
            if (rm) {

                /*if(rm && rm.isSessionMail){ //会话邮件不显示回复和全部回复
                    return; 
                }*/

                var btn = document.createElement('li'); //$('<li id="btn_reply"></li>');
                btn.id = 'btn_reply';
                //判断是否有附件
                var attachNum = 0;
                if (rm.mail && rm.mail.attachmentNum) {
                    attachNum = rm.mail.attachmentNum;
                }
                var memuItems = [];
                if (attachNum > 0 && !$App.isReadSessionMail()) {// 会话邮件列表不展示（为规避勾选邮件没有附件的情况）
                    var menuItems = [
                        { text: "不带原邮件的附件", args: { value: false, bh: 'toolbar_replynoattach' } },
                        { text: "带上原邮件的附件", args: { value: true, bh: 'toolbar_replywithattach' } }
                    ];
                }
                M2012.UI.MenuButton.create({
                    text: "回复",
                    container: btn,
                    rightSibling: true,
                    menuItems: menuItems,
                    onItemClick: function (item) {
                        self.doCommand("reply", { "attach": item.args.value });
                        BH(item.args.bh);
                    },
                    onClick: function () {
                        BH($App.isReadSessionMail() ? 'cMail_toolbar_reply':'toolbar_reply');
                        self.doCommand("reply", { "attach": false });                        
                    }
                });
                $(self.el).append(btn);
                //回复全部
                btn = document.createElement('li'); //$('<li id="btn_replyAll" class="mr_10 ml-1"></li>');
                btn.id = "btn_replyAll";
                btn.className = "";
                M2012.UI.MenuButton.create({
                    text: "全部回复",
                    container: btn,
                    leftSibling: true,
                    rightSibling: false,
                    menuItems: menuItems,
                    onItemClick: function (item) {
                        self.doCommand("reply", { "all": true, "attach": item.args.value });
                        item.args.value ? BH('toolbar_replyallwithattach') : BH('toolbar_replyallnoattach');
                    },
                    onClick: function () {
                        BH($App.isReadSessionMail() ? 'cMail_toolbar_replyAll' : 'toolbar_replyall');
                        self.doCommand("reply", { "all": true, "attach": false });
                    }
                });
                $(self.el).append(btn);
            }

         },

        /** 再次编辑 */
        showSendAgainBtn:function(fid,rm){
			var self = this;
            if(rm && rm.isSessionMail){ //会话邮件不显示
                return;
            }
            if (rm && rm.mail && rm.mail.fid == 3) {
                var btn = document.createElement('li'); //$('<li class="mr_10"></li>');
                btn.className = "";                
                M2012.UI.MenuButton.create({
                    text: '再次编辑',
                    container: btn,
                    onClick: function () {
                        $App.editMessage(rm.mid);
                    }
                });
                $(self.el).append(btn);
            }
        },
        
        /** 转发 */
        showForwardBtn: function (fid, rm, flags) {
			var self = this;
            //会话邮件不显示
            /*if(rm && rm.isSessionMail){ 
                return;
            }*/
			var btn = document.createElement('li'); //$('<li id="btn_forward" class="mr_10 ml-1"></li>');
			btn.id = 'btn_forward';
			var menuItems = [
                    { text: "转发", args: { value: false, bh: ($App.isReadSessionMail() ? 'cMail_toolbar_forward' : 'toolbar_forward') } },
                    { text: "作为附件转发", args: { value: true, bh: ($App.isReadSessionMail() ? 'cMail_toolbar_forward_as_attach' : 'toolbar_forwardasattach') } }
                ];
		//	var isTest = !!(top.location.href.indexOf("10086ts") != -1);//测试线才出现
		//	var isTest = true; //打开
			var isTest = top.$User.isGrayUser(); //灰度打开，全网关闭
			if(flags && flags == true && isTest){
				menuItems.push({ text: "转发给飞信好友", args: { value: "fetion"}});
			}
            M2012.UI.MenuButton.create({
                text: "转发",
                container: btn,
                leftSibling: false,
                rightSibling: false,
                menuItems: menuItems,
                onItemClick: function (item) {
                    BH('cMail_toolbar_forwardMenu_click')
					if(item.args.value == "fetion"){
					//	M2012.ReadMail.Fetion.View.create().$el && M2012.ReadMail.Fetion.View.create().$el.show();
						M2012.ReadMail.Fetion.View.create();
						return;
					}
                    self.doCommand("forward", { "attach": item.args.value });
                    BH(item.args.bh);
                },
                onClick: function () {
                    BH($App.isReadSessionMail() ? 'cMail_toolbar_forward' : 'toolbar_forward');
                    self.doCommand("forward", { "attach": false });
                }
            });
            $(self.el).append(btn);
        },

        /** 全部标记为已读 */
        showMarkAllReadBtn: function (fid, rm) {
			
			if($App.isTagFolder(fid)){ return } //标签文件夹暂接口不支持
			if(rm && rm.isSessionMail){ return } //会话模式不显示
            var searchFolder =$App.getMailboxView().model.get("searchOptions") ;
            if(fid === 2 || (searchFolder && searchFolder.fid === 2)) { return }//判斷是不是草稿箱
			var self = this;
            var btn = document.createElement('li'); //$('<li class="mr_10"></li>');
            btn.className = '';
			M2012.UI.MenuButton.create({
				text: '全部标为已读',
				container: btn,
				onClick: function() {
					self.doCommand("markAll", { "fid": fid });
                    $App.isReadSessionMail() && BH('cMail_toolbar_allReaded');
				}
			});
			$(self.el).append(btn);
        },

        /**标记按钮 */
        showMarkBtn: function (fid, rm) {//cMail_toolbar_allReaded
            //构造标签二级菜单
            var self = this;
            var itemsTag = self.model.getTagMenuItems();
            var btn = document.createElement('li'); //$('<li class=""></li>');
            var flagBtn = M2012.UI.MenuButton.create({
                text: "标记为",
                container: btn,
                //leftSibling:true,
                rightSibling: true,
                menuItems: self.model.getMarkMenuItems(true,fid),
                onItemClick: function (item) {
                    // debugger;
                    if (item.command) {
                        self.doCommand(item.command, item.args);
                        if (item.args.bh) {
                            self.BH2(item.args.bh);
                        }
                    }
                }
            });
            //todo 强制修复样式问题
            try{
                flagBtn.$el.find("span")[0].className = "pr_20 p_relative";
            } catch (e) { }
            $(self.el).append(btn);
        },

        /**移动按钮 */
        showMoveBtn: function (fid, rm) {
            var searchFolder =$App.getMailboxView().model.get("searchOptions") ;
            if(fid === 2 || (searchFolder && searchFolder.fid === 2)) { return }//判斷是不是草稿箱
            var self = this;
            var folderMain = self.model.getFolderMenuItems("system", {fid:fid});
            var folderCustom = self.model.getFolderMenuItems("custom", { fid: fid });
            var folderPop = self.model.getFolderMenuItems("pop", { fid: fid });

            if (folderCustom.length >= 0) {
                folderMain.push({ isLine: true });
                folderMain = folderMain.concat(folderCustom);
            }

            /*if (folderPop.length >0) {
                folderMain.push({ isLine: true });
                folderMain = folderMain.concat(folderPop);
            }*/


            /*
            folderMain.push({ text: "我的文件夹", items: folderCustom });
            var popFolders = $App.getFolders("pop");
            if (popFolders && popFolders.length > 0) { //有代收文件夹时才显示
                folderMain.push({ text: "代收文件夹", items: folderPop });
            }*/

            var btn = document.createElement('li'); //$('<li class="mr_10 ml-1"></li>');
            btn.className = "ml-1";
            M2012.UI.MenuButton.create({
                text: "移动到",
                container: btn,
                leftSibling: true,
                rightSibling: false,
                menuItems: folderMain,
                onItemClick: function (item) {
                    self.doCommand(item.command, item.args);
                    self.BH2('toolbar_move');
                    if (item.args.bh) {
                        self.BH2(item.args.bh);
                    }
                }
            });
            $(self.el).append(btn);
        },

        /** 网盘备份按钮 */
        showSaveBtn: function (fid, rm) {
            if ($App.isSessionMode() || fid!=1) { //如果是会话模式就不显示
                return;
            }
            var self = this;
            var btn = document.createElement('li'); //$('<li class="mr_10"></li>');
            btn.className = '';
            M2012.UI.MenuButton.create({
                text: '备份',
                container: btn,
                onClick: function () {
                    self.doCommand("backupMail", { "fid": fid });
                    BH('toolbar_backupMailSingle');
                }
            });
            $(self.el).append(btn);
        },

        /** 删除按钮 */
        showDeleteBtn: function (fid, rm) {
            var self = this;
            var onlyRealDelete = false; //只显示彻底删除
            var onlyRmRealDelete = false; //读信彻底删除

            if (rm && rm.mail && rm.mail.fid == 4) { //已删除文件夹
                onlyRmRealDelete = true;
            }
            if (fid == 4 || onlyRmRealDelete) { //已删除下只显示彻底删除
                onlyRealDelete = true;
            }

            //普通删除
			if(!onlyRealDelete){
				var args = { command: "move" , fid: 4  , resumeDel: false};
				// if(rm && rm.mid){ args.mids = [rm.mid]}
                // if(rm && rm.mail && rm.mail.mailSession){ args.sessionIds = [rm.mail.mailSession] }    
                var btn = document.createElement('li');//$('<li></li>');
				$(self.el).append(btn);

				M2012.UI.MenuButton.create({
					text: '删除',
					container: btn,
					rightSibling: true,
					onClick: function () {
						$App.trigger("mailCommand", args);
						$App.isReadSessionMail() ? BH('cMail_toolbar_del') : self.BH2('toolbar_delete');
					}
				});                
			}

            if ($App.getCurrentTab().name.indexOf('readmail_') == -1) {
                $(btn).find('a:eq(0)').removeClass('ml_6');
            }

			
			//彻底删除
			var _args = { command: "delete", fid: fid};
			// if(rm && rm.mid){ _args.mids = [rm.mid]}
            // if(rm && rm.mail && rm.mail.mailSession){ _args.sessionIds = [rm.mail.mailSession] }
            var _btn = document.createElement('li');//onlyRealDelete ? $('<li class="mr_10"></li>') : $('<li class="mr_10 ml-1"></li>');
            if (onlyRealDelete) {
                _btn.className = '';
            } else {
                _btn.className = 'ml-1';
            }
			M2012.UI.MenuButton.create({
				text: '彻底删除',
				container: _btn,
				leftSibling:onlyRealDelete ? false : true,
				onClick: function () {
					$App.trigger("mailCommand", _args);
					$App.isReadSessionMail() ? BH('cMail_toolbar_delclearly') : self.BH2('toolbar_realdelete');
				}
			});            
			$(self.el).append(_btn);
        },
         /**
         * @2014-9-18 add by [xumei] 
         * 添加恢复到已删除按钮
         */
        showResumeDelBtn: function(){
            var self = this;
            var btn = document.createElement('li');
            var args = { command: "move" , fid: 4 , resumeDel: true};
            M2012.UI.MenuButton.create({
                text: '恢复到“已删除”',
                container: btn,
                rightSibling: false,
                onClick: function () {
                    $App.trigger("mailCommand", args);
                    BH('toolbar_resume_del');
                }
            });
            $(self.el).append(btn);
        },

        /** 添加提醒按钮 */
        /*showRemindBtn: function (fid, rm) {
            var self = this;
			var btn = $('<li id="btn_addcalendar" class="ml_10"></li>');
            $(this.el).append(btn);
            M2012.UI.MenuButton.create({
                text: "添加提醒",
                container: btn,
                leftSibling: false,
                rightSibling: false,
                onClick: function () {
                       if(top.SiteConfig.calendarRemind){//日程重构已经开启
                    	
                    	top.$PUtils.renderSchdedule({
                    	
		                       title:rm.mail.subject,
		                       content:rm.mail.summary
                    	
                    	});
                    	
                    }else{
                    
	                    var gotourl = '/m2012/html/calendar/calendar_mailcalendar.html?comefrom=100&sid=' + $App.getSid();
	                    var thisdialog = $Msg.open({
	                        dialogTitle:"添加提醒",
	                        url:gotourl,
	                        width:580,
	                        height:430
	                    });
	                    //关闭窗口
	                    $App.on('closeaddcalendar',function(){
	                        thisdialog.close();
	                    })
                    }
                }
            });
        },*/

        /** 举报按钮 */
        showComplaintBtn: function (fid, rm) {
            var self = this;
            
            /*if($App.isSessionMode()){ //会话邮件不显示
                return;
            }*/
            var searchFolder =$App.getMailboxView().model.get("searchOptions") ;
            if (fid === 2 || fid === 3 || fid === 4 || (searchFolder && searchFolder.fid === 2) || (searchFolder && searchFolder.fid === 3) || (searchFolder && searchFolder.fid === 4) || this.model.isSubscribeMode()) {
                return;
            };

            top.mailboxComplaintView.model.set({fid:fid});
            if(top.mailboxComplaintView.model.isNotRubbishMailBtn()){
                var text = "这不是垃圾邮件";
                var command = "unSpam";
                createSpamBtn();
            }else if(top.mailboxComplaintView.model.isShowComplaintBtn()){
                var text = "举报"
                var command = "spam";
                createSpamBtn();
            }
            
            function createSpamBtn(){
                var btn = document.createElement('li');//$('<li class="mr_10"></li>');
                btn.className = '';
                M2012.UI.MenuButton.create({
                    text: text,
                    container: btn,
                    leftSibling: false,
                    rightSibling: false,
                    onClick: function () {
                        self.doCommand(command, {});
                        if ($App.isReadSessionMail()) {
                            BH('cMail_toolbar_spam')
                        } else if (command == 'spam') { 
                            self.BH2('toolbar_spam'); 
                        } else { 
                            BH('toolbar_unspam'); 
                        }
                    }
                });
                $(self.el).append(btn);
            }
        },
        showViewBtn: function (fid) {
            var self = this;
            var btn = document.createElement('li'); //$('<li id="btn_extra" class="mr_10 ml-1"></li>');
            btn.id = 'btn_view';
            menuItems =  [{
                    text: "全部邮件",
                    command: "viewMail",
                    flags: "all"
                }, { isLine: true }, {
                    html: '<i class="tag-new" style="background-color:red;"><em class="i_jj"></em></i>重要邮件',
                    command: "viewMail",
                    flags: "important"
                }, {
                    html: '<i class="i_star_y"></i>星标邮件',
                    command: "viewMail",
                     flags:{starFlag:1} 
                }, { isLine: true }, {
                    html: '<i class="i_m_n"></i>未读邮件',
                    command: "viewMail",
                      flags:{read:1} 
                }, {
                    html: '<i class="i_m_o"></i>已读邮件',
                    command: "viewMail",
                     flags: { read: 0 } 
                }, {
                    html: '<i class="i_m_yhf"></i>已回复邮件',
                    command: "viewMail",
                    flags: { replied: 1 } 
                }, {
                    html: '<i class="i_m_o2h"></i>已转发邮件',
                    command: "viewMail",
                    flags: { forwarded: 1 } 
                }];
            M2012.UI.MenuButton.create({
                text: "查看",
                container: btn,
                leftSibling: true,
                rightSibling: false,
                menuItems:menuItems,
                onItemClick: function (item) {
                    item.fid = self.model.get("fid"); 
                    item.command && self.doCommand(item.command,item);
                   
                }
            });
            var searchFolder =$App.getMailboxView().model.get("searchOptions") ;
            if(fid === 2 || (searchFolder && searchFolder.fid === 2)){
               menuItems.splice(5,2); 
            }
            $(self.el).append(btn);
        },	

        /** 
        * 会话邮件全部展开/收起
        * 规则：只要有一封邮件是收起状态就显示“全部展开”，否则显示“全部收起”
        * 数量大于50不显示全部展开
        * 数量小于10不显示加载提示和”停止展开“按钮
        */
        showConversationToggleBtn:function(fid, rm){
            var self = this;
            var total = rm.total;
            if(rm && rm.isSessionMail && total && total < 51){
                var btn = document.createElement('li');
                var text = "全部展开";
                var command = "covtoggle";
                $(btn).attr("name","cov-toggle");
                
                M2012.UI.MenuButton.create({
                    text: text,
                    container: btn,
                    leftSibling: false,
                    rightSibling: false,
                    onClick: function (e) {
                        var _span = $(btn).find("span");
                        var flag = _span.attr("data-flag");

                        //flag为空 未点击； flag = 1 正在展开；flag = 2 已完成展开

                        if(flag == '1'){ //正在展开时点击
                            if( text == '全部展开'){return} //10封以内啥都不做
                            rm.mail.doAction = 'stopConversation';
                            rm.mail.callBack = function(){
                                _span.text('全部展开');
                                _span.removeAttr("data-flag");
                            };
                            self.doCommand(command, rm.mail);
                            return;
                        }

                        var text = _span.text();                   
                        if( text === '全部展开'){
                            rm.mail.doAction = 'showConversation';
                            if(!flag){ 
                                //_span.text('停止展开');
                                total > 10 && _span.text('停止展开');
                                _span.attr("data-flag",1); //标记在展开
                            }

                            rm.mail.callBack = function(){
                                _span.text('全部收起');
                                _span.attr("data-flag", 2); //标记展开完成
                            };
                            BH('cov_showall');
                        }else{
                            rm.mail.doAction = 'hideConversation';
                            rm.mail.callBack = function(){
                                _span.text('全部展开');
                            };
                            BH('cov_hideall');
                        }
                        
                        self.doCommand(command, rm.mail);
                    }
                });
                $(self.el).append(btn);
            }            
        },
        /**
         * "更多操作"按钮
         */
        showExtraBtn : function(fid, rm) {
			var self = this;
			var btn = document.createElement('li'); //$('<li id="btn_extra" class="mr_10 ml-1"></li>');
			btn.id = 'btn_extra';
			btn.className = "mr_10 ml-1";
			var menuItems = [{
			    text: rm ? "导出邮件" : "导出选中邮件",
			    command: "exportMail",
			    args: {
			        bh: 'toolbar_export'
			    }
			}, {
			    text: "导入eml文件",
			    command: "importMail",
			    args: {
			        bh: 'toolbar_import'
			    }
			}];
			if (!$App.isSessionMode()) { //1. 不是会话模式， 
                var a001 = this.model.isClusterColumn;
			    var isColum = !this.model.isClusterColumn ? true : !this.model.isClusterColumn() //2. 兼容订阅邮件聚合邮件未上全网
				var isServer = false;
			    if ($App.getCurrentTab().title == '服务邮件') {  //服务邮件不显示
			        isServer = true;
			        isColum = true;
			    }
			    sBh = isServer ? 'toolbar_backupMailListforServer':'toolbar_backupMailList';
			    if (isColum) { 
			        menuItems.push({
			            text: "备份至彩云网盘",
			            command: "backupMail",
			            args: {
			                bh: sBh
			            }
			        })
			    }
			    
			}

            /*menuItems.push({
                    text: "保存到和笔记",
                    command: "savetoNote",
                    args: {
                        bh: 'toolbar_savetonote'
                    }
                });*/

			M2012.UI.MenuButton.create({
				text : "更多",
				container : btn,
				leftSibling : true,
				rightSibling : false,
				menuItems: menuItems,
				onItemClick : function(item) {
					item.command && self.doCommand(item.command);
					item.args && item.args.bh && BH(item.args.bh);
				}
			});
			$(self.el).append(btn);
        },
        /**
         * @2014-7-3 add by wn 
         * 添加账单按钮
         */
        showBillCategoryBtn : function(){
            var self = this;
            var btn = document.createElement('li'); 
            btn.className = "mr_10 ml-1";
            btn.id = "mybillitem" ;
            var menuItems = [{
                    text: "全部账单",
                    billtype : false
                }, {
                    text: "移动账单",
                    billtype : "10"
                }, {
                    text: "生活账单",
                    billtype : "11"
                }, {
                    text: "金融账单",
                    billtype:"12"
                }, {
                    text: "其他账单",
                    billtype:"13"
                }];
            var menu_btn = M2012.UI.MenuButton.create({
                text : "账单分类",
                container : btn,
                leftSibling : true,
                rightSibling : false,
                menuItems: menuItems,
                onItemClick : function(item) {
                    var billtype = item["billtype"] ;
                    if (billtype) {
                        var options = {
                            billType: billtype,
                            title: '账单中心',
                            fid: 1,
                            flags: { billFlag: 1 }
                        };
                        $App.searchMail(options);
                        self.model.set("bill_type", billtype);
                    } else {
                        var myBillId = self.model.get('specialFolderId').myBill;
                        $App.showMailbox(myBillId);
                        self.model.set("bill_type", "0");
                    }                 
                }
            });            
            $(self.el).append(btn);
        },

        showTaskBtn: function() {
            var self = this;
            var btn = document.createElement('li');
            btn.className = "mr_10";
            $(self.el).prepend(btn);
            M2012.UI.MenuButton.create({
                text: '标记完成',
                container: btn,
                onClick: function () {
                    BH('task_batch_markcomplete');
                    var remindView = $App.getView('remind');
                    var superSelectO = $App.getMailboxView().model.getSelectedRow();
                    // $App.getMailboxView().model.superSelectAll('all', function(data) {
                        var taskMidArr =  superSelectO && superSelectO.mids || [];
                        if (taskMidArr.length === 0) {
                            $Msg.alert("请选择邮件。");
                            return false;
                        }
                        remindView && remindView.model.batchDelRemind({
                            midArr: taskMidArr,
                            success: function() {
                                setTask(taskMidArr);
                            }
                        })
                    // });

                    function setTask(taskMidArr){
                        remindView.model.setTask({
                            requestData : {
                                value: 2, 
                                time: 0,
                                ids: taskMidArr
                            },
                            success : function(){

                                // 清空跨页选择
                                $App.getMailboxView().model.clearSuperSelect();
                                $App.getMailboxView().model.set("pageIndex", 1); //重置为第1页

                                // 清空model中的数据，防止下次被使用
                                remindView.model.set({taskDate:0});
                                $App.trigger("showMailbox", { comefrom: "commandCallback" });
                                $App.trigger("refreshSplitView");//刷新分栏
                                $App.trigger("reloadFolder", { reload: true });
                                // $App.clearTabCache("readmail_" + self.model.get('mid'));
                                remindView.showTips('markfinishsucc');
                            },
                            error : function(){
                                self.showFailTips();
                            }
                        });
                    }
                }
            });

            $(btn).find('a:eq(0)')
                  .addClass('btnSetG').removeClass('btnTb ml_6')
                  .prepend('<i class="i_t_right" style="vertical-align:baseline;*vertical-align:4px;margin-right:3px;"></i>');
            $(btn).find('span:eq(0)').removeClass('p_relative');
        },


        render: function () {
            this.$el.hide();
            var self = this;
            var fid = this.model.get("fid");
            var rm = self.readmail;
            var layout = $App.getLayout() || 'list';
            var current_bill_tab = this.model.get("billTab");
            top.mailboxComplaintView.model.set({dataSource:rm && rm.mail});

            // 代办任务列表显示标记完成按钮
            if (this.model.isTaskMode()) {
                this.showTaskBtn();
            }

            if ($App.getCurrentTab().name.indexOf("mailsub") >= 0 && $App.getCurrentTab().name != "mailsub_0") {
                this.showReturnBtn(fid, {});
            }

            if(layout == 'list' && !rm){ //列表模式
                this.showDeleteBtn(fid, rm);
                this.showForwardBtn(fid, rm);
                /**
                 * @2014-07-03 modify by wn
                 * 隐藏举报按钮
                 */
                if( !this.model.isBillMode() && ( current_bill_tab !== 1 ) ){  
                    this.showComplaintBtn(fid, rm);
                }
				this.showMarkAllReadBtn(fid, rm);
				this.showMarkBtn(fid, rm);
				this.showMoveBtn(fid, rm);
				this.showViewBtn(fid); 
				this.showExtraBtn(fid, rm);
                /**
                 * @2014-07-03 add by wn
                 * 账单分类菜单
                 */   
                if( this.model.isBillMode() ){
                    this.showBillCategoryBtn();
                }
            }

            if(layout == 'list' && rm ){ //读信
                top.mailboxComplaintView.model.set({mid:rm.mid});
                if(rm.mail && rm.mail.fid){
                    fid = rm.mail.fid;
                }
                this.showReturnBtn(fid, rm);
                this.showSendAgainBtn(fid, rm);
                this.showReplyBtn(fid, rm);
                this.showForwardBtn(fid, rm, true);
                this.showDeleteBtn(fid, rm);
                /**
                 * @2014-07-03 modify by wn
                 * 隐藏举报按钮
                 */
                if( !this.model.isBillMode() && ( current_bill_tab !== 1 ) ){
                    this.showComplaintBtn(fid, rm);
                }
                this.showMarkBtn(fid, rm);
                this.showMoveBtn(fid, rm);
                // 取消会话邮件的“全部展开/收起”按钮
                // this.showConversationToggleBtn(fid, rm);
                // 【需求调整】读信页屏蔽备份按钮
                // this.showSaveBtn(fid, rm);
                /**
                 * @2014-07-03 add by wn
                 * 账单分类菜单
                 */                
                if( this.model.isBillMode() ){
                    this.showBillCategoryBtn();
                }                  
            }

            if(layout == 'left'){ //左右分栏
				this.showDeleteBtn(fid, rm);
				this.showMarkAllReadBtn(fid, rm);
				this.showMarkBtn(fid, rm);
                this.showMoveBtn(fid, rm);
				this.showComplaintBtn(fid, rm);
				this.showForwardBtn(fid, rm);
				this.showReplyBtn(fid, rm);
				this.showViewBtn(fid);
                this.showExtraBtn(fid, rm);
            }
			
            if(layout == 'top'){ //上下分栏
				this.showReplyBtn(fid, rm);
				this.showForwardBtn(fid, rm);
				this.showMarkAllReadBtn(fid, rm);
				this.showMarkBtn(fid, rm);
                this.showMoveBtn(fid, rm);
				this.showDeleteBtn(fid, rm);
				this.showComplaintBtn(fid, rm);
				this.showViewBtn(fid);
                this.showExtraBtn(fid, rm);
            }

            this.setButtonVisible(0);
            this.$el.show();
        },
        doCommand: function (command, args) {
            if (!args) { args = {}; }
            args.command = command;

            if ($App.isSessionCommand(command)) {
                args.mailtype = 'sessionmail';//判断会话邮件的条件
            }

            /*if (this.readmail && this.readmail.mid) { //分栏读信模式，并且阅读邮件，以当前阅读的邮件为准
                args.mids = [];
                args.mids.push(this.readmail.mid);
                if (args.mailtype == 'sessionmail') {
                    args.sessionIds = [];
                    args.sessionIds.push(this.readmail.mail.mailSession);
                }
            }*/
            $App.trigger("mailCommand", args);

            // 会话邮件读信卡片内，联系人弹层在回复/转发时无法触发绑定在全局的click隐藏事件
            // 暂时放在这里处理
            $('#conversationDialog').remove();

        }

    })
});
﻿M139.namespace("M2012.Mailbox.View", {
    ListView: Backbone.View.extend({
        template:"",
        events: {
            "click tr[mid]": "onLetterRowClick",
            "click a.daytableTitle": "onLetterGroupClick",
            "click a[name=tagMenu]": "onTagMenuClick",
            "click input#chk_mailist_all": "onSelectAllClick",
            "mouseover table.dayAreaTable span[name=from]": "onReceiverAddrMouseOver",
            "click #th_subject,#th_from,#th_size,#th_date": "onTableHeaderClick",
            "click #cancelchoice": "cancelChoice",
            "mouseover table.dayAreaTable tr": "changeMailStyle"
        },
        createInstance: function (options) {
            if (!$App.getView("maillist")) {
                $App.registerView("maillist", new M2012.Mailbox.View.ListView(options));
            }
            var view = $App.getView("maillist");
            if (options.el) {
                view.setElement(options.el);
                //view.el = options.el;
            }
            return view;
        },
        initialize: function (options) {
            //alert("hello");
            var self = this;
            this.firstLoaded = true;//首次加载
            this.repeater = null;//repeater控件引用
            this.model = options.model;
            this.Folder = appView.getView("folder"); //文件夹接口层
            this.remindMailView = appView.getView("remind");
            if (options.el) {
                this.setElement(options.el);
                //view.el = options.el;
            }
            this.model.view = this;
            //this.ToolbarView=new MailboxToolbarView({model:this.model});//添加工具栏视图
            this.model.on("change:fid", function (model, val) { //切换邮件列表事件
                var fid = val;
                //alert(fid);

                //appView.showPage({name:"mailbox_"+fid,view:self,group:"mailbox"})
                //self.render();

            })

            $App.on("refreshSplitView", function (args) {
                //console.warn("refreshSplitView");
                setTimeout(function () {
                    self.refreshSplitView(args);//刷新分栏
                }, 500);

            });

            $App.on("showTab", function (tab) {
                if (tab.group == "mailbox") {
                    self.restorePosition();
                }
                closeMySubscribeListTab();
            });
	   
			function closeMySubscribeListTab(){
				var currTab = $App.getCurrentTab();
				var mySubscribeTabId = 'mailbox_9' ;
				if(/subscribe|myCloudSubscribe/i.test(currTab.group)){
					try{
					//	$App.closeTab(mySubscribeTabId);      打开云邮局的时候，我的订阅不要关闭          
					}catch(e){}
				}
			}

            // 处理视图变化
            this.model.on('mailSelectedChange', function (args) {
                var count = args.count;
                var superSelectResult = self.model.superSelectResult || {};

                // 显示当前已选择邮件数量
                if (count){
                    var html = '<span>已选：<strong class="c_ff6600">'+count+'</strong>封 <a class="c_ff6600" id="cancelchoice" href="javascript:void(0)">取消</a></span>';
                    var cell1=$(self.el).find('#list_header td:eq(1)');
                    if ($App.getLayout() != 'left'){
                          cell1.addClass('td6');
                    }
                    cell1.removeClass('td2').html(html);
                }else {
                    $(self.el).find('#list_header td:eq(1)').removeClass('td6').addClass('td2').html(self.getFromHtmlInListHeader());
                }

                if ($App.getLayout() == 'left' || $App.getLayout() == 'top') {
                    self.changeReadMailArea(count);
                }

                // mid清空 ？
                if (count == 0) {
                    self.model.set({ mid: null });
                }

                // 记录跨页选择日志（仅当存在跨页点击行为，且为选择时才判定为跨页选择）
                var flag = args.flag;
                if (flag && !self.model.get('crossPageSelect')) {
                    for (var n in superSelectResult) {
                        if (superSelectResult.hasOwnProperty(n)){                            
                            var mid = superSelectResult[n].mid;
                            var item = self.model.getMailById(mid);
                            if (item == null) {
                                self.model.set('crossPageSelect', true);
                                BH('cross_page_select');
                                break;
                            }
                        }
                    }
                }
            });

            this.model.on("checkboxChange", function (element) {
                self.checkboxChange(element);
            })

            //分栏模式删除邮件时读取下一封
            $App.on("splitReadNextMail", function (e) {
                if (e.mid) {
                    setTimeout(function () {
                        var dataSource = M139.PageApplication.getTopApp().print[e.mid];
                        if (dataSource && dataSource.next && dataSource.next.mid) {
                            self.readMailSplitView(dataSource.next.mid, self.model.get('fid'));
                        }
                    }, 200);
                }
            });
			
			//刷新邮件列表样式,注意搜索和其他文件夹html结构不一样
			//this.mailboxContainer =  this.mailboxContainer || $('#div_maillist').parent();
		    top.$App.on('pageStyleChange',function(data){
				if(data && data.pageStyle){
					data.pageStyle == "2" && BH('left_pagebigstyle');
					data.pageStyle == "3" && BH('left_pagesmallstyle');
					$('#toolbar_div').parent().attr("class",$User.getPageStyleByKey(data.pageStyle));
				}
			});
            $App.on("ContactsDataChange",function (e){
                if($App.isMailbox()){
                    $App.trigger("showMailbox");
                }
            })
   
            this.setScrollWidth();
        },
        onLetterRowClick: function (evt) {
            var self = this;
            var tr = evt.currentTarget;
            var jRow = $(tr);
            var clickEl = evt.target;
            var jClickEl = $(clickEl);
            var name = jClickEl.attr("name");//这里是点击<A>
            var mid = jRow.attr("mid");
            if ((name == "subject" || name == "from" || name == "summary") && !evt.shiftKey) { //点击标题和发件人，执行读信(须排除shift键按下的情况)
                var currFid = self.model.get('fid'); //当前文件夹
                if (currFid == 2) { //点击草稿箱到写信
                    $App.restoreDraft(mid);
                    evt.preventDefault();
                    return false;
                }
                
                if (currFid != 7)self.readMailInner(mid, tr);
            } else if (name == "tag_span") { //点击了标签
                return false;
            }
            else { //点击了空白处或复选框，选中行。
                var checkbox = jRow.find("input[type=checkbox]");
                var shiftCheckArr = [];
                var shiftKey = false;
                function selectRowRange(startRow, endRow) {
                    var findIndex = -1;
                    var inRange = false;//在范围内
                    self.$el.find("tr[mid]").each(function (i, n) { //循环所有的tr,选中起始到结束范围内的行
                        if (n == endRow) {  //结束条件必须要写在前面
                            inRange = false;
                            $(n).find("input[type=checkbox]").attr("checked", true);
                            shiftCheckArr.push($(n).attr('mid'));
                            return;
                        } else if (n == startRow || inRange) {
                            shiftCheckArr.push($(n).attr('mid'));
                            inRange = true;
                            $(n).find("input[type=checkbox]").attr("checked", true);
                        }
                    });
                    return findIndex;
                }
                if (evt.shiftKey) { //如果shift被按下
                    shiftKey = true;
                    console.log('shiftKey');
                    var startEl = self.previousRow;
                    var endEl = tr;
                    //console('nextRow:'+$(endEl).attr('mid'));
                    if ($(startEl).offset().top > $(endEl).offset().top) {
                        selectRowRange(endEl, startEl); //从下往上选择
                    } else {
                        selectRowRange(startEl, endEl);
                    }
                } else {
                    if (clickEl.tagName != "INPUT") { //点击空白处选中行
                        var td = jClickEl.closest("td").get(0);
                        if (!td) { return }
                        var cellIndex = td.cellIndex;
                        if (cellIndex == 0 && self.model.get("layout")!="left") { //点击第一列选中
                            var orignCheck = checkbox.attr("checked") ? true : false;
                            checkbox.attr("checked", !orignCheck);
                        } else {
                            var c = jClickEl.attr("class");
                            var _n = jClickEl.attr("name");
                            var c2 = td.className;
                            if (c == "i_cl_w" || c == "i_close_min" || c == "i_starM" || _n === 'cl_tag' || c === 'i_tx' || c === 'i_tagfor_n' || c === 'i_starM_y') { //删除标签叉号不要触发读信
                                return;
                            }
                            if ($(td).attr("name") == "td_sub" || c2 == "td2" || c2 == "td3" || c2 == "td4" || c2 == "td6") { //点击标题和发件人列的空白处
                                if (self.model.get('fid') != 7)self.readMailInner(mid, tr);
                                return; //必须return ,避免执行后面的复选框操作
                            } else if (c2 == "td5") { //点击最后一列菜单列，不做选中操作
                                return;
                            }
                        }

                    }

                }

                var chkList = this.$el.find(".dayAreaTable input[type=checkbox]:checked");
                self.checkboxChange(shiftKey ? shiftCheckArr : checkbox, shiftKey);
                /*if (self.model.get("superSelectResult") && !checkbox.attr("checked")) { //超级全选时取消复选框，需要同步更新超级全选结果数组
                    _.without(self.model.get("superSelectResult"), mid);//从超级全选结果中删除当前mid
                    //alert("without you:" + mid);
                }*/
                self.previousRow = tr;
            }
        },

        /**
         *@inner
         */
        readMailInner: function (mid, tr) {
            var self = this;
            var listMailMode = self.model.get("layout");
            var searchMode = self.model.get('isSearchMode');
            var currFid = self.model.get('fid'); //当前文件夹
            var mail = self.model.getMailById(mid);
            var sendId = mail && mail.sendId;
            var jRow = $(tr);

            // 打开聚合邮件
            if (this.model.isClusterMail(mid)) {
                // 在栏目列表
                if (self.model.isClusterColumn()) {
                    $App.showSubscribe(sendId, mail.from);
                    BH("click_cluster_columnlist");
                // 在收件箱入口
                } else {
                    $App.showSubscribe();
                    BH("click_cluster_mailbox");
                }
                return;
            // 阅读订阅邮件
            } else if (sendId > 0) {
                $App.clearTabCache("mailsub_");
                BH("click_cluster_maillist");
                BH("read_cluster_mail");
            }     
            
            //未读邮件
            if (mail && mail.flags && mail.flags.read == 1) { 
                mail.flags.read = 0; //置为已读
                jRow.find("h3").removeClass();
                jRow.find("[name=from]").removeClass("fw_b");
                jRow.find(".i_m_n").removeClass().addClass("i_m_o");
                var isStar = (mail.flags && mail.flags.starFlag) ? true : false;
                var isVip = self.model.isVipMail(mail.from);
                if (!$App.isSessionMid(mid)) {
                    $App.trigger("reduceFolderMail", { fid: mail.fid, isStar: isStar, isVip: isVip });//文件夹未读邮件减少    
                }                
                if (mail.label && mail.label.length > 0) {//有标签，标签未读邮件减少
                    $App.trigger("reduceTagMail", { label: mail.label });
                }
            }
            if (mail && mail.fid == 2) { //草稿箱邮件到写信
                $App.restoreDraft(mid);
                return false;
            }
            //普通读信
            if (listMailMode == "list" || listMailMode == undefined) {
                self.model.set("mid", mid);
                $App.readMail(mid, false, currFid, { searchMode: searchMode }); //触发读邮件事件
                BH("mailbox_readmail");
            //分栏读信
            } else { 
                self.readMailSplitView(mid, currFid);
                BH("mailbox_readmail");
                self.restorePosition();
                self.rememberPosition();
            }
        },
        //点击日期分组折叠
        onLetterGroupClick:function(e){
            $(e.currentTarget).find("i").toggleClass("i_minus");
            $(e.currentTarget).next().toggle();
            // 根据是否出现滚动条微调邮件列表样式
            this.setMailListPadding();
        },

        onTagMenuClick:function(e){
            /*var tagItems = [
            {
                html: "<i class='i_star_y'></i><span class='tagText'>星标</span>",
                command: "mark", args: { type: "starFlag", value: 1 }
            },
            { isLine: true }]*/

            tagItems = this.model.getTagMenuItems();
            if(tagItems.length<4){ //变态需求，无标签时只显示新建标签，有标签时去掉新建和管理
                tagItems.pop();tagItems.shift();
            }else{
                tagItems.splice(tagItems.length-3);
            }
            M2012.UI.PopMenu.create({
                dockElement: e.target,
                direction: "auto",
                items: tagItems,
                onItemClick: function (item) {
                    var args = item.args || {};
                    if (item.command) {
                        args.command = item.command;
                        args.mids = [$(e.target).parents("tr[mid]").attr("mid")];
                        var sessionId;
                        sessionId = $(e.target).parents("tr[sessionid]").attr("sessionid");
                        args.sessionIds = [Number(sessionId)];
                        console.log("mid=" + args.mids);
                        $App.trigger("mailCommand", args);
                        M139.Event.stopEvent();
                    }
                }
            });
        },

        onSelectAllClick: function (e) { //普通全选
            var flag = $(e.currentTarget).attr("checked") ? true : false; //未选中状态是undefined
            this.$el.find(".dayAreaTable input[type=checkbox]").attr("checked", flag);
            /*if (flag == false) {
               this.model.clearSuperSelect()//清空超级全选结果
            }*/
            this.getSelectedRow();
            this.checkboxChange(e.currentTarget);
        },

        /***生成邮件列表，及单元格中元素的事件
         * 所有列表中的事件必须要定义在此函数中，因为异步渲染需要调用此函数重新生成事件
         */
        initListEvents: function () {
            var self = this;
            $(window).resize(function () {
                self.onResize();
                self.setScrollWidth();
            });

            $App.on("showTab", function (m) {
                if (m.group == 'mailbox') {
                    self.onResize();
                }
            });

            this.initTableHeaderEvent();

            this.remindMailView.addEvent(self.$el); //待办任务

            this.setScrollWidth();

        },

        setScrollWidth:function(){
            var self = this;
            self.$body = self.$body || $('body');
            self.$mailboxList = $("#div_maillist");

            /*clearTimeout(self._setScrollWidth);
            if(self.$body.width() < 1024){
                self._setScrollWidth = setTimeout(function(){
                    self.$mailboxList.addClass("scrollWidth");
                },100);
            }else{
                self._setScrollWidth = setTimeout(function(){
                    self.$mailboxList.removeClass("scrollWidth");
                },100);
            }*/
            
        },

        readMailSplitView: function (mid, currFid) { //分栏读信
            var self = this;
            if (mid) { //修复未读信时无mid
                if (this._readmailView) {
                    this._readmailView.disposeView(); //避免重复绑定
                }
                var readmailView = this._readmailView = new M2012.ReadMail.View();
                self.model.set("mid", mid);
                self.model.set("lastReadmailFid", currFid);//记住最后一封读信的fid
                var readmailWrap = this.$el.find("#readWrap");
                readmailWrap.attr("rel", "isRead");
                readmailView.model.set({ mid: mid, win: false, currFid: currFid, showToolBar: false, el: readmailWrap });
                var returnObj = readmailView.render();
                $App.trigger('readmail', { mid: mid, type: 'split', el: readmailWrap });
                returnObj.view.render();
                $(".inboxfl").css("padding", "0px");
            }

        },
        refreshSplitView: function (args) { //刷新分栏
            var listMailMode = this.model.get("layout");
            if (listMailMode == "top" || listMailMode == "left") {
                //if ($.inArray(mailboxModel.get("mid") , mids)>=0) {
                //if ($("#readWrap").attr("rel")=="isRead") { //分栏内容不为空，表示有读过信
                this.readMailSplitView(this.model.get("mid"), this.model.get("lastReadmailFid"));
                //}  
                //}

            }

        },
        restorePosition: function () { //还原滚动条，高亮显示上次读信位置
            var div = this.$el.find("#div_maillist");
            if (!div[0]) { return; }
            if (this.model.get("listPosition") != null) { //还原
                div[0].scrollTop = this.model.get("listPosition");
            }
            var lastMid = this.model.get("mid");
            if (lastMid) {
                div.find("tr[style]").css("background-color", "");//清除上一次的背景
                div.find(".curmail").remove();
                var row = div.find("tr[mid=" + lastMid + "]");
                if (row.length > 0) {
                    row.css("background-color", "#fffdd7");
                    // row.find(".td1 div").prepend("<i class=\"curmail\"></i>"); 
                }
            }
        },
        rememberPosition: function () { //记住上次读信位置
            var self = this;
            self.model.set("listPosition", null);//清除
            $(this.$el).scroll(function () { //监听
                self.model.set("listPosition", $(this)[0].scrollTop);
            });


        },
        highlightSelected: function () { //给已选择的行添加高亮背景
            $(".dayAreaTable tr").each(function () {
                var checked = $(this).find("input[type=checkbox]").attr("checked");
                if (checked) {
                    $(this).addClass("on");
                } else {
                    $(this).removeClass("on");
                }
            });

        },

        // 整理当前选中的数据，写入superSelectResult，触发"mailSelectedChange"
        checkboxChange: function (element, shiftKey) {
            var self = this;
            var shiftKey = shiftKey ? true : false;
            var shiftKeyArr = element || [];
            var superSelectResult = self.model.superSelectResult || {};

            // 全选
            if (element && $(element).attr("id") == "chk_mailist_all"){
                var flag = $(element).attr("checked") ? true : false;
                var $trs = self.$el.find(".dayAreaTable tr");
            // 普通选择 or 右键单选
            } else if (!shiftKey) {
                var $trs = $(element).closest("tr");
                var flag = $trs.find("input[type=checkbox]").attr("checked");
            }

            // shift选择直接传入处理好的mid数组（数组用each遍历存在问题）
            if (shiftKey) {
                for (var i = 0, len = shiftKeyArr.length; i < len; i++) {
                    var mid = shiftKeyArr[i];
                    var mail = self.model.getMailById(mid);
                    if (mail && !superSelectResult[mid]) {
                        superSelectResult[mid] = mail;
                    } 
                }
            // 普通选择 or 右键单选
            } else {
                $trs.each(function() {
                    var mid = $(this).attr("mid");
                    var mail = self.model.getMailById(mid);
                    if (flag) {
                        mail && !superSelectResult[mid] && (superSelectResult[mid] = mail);
                    } else {
                        delete superSelectResult[mid];
                    }
                });
            }

            // 用处理好的数据重写跨页选择对象superSelectResult
            self.model.superSelectResult = superSelectResult;

            var count = 0;
            for (var m in superSelectResult) {
                if (superSelectResult.hasOwnProperty(m)){
                    count++;
                }
            }

            this.model.trigger("mailSelectedChange", { count: count, flag: flag});
            //邮件备份不需要添加高亮背景
            if(self.model.get("fid") != 7){
                this.highlightSelected();
            }
        },
        //显示通讯录card
        onReceiverAddrMouseOver:function(e){
            var t = e.currentTarget;
            var mid = $(t).parents("tr").attr("mid");
            var row = this.model.getMailById(mid);
            if (mid && row) { //避免取不到值时浮层在顶部层出
                var email = (row["fid"] == 2 || row["fid"] == 3) ? row["to"] : row["from"];//草稿箱和已发送显示收件人
                M2012.UI.Widget.ContactsCard.show({
                    dockElement: t,
                    margin: 5,
                    email: email.split(',')[0]  //草稿箱和已发送会有多个收件人，选第一个
                });
            }
        },
        createSuperSelectMenu: function () {
            var self = this;
            var folderInfo = this.model.getFolderInfo();
            M2012.UI.PopMenu.createWhenClick({
                target: self.$el.find("#btn_checkMenu"),
                items: [
                    { text: $T.Utils.format("全部({0})封邮件", [folderInfo.stats.messageCount]), type: "all" },
                    { text: $T.Utils.format("未读({0})封邮件", [folderInfo.stats.unreadMessageCount]), type: "unread" },
                    { text: $T.Utils.format("已读({0})封邮件", [folderInfo.stats.messageCount - folderInfo.stats.unreadMessageCount]), type: "read" },
                    { isLine: true },
                    { text: "shift+鼠标左键", type: "shift", items: [{ html: "<b>shift</b>" }] },
                    { isLine: true },
                    { text: "取消选择所有的邮件", type: "none" }
                ], onItemClick: function (item) {
                    self.superSelectAll(item.type);
                }
            }, function (menu) {
                menu.on("subItemCreate", function (item) { //二级菜单render前触发
                    //bindAutoHide(item.menu.el);
                    if (item.type == "shift") { //读信预览
                        $(item.menu.el).removeClass();//清除原有菜单样式
                        $(item.menu.el).css({ position: "absolute" }); //修改宽度
                        $(item.menu.el).html("<img src='../images/global/shift.gif?rnd=" + Math.random() + "'>");
                    }
                    //console.log(item);
                });
            });

        },
        onTableHeaderClick: function (e) {//点击标题栏排序
            var fid = this.model.get("fid");
            // 代办列表不允许点击标题排序
            if (this.model.isTaskMode()) {
                return;
            }
            var args = {
                command: "sort",
                order: $(e.currentTarget).attr("field"),
                desc: this.model.get("desc") ^ 1  //取反（按位非）
            }
            $App.trigger("mailCommand", args); //发送排序命令
        },
        initTableHeaderEvent: function () { //为列表表头添加事件
            var self = this;
            var orderText = self.model.get("orderText");
			var fid = self.model.get('fid');
			var isSearchMode = self.model.get('isSearchMode');
            if (orderText) { $("#btn_sortMenu span").html(orderText); }
            this.createSuperSelectMenu();

			//会话邮件不显示超级全选
			if(($App.isSessionMode() && !isSearchMode && $App.isSessionFid(fid)) || (fid == 7)){
				self.$el.find('#btn_checkMenu').hide();
			}
		
			
            M2012.UI.PopMenu.createWhenClick({
                target: self.$el.find("#btn_sortMenu"),
                items: [  //desc 0:升序  1:降序
                    { text: "时间由新到旧", order: "receiveDate", desc: 1, bh: "mailbox_sortDate" },
                    { text: "时间由旧到新", order: "receiveDate", desc: 0, bh: "mailbox_sortDate" },
                    { text: "发件人升序", order: "from", desc: 0, bh: "mailbox_sortFrom" },
                    { text: "发件人降序", order: "from", desc: 1, bh: "mailbox_sortFrom" },
                    { text: "主题升序", order: "subject", desc: 0, bh: "mailbox_sortSubject" },
                    { text: "主题降序", order: "subject", desc: 1, bh: "mailbox_sortSubject" },
                    { text: "邮件大小升序", order: "size", desc: 0, bh: "mailbox_sortSize" },
                    { text: "邮件大小降序", order: "size", desc: 1, bh: "mailbox_sortSize" }
                ], onItemClick: function (item) {
                    self.model.set("orderText", item.text);
                    $App.trigger("mailCommand", {
                        command: "sort",
                        order: item.order,
                        desc: item.desc
                    }); //发送排序命令

                    BH(item.bh);
                    //alert(item);
                }
            });
            var fid = this.model.get("fid");
            if (fid == 2 || fid == 3) {
                $(self.el).find("#th_from span").html("收件人");
            } else if (this.model.isApproachMode() && !this.model.get("IamFromLaiwang")) {
                var op = this.model.get("searchOptions");
                if (op && op["condictions"] && op["condictions"].length>0 && op["condictions"][0].field == "from") {
                    $(self.el).find("#th_from span").html("发件人");
                } else {
                    $(self.el).find("#th_from span").html("收件人/发件人");
                }
            }

            if (self.$el.find('#th_from').length) {
                self.listHeader = self.$el.find('#th_from').parent('td').html();
            }
			
			//添加控制备注样式
			var mailListCon = $(this.$el);
			if(this.model.get("showSummary")){
				mailListCon.addClass('havetext');
			}else{
				mailListCon.removeClass('havetext');				
			}
			
        },
        //超级全选 type取值范围 ：all全部 read 已读 unread未读
        superSelectAll: function (type) {
            if (type == 'shift') return;
            var self = this;
            var mids = this.model.superSelectAll(type, function (result) {                
                // 为了兼容跨页选择，当superSelectResult中有保存了mail信息的mid时不覆盖
                var superSelectResult = type == "all" ? self.model.superSelectResult : {};
                $.each(result.mid, function(k, v) {
                    !superSelectResult[v] && (superSelectResult[v] = null);
                });
                self.model.superSelectResult = superSelectResult;//保存超级全选结果
                if (type == "all") { //全选
                    self.$el.find("#chk_mailist_all").attr("checked", true);
                    self.$el.find(".dayAreaTable input[type=checkbox]").attr("checked", true);
                } else if (type == "none") { //取消
                    self.$el.find(".dayAreaTable input[type=checkbox]").attr("checked", false); //先清空选择
                    self.model.clearSuperSelect();
                    self.$el.find("#chk_mailist_all").attr("checked", false);
                } else if (type == "read" || type == "unread") { //已读或未读
                    self.$el.find(".dayAreaTable input[type=checkbox]").attr("checked", false); //先清空选择
                    self.$el.find(".dayAreaTable h3").each(function () {
                        if (($(this).hasClass("fw_b") && type == "unread") || (!$(this).hasClass("fw_b") && type == "read")) {
                            $(this).parents("tr").find("input[type=checkbox]").attr("checked", true);
                        }
                    })
                }
                self.checkboxChange();
            });
        },

        //超级全选，跨页选中复选框
        crossPageCheckbox: function () {
            var midList = this.model.getSelectedRow().mids;
            var self = this;
            if (midList && midList.length > 0) {
                $(self.model.get("mailListData")).each(function (i, n) {
                    if ($.inArray(n.mid, midList) >= 0) {
                        self.$el.find("tr[mid=" + n.mid + "]").find("input").attr("checked", true);
                    }
                });
                this.checkboxChange();
            }
        },
        renderContainer: function () {
            //this.toolbarEl = $("<div></div>");
            //this.$el.append(this.toolbarEl);
            //this.$el.html("");
            //this.$el.append(this.template["header1"]);
            //this.contentEl = $("<div></div>");
            //this.$el.append(this.contentEl);
            this.listEl=this.$el.find("#div_maillist");
        },
        render: function (isFlipPage) {
            var self = this;
            
           
            
            this.renderContainer();
            if (!isFlipPage) { //是加载第一页，重置页码为第一页

                if (self.model.get("isSearchMode")) {
                    self.model.set("isNewSearch", true);//是重新搜索
                    BH("searchResult_load");
                } else {
                    BH("mailbox_load");

                }
                this.model.addLoadBehavior();
            } else { //是翻页
                /*if (self.model.get("isSearchMode")) {
                    self.model.set("isNewSearch", false);//是重新搜索
                }*/
            }
            var tagView = M2012.Mailbox.View.MailTag.prototype.createInstance(); //tagview的单例
            M139.UI.TipMessage.show("正在加载中...");
            this.model.getDataSource(function (dataSource, stats) {
                //var pm=appView.tabpageView.model; //父view的model，即模块管理类
                //this.el=pm.getModule(pm.get("currentModule")).element;//显示容器
                M139.UI.TipMessage.hide();

                
                //self.$el.show();
                
                if (!isFlipPage || (isFlipPage && self.model.get("flipType") == "common")) { //加载第一页，或是普通方式翻页
                    var templateStr;
                    if (self.model.get("layout") == "left") { //左右布局
                        templateStr = $("#template_maillist_left").val();
                    } else { //列表部局、上下布局
                        templateStr = $("#template_maillist").val();
                    }

                    // 如果不显示邮件大小列，则剔除掉模板中相应的td
                    // 代办任务列表页不显示
                    if (self.model.get("showSize") == false ||　self.model.isTaskMode()) {
                        templateStr = templateStr.replace(/<td class="td4"><a id="th_size".+?<\/td>/ig, "")
                        .replace(/<td class="td4">@getSize.+?<\/td>/ig, "");
                        self.$el.find("#th_size").parents("td").addClass("maillist-tdhide");//.hide();
                    }

                    var rp = new Repeater(templateStr);
                    self.repeater = rp;
                    rp.model = self.model;
                    rp.view = self;
                    rp.Functions = createMailboxRenderFunctions(self.model, self);
                    rp.Functions.getTagList = tagView.render;//标签的view
                    rp.ItemDataBound = null;//避免第一页执行itemdatabound
                    self.model.set("mailListData", dataSource);//保存数据源
                    self.model.checkUnreadChange();//检查第一页新邮件数是否增加了
                    var html = rp.DataBind(dataSource); //数据源绑定后即直接生成dom
                    if (dataSource.length == 0) { //无数据的提示
                        self.$el.find("#list_header").remove();

                        // 【账单模式&&非左右分栏】需要追加样式来保证右侧正常
                        if (self.model.isBillMode() && self.model.get("layout") != "left") {
                            self.$el.find('.billright').addClass('bill-serve-right');
                        }
                        if (!self.model.isApproachMode() || self.model.get("layout") == "left" || self.model.get('billtype')) {
                            $('#myAccountList2').css('margin-top', '188px');
                        }
						//如果是搜索模式，且搜索的是发件人，且结果为0的时候，手动调一次搜索主题
						var from_setting = top.$App.getMailboxView().model.get("setting");
						var from_searchIsComeformDefault = top.$App.getMailboxView().model.get("searchIsComeformDefault");
						if(self.model.get("isSearchMode") && from_setting == "from" && from_searchIsComeformDefault == "from"){
							var searchContent = self.model.get("searchContent");
							self.model.set("setting","subject");
							$App.searchMail({condictions : [{field:"subject",operator:"contains",value:searchContent}]});
							setTimeout(function(){
								self.model.set("searchContent","");
								self.model.set("setting","");
							},1000);
							
							return;
						}
                        html = self.getEmptyTemplate();
                    } else {
                        self.$el.find('.billright').removeClass('bill-serve-right');
                    }
                    $(self.el).find("#div_maillist")[0].innerHTML=html;

                    if (self.model.isTaskMode() && self.model.get("layout") == "left") {

                        // 代办列表在左右分栏模式下，移除排序列
                        self.$el.find('#list_header .td6').remove()
                    }
                    self.onResize();
                    if (self.model.isBillMode()) { //非分栏模式显示账单菜单
                        self.addBillCenter();
                    }

                    self.initListEvents();


                    dataSource.length > 0 && self.changeReadMailArea(0); //未选择提示

                    tagView.attachHintForTag();
                    self.firstLoaded = false;

                    self.prevSectionName = rp.prevSectionName;//暂存当前页的最后一个分组名称，用于驱动生成下一页的分组。
                    if (self.model.get("order").indexOf("Date") == -1) { //非日期排序时隐藏日期分组
                        self.$el.find(".daytableTitle").hide();
                    }
                } else { //滚动条方式自动翻页
                    console.log("滚动条方式自动翻页");
                    self.repeater.ItemDataBound = self.repeaterItemDataBound;//调用ItemDataBound事件，在翻页时异步添加tr数据
                    self.model.set("mailListData", self.model.get("mailListData").concat(dataSource));//保存合并的数据源

                    self.repeater.DataBind(dataSource); //用下一页的数据源重新生成html，但不生成dom,dom生成交由ItemDataBound完成
                    self.initListEvents();//重新生成列表事件

                }

                self.crossPageCheckbox();//跨页超级全选

                if (self.model.isApproachMode() && !isFlipPage) {
                    self.model.set("searchStats", stats);//搜索结果分类统计
                    $App.getView("mailbox_other").searchClassify.render();
                }

                //排序图标
                $(self.$el).find("#list_header a").each(function () {
                    var field = $(this).attr("field");
                    if (self.model.get("fid") == 3 && field == "from") { field = "to" }
                    if (field == self.model.get("order")) {
                        var desc = Number(self.model.get("desc")) ^ 1;
                        $(this).find("i")[0] && ($(this).find("i")[0].className = "i_th" + desc); //ui给的样式名做反了，所以要取反操作
                    }
                    //var currentOrder=self.model.get("order");
                    //var currentDesc=self.model.get("desc");
                });
                self.model.trigger("mabilbox_render", { isFlipPage: this.isFlipPage, data: dataSource }); //通知邮件列表已显示完成
                self.onResize();
                self.restorePosition();
                self.rememberPosition();
                //$(this.el).find("tr[mid]").mousedown(function () {
                var dragView = M2012.Mailbox.View.Drag.prototype.createInstance({ el: self.el }); //创建拖拽邮件view的单例
                dragView.render();
                //});
                // 根据是否出现滚动条微调邮件列表样式
                self.setMailListPadding();

                if (!(dataSource.length > 0 && dataSource[0].flags && dataSource[0].flags.top==1)) { 
                    self.listEl.find("#period_today").parents("a").hide();
                    self.listEl.find("#period_top").parents("a").hide();
                }
                if (self.model.isSubscribeMode()) { //订阅邮件隐藏标记菜单
                    self.$el.find(".td5").hide();
                }
                if(self.model.get("fid") == 7){//邮件备份隐藏大小，待办，标记
                     self.$el.find(".tdtitle").find(".maillist-starwarp").hide();
                     self.$el.find(".td4").hide();
                     self.$el.find(".td5").hide();
                }
            });
            $App.getCurrentTab().element.className = $User.getPageStyleByKey(self.model.get("pageStyle"));
            /*        
            if (!window.RefreshSetting) {
                $App.getCurrentTab().element.className = $User.getPageStyle();
            } else {
                window.RefreshSetting = null;
            }*/

            
        },

        setMailListPadding: function() {
            // 根据是否出现滚动条微调邮件列表样式
            var $maillist = this.$el.find("#div_maillist");
            if (!$maillist[0]) return;
            if ($maillist[0].scrollHeight > $maillist.height()) {
                $maillist.removeClass('bgPadding').addClass('bgPadding_left');
            } else {
                $maillist.removeClass('bgPadding_left').addClass('bgPadding');
            }
        },

        //账单中心
        addBillCenter: function () {
            var self = this;
            var myBillId = self.model.get('specialFolderId').myBill;
            var isSearchMode = self.model.get('isSearchMode');
            var fid = self.model.get('fid');
            var billtype = self.model.get('billtype');
            var parentContainer = this.$el.parent().parent().parent();
            var billContainer = parentContainer.find('#mybillitem');
            var inboxHeader = parentContainer.find('#inboxHeader');
            var toolBar = parentContainer.find('.toolBar');
            //   inboxHeader.hide(); //loadbilltype再判断是否显示
            //   toolBar.hide();

            //当前是我的账单文件夹非搜索模式
            if (fid == myBillId && !isSearchMode) {
                //修改账单类型
                try {
                    self.model.updateBillType(function (result) {
                        //日志
                    });
                } catch (e) { }

                billContainer.find('li:eq(0) a').addClass('current');

            }

            //点击改变背景色[由于暂时没有定义皮肤，所以看不到底色，先实现功能]
            //if(self.model.isBillMode()){
            billContainer.find('a[data-billtype=' + billtype + ']').addClass('current');
            //}

            /*
            //或当前是账单内搜索（区分其他搜索）
            if(fid == myBillId || ($App.getCurrentTab().title == '账单中心' && isSearchMode)){
                var display = "";
                if ($User.getProvCode() == 1 && $User.getCardType() == "1") { //广东全球通用户
                    display = "";
                } 
                if (display !== ""){
                    return;
                }
            }
            */

            //定义账单中心事件
            $App.on('showBillManager', function (e) {
                $App.show('billManager');
                try {
                    $App.closeTab('mailbox_' + myBillId);
                    $App.closeTab('mailbox_1'); //搜索
                } catch (e) { }
            });

            //账单中心点击
            parentContainer.find('#showbillmanager').click(function () {
                $App.trigger('showBillManager', {});
            });

            /**
             * @2014-7-3
             * modified by wn
             */
            //账单子项点击
            // parentContainer.find("#mybillitem a").click(function () {
            //     var billtype = $(this).attr('data-billtype');
            //     if (billtype) {
            //         var options = {
            //             billType: billtype,
            //             title: '账单中心',
            //             fid: 1,
            //             flags: { billFlag: 1 }
            //         };
            //         $App.searchMail(options);
            //     } else {
            //         $App.showMailbox(myBillId);
            //     }
            // });
            // add by zhangsixue for Account Center
            parentContainer.find("#myAccountList2 a").click(function () {
                $Msg.showHTML("<iframe src='http://bill.mail.10086.cn/handler/bill/goto.ashx?lc=line&sid=" + sid + "' frameborder=\"0\" allowTransparency=\"false\" style='border:0px;width:780px;height:355px'/>", {
                    width: 800,
                    height: 355,
                    buttons: ["关闭"],
                    dialogTitle: "账单消费概况"
                });
            });
            
            self.loadBillType();
        },

        //加载账单类型
        loadBillType: function () {
            var self = this;
            var data = {};
            var parentContainer = self.$el;
            var billEmptyHtml = [
            '<div class="billleftDiv bill_list_null"><h2>你暂时没有账单邮件</h2>',
            '<p>您可以在账单管理<a href="javascript:;" onclick="$App.trigger(\'showBillManager\',{})" title="开通账单服务">开通账单服务</a>，让您每月收到账单信息，时刻掌握自己的消费状况！',
            '</p><img src="http://image0.139cm.com/rm/richmail/images/billCenter/bill_null.png">',
            '</div>'].join(""); //未开通
            var billEmptyTips = ['<div class="noindexbody">',
            '<div class="empty_btn">本文件夹下暂无邮件</div>',
            '</div>'].join(""); //已开通

            var billContainer = parentContainer.find('.billright');
            var inboxHeader = parentContainer.find('#inboxHeader,.toolBar');
            var mailListBox = this.$el.find('#div_maillist');

            function controlBillCenter(isOpen) { //账单中心业务处理
                var isEmptyCount;
                if (parentContainer.find('#emptyBillContainer')[0]) {
                    isEmptyCount = true;
                }
                if (isEmptyCount) {
                        /**
                         * @2014-7-3 modified by wn 
                         * 下线账单管理
                         */
                        // mailListBox.html(billEmptyTips);
                    mailListBox.html(billEmptyTips);
                    inboxHeader.hide();
                } else {
                    //    inboxHeader.show();
                    self.onResize();
                }
            }

            self.model.getBillTypeList(function (result) {
                if (result["var"] && result["var"].length > 0) {
                    var varLen = result["var"].length;
                    var arrStatus = [];
                    for (var i = 0; i < varLen; i++) {
                        var status = result["var"][i].status; // 1为开通 ,2为关闭
                        arrStatus.push(status);
                    }
                    arrStatus.sort();
                    for (var o = 0; o < arrStatus.length; o++) {//去除重复
                        if (arrStatus[o] == arrStatus[o + 1]) {
                            arrStatus.splice(o + 1, 1);
                            o = o - 1;
                        }
                    }
                    if (arrStatus.length > 1) {//至少开通了一个账单
                        controlBillCenter(true);
                        billContainer.find(".aside-bd .bill_box").eq(0).hide(); //右侧logo
                        billContainer.find(".ads_bill").removeClass("ads_bill1").addClass("ads_bill2"); //
                    } else {
                        if (arrStatus[0] == 1) {//全部开通
                            billContainer.find(".aside-bd .bill_box").eq(0).hide();
                            controlBillCenter(true);
                        }
                        if (arrStatus[0] == 2) {//全部未开通
                            billContainer.find(".aside-bd .bill_box").eq(0).show();
                            billContainer.find(".ads_bill").removeClass("ads_bill2").addClass("ads_bill1");
                            controlBillCenter();
                        }
                        if (arrStatus[0] == 0) {
                            billContainer.find(".aside-bd .bill_box").eq(0).hide();
                            controlBillCenter();
                        }
                    }
                } else {
                    controlBillCenter();
                }
            });
        },

        getEmptyCluster: function(clusterFlag) {
            var template = [ '<div class="noindexbody noindexbodyS"><div class="empty_btn">',
                            '<div class="boxIframeText" style="margin:0 auto; width:300px;text-align:left">',
                                 '<div class="norTips"><span class="norTipsIco"><i class="i_warn"></i></span>',
                                     '<dl class="norTipsContent">',
                                         '<dt class="norTipsTitle">没有找到邮件，可能：</dt>',
                                         '<dd class="norTipsLine">1.您的订阅邮件被转移至其他文件夹</dd>',
                                        '<dd class="norTipsLine">2.您没有{0}，请到 <a href="javascript:$App.show(\'googSubscription\');">云邮局</a> 订阅</dd>',
                                     '</dl>',
                                 '</div>',
                             '</div></div></div>'].join("");

            return $T.Utils.format(template, [
                    clusterFlag ? '订阅杂志' : '订阅服务', 
                    clusterFlag ? 'http://fun.mail.10086.cn/ymail/1403/morentupian/p11.html' : 'http://fun.mail.10086.cn/ymail/1403/morentupian/p12.html']);
        },

        getEmptySearch: function () {
            $("#btn_emptySearch").die("click");//移除事件，避免dom销毁后的幽灵事件
            $("#btn_emptySearch").live("click", search);

            function search(sender) {
                var keyword = $("#tb_emptyKeyword").val().trim();
                if (keyword != "") {
                    if (keyword.length > 100) {
                        top.FF.alert('仅支持对100个字符的关键词搜索，100个字符外的字词将被忽略');
                        keyword = keyword.substring(0, 100);
                    }
                    $App.searchMail(keyword);
                    $("#tb_mailSearch").val(keyword); //搜索输入框需同步为最近一次搜索的关键词。
                    $("#btn_emptySearch").die("click", search);//移除事件
                } else {
                    $Msg.alert("请输入关键字");
                }


            }
            var text = '请输入发件人、收件人或邮件主题的关键字进行搜索。';
            if (this.model.get('isFullSearch')) {
                text = '请输入发件人、收件人、邮件主题、正文、附件名或附件内容的关键字进行搜索。';
            }
            return ['<div class="noindexbody noindexbodyS"><div class="empty_btn">',
                    '<div>没有找到邮件</div>',
                    '<p>' + text + '</p>',
                    '<div><input type="text" id="tb_emptyKeyword" class="iText" value="">',
                    '<a href="javascript:void(0);" id="btn_emptySearch" class="btnNormal ml_5"><span>搜 索</span></a>',
                    '</div></div></div>'].join("");

        },
        getEmptyStar: function () {
            return ['<div class="bgMargin_top">',
                '<h2 class="" style="font-weight:bold;">您暂时没有"星标"邮件</h2>',
                '<p class="tipTxt">您可以在邮件列表中将邮件设为星标,方便查找重要邮件。</p>',
                '<img src="../images/global/nostar.png" alt="您可以在邮件列表中将邮件设为星标,方便查找重要邮件。" style="margin-top:5px;">',
                '</div>'].join("");
        },
        getEmptyTask: function () {
            return ['<div class="bgMargin_top">',
                '<h2 class="" style="font-weight:bold;">您暂时没有"待办任务"邮件</h2>',
                '<p class="tipTxt">您可以将邮件设为待办任务,方便查找重要邮件。</p>',
                '<img src="../images/global/norenwu.jpg" alt="您可以将邮件设为待办任务,方便查找重要邮件。" style="margin-top:5px;">',
                '</div>'].join("");
        },
        getEmptyTaskdone: function () {
            return ['<div class="bgMargin_top">',
                '<h2 class="" style="font-weight:bold;">您暂时没有"已完成"邮件</h2>',
                '<p class="tipTxt">您可以将您的待办任务邮件设为已完成。</p>',
                '<img src="../images/global/norenwudone.jpg" alt="您可以将您的待办任务邮件设为已完成。" style="margin-top:5px;">',
                '</div>'].join("");
        },
        getEmptyUnread:function(){
            return ['<div class="noindexbody">',
                   '<div class="empty_btn">没有找到未读邮件</div>',
                   '<p></p>',
               '</div>'].join("");
        },
        getEmptyVoiceMail:function(){
            return ['<div class="voicemail">',
 		'<img src="/m2012/images/global/voicemail_01.png" alt="" title="">	',
 		'<p>您暂时还未收到语音来电留言哦！o(∩_∩)o <br><a href="javascript:$App.show(\'voiceSetting\')" id="voice_setting">查看设置 &gt;&gt;</a></p>',
 	'</div>'].join("");
        },
        //无数据时的模板
        getEmptyTemplate: function () {
            //$(".toolBar").remove();
            
            this.toolbarView.$el.find('.toolBar').remove();
            
            var self = this;
            var fid = Number(this.model.get("fid"));
            var folder = this.model.getFolderInfo(fid);
            var mainText = folder["name"] + "没有邮件";
            var emptyBillContainer = '<div style="display:none" id="emptyBillContainer"></div>';

            if (self.model.isBillMode()) {
                if (self.model.get("billTab") == 3) {
                    return this.getEmptyVoiceMail();
                }
                return emptyBillContainer;
            } else if (self.model.get("isSearchMode")) {
                if (self.model.isClusterColumn()) {
                    return self.getEmptyCluster(true);
                } else if (self.model.isClusterList()) {
                    return ["<div style='height: 40px;padding-top: 35px;text-align: center;color: #666;font-weight: bold;'>此栏目下无邮件，&nbsp;",
                            "<a href='javascript:$App.closeTab();'>关闭</a>",
                            "&nbsp;此页面</div>",
                            "<iframe width='100%' frameborder='no' src='http://fun.mail.10086.cn/ymail/1403/morentupian/p11.html'/>"].join("");
                } else if (self.model.isStarMode()) { //星标邮件
                    return self.getEmptyStar();

                } else if (self.model.get('isTaskbacklogMode')) {
                    return self.getEmptyTask();

                } else if (self.model.get('isTaskdoneMode')) {
                    return self.getEmptyTaskdone();

                } else if (self.model.isUnreadMode()) {
                    return self.getEmptyUnread();
                } else {
                    return self.getEmptySearch();
                }
            } else {
                function getFolderDesc() {
                    var type = $App.getFolderType(fid)
                    if (type == 3) { //custom
                        return '创建收信规则，将指定发件人或指定条件的邮件收取到此文件夹。<a href="javascript:$App.show(\'createType\')">去创建</a>'
                    } else if (type == -3) { //pop
                        return '代收邮件可帮助您收取、管理其他邮箱的邮件。<a href="javascript:$App.show(\'popmail\')">了解更多</a>'
                    }

                }
                var html = ['<div class="noindexbody">',
                    '<div class="empty_btn">', mainText, '</div>',
                    '<p>', getFolderDesc(), '</p>',
                '</div>'].join("");
                return html;
            }
        },
        loadNextPage: function () {	//加载下一页
            this.model.nextPage();
            this.render(true);
        },
        //行绑定事件，生成每一行时都会触发，用于滑动翻页时生成每一行的html片断，逐行插入邮件列表底部
        repeaterItemDataBound: function (args) {
            if (this.view.prevSectionName != args.sectionName) { //和前一页的分组名称相比改变了，生成新的分组
                this.view.prevSectionName = args.sectionName;
                var start = this.sectionStart.replace("@getSectionName", args.sectionName)
                this.view.el.find("table:last").after(start + this.sectionEnd);
            }
            var html = args.html;
            this.view.el.find("table:last")
                .children("tbody").append(html);


        },
        getSelectedRow: function () { //获取选中行
            return this.model.getSelectedRow(this.$el);
        },

        //读信区域变化
        changeReadMailArea: function (selectedCount) {
            var temp = ['<div class="noindexbody"><div class="empty_btn">{0}</div></div>'].join("");
            var text = '您尚未选择邮件。';
            if (selectedCount > 0) {
                this.model.set("mid", null);//清空读信选择
                text = '您当前选中了' + selectedCount + '封邮件，<strong>shift+鼠标左键</strong>可选择多封邮件。';
            }
            var moreMemuBtn = this.$el.find('.toolBarArray #btn_more');
            moreMemuBtn.hide();
            var container = this.$el.find('#readWrap');
            container.html($T.Utils.format(temp, [text]));
        },
        getViewOffsetTop: function () {
            var height;
            var layout = this.model.get("layout");
            if (layout == "top" || layout == "left" || this.model.get("fid") != "1") {
                height = this.listEl.offset().top;
            } else {
                //height = 152;//收件箱写死高度
                height = this.listEl.offset().top;
            }
            return height;
        },
        onResize: function () {
            if (this.el) {
                try {
                    if (!this.$el.is(":visible")) { return;} //多实例运行，避免不可见的列表触发resize
                    var div_mail = $('#div_mail:eq(0)');
                    var bottomPosition = $App.getBodyHeight();
                    if (this.model.get("layout") == "top") { //上下布局
                        bottomPosition = this.$el.find("#mailbox_split").offset().top + 4;
                        var readmailHeight = $App.getBodyHeight() - bottomPosition - this.$el.find("#mailbox_split").outerHeight(true) + 6;
                        var readWrap = this.$el.find("#readWrap:eq(0)");
                        readWrap.height(readmailHeight);
                        readWrap.find(".inboxfl").height(readmailHeight);//读信还有一级子容器的高度也要改
                        var covCon = readWrap.find("div.cov-list");
                        if(covCon[0]){
                            var tipsH = readWrap.find("div.inboxTips").height() || 0,
                                titH = readWrap.find("div.cov-title-bg").height() || 0;
                            covCon.height(readmailHeight - tipsH - titH - 6); //会话邮件
                        }
                        if (this.model.isApproachMode()) {
                        //    $("#div_searchclassify").height($("#div_main").height() - $('#toolbar_div').height() - 4);
                        //上下模式+搜索模式。
                            $("#div_searchclassify").css("height","auto");
                            setTimeout(function(){
                                var div_mail_height = $("#div_mail").height();
                                
                                var div_searchclassify = $("#div_searchclassify").height();
                                if(div_searchclassify > div_mail_height){
                                    
                                    $("#div_mail").css({"overflow-y":"auto", "height": div_mail_height + "px"});
                                }else{
                                    $("#div_mail").attr("style","").css("height", div_mail_height + "px");
                                }
                            },1000);
                        }
                    } else if (this.model.get("layout") == "left") { //左右布局时，resize改变右侧大小
                        var listEl = this.$el.find("#div_maillist"); //第一次resize执行太早，要直接取maillist
                        var splitBar = this.$el.find("#mailbox_split");
                        var height = $App.getBodyHeight() - listEl.offset().top - 4;
                        var mailListWidth = (listEl[0].scrollHeight > listEl.height()) ? splitBar.position().left -14 : splitBar.position().left-28;
                        splitBar.height(height);
                        listEl.width(mailListWidth);// 因为多出了24外边距
                        var readmailWidth = $("#div_main").width() - splitBar.position().left - 6; //计算读信容器的宽度
                        if (this.model.isApproachMode()) {
                            div_mail.width(readmailWidth);
                            div_mail.height(height);

                        } else {
                            this.$el.find("#readWrap").width(readmailWidth-1);
                            this.$el.find("#readWrap").height(height);
                           
                            
                        }
                    }
                    //邮件列表的高度=邮件列表底部坐标-邮件列表顶部坐标
                    var height;
                    if (this.model.isApproachMode() && this.model.get("layout") == "list") {
                        div_mail.height(bottomPosition - div_mail.offset().top - 4);
                    } else {
                        if (this.model.isClusterColumn() || this.model.isClusterList()) {
                            height = bottomPosition - this.listEl.offset().top - 6;
                            this.listEl.height(height);
                            this.listEl.find('iframe').height(height - 114 - 5);
                        } else {
                            height = bottomPosition - this.getViewOffsetTop() - 6;
                            this.listEl.height(height);
                        }
                    }
                } catch (e) { }
            }
        },
        cancelChoice: function() {
            this.model.superSelectResult = {};
            $(this.el).find('#list_header td:eq(1)').removeClass('td6').addClass('td2').html(this.getFromHtmlInListHeader());
            $(this.el).find('#chk_mailist_all').attr("checked", false);
            this.$el.find(".dayAreaTable input[type=checkbox]").attr("checked", false);
            // 更新分栏情况下，读信区域的内容
            this.changeReadMailArea(0);
            // 记录行为日志
            // 取消跨页选择判定标识
            if (this.model.get('crossPageSelect')) {
                BH('cross_page_select_cancel');
                this.model.set('crossPageSelect', false);
            } 
        },

        getFromHtmlInListHeader: function() {
            // 左右分栏直接不存在对应的结构，所以直接移除
            var layout = this.model.get('layout');
            if (layout == 'left') return '';

            var order = this.model.get('order');
            var desc = this.model.get('desc');            
            var $listHeader = $(this.listHeader);
            if (order == 'from') {
                $listHeader.find('i').removeClass('i_th0, i_th1').addClass('i_th'+(1-desc));
            }
            return $listHeader[0];
        },
         changeMailStyle: function(e){
            if(this.model.get("fid") != 7){return};
            var t = e.currentTarget;
            $(t).find("td").css("cursor","default");
            $(t).find("a").attr('href', 'javascript:;').css('cursor', 'default');
            $(t).find("p").css('cursor', 'default');
            $(t).find("td").css("background","#ffffff");
        }
    })
});
M139.namespace("M2012.Mailbox.View", {
    SearchClassify : Backbone.View.extend({
        el:"",
        template:"",
        events:{
            //"click #search_switchon" : "toggleSearchclassify"
        },
        createInstance: function (options) {
            if (!$App.getView("searchclassify")) {
                $App.registerView("searchclassify", new M2012.Mailbox.View.SearchClassify(options));
            }
            var view = $App.getView("searchclassify");
            if (options.el) {
                view.el = options.el;
            }
            return view;
        },
        initialize: function(options){
           var self = this;
           this.firstLoaded = true; //首次加载
           this.model = options.model;
		   this.searchDefaultSetting = $App.getCustomAttrs("searchDefaultSetting");
        },
        initstats: function(){
            var stats = this.searchStats = this.model.get("searchStats");
            var statsdata = {
                from : stats.fromStats,
                fid : stats.folders,
                during: stats.during,
                attached : [
                    {name: '带附件', attached: 1, count: stats.attachMessageCount},
                    {name: '不带附件', attached: 2, count: stats.messageCount - stats.attachMessageCount}
                ]
            }
			var layoutStatus = this.model.get("layout");
			// console.log(layoutStatus);
			//这两种布局的空模板不能被右侧的窗口挡住
			if(layoutStatus == "list" || layoutStatus == "top" ){
				var noindexbodyWidth = $(".noindexbody.noindexbodyS").width();
				$(".noindexbody.noindexbodyS").width(noindexbodyWidth - 210);
			}
            return stats.messageCount > 0 ? statsdata : {}; //搜索的邮件只有一封命中邮件时，不显示逼近式搜索。
        },
        renderContainer:function(){
            var self = this;
        //    this.mainEl = $("<div style='height:100%; overflow-y:auto;'></div>")
        //    $(this.el).append(this.mainEl);
            this.headEl = $("<div class='searchFilterTitle'><a href='javascript:void(0)' id='setItDefault' class='fr'>设置默认</a>搜索范围</div>");
        //    $(this.mainEl).append(this.headEl);
		//	$(this.el).append(this.headEl);
            this.contentEl = $("<div class='searchFilterList'></div>");
			//添加默认设置
			var defaultSettings = ['<div class="search-end-sel">',
										'<ul class="li-sel" id="searchRangeUl">',
											'<li><input type="radio" name="searchRange" rel="from" id="from" /><label for="from">发件人</label></li>',
											'<li><input type="radio" name="searchRange" rel="subject" id="subject" /><label for="subject">主题</label></li>',
											'<li><input type="radio" name="searchRange" rel="to_from" id="to_from" /><label for="to_from">收件人+发件人</label></li>',
											'<li><input type="radio" name="searchRange" rel="subject_content" id="subject_content" /><label for="subject_content">主题+正文</label></li>',
											'<li><input type="radio" name="searchRange" rel="all" id="all" /><label for="all">全文检索</label></li>',
											'<li><a href="javascript:" id="open_all" bh="open_search_all_result">开通全文检索</a></li>',
										'</ul>',
									'</div>'].join('');
			this.classifyTemplate = $('<div class="earch-end-text"></div>');
			this.contentEl.append(this.headEl);
			this.contentEl.append(defaultSettings);
			this.contentEl.append(this.classifyTemplate);
            $(this.el).html(this.contentEl); //改为html，否则取消的时候再生产了一遍
        //    this.switchEl = $('<a id="search_switchon" title="隐藏分类搜索" href="javascript:void(0)" class="switchOn"><i class="i_triangle_h"></i></a>');
			this.switchEl = ['<a href="javascript:void(0)" class="switchOn" title="收起"></a>',
								'<a href="javascript:void(0)" class="switchOff" title="展开"></a>'];
            $(this.el).append(this.switchEl.join(""));
        //    this.switchEl.click(function(){
        //        self.toggleSearchclassify(this);
        //    });暂时未做，补上的时候添加
		//	首次进行搜索、进入搜索结果页时，出现tips引导
		var position = $("#setItDefault").offset();
		var guideHTML = ['<div id="guideHTML" class="tips write-tips EmptyTips" style="position: absolute; z-index:999; padding:5px 20px 5px 5px ;width: 180px; left: -11',
                    //     position.left - 138,
	                     'px;top: 26',
                    //     position.top - 45,
                         'px">',
                         '<div class="tips-text EmptyTipsContent">',
                         '设置默认搜索范围，高效搜索邮件',
                         '</div>',
                         '<div class="tipsTop diamond" style="left: 180px;"></div>',
                         '<a style="position:absolute; cursor:pointer; text-decoration:none; font-size:10px;color:#000; right:5px; top:0px; ">x</a>',
                      '</div>'].join('');
			var default2 = $App.getCustomAttrs("searchDefaultSetting");
			var fl = "from,subject,to_from,subject_content,all".indexOf(default2) > -1 && default2 != "";
			if(!fl && $("#guideHTML").length == 0 && top.$App.getCustomAttrs("closeGuideTips") != "1"){
				$("#div_searchclassify").append(guideHTML);//不能插入到body，否则点击其他链接，无法消除
			}
		//	var div_mail = $("#div_mail");
			var guideHTMLShowFlage = true;
			$("#guideHTML a").click(function(){
				$("#guideHTML").hide();
				//关闭后记住曾经关闭的状态
				top.$App.setCustomAttrs("closeGuideTips","1");
				guideHTMLShowFlage = false;
		//		div_mail.unbind("scroll");
			});
			//tips位置大小变了，滑动的时候不要求自动变化了
			/*
			div_mail.bind("scroll",function(){
				if(guideHTMLShowFlage && top.$App.getCustomAttrs("closeGuideTips") != "1"){
					if(div_mail.scrollTop() == 0){
						$("#guideHTML").show();
					}else{
						$("#guideHTML").hide();
					}
				}
			});
			*/
			var div_searchclassify = $("#div_searchclassify");
			var switchOn = $(".switchOn");
			var switchOff = $(".switchOff");
		//	switchOff.hide();
			switchOn.click(function(){
			//	switchOn.hide();
				//提示语的处理
				$("#guideHTML").hide();
				guideHTMLShowFlage = false;
			//	div_mail.unbind("scroll");
			//不要用动画	
			//	searchFilter.animate({right: "-200px"}, function(){
			//		switchOff.css("right","200px").show();
			//	});
			//	searchFilter.hide();
				div_searchclassify.addClass("searchFilter-off");
			//	switchOff.css("right","200px").show();
			});
			switchOff.click(function(){
			//	switchOff.hide();
			//	searchFilter.animate({right: 1},function(){
			//		switchOn.show();
			//	});
			//	searchFilter.show();
			//	switchOn.show();
				div_searchclassify.removeClass("searchFilter-off");
			});
			//没开通全文索引的时候隐藏
			if ($App.getConfig("UserAttrs") && $App.getConfig("UserAttrs").fts_flag == 0){
				$("#searchRangeUl input[rel='all']").parent("li").hide();
				$("#searchRangeUl input[rel='subject_content']").parent("li").hide();
				$("#searchRangeUl a#open_all").parent("li").click(function() {
                    //$App.setAttrs({fts_flag:1});
                    //$App.getConfig("UserAttrs").fts_flag = 1;
                   $RM.setAttrs({attrs: {fts_flag:1}}, function (result) {
                       if (result["code"] == "S_OK") {
                        	BH("open_search_all_succeed")
		                    var dialog = $Msg.confirm(
		                                        "全文检索开通成功，刷新页面生效",
		                                        function () {
		                                            location.reload();
		                                        },
		                                        {
		                                            title:"",
		                                            dialogTitle:'系统通知',
		                                            icon:"ok",
		                                            buttons:["立即刷新"]
		                                        }
		                    )
                    	} else {
                    		top.M139.UI.TipMessage.show("全文检索开通失败",{className:"msgRed", delay: 1000 });
                    	}
                   });
                })
			}  else {
				$("#searchRangeUl a#open_all").parent("li").hide()
			}
			//默认的渲染
			var setting = self.model.get("setting");
			if("from,subject,to_from,subject_content,op_all".indexOf(setting) > -1){
				$("#searchRangeUl input[rel='" + setting + "']").attr("checked","checked");
			}else if(setting == "iamadvance"){
				//do nothing 高级搜索而来的时候，不选择任何
			}else{
				$("#searchRangeUl input[rel='" + self.searchDefaultSetting + "']").attr("checked","checked");
			}
			//默认值的点击
			$("#searchRangeUl").click(function(e){
				if(e.target.nodeName.toUpperCase() === "INPUT"){
					top.$App.getView("mailbox_other").model.set("showSearchclassify",true);
					var rel = $(e.target).attr("rel");
					if(rel == "from"){
						top.$App.getView("mailbox").model.set("searchIsComeformDefault", "");//此时的选择发件人为搜索，转换标志，防止搜了主题
					}
					self.model.set("setting",rel);
					var searchOptions = self.model.get("searchOptions");
					var keyword = searchOptions["condictions"][0]["value"];
					delete searchOptions["condictions"];
					searchOptions["condictions"] = addCondiction(keyword, rel);
					console.log(searchOptions);
					$App.searchMail(searchOptions);
				//	console.log(self.model.get("searchOptions"));
					
				}
			});
			function addCondiction(keyword, field) {
                var options = keyword;
				var field = field.split("_");
				var condictions = [];
				if(field[0] !== "all"){
					for(var i = 0; i < field.length; i++){
						condictions.push({
							field: field[i],
							operator: "contains",
							value: keyword
						});
					}
				}else{
					condictions.push({
						field: "content",
						operator: "contains",
						value: keyword
					}, {
						field: "attachName",
						operator: "contains",
						value: keyword
					},{
						field: "subject",
						operator: "contains",
						value: keyword
					}, {
						field: "from",
						operator: "contains",
						value: keyword
					}, {
						field: "to",
						operator: "contains",
						value: keyword
					});
				}
                //if (keyword != '') {
                //    options = {condictions: condictions};
                //    if (field == 'attachName') {
                //        options.flags = { attached: 1 };
                //    }
                //}
                return condictions;
            }
			//弹窗的内容模板
			var defaultSettings2 = [
				'<div class="search-end-open">',
				'<p>请选择默认搜索范围：</p>',
				'<div class="search-end-sel">',
				'<ul class="li-sel" id="searchRangeUl2">',
					'<li><input type="radio" name="searchRange2" value="from" id="from2" /><label for="from2">发件人<span class="c_009900">(推荐)</span></label></li>',
					'<li><input type="radio" name="searchRange2" value="subject" id="subject2" /><label for="subject2">主题</label></li>',
					'<li><input type="radio" name="searchRange2" value="to_from" id="to_from2" /><label for="to_from2">收件人+发件人</label></li>',
					'<li><input type="radio" name="searchRange2" value="subject_content" id="subject_content2" /><label for="subject_content2">主题+正文</label></li>',
					'<li><input type="radio" name="searchRange2" value="all" id="all2" /><label for="all2">全文检索</label></li>',
				'</ul>',
				'</div>',
				'</div>'];
			//没开通全文索引的时候删除掉全文检索
			if ($App.getConfig("UserAttrs") && $App.getConfig("UserAttrs").fts_flag == 0){
				defaultSettings2.splice(7,2);
			}
			//click
			$("#setItDefault").click(function(){
				//统计代码
				BH('search_default_click');
				//打开的时候，如果有默认值，填充默认值，否则选择推荐的"发件人"为默认值
				var $defaultSettings2 = $(defaultSettings2.join(""));
				var searchDefaultSetting = $App.getCustomAttrs("searchDefaultSetting");
				
				if("from,subject,to_from,subject_content,all".indexOf(searchDefaultSetting) > -1 && searchDefaultSetting != ""){
					$defaultSettings2.find("input[value='"+ searchDefaultSetting +"']").attr("checked", "checked");
				}else{
					$defaultSettings2.find("input[value='from']").attr("checked", "checked");
				}
				//弹出设置对话框
				top.$Msg.showHTML($defaultSettings2[0],
				function(){
					var defaultSettingValue = $("#searchRangeUl2 input:checked").val();
					if("from,subject,to_from,subject_content,all".indexOf(defaultSettingValue) > -1){
						top.$App.setCustomAttrs("searchDefaultSetting", defaultSettingValue);
						$("#guideHTML").hide();
						BH('search_default_setSuccessfully');
					}
				},
				function()
				{
					console.log("do nothing!");
				},
				{
					dialogTitle:'设置默认搜索范围',
					buttons:['确定','取消'],
					width: 350
				});
			});
        },
        render:function (){
            this.renderContainer();
            var stats = this.initstats();
            var model = this.model;
        //    var el = this.contentEl;
			var el = this.classifyTemplate;
        //    this.headEl.html('<h2 class="fl mr_5">分类搜索</h2><strong class="fw-n">('+ this.searchStats.messageCount +')</strong></div>');
            
            
            
        //    if(stats.from && stats.from.length > 0 && (!selected || !selected.from)){ //按发件人
			if(stats.from && stats.from.length > 0){
                var fromoptions = {model: model, el: el, title: '发件人/收件人', data: stats.from, key: 'from', type: 'from'};
                this.searchclassifyfrom = new M2012.Mailbox.View.SearchClassifyItem(fromoptions);
                this.searchclassifyfrom.render();
            }
        //    if(stats.fid && stats.fid.length > 0 &&  (!selected || !selected.fid)){ //按文件夹
			if(stats.fid && stats.fid.length > 0){
                var fidoptions = {model: model, el: el, title: '文件夹', data: stats.fid, key: 'folderName', type: 'fid'};
                this.searchclassifyfid = new M2012.Mailbox.View.SearchClassifyItem(fidoptions);
                this.searchclassifyfid.render();
            }
        //    if(stats.during && stats.during.length > 0 && (!selected || !selected.during)){ //按时间范围
			if(stats.during && stats.during.length > 0){
                var duringoptions = {model: model, el: el, title: '时间范围', data: stats.during, key: 'name', type: 'during'};
                this.searchclassifydate = new M2012.Mailbox.View.SearchClassifyItem(duringoptions);
                this.searchclassifydate.render();
            }
        //    if(stats.attached && stats.attached.length > 0 && (!selected || !selected.attached)){ //是否带有附件
			if(stats.attached && stats.attached.length > 0){
                var attachoptions = {model: model, el: el, title: '是否包含附件', data: stats.attached, key: 'name', type: 'attached'};
                this.searchclassifyattach = new M2012.Mailbox.View.SearchClassifyItem(attachoptions);
                this.searchclassifyattach.render();
            }
			var selected = this.model.get("selected");
            if(selected){
               var selectedoptions = {model: model, el: el};
                this.searchclassifychoosed = new M2012.Mailbox.View.SearchClassifyChoosed(selectedoptions);
                this.searchclassifychoosed.render();
            }
        },
        toggleSearchclassify : function(el){
            var parent = $(this.el).parent();
            if(parent.hasClass('searchListoff')){
                parent.removeClass('searchListoff');
                $(el).attr('title','隐藏分类搜索');
            }else{
                parent.addClass('searchListoff');
                $(el).attr('title','展开分类搜索');
            }
            BH('top_searchToggle');
        }
    })
});
M139.namespace("M2012.Mailbox.View", {
    SearchClassifyItem : Backbone.View.extend({
        el:"",
        template:"",
        events:{
            //"click #search_switchon" : "toggleSearchclassify"
        },
        initialize: function(options){
           var self = this;
           this.el = options.el;
           this.model = options.model;
           this.title = options.title;
           this.data = options.data;
           this.key = options.key;
           this.type = options.type;
        },
        renderContainer:function(){
            var self = this;
			self.itemListEl = $('<div class="dl-text" type="'+ self.type +'"></div>');
			self.dl = $("<dl></dl>");
        //    self.itemNameEl = $('<h3>'+ self.title +'</h3>');
			self.itemNameEl = $("<dt>按<strong>"+self.title+"</strong>筛选</dt>");
            self.dl.append(self.itemNameEl);
            
            $(self.itemListEl).append(self.dl);
            if(self.data.length > 2){
                self.itemToggleEl = $('<a href="javascript:;" current="close" class="showall"><span>显示全部</span><i class="g-down"></i></a>');
                $(self.el).append(self.itemToggleEl);
                self.itemToggleEl.click(function(){
                    self.toggleItemList(this);
					return false; //防止冒泡，刷新页面
                });
            }
			$(self.itemListEl).append(self.itemToggleEl);
			self.el.append(self.itemListEl);
			if(top.$App.getView("mailbox").model.get("layout") == "top"){
				$(".showall").click(function(){
					var div_mail_height = $("#div_mail").height();
					
					var div_searchclassify = $("#div_searchclassify").height();
						if(div_searchclassify > div_mail_height){		
							$("#div_mail").css({"overflow-y":"auto", "height": div_mail_height + "px"});
						}else{
							$("#div_mail").attr("style","").css("height", div_mail_height + "px");
						}
				});
			}
            self.itemListEl.click(function(evt){
                self.changeSearchOptions(evt,this);
            });
        },
        render:function (){
            var self = this;
            this.renderContainer();
            var display = '';
            var list = [];
            var itemel = '';
            var itemdata = '';
            for(var i = 0, len = self.data.length; i<len; i++){
                display = i < 2 ? '' : 'none';
                itemdata = self.data[i];
                if(itemdata.count > 0){
                    itemel = self.createItemEl(display, itemdata);
                    list.push(itemel);
                }
            }
        //    this.itemListEl.append(list.join(''));
			this.dl.append(list.join(''));
		//	if((this.dl).find("dd").length == 1){
		//		this.dl.find("dd").prepend('<a href="javascript:void(0)" class="fr">取消</a>');
		//	}
        },
        createItemEl : function(display, itemdata){
            var title = itemdata[this.key] == '我的帐单' ? '账单中心' : itemdata[this.key];
			//控制为最大18个字符
			var tmpString = title + "(" + itemdata.count + ")";
			var tmpString2 = "";
			if(tmpString.length > 22){
				tmpString2 = tmpString.substr(0,22);
			}else{
				tmpString2 = tmpString;
			}
            var html = ['<dd title="'+ title +'" count="'+ itemdata.count +'" type="'+ this.type +'" val="'+ itemdata[this.type] +'" style="display:'+ display +'">',
                     '<a hidefocus="true" href="javascript:;">',
                     '<span class="scontent">',
                     '<span class="stext">'+ tmpString2 +'</span>',
                //     '<span class="snum"></span>',
                     '</span></a></dd>'].join('');
            return html;
        },
        changeSearchOptions : function(evt,parent){
            var el = evt.target;
            if(el == parent) return;
            top.$App.getView("mailbox_other").model.set("showSearchclassify",true);
        //    var li = $(el).parentsUntil($(parent)).last();
			var li = $(el).parents("dd");
            var title = li.attr('title');
            var count = li.attr('count');
            var type = li.attr('type');
            var val = li.attr('val');
            
            var selected = this.model.get("selected");
            if(!selected){
                selected = {};
            }
            selected[type] = {title:title,count:count};
            this.model.set("selected",selected);
            
            var searchOptions = this.model.get("searchOptions");
            searchOptions.isSearch = 0;
            if(!searchOptions.approachSearch){
                searchOptions.approachSearch = {};
            }
            if(type == 'during'){
                val = this.getDuringVal(title);
            }
            searchOptions.approachSearch[type] = val;
            $App.searchMail(searchOptions); //逼近式搜索
            BH('top_searchClass'+type);
        },
        getDuringVal:function(key){
            var during = {
                '一天内': 'D0,1',
                '一周内': 'W0,1',
                '一月内': 'M0,1',
                '六月内': 'M0,6',
                '一年内': 'Y0,1',
                '五年内': 'Y0,5'
            };
            var myDate = new Date(new Date());//new Date();
            var codes = during[key].split(",");
            switch (codes[0]) {
                case "D0":
                    myDate.setDate(myDate.getDate() - parseInt(codes[1]));
                    break;
                case "W0":
                    myDate.setDate(myDate.getDate() - parseInt(codes[1]) * 7);
                    break;
                case "M0":
                    myDate.setMonth(myDate.getMonth() - parseInt(codes[1]));
                    break;
                case "Y0":
                    myDate.setFullYear(myDate.getFullYear() - parseInt(codes[1]));
                    break;
            }
            return Math.round((myDate) / 1000);
        },
        toggleItemList : function(el){
            var self = this;
            if($(el).attr('current') == 'close'){
                self.dl.find('dd:gt(1)').show();
                $(el).attr('current','open');
                $(el).html('<span>只显示部分项</span><i class="g-up"></i>');
            }else{
                self.dl.find('dd:gt(1)').hide();
                $(el).attr('current','close');
                $(el).html('<span>显示全部</span><i class="g-down"></i>');
            }
        }
    })
});
M139.namespace("M2012.Mailbox.View", {
    SearchClassifyChoosed : Backbone.View.extend({
        el:"",
        template:"",
        events:{
        },
        initialize: function(options){
           var self = this;
           this.el = options.el;
           this.model = options.model;
        },
        renderContainer:function(){
            var self = this;
        //    self.listContainer = $('<ul></ul>');
        //    $(self.el).append(self.listContainer);
        //    self.cancelEl = $('<a href="javascript:;" class="a_open">取消</a>');
        //    $(self.el).append(self.cancelEl);
        //    self.addEvent();
        },
        render:function (){
            var self = this;
            this.renderContainer();
            var selected = this.model.get("selected");
			var keys = [];
			var values = [];
            var list = [];
            for(var key in selected){
				var tmphtml = self.createItemEl(key, selected[key]);
				//找到之前的列表删除，加入新的被点击的，并且去掉尾部的“显示全部”链接
				$(self.el).find("div[type='"+ key +"']").find("dd").remove().end().find("dl").append(tmphtml).next("a").remove();
            //    list.push(self.createItemEl(key, selected[key]));
            }
        //    this.listContainer.append(list.join(''));
			self.addEvent();
        },
        addEvent: function(){
            var self = this;
			/*
            self.listContainer.click(function(evt){
                var $el = $(evt.target);
                var isCancel = $el.attr('rel') == 'cancel';
                if(isCancel){
                    var $ul = $(this);
                    if($ul.children().length > 1){
                        var type = $el.attr('type');
                        self.cancel(type);
                    }else{
                        self.cancelAll();
                    }
                }
            });
            //取消全部
            self.cancelEl.click(function(){
                self.cancelAll();
            });
			*/
			//取消的事件按钮
			$(".earch-end-text").find("a[rel]").click(function(e){
			//	console.log(e.target);
				var $target = $(e.target); 
				var relType = $target.attr("rel");
				if(relType != ""){
					self.cancel(relType);
				}
				return false;//防止冒泡
				
			});
        },
        createItemEl:function(type, itemdata){
            var html = ['<li class="sela" title="'+ itemdata.title +'">',
                '<a hidefocus="true" href="javascript:;">',
                '<span class="scontent">',
                '<span class="stext">'+ itemdata.title +'</span>',
                //'<span class="snum">('+ itemdata.count +')</span>',
                '</span><i class="i_u_close" type="'+ type +'" rel="cancel"></i></a></li>'].join('');
			var tmpString = itemdata.title + "(" + itemdata.count + ")";
			var tmpString2 = "";
			if(tmpString.length > 18){
				tmpString2 = tmpString.substr(0,18);
			}else{
				tmpString2 = tmpString;
			}
			var html2 = '<dd title="' + tmpString + '"><a href="javascript:void(0)" rel="'+ type +'" class="fr">取消</a>' + tmpString2 +'</dd>';
            return html2;
        },
        cancel:function(type){
            var searchOptions = this.model.get("searchOptions");
            var approachSearch = searchOptions.approachSearch;
            var selected = this.model.get('selected');
            delete selected[type];
            delete approachSearch[type];
            this.model.set('selected',selected);
            searchOptions.isSearch = 1;
            $App.searchMail(searchOptions); //逼近式搜索
        },
        cancelAll:function(){
            var searchOptions = this.model.get("searchOptions");
            delete searchOptions.approachSearch;
            this.model.set('selected',null);
            searchOptions.isSearch = 1;
            $App.searchMail(searchOptions); //逼近式搜索
        }
    })
});
M139.namespace("M2012.Mailbox.View", {
	Command: Backbone.View.extend({
		el: "",
		initialize: function (options) {
			this.model = options.model;
			var self = this;
			$App.on("mailCommand", function (args) { //监听其它模块发起的菜单命令
				console.log(args);
				self.doCommand(args.command, args);
			});


		},
		createInstance: function (options) {
			if (!$App.getView("mailCommand")) {
				$App.registerView("mailCommand", new M2012.Mailbox.View.Command(options));
			}
			return $App.getView("mailCommand");
		},
		mailValidate: function (command, args) {
		    if ($App.isMailbox() && args.mids) {
		        var listEl = $($App.getMailboxView().el);
		        switch (args.command) {
		            case "tag":
		                $(args.mids).each(function (i, n) {
		                    var elem = listEl.find("tr[mid=" + n + "]").find(".TagDiv");

		                    //  如果存在则不重复添加
		                    if (elem.find('[tagid='+ args.labelId +']')[0]) return true;

		                    var tagView = M2012.Mailbox.View.MailTag.prototype.createInstance()
		                    elem.append(tagView.render([args.labelId]));
		                });
		                return true;
		                break;
		            case "mark":
		                if (args.type == "starFlag") {
		                    $(args.mids).each(function (i,n) {
		                        var elem = listEl.find("tr[mid=" + n + "]").find("[name=list_starmail]");
		                        elem.removeClass().addClass(args.value == 1 ? "i_starM_y" : "i_starM");
		                    });
		                    return true;
		                    
		                } else if (args.type == "read") {
		                    $(args.mids).each(function (i, n) {
		                        var jRow = listEl.find("tr[mid=" + n + "]");
		                        if (args.value == 0) { //标已读
		                            jRow.find("h3").removeClass();
		                            jRow.find("[name=from]").removeClass("fw_b");
		                            jRow.find(".i_m_n").removeClass().addClass("i_m_o");
		                        } else {
		                            jRow.find("h3").addClass("fw_b");
		                            jRow.find("[name=from]").addClass("fw_b");
		                            jRow.find(".i_m_o").removeClass().addClass("i_m_n");
		                        }
		                    });
		                    return true;
		                }
		                break;
		            
		        }
		    }
		},
		// 邮件操作核心函数
		// 所有的操作都通过这个命令执行
		doCommand: function (command, args) {

			if (!args) { args = {} };//未传则置空
			var self = this;
			var folderModel = $App.getView("folder").model;//获得文件夹model的引用
			var mailboxModel = $App.getMailboxView().model;//订阅邮件多实例特殊处理
			var model = mailboxModel;
			
			var fid = mailboxModel.get('fid');
			var mids;
			var sessionIds; //会话sessionIds
			var sessionMids;//标签用到
			var isSessionMode = $App.isSessionMode();
			var selectOO = this.getSelectedMail();
			var superSelectOO = mailboxModel.superSelectResult || {};			

			var mailtype = args.mailtype || ''; //mailtype == 'sessionmail'
			var comefrom = args.comefrom || ''; //来源判断

			if (args && args.mids) { //如果有传mid，直接取用
				mids = args.mids;
			} else {	//如果没传，获取列表中选中项的mid
				mids = selectOO.mids;
			}
			
			if (args && args.sessionIds){
			    sessionIds = args.sessionIds;
			} else {
		        sessionIds = selectOO.sids;
			}

			var sendIds = []; //聚合邮件sendIds
			var clusterMids = [];
			var sessionIdsWithoutCluster = [];			
			var sendFlag = "";// 判断是否为顶层聚合邮件，此时对全部聚合邮件执行删除、移动等批量操作需要传入sendFlag=1
			var hasClusterMail = false;
			var containSessionMail = false;

			// 对会话模式下“回复”功能进行校验
			if (command == "reply" && $App.isSessionMode() && (!mids || mids.length > 1)) {
				var text = "请选择一封邮件进行操作";
				M139.UI.TipMessage.show(text, {
					colour: 'msgRed',
					prior: true,
					delay: 3000
				});
				return false;
			}

			// 彻底删除后需要清除待办任务的短信提醒
			var taskMidArr = [];
			if (mids) {
				
				// 用户选择处理,支持跨页
				for (var i = 0, len = mids.length; i < len; i++) {
					var mid = mids[i];
					var mail = superSelectOO[mid] || mailboxModel.getMailById(mids[i]);
					
					// 对置顶和举报进行校验，如果包含聚合邮件则不允许执行
					// 位置不能和	if (!mail) continue; 对调
					// 因为mailboxModel.isSubscriptionMail包含对读信页mail为空时的校验        
					if ((command == "mark" && args.type == "top")) {
						if (mailboxModel.isSubscriptionMail(mail)) {
							var text = command == "您选择了聚合的邮件，它不能进行置顶。";
							M139.UI.TipMessage.show(text, {
								colour: 'msgRed',
								prior: true,
								delay: 3000
							});
							return false;
						}
					}
					if (!mail) continue;

					// 筛选待办邮件
					if (mail.taskDate) {taskMidArr.push(mid);}

					// 整理数据
					if ( mailboxModel.isClusterMail(mid)) {
					   hasClusterMail = true;
					   sendFlag = (mailboxModel.isClusterColumn() || mailboxModel.isClusterList()) ? "" : 1;
					   sendIds.push(mail.sendId);
					   clusterMids.push(mid);
					} else {
					   sessionIdsWithoutCluster.push(mail.mailSession);
					}
				}   
			}			
            
            if(isSessionMode && ( mids || sessionIds) && $App.isSessionCommand(command)&& comefrom!='singleSessionMail'){
	            mailtype = 'sessionmail';//判断会话邮件的条件
	            if(command === 'move' || command === 'delete'){
		            mids && $.each(mids, function(i,val){
		        		var data = mids ? mailboxModel.getMailById(val) : superSelectOO[val];
		        		if(data && data.mailNum > 1){
		        			containSessionMail = true;
		        		}
	        		});
            }
        }

        // 读信页取不到mail信息，clusterMids和sessionIdsWithoutCluster均为null
		// 这里要兼容一下
		if (mailtype == 'sessionmail' && clusterMids.length == 0 && sessionIdsWithoutCluster.length == 0) {
			sessionIdsWithoutCluster = sessionIds;
		}
         
         mailboxComplaintView.model.set({
             mailtype:mailtype,
             comefrom:comefrom,
             ids:mids,
             sessionIds:sessionIds,
             commandCallback:commandCallback
         });
			

			function addBehavior() {
			    var map = {
			        markAll: "mailbox_markUnread_ok", deleteAll: "mailbox_deleteUnread_ok",
			        "delete": "mailbox_realDelete_ok", spam: "mailbox_spam_ok"
			    }
			    var tabReadMail = /readmail_/gi.test($App.getCurrentTab().name);
			    if (command == "move" && args.fid == 4) { //move 到fid=4才是普通删除
			        if(tabReadMail){
			            BH('toolbar_deleteok');
			        }else{
			            if(!args.resumeDel)BH("mailbox_delete_ok");
			        }
			        return; 
			    }
			    if(map[command]){
			        if(tabReadMail && command == 'delete'){
	    		        BH('toolbar_realdeleteok');
			        }else{
    			        BH(map[command]);
			        }
			    }
			}
			
			// 完成操作后回调（所有操作公用回调）
			function commandCallback() { 
			    M139.UI.TipMessage.hide();
			    if (messageSuccess) { //成功提示
			        setTimeout(function () {
			            M139.UI.TipMessage.show(messageSuccess, { delay: 3000 });
			        }, 1000);
			    }

			    if (args.command != "mark" && args.command != "tag") { //标记无刷新操作时，不能清除已选择结果
			        // 清空超级全选结果
			        model.clearSuperSelect()
			    }

			    // 参数中传入的回调，针对每个操作的具体处理
			    args.callback && args.callback();

			    // 彻底删除邮件的同时删除待办提醒
			    if (command === "delete" && taskMidArr.length) {
			    	var remindView = $App.getView('remind');
			    	remindView && remindView.model.batchDelRemind({midArr: taskMidArr});
			    }

                //会话邮件里删除单封邮件不刷新
			    // 在会话邮件读信卡片内的操作不针对页面进行刷新
			    if (args.inCovMainbody) {
			    	$App.trigger("reloadFolder", { reload: true });
			        return;
			    }

			    // 单个会话邮件的列表页面的操作对列表进行重新渲染（分栏模式暂时没纳入）
			    // 如果删除了所有邮件，不执行该分支
		    	if ($App.isReadSessionMail() && $App.getLayout() == 'list') {
			    	if ((command == "delete" || (command == "move" && args.fid==4))) {
			    		$App.trigger('delCovMails', {mids: mids});
			    	} else if (command == "move") {
			    		$App.trigger('moveCovMails', {mids: mids, fid: args.fid});
			    	} else if (command == "mark") {
			    		$App.trigger('markCovMails', {mids: mids, type: args.type, value: args.value});
			    	} else if (command == "tag") {
			    		$App.trigger('tagCovMails', {mids: mids, labelId: args.labelId});
			    	} else {
			    		$App.getCurrentTab().view.render();
			    	}
		    		
			    	$App.trigger("reloadFolder", { reload: true });
			        return;	
			    }
			    
                //会话邮件里删除单封邮件不刷新（TODO:应该可以删除了）
			    if( comefrom == 'singleSessionMail'){
			    	$App.trigger("reloadFolder", { reload: true });
			        return;
			    }
			    if( comefrom == 'spammail'){
			        $Msg.alert('操作成功，邮件已被还原到收件箱中。');
			    }
                
                if( comefrom == 'risktips_spam'){ 
                    top.BH('readmail_complaintpropertysafesucc');
                }

			    if (command == "move" || command == "delete" || command == "spam" || command == "unSpam" || command == "refuseMail") {
			        mailboxModel.set("mid", null);//删除和转移邮件后清空mid选择
			        
			        // 如果在
			        //删除单封邮件时读取下一封邮件，多选无效
			        if($App.getCurrMailMid()){
			        	var currMid = $App.getCurrMailMid();
			        	if($App.getLayout()=='list'){ //普通模式
					        $App.trigger('readNextMail',{ 
					        	mid:currMid,
					        	sessionIds:sessionIds
					        });
			        	}else{   //分栏模式
			        		$App.trigger('splitReadNextMail',{
					        	mid:currMid,
					        	sessionIds:sessionIds
			        		});
			        	}
			        }

			    }

			    $App.trigger("reloadFolder", { reload: true });//数据已改变，通知文件夹列表刷新
			    $App.on("folderRendered", onFolderLoaded);
			    

			    
			    function onFolderLoaded() {
			        $App.off("folderRendered", onFolderLoaded);//清理事件
			        
			        args.mids = mids;
			        args.sessionIds = sessionIds;
			        if (self.mailValidate(command, args)) { //标记邮件无刷新
			            return;
			        }

			        if ($App.getCurrentTab().name.indexOf("readmail_") >= 0) { //当前是读信，trigger读信的后续处理
			            $App.trigger("mailboxDataChange");//通知下次刷新邮件列表
						$App.trigger("readmailControl", { command: command, args: args, mids: mids, sessionIds: sessionIds }); //读信处理相关逻辑业务
					} else {
						$App.trigger("readMaiDataChange", { command: command, args: args, mids: mids, sessionIds: sessionIds }) //通知读信页需要刷新
			            $App.trigger("showMailbox", { comefrom: "commandCallback" }); //必须要等文件夹刷新之后，再通知邮件列表刷新
			        }
			        $App.clearTabCache("mailsub_");
					
			    }
			    //console.warn("command callback");
			    //如果是分栏模式，操作完成后需要重新刷新分栏读信
			    $App.trigger("refreshSplitView");//刷新分栏

			    

			    addBehavior();
			    // 取消跨页选择判定标识
			    mailboxModel.set('crossPageSelect', false);
			}

			
			var message = "正在操作中...";
			var messageSuccess = "";
			
			switch (command) {
			    case "delete":
			        if (checkSelect()) {
			        	
			        	var dialog;
	                    message = "正在删除邮件...";
	                    messageSuccess = "所选邮件已彻底删除";
						 //说是只改删除邮件文件夹里面彻底删除的提示语
                        var delTip = args.fid == 4 ? '彻底删除的邮件，我们将自动为您备份7天。您可以在已删除邮件夹中'+
                        '<a id="lookMailBack" href="javascript:;">&nbsp;查看自动备份的邮件</a>': "彻底删除后，邮件不可恢复。";
                        var confirmMessage = hasClusterMail ? "选择的邮件中包含多封邮件，是否彻底删除？" :
                                        delTip;

                        //会话模式
			            if(containSessionMail && mailtype === 'sessionmail'){
				            dialog = $Msg.confirm(
	                            '选择的邮件中包含多封邮件，是否彻底删除？',
	                            function () {
	                                M139.UI.TipMessage.show(message);
	                                model.deleteSessionMail(sessionIds, commandCallback);
	                                BH("sure_thorough_delete");
	                            },
	                            function() {
	                            	BH("cencel_thorough_delete");
	                            },	         
	                            {
	                            	title:"",
	                                dialogTitle:'彻底删除邮件',
	                                icon:"warn",
									isHtml: true,
									buttons:['删除','取消']
	                            });	
	                        $(".btnSure") && $(".btnSure").attr("class","btnRed");
	                        $(".CancelButton") && $(".CancelButton").attr("bh","cencel_thorough_delete");
	                        $("a.CloseButton") && $("a.CloseButton").attr("bh","cencel_thorough_delete");	            	
			            }else{

			            	dialog = $Msg.confirm(
                            	confirmMessage,
	                            function () {
	                                M139.UI.TipMessage.show(message);
	                                model.deleteMail({ mids: mids, sendIds: sendIds, sendFlag: sendFlag }, commandCallback);
	                                BH("sure_thorough_delete");
	                            },
	                            function() {
	                            	BH("cencel_thorough_delete");
	                            },
	                            {
	                                dialogTitle:'彻底删除邮件',
	                                icon:"warn",
									isHtml: true,
									buttons:['删除','取消']
	                            }
	                        );
	                        $(".btnSure")&&$(".btnSure").attr("class","btnRed");
	                        $("a.CancelButton") && $("a.CancelButton").attr("bh","cencel_thorough_delete");	
	                        $("a.CloseButton") && $("a.CloseButton").attr("bh","cencel_thorough_delete");
			            }
			            dialog.$el.find('#lookMailBack').click(function(){
                            dialog.close();
                            $App.showMailbox(7);
                        })
			            dialog.$el.find("a.btnSure").addClass("btnRed");
			            dialog.$el.find("a.CancelButton").attr("bh","cencel_thorough_delete");
			            dialog.$el.find("a.CloseButton").attr("bh","cencel_thorough_delete");

			        } 
					break;
			    case "mark":
			        if (checkSelect()) {
			            message = "正在标记邮件...";
			            messageSuccess = "所选邮件标记成功";
			            
                        if(args.type == 'starFlag' && args.value == 0){
                            messageSuccess = "取消星标成功";
                        }

			            M139.UI.TipMessage.show(message);
			            if ( mailtype != 'sessionmail' || $App.isReadSessionMail()) {
			                model.markMail(mids, args, commandCallback);
			            } else {			            	
			                model.markSessionMail({ mids: clusterMids, sessionIds: sessionIdsWithoutCluster }, args, commandCallback);
			            }
			        }
					break;
			    case "move":
			        if (checkSelect()) {
			            if (args.fid == -1) { //移动到新建文件夹
			                this.doCommand("addFolder", { mid: mids });
			                return;
			            }

			            message = "正在转移邮件...";
			            messageSuccess = "所选邮件移动成功";

                       var _m = $App.getMailboxView().model;
                        if( parseInt(_m.get("billTab"),10) === 0 ){
                            if(args.fid === 1){
                                messageSuccess = "您选择了的邮件已经在收件箱";
                            }
                        }
                        
			            if (args.fid == 4) {
			                message = args.resumeDel ? "正在恢复邮件......." : "正在删除邮件.......";
			                messageSuccess = args.resumeDel ? "所选邮件已恢复到“已删除”文件夹" : "所选邮件已删除";
			            }
			            
			            if((!hasClusterMail||!mailboxModel.isSubscriptionMail(mail)) && (mailtype != 'sessionmail' || $App.isReadSessionMail())){
			            	M139.UI.TipMessage.show(message);
			                model.moveMail({ mids: mids, sendIds: sendIds, sendFlag: sendFlag }, args.fid, commandCallback);
			            }else{

			                if( args.fid !== 4){
			                	sessionIds ? model.moveSessionMail(sessionIds, args.fid, commandCallback) : model.moveMail({ mids: mids, sendIds: sendIds, sendFlag: sendFlag }, args.fid, commandCallback);
				            }else{
				            	var tipsFlag = $App.getCustomAttrs("sesdeltips");

				            	//是否包含会话邮件
				            	if(containSessionMail || (mailboxModel.isSubscriptionMail(mail) && hasClusterMail) || hasClusterMail && !tipsFlag){
						            var dialog = $Msg.confirm(
			                            "选择的邮件中包含多封邮件，是否删除？",
			                            function () {
			                            	M139.UI.TipMessage.show(message);
											containSessionMail ? model.moveSessionMail(sessionIds, args.fid, commandCallback):model.moveMail({ mids: mids, sendIds: sendIds, sendFlag: sendFlag }, args.fid, commandCallback);
											BH("sure_delete");
											if($('#nodeltips:checked')[0]){
												$App.setCustomAttrs('sesdeltips', "1");
											}
			                            },
			                            function() {
	                            			BH("cencel_delete");
	                            		},
			                            {
			                            	title:"",
			                                dialogTitle:'删除邮件',
			                                icon:"warn",
			                                buttons:["删除","取消"]
			                            }
			                        );
			                        $(".btnSure")&&$(".btnSure").attr("class","btnRed");
			                        $("a.CancelButton") && $("a.CancelButton").attr("bh","cencel_delete");
			                        $("a.CloseButton") && $("a.CloseButton").attr("bh","cencel_delete");

			                        //dialog.$el.find("span.bibText").html('<input type="checkbox" id="nodeltips" /> 以后不再提示');	  
		                    	}else{
		                    		model.moveSessionMail(sessionIds, args.fid, commandCallback);
		                    	}
		                    }
			            }
			        }
			        if (hasClusterMail) {
			            BH(mailboxModel.isClusterColumn() ? "deleteormove_cluster_columnlist" : "deleteormove_cluster_mailbox");
			        }
					break;
			    case "tag":
			        if (checkSelect()) {

			        	//会话邮件处理
			        	if( mids && sessionIds && $App.getCurrentTab().name.indexOf("readmail_") > -1){
			        		var count = this.getSessionTagsCount(mids[0]);
			        		if(count >=10 ){
								$Msg.alert("标签数量已经超过上限!");
			        			return;
			        		}
	        				sessionMids = this.getSessionTagsMids(mids[0]);
	        				if(sessionMids.length > mids.length){
	        					mids = sessionMids;	
	        				}	        				
	        			}

			            if (args.labelId == -1) { //移动到新建标签
			                this.doCommand("addTag", { mid: mids });
			                return;
			            }
			            message = "正在给邮件打标签...";
			            messageSuccess = "所选邮件标记成功";
			            M139.UI.TipMessage.show(message);
			            BH('toolbar_tag');
			            model.addSpecialTagBehavior(args.labelId, "specialtag_mark");
			            model.addTagForMail(mids, args.labelId, commandCallback);
			        }
					break;
			    case "sort":
			        message = "正在排序邮件...";
			        M139.UI.TipMessage.show(message);
			        model.set("order", args.order);
			        model.set("desc", args.desc);
                    if(mailboxModel.get('isSearchMode')){
                        var searchOptions = mailboxModel.get('searchOptions');
                        searchOptions.order = args.order;
                        searchOptions.desc = args.desc;
                        mailboxModel.set('searchOptions',searchOptions);
                    }
                    //$App.trigger("showMailbox"); //刷新
                    commandCallback();
			        break;
			    case "spam":
			        if (checkSelect()) {
			            mailboxComplaintView.mailComplaint();
			        }
			        break;
			    case "unSpam":
                    if (checkSelect()) {
                        mailboxComplaintView.notRubbishMail();
                    }
			        break;
			    case "refuseMail":
                    top.BH("reject");
                    var email = args.email;
			        if (email && mailboxComplaintView.isAllowRefuseEmailaddr(email)) {
                        mailboxComplaintView.model.set({from:email});
                        mailboxComplaintView.spamMail();
			        }
			        break;
			    case "markAll": //全部标记已读
			        message = "正在标记邮件...";
			        messageSuccess = "所选邮件标记成功";
			        M139.UI.TipMessage.show(message);
			        if (!args.type && mailboxModel.get("isSearchMode")) {
			            args.type = "search";
			        }
			        var doMarkAll = mailboxModel.markAllRead(args.fid, args.type, commandCallback);
			        if (!doMarkAll) { //未读数为0，没有操作
			            M139.UI.TipMessage.hide(); 
			        }
			        break;
			    case "deleteAll"://全部删除未读
			        message = "正在删除邮件...";
			        messageSuccess = "所选邮件已删除";
			        $Msg.confirm(
                       "确实要删除这" + mailboxModel.getFolderInfo().stats.unreadMessageCount + "封邮件吗？",
                       function () {
                           M139.UI.TipMessage.show(message);
                           mailboxModel.deleteAllUnread(args.fid, commandCallback);
                       }
                    );
	    	        break;
                case "deleteAllOrdinary": //全部删除（普通删除，移到已删除文件夹）
                    mailboxModel.deleteAllOrdinary();
                    break;
			    case "open": //打开文件夹
			        $App.showMailbox(Number(args.fid));
			        break;
			    case "reply": 
			    	var mid;
			        var current=$App.getCurrentTab();
			        /*if($App.getCurrentTab().name.indexOf("readmail_") > -1) {
                      $App.close($App.getCurrentTab().name);
                  	}*/
			        /*if (!mid) {
			            if (!mids || mids.length == 0) {
			                $Msg.alert("请选择邮件");
			                return false;
			            } else {
			                mid = mids[0];
			            }
			        }*/
			        
			        //分栏读信时邮件列表勾选优先级 > 读信
			        if(mids && mids.length>0){ 
			        	mid = mids[0]
			        } else if (!$App.isSessionMode()){
			        	mid = mailboxModel.get("mid");
			        }
			        if(!mid){
			            $Msg.alert("请选择邮件");
			            return false;
			        }
			        
			        var params = {
			            mid:mid,
			            type: args.all ? "replyAll" : "reply",
			            withAttach: args.attach,
			            userAccount : top.$User.getDefaultSender(),
			            lastTabName: current.name
			        };
			        if(args.email){
			        	params.userAccount = args.email;
			        }

                    // 判断是否需要是替换当前标签（新开标签后model和view会发生变化）
                    // 这两个操作必须放在新开标签前
                    var isReadMail = $App.isReadMail();
                    var isReadSessionMail = $App.isReadSessionMail();

			        $App.show('compose', params);
			       
			        if (isReadMail && !isReadSessionMail) {
                       $App.getView("tabpage").replace(current.name, $App.getCurrentTab().name);
                   	}			        
			        break;
			    case "forward":
			    	var mid;
			    	if (!$App.isReadSessionMail()) {
			    		mid = mailboxModel.get("mid");
			    	}
			        
			        if(mids && mids.length>0){ mid = mids[0]} //转发当前邮件
			        var title = "";//转发多封时标题
			        if (!mid) {
			            if (!mids || mids.length == 0) {
			                $Msg.alert("请选择邮件");
			                return false;
			            } else {
			                if (mids.length>1) {
			                    //同时转发多封，强制按附件转发
			                    title = mailboxModel.getMailById(mids[0]).subject;
			                    args.attach = true;
			                    mid = mids;
			                } else {
			                    mid = mids[0];
			                }
			            }
			        }
					
					//列表选择多封邮件，强制按附件转发
					if(mids && mids.length > 1){
						title = "";
						args.attach = true;
						mid = mids;
					}
					
			        //var mail= mailboxModel.get("mailListData");
			        //add by zsx 如果传入的有代收邮箱，把代收邮箱传递
			        var pop ={};
			        if (args.email){
			        	pop.userAccount = args.email;
			        }
			        if (args.attach) {
			            $App.forwardAsAttach(mid,title,pop);
			        } else {
			            $App.forward(mid,pop);
			        }
			        break;
			    case "showTraffic":
				args.email.isContactsMail = true;
			        $App.searchMail(args.email,args.thisEmail);//搜索的当前人的邮箱
			        break;
			    case "addVip":
                    /*
			        var addrDialog = top.M2012.UI.Dialog.AddressBook.create({
			            filter: "email","getDetail":true,
			            items: []
			        });
			        addrDialog.on("select", function (e) {
			            var result = e.value;
			            console.warn(e);
			            if (result.length > 0) {
			                mailboxModel.addVipContact(result);
			            }
			        });*/

			        Contacts.addVIPContact(function () {
			            $App.close("vipEmpty");
			            $App.searchVip();
			        });
			       
			        break;
			    case "viewMail":
			        var searchOptions = { fid: args.fid, flags: args.flags }
			        
			        if (args.flags=="important") { 
			            searchOptions = { fid: args.fid, condictions: [{ field: "priority", operator:"",value:"1"}] }
			        } else if (args.flags == "all") {
			            $App.showMailbox(args.fid);
			            return;
			        }

			        $App.searchMail(searchOptions);
			        break;
			    case "viewUnread": //查看未读
			        var searchOptions = { fid: args.fid, flags: { read: 1 } }
			        if (mailboxModel.get("isSearchMode")) {//如果是在搜索结果页查看未读，继承原来的搜索条件
			            if (args && args.inherit) { //继承原有搜索条件
			                searchOptions = mailboxModel.get("searchOptions");
			            }
			            if (searchOptions.flags) {
			                searchOptions.flags["read"] = 1
			            } else {
			                searchOptions.flags = { read: 1 };
			            }

			        }
			        if (args.label) { //标签未读
			            searchOptions.label = args.label;
			        }
			        /*var unreadflags = { read: 1 };
			        if (mailboxModel.isStarMode()) {
			            unreadflags["starFlag"] = 1;
			        }*/
			        $App.searchMail(searchOptions);
			        break;
				case "viewUnreadContactMails":
					var searchOptions = mailboxModel.get("searchOptions");
					top.$App.getView("mailbox_other").model.set("IamFromLaiwang",true);//设置是来往邮件的搜索
					top.$App.getView("mailbox_other").model.set("UnReadIamFromLaiwang",false);//点击未读后，再重新点更多，会用影响，清楚此影响
					//删除已读的标识
					if(searchOptions.flags){
					//	delete searchOptions.flags["read"];
						delete searchOptions.flags;
					}
					$App.searchMail(searchOptions);
					break;
			    case "viewReply": //查看已回复
			        $App.searchMail({ fid: args.fid, flags: { replied: 1 } })
			        break;
			    case "unfold": //展开文件夹
			        $App.trigger("unfoldCommand", { type: args.type });
			        break;
			    case "addFolder": //添加文件夹
			        new M2012.Folder.View.AddFolder({ model: folderModel ,email:args.email,comefrom:args.comefrom,mid:args.mid}).render();
			        break;
			    case "addTag": //添加标签
			        new M2012.Folder.View.AddTag({ model: folderModel ,email:args.email,comefrom:args.comefrom,mid:args.mid}).render();
			        break;
			    case "filter": //打开过滤器
			        var filterParam = { fid: (args.fid || null) };

			        if ($App.isTagFolder(args.fid)) { //是标签文件夹
			            filterParam = { labelId: args.fid };//是标签文件夹
			        }

			        $App.show("createType", filterParam);
			        break;
			    case "folderManage":
			        $App.show("tags");
			        if ($.browser.msie && $.browser.version == 6) {
			            M139.Event.stopEvent();
			        }
			        break;
			    case "inboxSub":
			        folderModel.setInboxSub(args.fid,args.type);
			        break;
			    case "showStar":
			        $App.searchMail({ flags: { starFlag: 1 } })
			        break;
			    case "autoFilter": //弹出分类规则
			        new M2012.Folder.View.AutoFilter({ model: folderModel ,actionType:"folder",email:args.email,name:args.name}).render();
			        break;
			    case "autoFilterTag": //弹出自动标签设置
			        new M2012.Folder.View.AutoFilter({ model: folderModel, actionType: "tag", email: args.email,name:args.name}).render();
			        break;
			    case "pop"://代收
			        var options = {};
			        if (args && args.fid) {
			            var info = $App.getFolderById(args.fid);
			            options.id = info.popId;
			        }
			        messageSuccess = "已向服务器提交代收命令，请稍后检查您的代收文件夹";
			        
			        mailboxModel.syncPOPAccount(options, function () {
			            commandCallback();
			        })
			        break;
			    case "addPop":
			        $App.show("addpop");
			        break;
			    case "clear": //清空文件夹
			        $Msg.confirm(
                        "您确定要清空吗?",
                        function () {
                            folderModel.clearFolder(args.fid, function () {

                                if (mailboxModel.get("fid") == args.fid) { //如果清空当前文件夹，跳转到收件箱
                                    $App.close();
                                }
                                commandCallback();
                            });
                        },
                        {
                            title: "清空文件夹",
                            icon: "warn"
                        }
                    );
			        
			        break;
			    
			    case "newWindow":
			        var fid = mailboxModel.getFolderInfo().fid;
			        $App.openNewWin(mids);
			        //window.open("/m2012/html/index.html?sid=" + $App.getSid() + "&t=newwin&mid=" + mids+"&fid="+fid);
			        break;
			    case "jump":
			        $App.jumpTo(args.key);
			        break;
			    case "show":
			        $App.show(args.key);
			        break;
			    case "importMail": // 导入邮件
			        $App.registerView("importMailDialog", $Msg.open({
			            url : "importmail.html",
			            dialogTitle : "导入邮件",
			            height : 165,
			            name : "importmaildialog"
			        }));
			        break;
			    case "exportMail": //导出选中的邮件
			        if (checkSelect()) {
			        	if ($App.getUserCustomInfo("26") === "1") {
			        		new M2012.Mailbox.Model.Export().exportMail(mids);
			        	} else {
			        		$Msg.confirm([
			        			mids.length > 1 ? "<p>导出的文件为压缩文件，请解压后使用。</p>" : "",
			        			"<p>建议安装Foxmail、Outlook邮件客户端查看eml 邮件。</p>",
			        			'<div style="margin-top:10px;"><input type="checkbox" id="exportmail_tips_checkbox" /><strong style="position:relative;top:1px;padding-left:3px;">不再提示</strong></div>'].join(""), function() {
			        				if (document.getElementById("exportmail_tips_checkbox").checked) {
			        					$App.setUserCustomInfo("26", "1");
			        				}
			        				new M2012.Mailbox.Model.Export().exportMail(mids);
			        		}, {
			        			icon : "warn",
								buttons : ["导出邮件", "取消"],
								isHtml : true,
								dialogTitle : "导出邮件"
			        		});
			        	}
			        }
			        break;
			    case "covtoggle":
			    	$App.trigger('conversationToggle', { sessionId:args.mailSession, doAction:args.doAction, callBack: args.callBack});
			    	break;			   
			    case "backupMail":  //备份到网盘
			        if (checkSelect()) {
				        var backupType = $App.getCurrentTab().title == '服务邮件'? 1:'';//为1是备份到备份邮件下的服务邮件
			            $Msg.confirm('您选择的邮件将会备份到“彩云网盘”中，是否确定备份?',
                            function () {
                                if (mids.length > 100) {
                                    M139.UI.TipMessage.show("备份失败，单次备份不能超出100封", {
                                        className: "msgRed",
                                        delay: 3000
                                    });
                                    return;

                                }
                                model.backupMail(mids,backupType, function (res) {
                                    var res = res.responseData;
                                    if (res && res.code == "S_OK") {
                                        takeData(res['var']);
                                        BH('toolbar_backupMailSucess')
                                    } else {
                                        $Msg.alert('由于网络原因，邮件备份失败，请稍后再试！');
                                    }
                                });
                            },
                            {
                                icon: "warn",
                                isHtml: true,
                                dialogTitle: "邮件备份"
                            });
			        }
			        break;
		        case 'savetoNote':
		        	if (checkSelect()) {
                        model.savetoNote(mids, function (res) {
                            if (res.responseData && res.responseData["code"] == "S_OK") {
				                M139.UI.TipMessage.show("邮件已转存至和笔记 <a href='javascript:top.$App.show(\"note\")'>查看</a>");
				                var noteId = res.responseData["var"]["noteid"];         //返回新建的noteId
				            } else {
				                M139.UI.TipMessage.show("保存失败，请重试");
				            }
				            setTimeout(function () {
				                M139.UI.TipMessage.hide();
				            }, 3000);
                        });
			        }
		        	break;
            }

			function takeData(data, sucessNum) {
			    var s_num = parseInt(data.totalNum - data.errNum) + (sucessNum ? parseInt(sucessNum) : 0);//需要补上之前成功的
			    f_num = parseInt(data.errNum),
                f_mids = data.errMailIdList,
                backupDirId = data.backupDirId;
			    if (f_num == 0) {               //如果全部保存成功
			        if (s_num == 1) {           //如果只保存了1封
			            M139.UI.TipMessage.show('备份成功  <a href=\"javascript:;\" onclick=\'top.Links.show(\"diskDev\",\"&id='+backupDirId+'\",true);return false;\'>去查看</a>', { delay: 3000 });
			        } else if (s_num > 1) {     //如果保存了多封
			            M139.UI.TipMessage.show('备份成功' + s_num + '封邮件 <a href=\"javascript:;\" onclick=\'top.Links.show(\"diskDev\",\"&id='+backupDirId+'\",true);return false;\'>去查看</a>', { delay: 3000 });
			        }
			    } else if (f_num > 0) {
			        //如果有不成功的，进入递归
			        var message1 = '由于网络原因，邮件备份失败，请重试？',
                        message2 = '备份成功' + s_num + '封，备份失败' + f_num + '封，是否继续备份？';
			        $Msg.confirm(s_num + f_num == 1 ? message1 : message2,
                        function () {
                            model.backupMail(f_mids, function (res) {
                                var res = res.responseData;
                                if (res.code == "S_OK") {
                                    takeData(res['var'], s_num);
                                } else {
                                    $Msg.alert('由于网络原因，邮件备份失败，请稍后再试！')
                                }
                            });
                        },
                        {
                            icon: "warn",
                            isHtml: true,
                            dialogTitle: "邮件备份"
                        });
			    }
			}

			function checkSelect() { //是否选择了邮件
			    var select = true;
			    /*if( mailtype == 'sessionmail'){
                    if (!sessionIds || sessionIds.length == 0) {
			            select = false;
			        }
			    }else{*/
                    if (!mids || mids.length == 0) {
			            select = false;
			        }
			    // }
				if(comefrom == 'singleSessionMail'){
			        select = true;
			    }
			    if(select){
			        return true;
			    }else{
			        $Msg.alert("请选择邮件。");
			        return false;
			    }
			}
			



		},

		/** 获取会话邮件mids */
		getSessionTagsMids:function(mid){
			var container = $('#readTag_' + mid),
				mids = container.attr("data-mids");
			return mids ? mids.split(",") : [mid];
		},

		/** 获取会话邮件标签数 */
		getSessionTagsCount:function(mid){
			var container = $('#readTag_' + mid);
			return container.find("span[name='tag_item']").length;
		},

		getSelectedMail: function () {	
			var el =null;
		    var view = $App.getMailboxView();
		    if (view.listView) {
		        el = view.listView.$el;//订阅邮件多实例特殊处理
		    };	   		    
		    // 从跨页选择对象中取得列表中已选择邮件
		    var resultObj = this.model.getSelectedRow(el);
		    // 列表页，取选择的邮件
		    if (resultObj.mids && resultObj.mids.length && $App.getCurrentTab().name.indexOf('readmail_') == -1) {
		    	return resultObj;
		    } else {
		    	if ($App.getCurrentTab().name.indexOf('readmail_') > -1) {
		    		// 会话邮件列表
		    		if ($App.isReadSessionMail()) {
		    			var mid = $App.getCurrentTab().view.getCheckedMidArr();
		    		} else {
			    		var mid =  $App.getCurrMailMid();
			    		mid = mid ? [mid] : null;
			    	}
		    	} else {
		    		var mid = $App.getMailboxView().model.get("mid");
		    		mid = mid ? [mid] : null;
		    	}		    	

		    	// 用意不明，待确定
		    	if ($App.isSessionMode()) {
		    		var sessionId = $App.getCurrentTab().view.model.get('sessionId');
		    	} else {
		    		var sessionId = $("#div_maillist").find("tr[mid=" + mid+"]").attr("sessionId");
		    	}
	            
	            return {
	            	mids: mid,
	            	sids: sessionId ? [+sessionId] : null
	            }
		    }
		}

	})
});
﻿function createMailboxRenderFunctions(model,view) { 
    if(model && view){
        var fid = view.model.get("fid");
        var isShowFolderName = model.get("isSearchMode") && model.get("fid") > -1 && !model.isBillMode();
        var isSessionMailMode = $App.isSessionMode();
        var isSubscribeMode = model.isSubscribeMode();
        var isShowSummary = model.get("fid") == 7 ? true : model.get("showSummary");  //邮件备份页面要求显示摘要，这里判断下
        var contactsModel = M2012.Contacts.getModel();
        var isIE6 = $.browser.msie && $.browser.version == 6;
        var nameCache = {};
        var isVipCache = {};
        var emailCache = {};
        var vipEmails = model.getVipEmails();
        var vipEmailMap = {};
        var allAccounts = $User.getAccountListArray();
        var isShowMe = isSessionMailMode && $App.isSessionFid(fid) && !model.get("isSearchMode");
        if (vipEmails) {
            for (var i = 0, len = vipEmails.length; i < len; i++) {
                vipEmailMap[vipEmails[i]] = 1;
            }
        }
    }
    var colorMap = {
        0: { color: "#000000", title: "黑色" },
        1: { color: "#FF9800", title: "橙色" },
        2: { color: "#339A67", title: "绿色" },
        3: { color: "#2D5AE2", title: "蓝色" },
        4: { color: "#7F0081", title: "紫色" },
        5: { color: "red", title: "红色" }
    }
    var now = new Date();
    if (M139._ClientDiffTime_) {
        now = new Date(new Date() - M139._ClientDiffTime_);//根据客户端时间与服务端日期的差值，计算真实服务器时间
    }
    var nowObj = {
        times: now.getTime(),
        years: now.getFullYear(),
        month: now.getMonth(),
        date: now.getDate(),
        hour: now.getHours(),
        minutes: now.getMinutes()
    };

    var remindIcoTemplate = [''
    , '<a href="javascript:;" class="{2}" name="mailtask">'
    , '<span mid="{0}" status="{1}" taskDate="{3}"></span>'
    , '</a>'
    , ''].join('');

    var startIconTemplate = '<div class="maillist-starwarp"><i class="i_starM" name="list_starmail"></i></div>';

    return {//渲染邮件列表的自定义函数
        getStatus: function () {

            var flags = this.DataRow["flags"];
            var logoType = this.DataRow["logoType"];
            var unread = flags["read"] == 1;
            if (this.DataRow["billFlag"] && logoType) {
                if (logoType == 2) {
                    return "<i class=\"i_m_rss\" title='服务邮件'></i>";
                } else if (logoType <= 1) {
                    return "<i class=\"" + (unread ? "i_m_money" : "i_m_moneyg") + "\"  title='账单邮件'></i>";
                } else if (logoType == "4") {
                    return "<i class=\"i_m_yo\" title='语音信箱'></i>";
                } else {
                    return "<i class='m139' title='系统邮件'></i>"
                }
                
            } else if (this.DataRow["subscriptionFlag"]) {
                return "<i class=\"" + (unread ? "i_m_rss" : "i_m_rssg") + "\" title='订阅邮件'></i>";
            } else if (logoType == 1) {
                return "<i class='m139' title='系统邮件'></i>"
            } else if (flags["top"]) {
                return "<i class='i_m_d' title='置顶'></i>"
            } else if (flags["fixedtime"] == 1) {
                return "<i class='i_m_sd' title='定时邮件'></i>";
            } else if (flags["read"] == 1) {
                return "<i class='i_m_n' title='未读邮件'></i>";
            } else if (flags["replied"] && flags["forwarded"]) {
                return "<i class='i_m_o2h' title='已回复已转发'></i>";
            } else if (flags["replied"]) {
                return "<i class='i_m_yhf' title='已回复'></i>";
            } else if (flags["forwarded"]) {
                return "<i class='i_m_o2h' title='已转发'></i>"
            } else if (flags["recallok"] == 1) {
                return "<i class='i_m_chui' title='已撤回'></i>"
            }
            return "<i class='i_m_o' title='普通'></i>";

        },
        getFolder: function () {
            if (isShowFolderName) {
                var fid = this.DataRow["fid"];
                var folderInfo = $App.getFolderById(fid);
                if (folderInfo && !model.isSubscribeMode()) {
                    var folderName = folderInfo["name"].trim();
                    return "[" + folderName + "]";
                } else {
                    return "";
                }

            } else {
                return "";
            }
        },
        getSubjectColor: function (number) {
            if (number == 0) return "";
            var result = "";
            if (colorMap[number]) {
                result = "color:" + colorMap[number].color + ";";
            }
            return result;
        },
        getSubjectPadding: function () {
            if (isSessionMailMode) {
                var mailnum = this.DataRow.mailNum;
                if (mailnum == 0) {
                    return "padding-right:0px"
                };
            } else {
                if(model.get('layout') != 'left') {
                    return "padding-right:0px"
                }                
            }
        },
        getRowStyle: function (status) {
            if (this.DataRow["flags"] && this.DataRow["flags"]["read"] == 1) {
                this.newMailCount++;
                return "fw_b";
            } else {
                return '';
            }
        },
        getAttach: function () {
            var dr = this.DataRow;
            if (this.DataRow["flags"]["attached"]) {
                return "i_atta";
            } else {
                return "";
            }
        },
        getPriority: function (priority) {
            if (priority == 1) {
                return "i_exc i_excOn";
            } else {
                return "i_exc";
            }
        },
        getFrom: function (from) {//获取发件人邮件地址
            if (this.DataRow["fid"] == 2 || this.DataRow["fid"] == 3) {		//草稿箱，发件箱时显示接收人
                from = this.DataRow["to"];
                if (from.indexOf(",") > 0) {
                    from = from.split(",")[0];
                }
                if (this.DataRow["to"].trim() == "") {
                    this.DataRow["to"] = "(无)";
                }
            }
            return $T.Html.encode(from);
        },
        //获取发件人姓名
        getName: function (from) { 

            if (this.DataRow["fid"] == 2 || this.DataRow["fid"] == 3) {
                //草稿箱，发件箱时显示接收人
                if(!isShowMe){ //非会话模式
                    from = this.DataRow["to"];
                    if (from.indexOf(",") > 0) {
                        from = from.split(",")[0];
                    }
                }
            }
            if (!nameCache[from]) {
                var name = $T.Html.encode(contactsModel.getAddrNameByEmail(from) || "(无)");

                if (this.view.model.get("order") == "from" || this.view.model.get("order") == "to") {
                    name = $T.Html.encode(from);
                }

                //产品新需求，会话模式下，邮件地址是自己时显示“我”
                if(isShowMe){
                    var email = $Email.getEmail(from);
                    if( $.inArray(email, allAccounts) > -1){
                        name = "我";
                    }                    
                }

                // 如果是收件箱订阅邮件入口，返回“订阅邮件”
                var mid = this.DataRow.mid;
                if (model.isClusterMail(mid) && !model.isClusterColumn()) {
                    name = "订阅邮件";
                }

                nameCache[from] = name;
            }
            if (isIE6) {
                nameCache[from] = $T.Utils.getTextOverFlow2(nameCache[from], 14,"...")
            }
            return nameCache[from];
        },

        /**
        * 会话邮件/聚合邮件数量
        * afterSubject 用于满足聚合邮件和会话邮件在不同位置显示邮件数量 "true":主题后输出数量 undefined:发件人后输出数量
        */
        getMailNum: function (afterSubject) {
            var numStr = '';
            // 当sessionEnable=2  普通列表＋聚合模式， 这是全新的模式，将用来替换原来的 0 普通列表模式。
            // 因为该模式下只有 普通邮件 和 订阅聚合邮件 （无会话），所以此种模式下mailSession和mailNum字段无效
            // sendTotalNum   仅在2 普通列表＋聚合模式下才有意义， 该字段表示 聚合邮件里邮件总数
            // sendNewNum   仅在2 普通列表＋ 聚合模式下才有意义， 该字段表示 聚合邮件里未读邮件总数
            var mailnum = this.model.getMailNum(this.DataRow);
            var sendId = this.DataRow.sendId;

            if ( this.DataRow.clusterCount > 0) {
                return '<span name="cluster_num">&nbsp;(' + this.DataRow.clusterCount + ')</span>';
            }

            if (mailnum > 1) { //订阅聚合
                if (sendId > 0 && this.model.underClusterFolder()) {
                    return '<span>&nbsp;(' + mailnum + ')</span>';
                }
                if (sendId == 0 && isSessionMailMode && $App.isSessionFid($App.getCurrentFid())) {
                    return '<span>&nbsp;(' + mailnum + ')</span>';
                }
                return '';
            } else {
                return '';
            }
            /*
            if (isSessionMailMode) {
                var mailnum = this.DataRow.mailNum;
                if (mailnum > 1) {
                    return afterSubject ? '<span>(' + mailnum + ')</span>' : '<span[' + mailnum + ']</span>';
                }
                numStr = mailnum > 1 ? '<span>(' + mailnum + ')</span>' : '';
            } else {
                if (this.DataRow.clusterCount > 0) {
                    var unreadSub = $App.getView("folder").model.get("newSubscriptionCount");
                    if (unreadSub > 0) {
                        numStr =  '<span name="cluster_num">(' + unreadSub + ')</span>';
                    } else {
                        numStr =  "";
                    }
                } else {
                    numStr =  '';
                }                
            }
            // 聚合邮件数量显示在发件人后，而主题后
            if (this.DataRow.sendId > 0) {
                return !type ? numStr : '';
            } else {
                return type ? numStr : '';
            }*/
        },

        /**
        * 会话邮件sessionId
        */
        getSessionId: function () {
            if (isSessionMailMode) {
                var sessionId = this.DataRow.mailSession;
                return " sessionId = '" + sessionId + "'";
            } else {
                return "";
            }

        },

        //星标属性样式
        getStarAttribute: function () {
            if (this.DataRow.flags) {
                var isHasStar = this.DataRow["flags"].starFlag == 1 ? 1 : 0;
                var temp = 'name="list_starmail" class = "i_starM {0}" val = "{1}" title="{2}" ';
                var val = isHasStar;
                var starClass = isHasStar ? 'i_starM_y' : '';
                var title = isHasStar ? '取消星标' : '标记星标';
                return $T.Utils.format(temp, [starClass, val, title]);
                //return temp.format(starClass,val,title);
            }
        },

        //任务邮件标记
        getRemindIco: function () {
                        
            if(isSessionMailMode && $App.getLayout() != 'list'){
                return '';
            }
            
            var mid = this.DataRow.mid;
            var taskFlag = this.DataRow.flags.taskFlag || 0;
            var taskDate = this.DataRow.taskDate || 0;

            var status = ['add', 'update', 'finish'][taskFlag]; //任务状态
            //status = ['add','update','finish'][Math.floor(Math.random()*(3-0)+0)]; //测试数据
            var map = {
                'add' : 'i_tx_n',
                'update' : 'i_tx_nb',
                'finish' : 'i_tx_ng'
            };
            return $T.Utils.format(remindIcoTemplate, [mid, status, map[status], taskDate]);
        },

        getStarIcon: function () {
            if (isSubscribeMode) { return "";}
            if (this.DataRow.flags) {
                var hasStar = this.DataRow["flags"].starFlag == 1 ? 1 : 0;
                if (hasStar) {
                    return startIconTemplate.replace("i_starM", "i_starM_y");
                } else {
                    return startIconTemplate;
                }
            }
        },

        //备注样式
        //<a href="javascript:;" mid="$mid" @getRemarkAttr()></a>
        getRemarkIco: function () {
            if (this.DataRow.flags && this.DataRow.flags.memoFlag) {
                var mid = this.DataRow.mid;
                return $T.Utils.format('<a href="javascript:;" mid="{0}" class="i_note_y"></a>', [mid]);
            } else {
                return '';
            }
        },
        getVipIcon: function () {
            var email = this.DataRow["from"];
            if (isVipCache[email] == undefined) {
                email = $Email.getEmailQuick(email);
                isVipCache[email] = Boolean(vipEmailMap[email]);
            }
            if (isVipCache[email]) {
                return "<a class=\"user_vip\"></a>";
            }
            return "";
        },
        getSubject: function (subject, isTitle) {
            var subject = $T.Html.encode(subject) || "(无)";
            if (isTitle) { //标题
                subject = subject.replace(/&amp;&lt;{(.+?)}&gt;&amp;/ig, "$1");
            } else {
                subject = subject.replace(/&amp;&lt;{(.+?)}&gt;&amp;/ig, "<b style='padding:2px;background-color:#F7D600'>$1</b>");
            }
            return subject;
        },
        getSize: function (size) {//获取邮件大小
            return $T.Utils.getFileSizeText(size, {
                byteChar: "字节"
            });
        },
        getDate: function (d, rec, taskDate) {
            var now = nowObj;

            // 待办任务列表显示待办任务的时间
            if ($App.getMailboxView().model.isTaskMode() && taskDate) {
                var formattedTaskDate;
                var expired = false;
                var today = new Date(nowObj.years, nowObj.month, nowObj.date);
                taskDate = new Date(Number(taskDate) * 1000);
                expired = taskDate < today;

                if (taskDate.getFullYear() == now.years) {
                    formattedTaskDate = taskDate.format("M月dd日");
                } else {
                    formattedTaskDate = taskDate.format("yyyy-M-dd(w)");
                }

                return "<span" + (expired ? " class='red'" : "") + " title='" + $Date.format("yyyy年M月dd日 hh:mm", taskDate) + "'>" + formattedTaskDate + "</span>";
            }

            if (fid == 1) {//收件箱使用收信日期字段
                if (rec) {
                    d = rec;
                }
            }
            var date = new Date(Number(d) * 1000);
            var result;
            //今天的邮件
            var t = now.times - date.getTime(); 	//相差毫秒
            if (t < 0) {
                if (t > -60000) {
                    result = "刚刚";
                } else {
                    result = $Date.format("yyyy-M-dd(w) hh:mm", date);
                }
            }else if (date.getFullYear() == now.years && date.getMonth() == now.month && date.getDate() == now.date) {
                var minutes = Math.round(t / 1000 / 60);
                if (minutes < 1) {
                    //minutes = 0;
                    result = "刚刚";
                }else if (minutes >= 1 && minutes < 60) {
                    result = minutes + "分钟前";
                } else {
                    result = Math.floor(minutes / 60) + "小时前";
                }
            } else if (date.getFullYear() == now.years) {
                result = date.format("M-dd(w) hh:mm");
            } else {
                result = date.format("yyyy-M-dd(w)");
            }
            return "<span title='" + $Date.format("yyyy年M月dd日 hh:mm", date) + "'>" + result + "</span>";
        },

        getSummary: function () {
            var summary = this.DataRow["summary"];
            if (isShowSummary == false) { //如果不显示摘要，返回空字符
                return "";
            }
            summary = summary.replace(/\s+/g, " ");       //过滤半角空格
            summary = summary.replace(/[\u3000]+/g, " "); //过滤全角空格
            summary = $T.Html.encode(summary);
            summary = summary.replace(/&amp;&lt;{(.+?)}&gt;&amp;/ig, "<b style='padding:2px;background-color:#F7D600'>$1</b>");
            if (summary) {
                return '<p class="gray" name="summary">' + summary.replace(/\$/ig, "") + "</p>";
            } else {
                return '<p class="gray" name="summary">&nbsp;</p>';
            }
        },
        getSectionName: function () {
            var orderField = this.model.get("order");
            var isTaskMode = this.model.get('isTaskMode');
            orderField = isTaskMode ? 'taskDate' : orderField;
            /*if (MB.moduleData && MB.moduleData["orderField"]) {
                orderField = MB.moduleData["orderField"];
            }*/
            var rp = this;
            function getPeriod(date1, date2) {
                if (rp.DataRow.flags["top"]) {
                    return "<b id=\"period_top\">置顶</b>"
                }
                date1.setHours(23, 59, 59);
                date2.setHours(23, 59, 59);
                var t = date2.getTime() - date1.getTime(); 	//相差毫秒
                var day = Math.round(t / 1000 / 60 / 60 / 24);
                var week_c = "星期" + ['日', '一', '二', '三', '四', '五', '六'][date1.getDay()]
                var w1 = date1.getDay(); w1 = w1 == 0 ? 7 : w1;
                var w2 = date2.getDay(); w2 = w2 == 0 ? 7 : w2;
                if (rp.model.get("fid") == 8) { //账单中心，按月份显示
                    if (date1.getYear() == date2.getYear()) {
                        return getPeriodForMonth(date1, date2);//同年显示月份
                    } else {
                        return getPeriodForYear(date1, date2);//不同年显示年份
                    }
                }
                if (day <= 1) {
                    if (date2.getDate() == date1.getDate()) {
                        return "<b id=\"period_today\">今天</b>";
                    } else if (day < 0) {
                        return "今天"; //未来的邮件
                    } else {
                        return "昨天";
                    }
                } else if (day == 2) {
                    if ((w2 - w1 == 2 || w2 - w1 == -5)) {
                        return "前天";
                    } else if ((w2 - w1 == 1 || w2 - w1 == -6)) {
                        return "昨天";
                    } else {
                        return "上周";
                    }


                } else if (day < 7) {
                    if (w1 < w2) {
                        return week_c;
                    } else {
                        return "上周";
                    }
                } else if (day < 7 + w2) {
                    return "上周";
                } else {
                    return "更早";
                }
            }
            function getPeriodForMonth(date1, date2) {
                if (date1.getMonth() == date2.getMonth()) {
                    return "本月";
                } else {

                    return (date1.getMonth() + 1).toString() + "月";
                }
            }
            function getPeriodForYear(date1, date2) {//年份
                if (date1.getYear() !== date2.getYear()) {
                    return (date1.getFullYear()).toString() + "年" + (date1.getMonth() + 1).toString() + "月";
                }
            }

            function getTaskPeriod(taskDate) {
                var today = new Date(nowObj.years, nowObj.month, nowObj.date);
                var tomorrow = new Date(nowObj.years, nowObj.month, +nowObj.date + 1);

                if (taskDate < today) {
                    return "<b>已过期</b>";
                } else if (taskDate > today && taskDate < tomorrow) {
                    return "<b>进行中</b>";
                } else {
                    return "<b>尚未开始</b>";
                }
            }

            if (orderField == "receiveDate" || orderField == "sendDate") {	//按日期排序
                date = new Date(Number(this.DataRow["sendDate"]) * 1000);
                if (this.model.get("fid") == 1) {
                    if (this.DataRow["receiveDate"]) {
                        date = new Date(Number(this.DataRow["receiveDate"]) * 1000);
                    }

                }
                var now = new Date();
                var diff = $Date.getDaysPass(date, now);
                var period = getPeriod(new Date(date), now);
                return period;

            } else if (orderField == "taskDate") {
                var taskDate = new Date(Number(this.DataRow["taskDate"]) * 1000);
                return getTaskPeriod(taskDate);
            } else {
                return orderField;
            }
        }
    }
}
M139.namespace("M2012.Mailbox.View", {
MailTag :Backbone.View.extend({
el:"#div_main",
events:{
    "click [name=tag_item] a": "deleteClick", //叉号点击移除标签
    "hover [name=tag_item]":"itemHover"
},
createInstance:function(){//单例模式
	if(!$App.getView("tagview")){
   		$App.registerView("tagview",new M2012.Mailbox.View.MailTag());
	}
	this.seqId=1;
   return $App.getView("tagview");
},
initialize: function(options){
   //alert("hello");
   var self=this;
   //this.el=options.el;
   this.model=$App.getMailboxView().model; //与邮件列表共用model,mailboxview是一开始就创建的

 
   
},

deleteClick: function (sender, target) {//删除标签按钮点击
	$Event.stopEvent(sender);

	// BUG
	// 当target为空时，无论如何个赋值都改变不了undefined的命运
	// 所有重新声明一个变量来保存从事件中获取的目标元素
	var targetElement;
    if (!target) {
    	targetElement = sender.srcElement || sender.target;
        targetElement = $(targetElement).parents("[name=tag_item]");
    } else {
    	targetElement = target;
    }

	
	var currentTab=$App.getCurrentTab();
	var tagId=$(targetElement).attr("tagid");	
	var mid = $(targetElement).closest('div[name=covMail_summary]').attr('data-mid') || // 会话模式摘要
			  $(targetElement).closest('div[name=covMail_mainbody]').attr('mid') ||		// 会话模式正文
			  $(targetElement).parents("tr").attr("mid");								// 邮件列表
  	mid = mid ? mid : currentTab.view.model.get("mid");									// 读信页（普通读信 or 分栏读信）	
	
	this.model.removeTagForMail([mid],tagId,function(){
		// 会话邮件列表or会话邮件正文删除不刷新
		var inCovMail = $(targetElement).closest('div[name=covMail_summary]')[0] || $(targetElement).closest('div[name=covMail_mainbody]');
		if(inCovMail ) {
			$App.trigger('deleteCovMailTag', {mid: mid, tagId: tagId});
		// 通知邮件列表数据改变
		} else {
			$App.trigger("mailboxDataChange",{render:true});//刷新整个视图
			$App.trigger("refreshSplitView");//渲染读信侧分栏
		}
		targetElement.remove(); //删除成功，移除dom
	    $App.trigger("reloadFolder");		
		$App.trigger("removeTag",{mids:[mid],labelId:tagId, currMid:mid});
	});
	BH("mailbox_tag_delete");

	return false;
},
itemHover:function(sender){
	var target=sender.srcElement || sender.target;
	if($(target).attr("name")!=='tag_item'){ //如果不是当前元素，冒泡到上级一直找到tagItem
		target=$(target).parents("[name=tag_item]");
	}
	if($(target).hasClass("tagOn")){
		$(target).removeClass("tagOn");
	} else{
		$(target).addClass("tagOn");
	}
},
attachHintForTag: function () {

    $Hint.register($("#tag_list span[name=tagMin]"), function (sender) {
        return ["<div>" , $(sender).attr("titleEx") , "&nbsp;<a id='btn_tagMinDelete' rel='",$(sender).attr("id"),"' href='javascript:'>[删除]</a></div>"].join("");
    });
    var self = this;
    $("#btn_tagMinDelete").die("click");
    $("#btn_tagMinDelete").live("click",function () {
        var id = $(this).attr("rel");
        return self.deleteClick(null,$("#"+id)); 
    });
},
render: function (tagIds, isMini) { //此render函数由repeater调用，上下文为repeater对象实例
        
 		var tags=$App.getTagsById(tagIds);
 		var arr = [];
 		
 		if (isMini == undefined) {
 		    isMini=this.model.get("layout") == "left";//邮件列表左右布局使用mini tag
 		}

		for(var i=0;i<tags.length;i++){
			var color=$App.getTagColor(tags[i]["folderColor"]);
			if(isMini){ //迷你型tag
			    arr = arr.concat(['<span id="tagMin_', Math.random().toString().replace(".", ""), '" name="tagMin" tagId="', tags[i].fid, '" titleEx="', tags[i].name, '" class="tagMin" style="border-color:', color,
				'"><span class="tagBody" style="background-color:',color,';border-color:',color,
				'" onclick="appView.showMailbox(', tags[i].fid, ')"></span></span>']);
			}else{
			    var tagHtml=['<span name="tag_item" tagId="', tags[i].fid,
			'" href="javascript:" class="tag" style="border-color:',color,
			'"><span class="tagBody" style="background-color:',color,
			';border-color:', color, '"><span bh="mailbox_tag_open" name="tag_span" onclick="appView.showMailbox(', tags[i].fid, ')">', tags[i].name,
			'</span><a href="javascript:" name="cl_tag" ><i class="i_cl_w"></i></a></span></span>'];
			    /*if ($App.getCurrentTab().group == "mailbox") { //邮件列表添加多一层div容器
			        tagHtml.unshift('<div class="TagDiv">');
			        tagHtml.push("</div>");
			    }*/
			    arr = arr.concat(tagHtml);
			}
		}
		/*if(isMini){
		    arr.unshift('<div>');
		    arr.push('</div>');
		}else{  //TagDdiv放外面,读信用unwrap去掉tagdiv
		    arr.unshift('<div class="TagDiv">');
		    arr.push("</div>");
		}*/
		return arr.join("");
}

})
});
M139.namespace("M2012.Mailbox.View", {
MailSetting :Backbone.View.extend({
el:"body",
events:{
    //"click #btn_layout_list,#btn_layout_left,#btn_layout_top":"layoutClick", //叉号点击移除标签
    //"hover [name=tag_item]":"itemHover"
},
template: [ '<div class="viewSet">',
     '<dl class="clearfix" id="dl_layout">',
         '<dt>列表视图：</dt>',
         '<dd>',
 			'<a href="javascript:" title="分页列表" class="viewa" id="btn_layout_list"></a>',
 			'<a href="javascript:" title="上下分栏" class="viewa2" id="btn_layout_top" > <span class="top1"></span></a>',
 			'<a href="javascript:" title="左右分栏" class="viewa3" id="btn_layout_left"> <span class="left1"></span> </a>',
 		'</dd>',
     '</dl> ',
 	'<div class="line"></div>',
 	'<dl class="clearfix">',
 		'<dt>列表显示：</dt>',
 		'<dd><input type="checkbox" id="chk_summary" class="mr_5"><label for="chk_summary">正文摘要</label></dd>',
 		'<dd><input type="checkbox" id="chk_size"  class="mr_5"><label for="chk_size">邮件大小</label></dd>                ',
 	'</dl>',
 	'<dl class="clearfix">',
 		'<dt>显示密度：</dt>',
 		'<dd><div id="div_pagestyle"></div></dd>',
 	'</dl>',
 	'<dl class="clearfix">',
 		'<dt>每页显示：</dt>',
 		'<dd><div id="div_pagesize"></div></dd>',
 	'</dl>',
 	'<div class="line"></div>',
 	'<dl class="clearfix">',
 		'<dt>邮件列表视图：</dt>',
 		'<dd><input type="checkbox" id="chk_session" class="mr_5"><label for="chk_session">会话模式</label></dd>',
 	'</dl>  ',
 '</div>'].join(""),

initialize: function(options){
   //alert("hello");
   var self=this;
    //this.el=options.el;
   console.log(options.el);
   if (options.el) {
       this.setElement(options.el);
   }
   this.model=$App.getMailboxView().model; //与邮件列表共用model,mailboxview是一开始就创建的


   
},
layoutClick: function (btn) {
    var id = btn.id;
    $(btn).parents("dl").find("a").removeClass("viewaOn");
    $(btn).addClass("viewaOn");
    /*
	switch(id){
	    case "btn_layout_list":
	        this.model.set("layout", "list");
	        $App.setAttrs({ "list_layout": 0 });//保存到服务器
		    break;
	    case "btn_layout_left":
	        this.model.set("layout", "left");
	        $App.setAttrs({ "list_layout": 2 });//保存到服务器
		    break;
	    case "btn_layout_top":
	        this.model.set("layout", "top");
	        $App.setAttrs({ "list_layout": 1 });//保存到服务器
		    break;
	}
	this.popup.close();
	appView.trigger("showMailbox");*/
},

saveSetting:function(){
    $App.getMailboxView().model.clearSuperSelect();
    var self = this;
    //this.model.set("layout", this.layout);
    var showSummary = $("#chk_summary").attr("checked") ? true : false;
    this.model.set("showSummary", showSummary);
    var showSize = $("#chk_size").attr("checked") ? true : false;
    self.model.set("showSize", showSize);

    var sessionMode=$("#chk_session").attr("checked")?1:0;

    var layoutMap = {
        "btn_layout_list":0, "btn_layout_top":1, "btn_layout_left":2
    }
    var selectedLayoutId = $("#dl_layout .viewaOn")[0].id;
    this.model.set("layout", this.model.getLayoutStr(layoutMap[selectedLayoutId]));

    var pageSize = this.dropMenu.getSelectedItem().value;
	var pageStyle = this.styleDropMenu.getSelectedItem().value;
	
    this.model.set("pageSize", pageSize);
	this.model.set("pageStyle", pageStyle);
	
    $App.setAttrs({
        "mailcontentdisplay": showSummary?1:0,
        "mailsizedisplay": showSize ? 1 : 0,
        "preference_letters": pageSize,
        "list_layout": layoutMap[selectedLayoutId],
		"_custom_pageStyle": pageStyle
    });//保存到服务器
	
    this.model.set("pageStyle", pageStyle);
	$App.trigger('pageStyleChange',{pageStyle:pageStyle});
	try{
		if($App.getTabByName('preference')){
			$App.getTabByName('preference').isRendered = false; //刷新设置页
		}
	}catch(e){}

    $App.setReadMailMode(sessionMode, function (mode) {
        
        sessionMode === 1 ? BH('set_sessionmode') : BH('cancel_sessionmode');

        appView.trigger("showMailbox", { comefrom: "commandCallback" });

        
        $App.trigger("refreshSplitView");//刷新分栏
        
    })

    for (key in this.behaviorList) { //上报有变更过的行为点
        if (key) {
            BH(key);
        }
    }

    this.popup.close();

    //appView.trigger("showMailbox");

},
pushBehavior: function (key) {
    this.behaviorList[key] = 1;
},
render:function(){
    var self = this;
    this.behaviorList = {};
		var popup=M139.UI.Popup.create({
		name:"maillist_set",
		target:self.$el.find("#btn_setting")[0],//document.getElementById("btn_setting"),
		buttons: [{ text: "确定", cssClass: "btnSure", click: function () { self.saveSetting() } },
			{text:"取消",click:function(){popup.close();}}
		],
		content: this.template,
		autoHide:true
		}
		);
		this.popup=popup;
		
		popup.render();
		var layout = this.model.get("layout");
		var map = {
		    list: "#btn_layout_list", top: "#btn_layout_top", left: "#btn_layout_left"
		}
		$(map[layout]).addClass("viewaOn");
		//改变邮件列表布局
		$("#btn_layout_list,#btn_layout_left,#btn_layout_top").click(function (args) {
		    
		    self.layoutClick.call(self, this);
		    self.pushBehavior("mailbox_layout_ok");
		});
		//是否显示正文摘要
		$("#chk_summary").attr("checked",this.model.get("showSummary")).change(function(){
		    /*self.model.set("showSummary", $(this).attr("checked") ? true : false);
		    $App.setAttrs({ "mailcontentdisplay": $(this).attr("checked") ? 1 : 0 });//保存到服务器
			appView.trigger("showMailbox");*/
		    self.pushBehavior("mailbox_summay_ok");
		})
		
		//是否显示邮件大小
		$("#chk_size").attr("checked",this.model.get("showSize")).change(function(){
		    /*self.model.set("showSize", $(this).attr("checked") ? true : false);
		    $App.setAttrs({ "mailsizedisplay": $(this).attr("checked") ? 1 : 0 });//保存到服务器
			appView.trigger("showMailbox");*/
		    self.pushBehavior("mailbox_size_ok");
		})
		
		
		//切换读信模式 code by arway
        $("#chk_session").attr("checked",$App.isSessionMode()).change(function(){
           /* var self = this;
            var setmode = $App.isSessionMode() ? 0 : 1; // 1 -> 0  0 -> 1
            $App.setReadMailMode(setmode,function(mode){
                $(self).attr('checked', mode == 1 ? true : false);
                appView.trigger("showMailbox");
            })*/
            self.pushBehavior("mailbox_session_ok");
        });


        this.dropMenu=new M2012.UI.DropMenu.create({
            container: $("#div_pagesize"),
            menuItems: [{ text: "20封", value: 20 }, { text: "50封", value: 50 }, { text: "100封", value: 100 }]
        });
        var pageSize = this.model.get("pageSize");
        
        this.dropMenu.setSelectedValue(pageSize);
        popup.on("close", function (args) {
            
            if ($(args.event.target).parents(".menuPop").length > 0) {
                args.cancel = true;
            }            
        });
		
		
		//显示密度
		this.styleDropMenu=new M2012.UI.DropMenu.create({
            container: $("#div_pagestyle"),
            menuItems: [{ text: "紧凑", value:3}, { text: "适中", value:1}, { text: "宽松", value:2 }]
        });
        var pageStype = this.model.get("pageStyle") || 1;
        this.styleDropMenu.setSelectedValue(pageStype);
		
}

})
});
﻿M139.namespace("M2012.Mailbox.Model", {
ContextMenu : Backbone.Model.extend({
 initialize:function(options){
     this.mailboxModel = options.mailboxModel;
 },

 getFolderMenu:function(type,fid){
 	var data={
 	    1: [{ text: "打开", command: "open" }, 
            { isLine: true },
            { text: "查看未读", command: "viewUnread" }, { text: "收件箱全部标记为已读", command: "markAll" },
            { isLine: true },
            { text: "创建收信规则", command: "filter" }],
 	2:[ { text: '打开', command:"open" }],
 	3 : [
        { text: '打开', command:"open"},  //已发送
        { isLine: true },
        { text: '全部标记为已读',command:"markAll"},
        { text: '查看已回复邮件',command:"viewReply"}
 	],
 	4: [{ text: '打开', command: "open" }, { isLine: true }, { text: "全部标记为已读", command: "markAll" }, { text: '清空已删除', command: "clear" }],
 	5: [{ text: '打开', command: "open" }, { isLine: true }, { text: "全部标记为已读", command: "markAll" }, { text: '清空垃圾邮件', command: "clear" }],
 	6: [{ text: '打开', command: "open" }, { isLine: true }, { text: "全部标记为已读", command: "markAll" }, { text: '清空病毒邮件', command: "clear" }],
 	10: [{ text: '打开', command: "open" }, { isLine: true }, { text: "全部标记为已读", command: "markAll" }, { text: '清空归档邮件', command: "clear" }],
 	11: [{ text: '打开', command: "open" }, { isLine: true }, { text: "全部标记为已读", command: "markAll" }, { text: '清空广告邮件', command: "clear" }],
	12: [{ text: '打开', command: "open" }, { isLine: true }, { text: "全部标记为已读", command: "markAll" }, { text: '清空商讯生活邮件', command: "clear" }],
 	8: [{ text: '打开', command: "open" }, { isLine: true }, { text: "查看未读", command: "viewUnread" }, { text: "全部标记为已读", command: "markAll" }],
 	9: [{ text: '打开', command: "open" }, { isLine: true }, { text: "查看未读", command: "viewUnread" }, { text: "全部标记为已读", command: "markAll" }],
 	myfolders: [{ text: "打开", command:"folderManage" }, //我的文件夹
            { isLine: true },
            { text: "展开二级目录", command: "unfold", type: "custom" },
            { text: "二级目录全部标记为已读", command: "markAll", type: "custom" },
            { isLine: true },
            { text: "创建收信规则", command: "filter" }],

    star: [{ text: '打开', command: "showStar" },  
        { isLine: true },
        { text: '全部标记为已读', command: "markAll",type:"star"},
        { text: '创建收信规则', command: "filter" }],
 	other: [{ text: "展开", command: "unfold", type: "other" }],
 	groupMail: [{ text: "打开", command: "jump", key: "groupMail" }],
 	attachlist: [{ text: "打开", command: "jump", key: "attachlist" }],
    custom : [
        { text: '展开', command:"unfold",type:"folder"},
        { isLine: true },
        { text: '全部标记为已读', command:"markAll"},
        { text: '创建收信规则', command:"filter"},
        { isLine: true },
        { text: '新建文件夹', command:"addFolder"},
        { text: '文件夹管理', command: "folderManage" },
         { isLine: true },
         { text: '在收件箱下显示', command: "inboxSub",type:1 }
    ],
    customSub: [
    { text: '展开', command: "unfold", type: "folder" },
    { isLine: true },
    { text: '全部标记为已读', command: "markAll" },
    { text: '创建分拣规则', command: "filter" },
    { isLine: true },
    { text: '新建文件夹', command: "addFolder" },
    { text: '文件夹管理', command: "folderManage" },
     { isLine: true },
     { text: '取消显示', command: "inboxSub", type: 0 }
    ],
    tag : [
        { text: '展开', command: "unfold", type: "tag" },
        { isLine: true },
        //{ text: '全部标记为已读', command: "markAll",type:"tag" },
        { text: '新建标签', command: "addTag" },
        { isLine: true },
        { text: '创建收信规则', command: "filter" },
        { text: '标签管理', command:"folderManage" }
    ],
    pop : [
        { text: '展开', command: "unfold", type: "pop" },
        { isLine: true },
        { text: '全部收取', command: "pop", visible: "father" },
        { text: '全部标记为已读', command:"markAll",type:"pop"}, 
        { isLine: true },
        { text: '新建代收邮件账户', command: "addPop" },
        { text: '其他邮箱管理', command:"folderManage" }
    ], popSub: [
        { text: '打开', command: "open", type: "pop" },
        { isLine: true },
        { text: "查看未读", command: "viewUnread" },
        { text: '收取邮件', command: "pop"},
        { text: '全部标记为已读', command: "markAll"},
        { isLine: true },
        { text: '新建代收邮件账户', command: "addPop" },
        { text: '其他邮箱管理', command: "folderManage" }
    ]
 	}
 	var result; 
 	if (type == "system") { //系统文件夹
 	    
 	    result = data[fid];
 	   
 	} else {

 	    result = data[type];
 	    result.args = { fid: Number(fid) }; //统一添加fid参数

 	    if (fid) { //特殊处理，在二级子文件夹，将菜单定义中父文件夹的展开统一改成打开
 	        
 	        if (type == "pop") {
 	            result = data["popSub"];//pop子目录与父目录菜单不一样，偷粱换柱
 	        }

 	        result[0] = { text: '打开', command: "open" };
 	    }
 	}
 	$(result).each(function (i, n) {
 	    n.args = { fid: Number(fid) }; //统一添加fid参数
 	   
 	})
 	
 	return result;
 	
 },
//获取邮件列表右键菜单 isSingle，是否单封邮件
 getMailMenu: function (fid, isSingle) {
    this.mailboxModel = $App.getMailboxView().model;
     var data = [];
     var currentFid = $App.getCurrentFid();
     if(currentFid === 7)return;
     if (isSingle) { //单封邮件
         data = [
             { text: '预览', command: "preview",bh2:"context_preview", items: [{html:"<b>读信预览</b>"} ]},
             { text: '新窗口打开', command: "newWindow", bh: "context_newWindow" },
             { isLine: true },
             { text: '回复发件人', command: 'reply', bh: "context_reply" },
             { text: '回复全部', command: 'reply',all:true, bh: "context_replyAll" },
             { isLine: true },
             //handleDifferentFolder(curFolderId,4),//delItem,
             //handleDifferentFolder(curFolderId,5),//spamItem,
             { text: '删除', command: "move", args: { fid: 4 }, bh: "context_delete" },
             { text: '举报', command: "spam", bh: "context_spam" },
             { isLine: true },
              { text: '标记为', items: this.mailboxModel.getMarkMenuItems(false,currentFid) , bh2: "context_mark"},
              { text: '标签', items: this.mailboxModel.getTagMenuItems(), bh2: "context_tag" },
             { text: '移动到', items: this.getMoveItem(), bh2: "context_move" }

         ];
     } else { //多封
         data = [
             { text: '删除', command: "move", args: { fid: 4 }, bh: "context_move" },
             { text: '举报', command: "spam", bh: "context_spam" },
             { isLine: true },
             { text: '标记为', items: this.mailboxModel.getMarkMenuItems(false,currentFid), bh2: "context_mark" },
             { text: '移动到', items: this.getMoveItem(), bh2: "context_move" }
         ];
     }
     //不显示举报入口
     if(!top.mailboxComplaintView.model.isShowComplaintBtn()){
        $.each(data, function (i, n) {
            if (n["command"] && n["command"] == "spam") {
                data.splice(i,1);
                return false;
            }
        });
     }

     //var currentFid = $App.getCurrentFid();
     if (currentFid == 5) { //特殊处理垃圾文件夹
         $.each(data, function (i, n) {
             if (n["command"] && n["command"] == "spam") {
                 data[i] = { text: '这不是垃圾邮件', command: "unSpam" };
             }
         });
     }
     if (currentFid == 4 || this.mailboxModel.get("isSearchMode")) { //特殊处理搜索视图，与已删除文件夹
         $.each(data, function (i, n) {
             if (n["text"] && n["text"] == "删除") {
                 data[i] = { text: '彻底删除', command: "delete", fid: currentFid};
             }
         });
     }
    var searchFolder =$App.getMailboxView().model.get("searchOptions") ;
    if(currentFid === 2 || (searchFolder && searchFolder.fid === 2)) {//特殊处理草稿箱
         $.each(data, function (i, n) {
             if (n["text"] && n["text"] === "移动到") {
                 data.splice(i,1);
             }
         });
     };
     
    return data;
 },

 //获取会话邮件列表右键菜单 isSingle，是否单封邮件
 getSessionMailMenu: function (fid, isSingle) {
     var data = [];
     if (isSingle) { //单封邮件
         data = [
             { text: '删除', command: "move", args: { fid: 4 }, bh: "context_delete" },
         //  { text: '举报', command: "spam", bh: "context_spam" },
         //  { isLine: true },
             { text: '标记为', items: this.mailboxModel.getMarkMenuItems() , bh2: "context_mark"},
         //  { text: '标签', items: this.mailboxModel.getTagMenuItems(), bh2: "context_tag" },
             { text: '移动到', items: this.getMoveItem(), bh2: "context_move" }
         ];
     } else { //多封
         data = [
             { text: '删除', command: "move", args: { fid: 4 }, bh: "context_delete" },
          //   { text: '举报', command: "spam", bh: "context_spam" },
          //   { isLine: true },
             { text: '标记为', items: this.mailboxModel.getMarkMenuItems(), bh2: "context_mark" },
             { text: '移动到', items: this.getMoveItem(), bh2: "context_move" }
         ];
     }
     //不显示举报入口
     /*
     if(!top.mailboxComplaintView.model.isShowComplaintBtn()){
        $.each(data, function (i, n) {
            if (n["command"] && n["command"] == "spam") {
                data.splice(i,1);
                return false;
            }
        });
     }*/

    return data;
 },

 getMoveItem:function(){
     var arr = this.mailboxModel.getFolderMenuItems("system");
     var customItems = this.mailboxModel.getFolderMenuItems("custom", { showCreate: true });
     if (customItems.length > 0) {
         arr.push({ isLine: true });
     }
     arr = arr.concat(customItems);
     /*var popItems = this.mailboxModel.getFolderMenuItems("pop");
     if (popItems.length > 0) {
         arr.push({ isLine: true });
     }
     arr = arr.concat(popItems);*/
     return arr;

 },
 readMail: function (mid,callback) {
     var data = {
         fid: 0,
         mid: mid,
         autoName: 1,                           //有些附件会没有文件名，此属性自动命名附件
         markRead: 0,                           //是否标记为已读   1：已读，0：不作操作保持原状
         returnHeaders:{Sender:"","X-RICHINFO":""},//为订阅平台增加参数
         filterStylesheets: 0,
         filterImages: 0,
         filterLinks: 0,
         keepWellFormed: 0,
         header:1,
         supportTNEF: 1,
         returnAntispamInfo: 1
     };
     $RM.readMail(data, function (result) {
         callback(result["var"]);
     });
 }

})
});

﻿/**
 右键菜单view
 * */

M139.namespace("M2012.Mailbox.View", {
ContextMenu :Backbone.View.extend({
el:"body",
template:"",
events:{
},
initialize: function(options){
   var self=this;
   
   // 由于mailboxModel在2.3版本实现了多实例化
   // 导致这里获取的model在运行过程中可能不正确
   // 在具体处理时还是要再次通过$App.getMailboxView().model进行获取
   // yeshuo
   this.mailboxModel = $App.getMailboxView().model;
   this.model = new M2012.Mailbox.Model.ContextMenu({ mailboxModel: this.mailboxModel });
   //因为dom还没生成，用live监听事件，统一给所有含有右键菜单的容器添加contextMenu事件
  //todo attach event on li
   $("#folder_main,#list_folder_other,#folder_custom,#pop_list,#tag_list,#div_maillist,#folder_other,#li_star,#btn_groupMail,#btn_attachlist,#folder_inbox").live('contextmenu', function (e) {
        self.mailboxModel = $App.getMailboxView().model;
   		var sender=this;
        var target = e.target;
        //alert(pos.x+","+pos.y);
        if(self.model.get("currentMenu")){ //如果上一个菜单还没消失则自动消失，避免出现多个菜单
        	self.model.get("currentMenu").remove();
        }
        
		var menuItems=[];
        switch(sender.id){ //根据点击区域生成不同菜单
        	case "folder_main"://点击系统文件夹
        	    //var fid=$(target).attr("fid"); //todo parents("[fid]")
        	    menuItems=self.getFolderMenu("system",e);
        	    break;
			case "list_folder_other"://点击其它文件夹
				menuItems=self.getFolderMenu("system",e);
				break;	
        	case "folder_custom"://点击自定义文件夹
        	//var fid=$(target).parents("li[fid]").attr("fid");
        	    menuItems = self.getFolderMenu("custom", e);
        	    break;
            case "pop_list"://点击pop文件夹
        	    menuItems = self.getFolderMenu( "pop", e);
        	    break;
            case "tag_list"://点击tag文件夹
        	    menuItems = self.getFolderMenu( "tag", e);
        	    break;
            case "div_maillist"://点击邮件列表
                if ($(target).closest(".dayAreaTable").length > 0) { //避免选中表头和section时出菜单
                    var fid = $App.getCurrentFid();
                    if($App.isSessionMode() && $App.isSessionFid(fid)){
                        menuItems = self.getSessionMailMenu(fid, e);
                    }else{
                        menuItems = self.getMailMenu(fid, e);                        
                    }

                } else {
                    return;
                } 
        	    break;
            case "li_star":
                menuItems = self.getFolderMenu("star", e);
                break;
            case "folder_other":
                menuItems = self.getFolderMenu("other", e); 
                break;
            case "btn_groupMail":
                menuItems = self.getFolderMenu("groupMail", e);
                break;
            case "btn_attachlist":
                menuItems = self.getFolderMenu("attachlist", e);
                break;
            case "folder_inbox":
                menuItems = self.getFolderMenu("myfolders", e);
                break;
            default:
                break;

        }
        self.model.set("menuItems", menuItems);
        self.render(e, sender.id);
		

        return false; //屏蔽浏览器右键默认行为
   }
   	);
   //$("div_maillist").live('contextmenu',function(e){showContextMenu(e,"mail")});
   

},
getPreviewMail: function () {
    this.mailboxModel = $App.getMailboxView().model;
    var mid = this.mailboxModel.getSelectedRow($App.getMailboxView().listView.$el).mids[0]; //取当前选中的一封mid
    var subject = this.mailboxModel.getMailById(mid).subject;
    subject = $T.Html.encode(subject);
    var src = 'readmailcontent.html?rnd=' + Math.random();
    /*var html = '<h3 id="viewSubject" style="color:#000;">'+subject+'</h3><hr>\
                <div class="info">\
                    <div id="viewP">\
                        <iframe id="previewContent" scrolling="no" noresize="noresize" src="'+ src + '" frameborder="0" style="width:100%;height:300px;">\
                        </iframe>\
                    </div>\
                    <div class="p-loading" style="position:absolute;left:0;top:0;width:100%;height:345px;"><div>\
                </div>';*/
    var html = ['<div class="dRound shadow indboxview">',
 	'<div class="dRoundBody">',
 		'<h3 id="viewSubject">',subject,'</h3>',
 		'<div class="indboxviewC">',
 			'<iframe id="previewContent" scrolling="no" noresize="noresize" src="' ,src, '" frameborder="0" style="width:100%;height:300px;"> </iframe>',
 		'</div>',
 	'</div>',
 '</div>'].join("");
    this.model.readMail(mid, function (result) { //调用服务端读信接口
        function writeMail() {
            console.warn("preview iframe loaded");
            var doc = $("#previewContent")[0].contentWindow.document;
            doc.open();
            doc.writeln(result.html.content);
            resizeFrm(doc);
            doc.close();
        }
        function resizeFrm(fdoc) {//重新计算宽高，用于滚动条显示

                var fbody = fdoc.body;
                var clientHeight, clientWidth;
                if (fbody.scrollHeight) {
                    clientHeight = fbody.scrollHeight;
                    clientWidth = fbody.scrollWidth;
                } else {
                    clientHeight = fbody.offsetHeight;
                    clientWidth = fbody.offsetWidth;
                }
                $("#previewContent").css({ 'height': clientHeight, 'width': clientWidth });

                //LI.find('.p-loading').remove();
            
        }
        if ($("#previewContent").length == 0) {
            $("#previewContent").load(function () { //iframe加载成功后再执行，否则domain未设置会跨域
                writeMail();
            });
        } else {
            writeMail();
        }

    })
    return html;

},

getFolderMenu: function (type, e) {//文件夹菜单
    fid = $(e.target).parents("li").attr("fid");
    if (type == "system" && fid > 10) {
        type = "customSub";
    }
    if (type == "custom" && fid <=12) {
        type="system";
    }
    return this.model.getFolderMenu(type,fid);


},
getMailMenu: function (fid, e) {//邮件列表菜单
    this.mailboxModel = $App.getMailboxView().model;
    var selectedMidList = this.mailboxModel.getSelectedRow($App.getMailboxView().listView.$el).mids;//获取选中项

    var isSingle;//是否单封
    var mid = $(e.target).parents("tr").attr("mid");
    // 1.鼠标不在已选择的范围内，取消所有，选中单封
    if ($.inArray(mid, selectedMidList) == -1) {
        isSingle = true;
        // 清空跨页选择
        this.unSelectedAll();
        if (mid) {
            $(e.target).parents("tr").find("input").attr("checked", true);
            this.mailboxModel.trigger("checkboxChange", $(e.target));
            //this.mailboxModel.trigger("mailSelectedChange", { count: 1 });
        }
    // 2.只有一封被选中
    } else if (selectedMidList.length==1) {
        isSingle = true;
        this.mailboxModel.trigger("checkboxChange", $(e.target));
    // 3.鼠标在已选择的范围内，不触发任何操作，保持当前选择结果不变
    } else {

    }
    return this.model.getMailMenu(mid,isSingle);
},

/** 会话邮件菜单 */
getSessionMailMenu: function (fid, e) {//邮件列表菜单
    var selectedSessionIdList = this.mailboxModel.getSelectedRow($("#div_maillist")).sessionId;//获取选中项

    var isSingle;//是否单封
    var sessionId = Number($(e.target).parents("tr").attr("sessionId"));
    if ($.inArray(sessionId, selectedSessionIdList) == -1) { //鼠标不在已选择的范围内，取消所有，选中单封
        this.unSelectedAll();
        isSingle = true;
        if (sessionId) {
            $(e.target).parents("tr").find("input").attr("checked", true);

            this.mailboxModel.trigger("checkboxChange");
        }
    } else if (selectedSessionIdList.length==1) { //只有一封被选中
        isSingle = true; 
        this.mailboxModel.trigger("checkboxChange");
    }
    return this.model.getSessionMailMenu(sessionId,isSingle);

},

unSelectedAll:function(){
    $App.getMailboxView().model.superSelectResult = {};
    $("#div_maillist").find(".dayAreaTable input[type=checkbox]").attr("checked",false);
},
//获取鼠标的绝对坐标
getMousePos:function(e){ 
	var x,y; 
	var e = e||window.event; 
	return { 
		x:e.clientX+document.body.scrollLeft+document.documentElement.scrollLeft, 
		y:e.clientY+document.body.scrollTop+document.documentElement.scrollTop 
	}; 
},
 render: function (e, id) {
     var self = this;
     var menuItems = this.model.get("menuItems");
     var pos = this.getMousePos(e);
     var width = id == 'folder_inbox' ? 180 : 150;
    var menu = M2012.UI.PopMenu.create({
        width: width,
        width2: 180,
        items: menuItems,
        top: pos.y + "px",
        left: pos.x + "px",
        onItemClick: function (item) {
            //alert(item.command);
            var commandArgs = _.clone(item);
            for (elem in item.args) {
                commandArgs[elem] = item.args[elem];
            }
            $App.trigger("mailCommand", commandArgs);
            if (item.args && item.args.bh) {
                BH(item.args.bh);
            }
        }

    });
    this.model.set("currentMenu", menu);
    bindAutoHide(menu.el);

    
    menu.on("itemMouseOver", function (item) {
        if (item.bh2) { //鼠标划过的行为
            BH(item.bh2);
        }
    });
    menu.on("subItemCreate", function (item) { //二级菜单render前触发
        //bindAutoHide(item.menu.el);
        if (item.command == "preview") { //读信预览
            $(item.menu.el).removeClass();//清除原有菜单样式
            $(item.menu.el).css({width:"570px",position:"absolute"}); //修改宽度
            $(item.menu.el).html(self.getPreviewMail());
        }
        //console.log(item);
    });



     //右键菜单自动消失
    function bindAutoHide(el) {
        $(el).mouseenter(function () {
            clearTimeout(timerId);
        }).mouseleave(function () {
            dispearInFuture();
        });
        var timerId = -1;
        function dispearInFuture() {
            
            timerId=setTimeout(function () {
                menu.remove();
            }, 500);
        }
    }
    
}
})
});
﻿/**
 邮件列表拖放
 * */
M139.namespace("M2012.Mailbox.View", {
	Drag: Backbone.View.extend({
		initialize: function () {
		    this.model = $App.getMailboxView().model;
		},
		createInstance:function(options){
		    if (!$App.getView("dragmail")) {
		        var view = new M2012.Mailbox.View.Drag();
		        
				$App.registerView("dragmail", view);
		    }
		    var result = $App.getView("dragmail");
		    result.setElement(options.el);
			return result;
		},
		render: function () {
		    var self = this;
			if (!this.created) { //第一次创建拖放元素
			    this.elBasket = $("<div id='dragBasket' style='position:absolute;z-index:9999;display:none'><span class=\"msg msgYellow\"><i class=\"i_t_move\"></i> <span id='dragtips'>移动n封邮件</span></span></div>");
			    $(document.body).append(this.elBasket);
				this.created = true;
			}
			var basket = this.elBasket[0];
			var lastFid = -1;
			var dx = 0; //偏移量，用于判断是否执行了拖放
			var isDrag = false; //是否执行了拖放
			var orignElem; //最初鼠标按下时的那个dom元素
			var isTag=false;//是否是标签文件夹
			$D.setDragAble(basket, {
			    handleElement: self.$el.find("tr[mid]"),//TODO 7ms 优化
                //bounds:[0,0,800,600],
			    onDragStart: function (e) {
			        dx = 0;
			        orignElem = e.target || e.srcElement;
			        if (orignElem) {
			            if ($(orignElem)[0].tagName == "TEXTAREA" || $(orignElem)[0].tagName == "INPUT" || self.model.get('fid') === 7) {
			                return false; //返回false阻止拖动开始
			            } 
			        }
			    },
				onDragMove: function (e) {
				    dx++;
				    if (dx > 10) {

				        self.elBasket.show();
				        $(orignElem).parents("tr").find("input[type=checkbox]").attr("checked", true);
				        lastFid = hitTestFolder(basket);
				        var count = self.getSelectedCount();
				        if (count == 0) { //容错，出现0封邮件的拖放
				            self.elBasket.hide();
				            isDrag = false;
				            return;
				        }
				        $(basket).find("#dragtips").html("移动" + count + "封邮件");
				        if (lastFid > 0) { //命中文件夹
				            var actionText = isTag ? "标记" : "移动" ;
				            $(basket).find("#dragtips").html(actionText + self.getSelectedCount() + "封邮件");
				            $(basket).find(".msg").removeClass("msgYellow");
				            $(basket).find("i")[0].className = "i_t_right";
				        } else {
				            $(basket).find(".msg").addClass("msgYellow");
				            $(basket).find("i")[0].className = "i_t_move";
				        }
				        isDrag = true;
				    } else {
				        isDrag = false;
				    }
				    //console.warn(result);
				},
				onDragEnd: function (e) {
				    self.elBasket.hide();
				    dx = 0;
				    if (isDrag) {
				        if (lastFid > 0) {
				        	lastFid = Number(lastFid);
				            if (isTag) {
				                console.log("add tag:" + lastFid);
				                $App.trigger("mailCommand", {
				                    command: "tag", labelId: lastFid
				                });
				            } else {
				                console.log("move to:" + lastFid);
				                $App.trigger("mailCommand", {
				                    command: "move", fid: lastFid
				                });
				            }
				        }
				    } 
				}
			});
		    function hitTestFolder (basket) {

		        var result = -1;
		        var isReturn = false;//退出循环标志
		        $("#folder_custom li[fid] a,#folder_main li[fid] a,#folder_pop li[fid] a,#folder_tag li[fid] a").each(function (i, n) {
		            if (!isReturn) {
		                var li = $(n).parents("li").eq(0);
		                if ($D.hitTest(n, basket)) {

		                    if (basket.offsetTop < $("#sb_h").offset().top) {
		                        return;
		                    }
		                    $(n).addClass("on");//高亮背景
		                    result = li.attr("fid");

		                    if ($(n).parents("#folder_tag").length > 0) {
		                        isTag = true;
		                    } else {
		                        isTag = false;
		                    }
		                
		                    isReturn = true;
		                } else {
		                    $(n).removeClass("on");
		                }
		            } else {
		                $(n).removeClass("on");
		            }
		        });
		        if (result == 8 || result == 9) {
		            result = -1;
		        }
		        return result;
		    
		    }
		},
		getSelectedCount:function(){ //选中了几封邮件
		    var resultObj = $App.getCurrentView().model.getSelectedRow(this.$el);
		    return resultObj.mids.length;
		    
		}
		

	})
});
/**
 * 邮件导出
 * @author chengwei
 * update by sukunwei 
 */
M139.namespace("M2012.Mailbox.Model.Export", M139.Model.ModelBase.extend({
	name : "MailExport",
	initialize : function(options) {
		M139.Model.ModelBase.prototype.initialize.apply(this, arguments)
	},
	/**
	 * 导出邮件列表
	 * @param {Array} mids 邮件列表
	 * @param {Function} [callback] 回调函数
	 */
	exportMail : function(mids, callback) {
		if (mids && ( mids = $.isArray(mids) ? mids : [mids]).length) {

			// 添加路由信息
			var router = M139.HttpRouter, api = "mbox:downloadMessages";
			router.addRouter("webapp", [api]);
			
			//修复360请求两次bug,分两种情况：单个导出和多个导出
			if(mids.length > 1){
				
				// 组装请求报文
				var datagram = ['<object><array name="ids">'], length = mids.length;
				while (length--) {
					datagram.push('<string>' + mids[length] + '</string>');
				}
				datagram.push('</array></object>');
	
				// 发送表单请求
				this.ajaxForm({
					inputName : "ids",
					data : datagram.join(""),
					url : router.getUrl(api),
					formName : "exportMailForm",
					iframeName : "exportMailIframe"
				});
			
			}else{
					var exportUrl = router.getUrl(api) + '&mid=' + mids[0];
					window.open(exportUrl);
			}
			
			if ($.isFunction(callback)) {
				callback();
			}

		}
	},

	/**
	 * 导出文件夹
	 * @param {int} fid 
	 */
	exportFile:function(fid, callback){
		if(!fid){return}
		var fid = parseInt(fid,10);

		// 组装请求报文
		var datagram = '<object><int name="fid">' + fid + '</int></object>';
		// 提交表单
		this.ajaxForm({
			inputName : "fid",
			data : datagram,
			url : M139.HttpRouter.getUrl("mbox:packMessages"),
			formName : "exportMailForm",
			iframeName : "exportMailIframe"
		});

		if ($.isFunction(callback)) {
			callback();
		}
	},

	/**
	 * 构建表单请求
	 * @param {Object} options 配置对象
	 * @param {String} options.formName 表单名称
	 * @param {String} options.iframeName iframe名称
	 * @param {String} options.inputName 表单文本域名称
	 * @param {String} options.url 请求地址
	 * @param {String} options.data XML格式数据
	 */
	ajaxForm : function(options) {
		var doc = document, body = doc.body, form = doc.createElement("form"), o = options, input = createInput(o.inputName, o.data);

		form.name = o.formName;
		form.method = "post";
		form.action = o.url;
		if (form.encoding) {
			form.setAttribute("encoding", "multipart/form-data");
		}
		form.setAttribute("enctype", "multipart/form-data");
		if (!document.getElementById(o.iframeName)) {
			body.appendChild(createIframe(o.iframeName));
		}
		form.target = o.iframeName;
		form.appendChild(input);
		body.appendChild(form);
		form.submit();
		body.removeChild(form);

		top.M139.UI.TipMessage.hide();

		function createInput(name, value) {
			var input = document.createElement("input");
			input.value = value;
			input.name = name;
			input.type = "hidden";
			return input;
		}

		function createIframe(name) {
			var iframe;
			try {
				iframe = document.createElement('<iframe name="' + name + '"></iframe>');
			} catch (ex) {
				iframe = document.createElement("iframe");
				iframe.name = name;
			}
			iframe.id = name;
			iframe.style.display = "none";
			return iframe;
		}

	}
}));

var appView = null;//主视图
$App={};
$(function(){

    appView = $App = new M2012.MainApplication();
    $App.run();
});





﻿/**   
* @fileOverview 普通模式读信
*/

(function (jQuery, _, M139) {

/**
*@namespace 
*普通模式读信
*/

M139.namespace("M2012.ReadMail.Normal.Model",Backbone.Model.extend({
   
    defaults:{  
    	fid:null,
		mid:null,
		win:false,
		mailListData:null,
		currFid:null,
		showToolBar:true,
		popup: null
	},
	
	logger: new M139.Logger({name: "M2012.ReadMail"}),
	
	//打印页面数据存储
    savePrintData:function(dataSource){
        var topSessionData = $App.getTopPageApp().sessionMail,
        	mid = dataSource.omid;

        if(!M139.PageApplication.getTopApp().print){
            M139.PageApplication.getTopApp().print = {}
        }
        if(!M139.PageApplication.getTopApp().print[mid]){ //防止覆盖
            M139.PageApplication.getTopApp().print[mid] = dataSource;        	
        }

        if(topSessionData && topSessionData[mid] && !this.get('win')){
        	var parentmid = topSessionData[mid].parentmid;
        	mid !== parentmid && this.closeSessionTab(parentmid);
        }
    },

    //关闭其他已打开的会话邮件
    closeSessionTab:function(mid){
    	var tabName = 'readmail_' + mid;
    	$App.getTabByName(tabName) && $App.closeTab(tabName);
    },
    isFromMyself:function(dataSource){
    	var email=$Email.getEmail(dataSource.account);
    	var result=false;
    	$($User.getAccountList()).each(function(i,n){
    		if(n.name==email){
    			result=true;
    		}
    	});
    	return result;

    },

    /** 保存添加提醒数据 
	 * 暂时保持和旧版一致，只给自己发短信和邮件提醒
    */
    saveCalendarData:function(options){
    	var self = this; 
    	top.calendar_mailInfo = {
    		email:'',
    		mobile:'',
    		title:options.title
    	}; //传给打开窗口
    },
	
	getDataSource:function(callback){//获取邮件列表
	    var self = this;
	    var fid = this.get('currFid');
	    var sessionInterface = this.get('sessionInterface');
		var data = {
				fid: fid,
				mid: this.get("mid"),
				autoName: 1, //有些附件会没有文件名，此属性自动命名附件
				markRead: 1,
				returnHeaders:{Sender:"","X-RICHINFO":""},//为订阅平台增加参数
				filterStylesheets: 0,
				filterImages: 0,
				filterLinks: 0,
				keepWellFormed: 0,
				header:1,
				supportTNEF:1,
				returnAntispamInfo:1
		};
		
		if(sessionInterface){
		    data.sessionId = this.get("mailListData").mailSession;
			data.readFlag = 0;
			data.start=0;
			data.total=199;
			data.folderPass='';
            data.mode='html';
            data.currFid=fid;
		}
		
		function errortips(){
            $Msg.alert('读取信件失败，请稍后再试。');
            M139.UI.TipMessage.hide();
            $App.close();
		}
		
		//会话模式下，普通读信也需要读取会话邮件接口
		if(sessionInterface){
		    $RM.readSessionMail(data,function(result){
	            if(result.code && result.code == 'S_OK'){
	                
	                callback && callback(result["var"]);
	                self.savePrintData(result["var"]);
	            }else{
                    errortips();
	                self.logger.error("readsessionmail returndata error", "[mbox:readSessionMail]", result);
	            }
	        });
        }else{	        
	        $RM.readMail(data,function(result){
	            if(result.code && result.code == 'S_OK'){
	                callback && callback(result["var"]);
	                self.savePrintData(result["var"]);
	            }else{
                    errortips();
	                self.logger.error("readmail returndata error", "[mbox:readMail]", result);
	            }
	        });
	    }

	}

	

}));

})(jQuery, _, M139);

/**
* @fileOverview 普通模式读信功能
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
    /**
    * @namespace 
    * 普通模式读信功能
    */   
         
    M139.namespace('M2012.ReadMail.Normal.View', superClass.extend({


		
	name: "M2012.ReadMail",
    
        /**
        *读信功能模版
        *tag 我的标签模版
        *from 发件人模版
        *receiver 接收人模版(收件人、抄送人、密送人)
        *email 邮件地址模版
        *date 时间模版
        *remark_remind 邮件备注、邮件提醒模版
        *attach 附件列表模版
        *thumbnails_li 附件缩略图单元模版
        *thumbnails 附件缩略图模版
        */   
        
        template:{    
		
		//邮件头
		mailHeader: ['<div class="readMail">',
                     '<div class="hTitle">',
                        '<h2 style="{titleColor}">{starAttributeNew}{titleIco}{title}</h2>{otherLink}{reCall}',
                        '<span class="readTagdiv" style="display:none" data="{labelIds}">{tagHtml}</span> ',
                     '</div>',
                     '<span class="readmialTool2"></span> ',
                     '<span id="readMailIcons" class="readmialTool" style="display:none;">',                        
                            '<a name="tagMenu_read" href="javascript:;" bh="readmail_icons_disk" class="J_backupMail i_clouds" title="备份至“彩云网盘”"></a> <span>|</span> ',
                            '{cloudNote} <span>|</span> ',
                            '<a href="javascript:;" name="remark_add" mid="{mid}" bh="readmail_addremark" class="i_note {remarkClass}" title="邮件备注"></a> <span>|</span> ',
                            '{printMail} <span>|</span> ',
                            '{newWinUrl}',
                            '<a id="readMailMoreBtn" href="javascript:;" class="btnSimple"><i class="triangle t_blackDown"></i></a>',
                            //'<a href="javascript:;" bh="readmail_icons_dropdown" class="ml_10 J_toggleTriangle"><i class="g-down"></i></a>',
                     '</span></div>',
                     '<div class="readMail-left-con">',
                         '<div class="readMailInfo">',
                            '{fromHtml}',
                            '{toHtml}',
                            '{ccHtml}',
                            '{bccHtml}',
                            '{dateHtml}',
                            '<div id="readremark_{mid}" class="rMList jstoggle" name="remark" style="display:none"></div>',
                            '{attachHtml}',
                            '<div class="rMList jstoggle" id="deliverystatus_div_{mid}"  style="display:none"></div>',
                            '<div class="mt_2">',
                                '<div class="rMr p_relative J_iconDesc" style="display: none;">',
                                    '<a href="javascript:;" bh="readmail_desc_disk" class="J_backupMail">备份至彩云网盘</a> | ',
                                    '<a href="javascript:;" bh="readmail_desc_note" class="J_saveNote">保存到和笔记</a> | ',
                                    '<a href="javascript:;" bh="readmail_desc_tip" name="remark_add">邮件备注</a> | ',
                                    '<a href="javascript:;" bh="readmail_desc_print" class="J_printMail">打印</a> | ',
                                    '<a href="javascript:;" bh="readmail_desc_newwin" class="J_newwin">新窗口读信</a> | ',
                                    '<a href="javascript:;" bh="readmail_desc_export" class="J_exportMail">导出邮件</a> | ',
                                    '<a href="javascript:;" bh="readmail_desc_original" class="J_showOriginalLetter">显示邮件原文</a> | ',
                                    '<a href="javascript:;" bh="readmail_desc_garbled" class="J_errorCode">邮件有乱码？</a>',
                                '</div>',
                            '</div>',
                         '</div>',
                     '</div>'
                     ].join(''),
				 
		//邮件内容
        readmailbody: [ 
            '<div class="bgMargin"><div class="toolBar" id="toolbar_{mid}" ></div></div>',
            '<span class="lineD"></span>',
            '<div class="inboxfl bgPadding_left J-readMailArea" id="readmail_container" style="+zoom:1;visibility:hidden;">',
                '<a href="javascript:;" class="switchOn3 innerboxshadow" {contactStyle} hidefocus="true" ><i class="triangle-big-l"></i></a>',
                '<div id="leftbox" class="inboxflDiv" >',
                    '<div class="lineDn clearfix" id="leftPart">',
                        '<div class="readMail-left" id="readmail_{mid}" mid="{mid}"></div>',
                    '</div>',
                    //'<div id="risktips" class="rMList" style="display:none"></div>',//'{riskTips}',
                    '<div class="mialContent" id="mailContent_{mid}">',
                        '<div class="mailText"> ',
                            '<span class="fontZoom" id="fontzoom_{mid}" style="display:none" > <a href="javascript:;" rel="increase"  title="放大字号" bh="readmail_bigfont"><span>A</span><sup>+</sup></a><a href="javascript:;" title="原来字号大小" rel="normal" bh="readmail_normalfont">原</a><a href="javascript:;" title="缩小字号" rel="reduce" bh="readmail_smallfont"><span style="font-size:10px;">A</span><sub>-</sub></a><a href="javascript:;" rel="close" title="关闭" class="fz-colse"></a></span> ',
                            '<div id="contentText" rel="14">',
                                '<div>{mailContentHtml}</div>',
                            '</div>',
                        '</div>',
                    //'<div class="attrBody" id="attach_{mid}"></div>', //'{getThumbnailsHtml},
                    '</div>',
                    '{quickReplyHtml}',
                '</div>',
            '</div>',
            '<a href="javascript:;" class="i-backTop" style="display:none;" title="回到顶部" hidefocus=""></a>'
         ].join(''),
                 
        tag: ["<span href='{tagLink}' class='tag'>",
                   "<span class='tagBody'>",
                       "<span>{tagName}</span>",
                       "<a href='{tagCloseLink}'><i class='i_cl_w'></i></a>",
                   "</span>",
             "</span>"],

       from: ["<div class='rMList' {display}>",
                    "<span class='rMl'>发件人：</span>",
                    "<div class='rMr p_relative'>",
			            "<div class='gAddr'>",
				            "<strong class='gAddrN'>{name}</strong>",
				            "<em class='gAddrE'>&lt;{email}&gt;</em>",
				            "<b class='i_triangle_d'>,</b>",
			            "</div>",
			            "{agent}",
		            "</div>",
              "</div>"],
             
    receiver: ["<div class='rMList'{display} id='{id}' >",
                    "<span class='rMl'>{name}：</span>",
                    "<div class='rMr p_relative'>{emails}{vip}{agent}{refuse}{notify}</div>",
               "</div>"],
                                  
       email:["<div class='gAddr' email='{2}' addr='{3}'>",
                    "<strong class='gAddrN'>{0}</strong>",
                    //"<em class='gAddrE'>&lt;{1}&gt;</em>",
                    "{1}",
                    "<b class='i_triangle_d'>,</b>",
              "</div>"],        
       
       sliceUp:[' | <a href="javascript:;" ><i id="togglemoreinfo" class="i_2trid i_2tridd" title="收起"></i></a>'],
       
       date: ["<div id='sendDate' class='rMList' {display}><span class='rMl'>时　间：</span><div class='rMr p_relative'>{date}</div></div>"],
                   
       quickreply: ['<div class="readMailReply p_relative" style="{0}" id="quickreply_{1}">',
                    '</div>',
                    '<div class="readMailReplyDone" style="display:none">此邮件已经快捷回复。<a href="javascript:;" class="dropDownA">再回一封</a></div>'
                    ],
                
       attach: ["<div class='rMList'{display}>",
                    "<span class='rMl'>附　件：</span>",
                    "<div class='rMr'><span>{num}个({attachList})</span></div>",
                "</div>"],
                
       headAttach: [ '<div class="rMList">', 
                     '<span class="rMl">附　件：</span>',
                     '<div class="rMr convattrlist" id="headAttach">{0}</div>',
                     '</div>'].join("")          
    },

    events:{
        //"click #allsavetodisk":"getAllSaveToDiskUrl"
        "click a.J_newwin": "onNewWinReadMailClick",
        "mouseover ul.attrList li": "onPreviewAttachImgMouseOver",
        "click #spammail": "onNotSpammailClick",
        //"click a[name=tagMenu_read]": "onTagMenuClick",
        "mouseover div.mailText": "onFontZoomMouseOver",
        "mouseover div.gAddr": "onReceiverAddrMouseOver",
		"click a#addmailnotify": "onAddMailNotify",
		"click a.J_printMail": "onPrintMailClick",
        "click a.Vip": "onVipClick",
        "click a.J_errorCode": "onErrorCodeLinkClick",
        "click a.J_showOriginalLetter": "showOriginalLetter",
        "click a.J_exportMail": 'onExportMailClick',
        "click a#readMailMoreBtn": 'onMoreBtnClick',
		"click a#saveToNote": "onSelectNote"
    },

		initialize: function(){
			this.model= new M2012.ReadMail.Normal.Model();
            this.initSonView();
			this.mailboxModel = $App.getView("mailbox").model;
			this.mailTagEvent();
			return superClass.prototype.initialize.apply(this, arguments);
		},

    //定义子视图
    initSonView: function(){
        this.sonview = true;
        this.quickreplyview = new M2012.ReadMail.View.QuickReply();
        this.readmailcontentview = new M2012.ReadMail.View.ReadMailContent({model:this.model, parentView: this});
        this.filepreview = new M2012.ReadMail.View.FilePreview();
        this.deliverystatusview = new M2012.DeliveryStatus.View();
        this.readreceiptview = new M2012.Receipt.View();
        this.recallview = new M2012.ReadMail.Recall.View();
        this.risktipsview = new M2012.ReadMail.RiskTips.View();
        this.remindview = appView.getView("remind"); //公用一个view
    },
    
		
		//获取代发信息
		getAgentHtml:function(data){
			var self = this;
			var html = '';
			try{
				if (data.sender && data.sender != undefined) {
					var from = M139.Text.Email.getEmail(data.account);
					var sender = $Email.getEmail(data.sender);
					//if(from != sender){
						html = '<span class="issuing-name">(由<strong style="color:red">' + sender + '</strong>代发)</span>';
					//}
				}
			}catch(ex){}
			return html;
		},
    //vip
    getVipHtml:function(data){
        var from = $Email.getEmail(data.account);
        var accountInfo = {};
        var html = '';
        accountInfo.isVip = 0; //不在通讯录内
        var contact = top.Contacts.getContactsByEmail(from);
        if(contact && contact.length > 0){
            accountInfo.isVip = 2; //在通讯录内，但不是vip联系人
            var contactsInfo = contact[0];
            accountInfo.serialId = contactsInfo.SerialId;
            accountInfo.name = contactsInfo.name;
            var _vipc = top.Contacts.getVipInfo();
            var i = $.inArray(accountInfo.serialId, _vipc.vipSerialIds.split(','));
            if(i > -1) accountInfo.isVip = 1; //是vip联系人
        }
        if(accountInfo.isVip == 1){
            html = '<a class="Vip user_vip" bh="readmail_delvip" title="取消“VIP联系人”" href="javascript:;"></a>';
        }else if(accountInfo.isVip == 2){
            html = '<a class="Vip user_gray_vip" bh="readmail_addvip" title="添加“VIP联系人”,其邮件将同时标记为“VIP邮件”" href="javascript:;"></a>';
        }else{
            html = '<a class="Vip" style="display:none;" href="javascript:;"></a>';
        }
        this.model.set('accountInfo',accountInfo);
        return html;
    },
    
    //拒收
    getRefuseHtml:function(data,fid){
        var self = this;
        var html = '';
        var mailListData = self.model.get('mailListData');
        var logoType = 0 ;
        if(mailListData) logoType = mailListData.logoType;
        var from = $Email.getEmail(data.account);
        if(from){
            mailboxComplaintView.model.set({from:from});
            if(fid != 5 && logoType == 0 && top.mailboxComplaintView.isSpamMail()){
                html = '<span class="pl_10"><a href="javascript:;" onclick=\'top.$App.trigger("mailCommand", { command: "refuseMail", email: "'+ from +'" });\'>[拒收]</a></span>';
            }
        }
        return html;
    },

    /**
    *获取标签视图
    */
    getTagHtml:function(label){
    	if(label){
    	    var tagView = M2012.Mailbox.View.MailTag.prototype.createInstance(); //tagview的单例
            return tagView.render(label,false);
    	}else{
    	    return "";
    	}
    },
    
    /** 重新渲染tag */
    renderTag:function(tagcon,newTagHtml){
        var self = this;
       
        newTagHtml && tagcon.html(newTagHtml);
        tagcon.hide();
     	if(tagcon.find('.TagDiv').length > 0){
	        tagcon.find('.tag').unwrap();
	    }
	    tagcon.show();
    },
        
    /** 
    * 获取接收人邮件地址
    * @param {object} returnObject 返回数据
    * @param {array} emailData 邮件地址 
    //有通许录地址则显示通许录地址，没有就显示全称
    */
    getReceiverEmail:function(returnObject,emailData){
        var self = this;
        var thisTemplate = self.template.email.join('');
        var eaddrTemp = "<em class='gAddrE'>&lt;{0}&gt;</em>";
        var arr = [];
        if (emailData) {
            var list = emailData.split(",");
            for (var i = 0; i < list.length; i++) {
                var obj = M139.Text.Email.getEmail(list[i]);    
                var alladdr = list[i];
                    alladdr = $T.Html.encode(alladdr);
                var name = $App.getAddrNameByEmail(list[i]); //这里要完整地址，不能单个email
                name = $T.Html.encode(name); //encode 防xss
                var email = $Email.getEmail(list[i]) || name; //代收邮件有些没有收件地址的
                email = $T.Html.encode(email); //encode 防xss
                var eaddr = ''; 
                var thisCode = $T.Utils.format(thisTemplate,[name,eaddr,email,alladdr]);
                arr.push(returnObject ? obj : thisCode );
            }
        }
        if( arr.length > 0 ){
            if (returnObject) {
                return arr;
            } else {
                return arr.join("");
            }
        }else{
            return "";
        }      
    },

    /** 获取批量添加联系人数组 
     * @param {object} emailData 读信获取数据
    */
    getAddContactsList: function(emailData){
        var self = this;
        var contactslist = [];
        if (emailData) {
            var list = emailData.split(",");
            for (var i = 0; i < list.length; i++) {
                var name = $App.getAddrNameByEmail(list[i]); //这里要完整地址，不能单个email
                var email = $Email.getEmail(list[i]) || name; //代收邮件有些没有收件地址的
                //通讯录没有的才进入批量添加
                if($App.getModel("contacts").getContactsByEmail(email).length==0){
                    if($Email.isEmail(email)){
                        contactslist.push({
                            name:name,
                            email:email
                        });
                    }                    
                }
            }            
        }
        return contactslist;
    },

    /**　批量添加联系人连接 
     * @param {object} options.data 读信获取数据
     * @param {object} options.type 类别
    */
    showBatchAddLink: function (options) {
        if (this.isBriefMode) { return;}
        var self = this;
        var temp = '<a href="javascript:;" title="批量添加联系人" name="batch_addr">批量添加</a>';
        if(options && options.data && options.type){
            var addContacts = self.getAddContactsList(options.data); 
            if(addContacts.length > 1){  // 2个陌生人以上才出现批量添加
                var container = $(self.el).find('#receiver_' + options.type);
                container.find('.rMr').append(temp);
                var alink = $(container.find('a:last'));
                alink.click(function(){
                    new M2012.UI.Dialog.ContactsEditor({
                        addContacts:addContacts,
                        alink:alink
                    }).batchrender();
                    BH('readmail_batchaddcontacts');
                });
            } 
        }
    },

    /** 标题颜色 */
    getColor: function(mid){
        var mailInfo = $App.getMailDataByMid(mid);
        if(mailInfo && mailInfo.color){
            return createMailboxRenderFunctions().getSubjectColor(mailInfo.color);
        }else{
            return '';
        }
    },
    
    /** 标题图标 */
    getTitleIco: function (mid) {
        var mailInfo = $App.getMailDataByMid(mid);
        if (mailInfo && mailInfo.priority == 1) {
            return '<i class="i_exc mr_5"></i>';
        }else{
            return '';
        }
    },
        
    /** 
    * 获取接收人Dom
    * 收件人，抄送人，密送人
    * @param {string} name 签名
    * @param {array} emails 邮件地址  
    * @param {options}
    */
    getReceiverHtml:function(name,emails,options){
        var self = this;
        var thisTemplate = self.template.receiver.join('');
        var thisEmail = "";
        if(emails != undefined){
            thisEmail = self.getReceiverEmail(false,emails); //true 为[]
        }
        var agent = '';
        var id = '';
        var vip = '';
        var refuse = '';
		var notify = '';
        if(options && options.agent){agent = options.agent;}
        if(options && options.vip){vip = options.vip;}
        if(options && options.refuse){refuse = options.refuse;}
		if(options && options.notify){notify = options.notify;} //邮件提醒
	
        if(options && options.type){
            id = 'receiver_' + options.type;
        }
        var formatData = {display:"",id: id,name:name,emails:thisEmail,vip:vip,agent:agent,refuse:refuse,notify:notify};
        var thisCode = $T.Utils.format(thisTemplate,formatData);
        return thisEmail == "" ?  "" : thisCode;
    },
    
    /**
    * 获取回复所有人地址
    */
    getReplyAllEmails:function(dataSource){
        var self = this;

        var fromEmailArray = self.getReceiverEmail(true,dataSource.account);
        var toEmailArray = self.getReceiverEmail(true,dataSource.to);
        var ccEmailArray = self.getReceiverEmail(true,dataSource.cc);
        var filterArray = []; //将要过滤的帐号
        
        var mailsArray = toEmailArray.concat(ccEmailArray);
        mailsArray = mailsArray.concat(fromEmailArray);
        
        //console.log('所有帐号');
        //console.log(mailsArray);
        
        //获取我的所有帐号
        var myEmail = $User.getAccountList();
            //console.log(myEmail);
            
            for(var i = 0 ; i < myEmail.length; i++){
                filterArray.push(myEmail[i].name);
            }
        
        //代收邮件地址
        var poplist = $App.getFolders("pop");
        for(var i = 0; i < poplist.length; i++) {
            filterArray.push(poplist[i].name.toLowerCase());
        }
       // console.log('所有过滤的帐号');
        //console.log(filterArray);
        
        
        //最后的回复帐号
        var resultArray = [];
        
        //移除自己所有账号、代收账号
        for (var i = 0; i < mailsArray.length; i++) {
            var obj = mailsArray[i];
            if ( $.inArray(obj.toLowerCase(),filterArray) == -1) {
                obj!='' && resultArray.push(obj);
            }
        }
        //console.log('过滤后');
        //console.log(resultArray);
        
        //全部是自己发给自己时，回复全部会是空的，填上一个自己的地址
        if(resultArray.length == 0) {
            resultArray.push(myEmail[0].name);
        }
        return resultArray.join(","); 
    },
    
    /** 
    * 获取头部附件列表视图
    * @param {string} attach 附件列表
    */
    getAttachHtml:function(dataSource){ 
        var self = this;
        var thisTemplate = '<div class="rMList" id="headAttach" >{0}</div>';//self.template.headAttach;
        var attach = dataSource.attachments;
        var data = '';
        var html = '';
        if(attach && attach.length>0){
            data = self.filepreview.getSessionAttach(dataSource.subject,attach,dataSource.omid);
            html = $T.Utils.format(thisTemplate,[data]); 
        }
        return html;
    },

    /** 
    * 获取时间视图
    * @param {date} sendDate 时间
    */
    getDateHtml:function(dataSource){
        var self = this;
        var sendDate = dataSource.sendDate;
        var thisTemplate = self.template.date.join('');
        var thisDate = $Date.format("yyyy-MM-dd hh:mm:ss",new Date(sendDate * 1000));
        var formatData = { display:"", date:thisDate};
        var thisCode = $T.Utils.format(thisTemplate,formatData);
        return sendDate == undefined ? "" : thisCode;
    },
    
    getTagMenuHtml:function(){
        return this.getTagMenuIco();
    },

		getRemindHtml:function(dataSource, temp){
			return this.getRemindIco(dataSource, temp);
		},
		/** 
		* 获取待办邮件图标 
		*/
		getRemindIco:function(dataSource, temp){
			var taskFlag = 0;
			if(dataSource.flag && dataSource.flag.taskFlag){
				taskFlag = dataSource.flag.taskFlag;
			}
            var status = ['add','update','finish'][taskFlag]; //任务状态
            var map = { //样式
                'add':'i_tx',
                'update':'i_tx_y',
                'finish':'i_tx_b'
            };
            var iClassMap = { //样式
                'add':'i_cDo',
                'update':'i_cDon',
                'finish':'i_cDoy'
            };
            var data = {
                aclass: map[status],
                mid: dataSource.omid,
                status: status,
                taskdate: dataSource.taskDate || 0,
                from: $T.Html.encode(dataSource.account),
                senddate: dataSource.sendDate,
                subject: $T.Html.encode(dataSource.subject),
                iclass: iClassMap[status]
            };
            /*var temp = [''
                ,'<p>'
                ,'<a href="javascript:;" class="{aclass}" rel="read" name="mailtask">'
                ,'<span mid="{mid}" status="{status}" taskdate="{taskdate}" from="{from}" senddate="{senddate}" subject="{subject}"></span>'
                ,'</a>'
                ,'<span>待办任务</span>'
                ,'</p>'
                ,''].join('');*/
            //var temp = '<a href="javascript:;" name="mailtask" title="设置任务" mid="{mid}" status="{status}" taskdate="{taskdate}" from="{from}" senddate="{senddate}" subject="{subject}"><i class="i_calendars"></i></a> | ';
            return $T.Utils.format(temp,data);
        },
    
    /** 
    * 获取标签操作图标 
    */
    getTagMenuIco:function(){
        var temp = '<a href="javascript:;" name="tagMenu_read" class="i_tagfor"></a>';
        return temp;
    },
    
    /**
    * 快捷回复容器
    */
    getQuickReplyHtml:function(){
        var self = this;
        var display = "display:;";
        var mid = self.model.get("mid");
        var html = $T.Utils.format(self.template.quickreply.join(''),[display,mid]);
        return html;
    },
    
    /**
    * 星标属性
    * @param {object} flag 邮件属性 flag.starFlag 为星标邮件标志 
    */
    starAttributeNew: function (flag) {
        var isHasStar = flag.starFlag == 1 ? 1 : 0;
        var temp='<i class="i_star" name="read_starmail"></i>';
        if (isHasStar) {
           return temp.replace("i_star", "i_star_y");
        }else{
           return temp;

        }
    },
    /**
    * 备注图标
    * @param {object} flag 邮件属性 flag.memoFlag 为邮件备注标志
    */
		getRemarkClass:function(dataSource){
			if(dataSource && dataSource.flag && dataSource.flag.memoFlag == 1){
				return "i_note_y";
			}else{
				return "";
			}
		},

    /**
    * 新窗口读信连接
    * @param {string} mid 邮件mid
    */
    newWinUrl:function(mid,fid){
        var temp = '<a href="javascript:;" mid="{0}" name="newwin" class="J_newwin i_2win" title="新窗口读信" bh="readmail_newwin"></a>';
        return $T.Utils.format(temp,[mid]);
    },

    /**
    * 新增邮件保存到和笔记入口
    */
    cloudNote: function (mid, fid) {
        var temp = (['<ul class="u-saveNoteSlider" style="top:0px;right:0px;"><li>',
            '<a href="javascript:;" mid="{0}" name="saveNote" class="lnk J_saveNote" title="保存到“和笔记”" bh="readmail_icons_note">',
            '<i class="ico ico1"></i>存和笔记</a></li>',
            '<li><a href="javascript:;" class="lnk J_saveEvernote" bh="evernote_readmail_entry" title="保存到“印象笔记”"><i class="ico ico2"></i>存印象笔记</a></li></ul>']).join('');
        this.popTemp = $T.Utils.format(temp, [mid]);
        return '<a href="javascript:;" id="saveToNote" class="i_bot" title="保存到笔记"></i></a>'
    },
    /*选择存储和笔记或印象笔记*/
    onSelectNote: function(){
        var self = this;
        var popup = self.model.get('popup');
        if(popup){
            popup.close();
        }

        popup = M139.UI.Popup.create({
            name: "selectNotePop",
            width: 102,
            height: 62,
            autoHide:true,
            target: document.getElementById("saveToNote"),
            content: self.popTemp
        });
        self.model.set('popup',popup);

        popup.render();

        $('a.J_saveNote').click(function(){
            self.onCloudNoteClick()
            popup.close();
        });
        $('a.J_saveEvernote').click(function(){
			top.addBehaviorExt({ actionId: 106905, thingId: 11 });
            self.onEverNoteClick();
            popup.close();
        });
        M139.Dom.bindAutoHide({
            element: popup.contentElement[0],
            stopEvent: true,
            callback: function () {
                popup.contentElement.remove();
            }
        });
    },

    printMail: function (mid) {
        var temp = '<a href="javascript:;" mid="{0}" name="saveNote" class="J_printMail i_print" title="打印" bh="readmail_icons_print"></a>';
        return $T.Utils.format(temp, [mid]);
    },
    

    /**
    * 更多信息按钮输出
    */
    showmoreinfo:function(){
        var self = this;
        var html = self.template.sliceUp.join('');     
        if($(self.el).find(".mailSectionTitle .rMList").length>6){
	        $(self.el).find(".readmialTool").append(html);
        }                
    },
    
    
    /**联系人页卡*/
    showContactCard:function(node){
        var self = this;
        var email = node.find('.gAddr');
        $.each(email,function(n){
            var _this = this;
            $(this).mouseover(function(){
                var addr = $(_this).attr('addr');
				var email = $Email.getEmail(addr) || $(_this).attr('email');
                email!='' && M2012.UI.Widget.ContactsCard.show({
                    dockElement:$(_this),
                    email:email
                })  
            })
        });
    },

    onNewWinReadMailClick:function(){
        var mid = this.model.get('mid');
        $App.openNewWin(mid);
    },

    //保存为和笔记
    onCloudNoteClick: function () {

        //接口不支持暂时屏蔽
        /*top.addBehaviorExt({ actionId: 104705, thingId: 2 });
        $App.trigger("mailCommand", {'command': 'savetoNote', 'mids': [this.model.get('mid')]});
        return;*/
        var mid = this.model.get('mid');
        var mailObj = M139.PageApplication.getTopApp().print[mid];
        if (mailObj && mailObj.html) {
            var title = mailObj.subject || "";
            title = title.slice(0, 65);
            var content = mailObj.html.content || "";
        }
        //content = content.replace(/\\/ig, "\\\\").replace(/(\r)?\n/ig, "\\n").replace(/\"/ig, "\\\"").replace(/\//ig, "\\\/"); //转义
        var options = {
            title: title || '邮件标题',
            content: content || '邮件内容',
            attachmentDirId: ""
        }
        top.M139.RichMail.API.call("mnote:createNote", options, function (res) {       //创建笔记
            if (res.responseData && res.responseData["code"] == "S_OK") {
                M139.UI.TipMessage.show("邮件已转存至和笔记 <a href='javascript:top.$App.show(\"note\")'>查看</a>");
                //var noteId = res.responseData["var"]["noteid"];         //返回新建的noteId
            } else {
                M139.UI.TipMessage.show("保存失败，请重试");
            }
            setTimeout(function () {
                M139.UI.TipMessage.hide();
            }, 3000);
        });
    },

	//保存为印象笔记
    onEverNoteClick: function(){
        var mid = this.model.get('mid');
        var mailObj = M139.PageApplication.getTopApp().print[mid];
        if (mailObj && mailObj.html) {
            var title = mailObj.subject || "";
            title = title.slice(0, 65);
            var content = mailObj.html.content || "";
        }
        content = content.replace(/\\/ig, "\\\\").replace(/(\r)?\n/ig, "\\n").replace(/\"/ig, "\\\"").replace(/\//ig, "\\\/"); //转义
        var options = {
            title: title || '邮件标题',
            content: content || '邮件内容'
        }
        top.M139.RichMail.API.call("evernote:createNote", options, function (res) {
            if(res.responseData && res.responseData["code"]){
                if(res.responseData["code"] == 'OAUTH_BINDING' || res.responseData["code"] == 'TOKEN_EXPIRED'){
                    top.$App.showOauthDialog({func:function(){}});
                }else if(res.responseData["code"] == 'S_OK'){
                    M139.UI.TipMessage.show('操作成功，邮件内容已保存到印象笔记', {delay: 2000});
                    top.addBehaviorExt({ actionId: 106906, thingId: 4});
                }
            } else {
                M139.UI.TipMessage.show('遇到异常，保存失败，请稍后重试', {delay: 2000, className: "msgRed"});
            }
        });
    },
    onPrintMailClick: function () {
        top.addBehaviorExt({ actionId: 104928, thingId: 0 });
        var mid = this.model.get('mid');
        window.open("/m2012/html/printmail.html?mid=" + mid);
    },
    
    onPreviewAttachImgMouseOver: function (e) {
        if(!e.target.bindHover){
            $(e.target).hover(function () {
                $(this).addClass("lihover");
            }, function () {
                $(this).removeClass("lihover");
            }).addClass("lihover");
            e.target.bindHover = 1;
        }
    },
    //不是垃圾邮件
    onNotSpammailClick: function (e) {
        var mid = this.model.get('mid');
        var mids = [];
        mids.push(mid);
        var args = {
            command: 'move',
            fid: 1,
            mids: mids,
            comefrom: 'spammail'
        };
        $App.trigger('mailCommand', args);
    },

    onTagMenuClick: function (e) {
        var mid = this.model.get('mid');
        var tagItems = [
        {
            html: "<i class='i_star_y'></i><span class='tagText'>星标</span>",
            command: "mark", args: { type: "starFlag", value: 1 }
        },
        { isLine: true }];

        tagItems = tagItems.concat($App.getView("mailbox").model.getTagMenuItems());

        M2012.UI.PopMenu.create({
            dockElement: e.target || e.srcElement,
            direction: "auto",
            items: tagItems,
            onItemClick: function (item) {
                var args = item.args || {};
                if (item.command) {
                    args.command = item.command;
                    args.mids = [mid];
                    $App.trigger("mailCommand", args);
                }
            }
        });
    },

    onFontZoomMouseOver: function (e) {
        //字体缩放
        if (!this.model.get('isSubscribeaction')) {
            if (!e.target.bindHover) {
                var jTarget = $(e.target);
                jTarget.hover(show, hide);
                show();
                e.target.bindHover = 1;
            }
        }
        function show() {
            jTarget.find('span.fontZoom').show();
        }
        function hide() {
            jTarget.find('span.fontZoom').hide();
        }
    },
    //邮箱地址鼠标移过显示下拉箭头，鼠标移开下拉箭头消失
    onReceiverAddrMouseOver: function (e) {
        if (!e.target.bindHover) {
            var jTarget = $(e.target);
            jTarget.hover(show, hide);
            show();
            e.target.bindHover = 1;
        }
        function show() {
            var email = jTarget.attr('email');
            if ($Email.getEmail(email) != '') {
                jTarget.addClass("SgAddr")
            }
        }
        function hide() {
            jTarget.removeClass("SgAddr");
        }
    },

	//来邮提醒
	onAddMailNotify: function(node){
		var self = this;
		var addMailNotifyCon = this.$el.find('a#addmailnotify');
		BH('readmail_smsremind');
		if(!$User.getMailNotifyInfo()){ //获取不了数据时跳转
			$App.show('notice');
			return;
		}					
							
		//互联网用户限制
		if($User.isInternetUser()){
			$User.showMobileLimitAlert();
			return;
		}
		
		M139.core.utilCreateScriptTag(
		{
			id: 'addmailnotifyscript', 
			src: 'm2012.addmailnotify.pack.js', 
			charset: "utf-8"
		},
		function () {
			var email = addMailNotifyCon.attr('data-from');
			if(email){
				var mailNotifyView = new M2012.AddMailNotify.View({addEmail:email});
				if($User.getMailNotifyInfo().notifyType == '0'){
					mailNotifyView.render(); //未开启
				}else{
					mailNotifyView.addAccount(); //已开启
				}
			}
		})	
		
	},
    
    /**
    * vip联系人操作
    */
    onVipClick:function(){
        var accountInfo = this.model.get('accountInfo');
        var self = this;
        var param = {
            serialId : accountInfo.serialId,
            name : accountInfo.name
        };
        if(accountInfo.isVip == 1){
            param.success = function(){
                accountInfo.isVip = 2;
                $(self.el).find('a.Vip')
                          .removeClass('user_vip').addClass('user_gray_vip')
                          .attr('bh','readmail_addvip')
                          .attr('title','添加“VIP联系人”,其邮件将同时标记为“VIP邮件”');
            }
            top.Contacts.delSinglVipContact(param);
        }else if(accountInfo.isVip == 2){
            param.success = function(){
                accountInfo.isVip = 1;
                $(self.el).find('a.Vip')
                          .removeClass('user_gray_vip').addClass('user_vip')
                          .attr('bh','readmail_delvip')
                          .attr('title','取消“VIP联系人”');
            }
            top.Contacts.addSinglVipContact(param);
        }
        
    },
    
    /**
    * 容器自适应高度
    */
    onResize:function(){
        var self = this;
        var el = $(self.el);
        var inbox = el.find('div.J-readMailArea:eq(0)');
        if (inbox.length > 0) {
            var subWinHeight = $App.getBodyHeight();
            var containerH = subWinHeight - 155;//写死性能高,引发重绘损耗40ms
            containerH = Math.max(200,containerH); 
            !el.attr('addclass') && el.attr('addclass',1);
            if(self.mailboxModel.isApproachMode() && self.mailboxModel.get("layout") == "left"){
                //inbox.css();
            }else{
                inbox.height(containerH - 4).css({'overflow-x':'hidden','position':'relative'});
                if($B.is.ie && $B.getVersion() < 8){ //ie67 解决往来邮件模块展开和收缩，switchOn3按钮跳跃问题,360兼容模式有问题
                    inbox.css({'overflow-y':'scroll'});
                }
            }            
        }

       
        var mid = this.model.get('mid');
        if (this.readmailcontentview.resize) { //内容自适应
            this.readmailcontentview.resize(mid);
        }

        // 功能iconsbottom适应
        var $J_iconDesc = this.$el.find('.J_iconDesc');
        var $readMailIcons = this.$el.find('#readMailIcons');
        if ($J_iconDesc.is(':visible')) {
            $readMailIcons.css('bottom', $J_iconDesc.height() + 13 + 'px');
        }		

        // 同步往来邮件容器的高度
        this.contactRecordView && this.contactRecordView.setContactsMailConH();
        setTimeout(function () {
            self.CutBriefReceiver();
        }, 50);

    },
    showBriefMode: function (flag,force) {
        var self = this;
        var to = this.$el.find('#receiver_to');
        var cc = this.$el.find('#receiver_cc');
        if (flag) { //精简
            if (to.height() + cc.height() > 50 || force) { 

                this.isBriefMode = true;
                this.ccNodes = cc.find(".rMr").children();//暂存，用于恢复完整模式
                to.find(".rMr").append(this.ccNodes);
                cc.hide();
                this.$el.find("#sendDate").hide();
                this.$el.find("#receiver_to span").html("于&nbsp;" + this.$el.find("#sendDate div").html()+ "&nbsp;发送至&nbsp;");
                   
                this.$el.find("[name=batch_addr]").hide();
                    
           
            }
           
        } else {    //完整
            if (this.isBriefMode) {
                this.isBriefMode = false;
                to.find(".rMr").children().show();
                cc.find(".rMr").append(this.ccNodes);
                cc.show();
                this.ccNodes.show();
               
                this.$el.find("#sendDate").show();
                this.$el.find("#receiver_to span").html("收件人");

                this.$el.find("[name=batch_addr]").show();
            }
        }
        //切换按钮的生成
        if (this.isBriefMode != undefined) {
            var btnSwitch = $("<div id='btn_switchBrief' class='rMr_right'><a href='javascript:' bh='" + (self.isBriefMode ? "readmail_showdetail" : "readmail_showsimple") + "'>" + (self.isBriefMode ? "完整信息<i class='g-down'></i>&nbsp;&nbsp;" : "精简信息<i class='g-up'></i>&nbsp;&nbsp;") + "</a></div>");
            this.$el.find('#btn_switchBrief').remove();//先清场
            this.$el.find('#receiver_from').find(".rMr").append(btnSwitch);
            btnSwitch.click(function () {

                self.showBriefMode(!self.isBriefMode,true);
                self.CutBriefReceiver(true);
                $(this).remove();
            });
        }
        
    },
    CutBriefReceiver: function (isSwitch) {
        var self = this;
        var to = this.$el.find('#receiver_to');
        var cc = this.$el.find('#receiver_cc');
        if (this.isBriefMode) {
            var LINEHEIGHT = 20;//行高
            var list = to.find(".gAddr");

            for (var i = list.length - 1; i > 0; i--) {//判断高度是否超过一行，超过一行隐藏元素
                var elem = list[i];
                //console.log(elem);
                $(elem).show();
                if (to.height() > LINEHEIGHT) {
                    $(elem).hide();
                }
                
            }

        } else if (!isSwitch) {
            if (to.height() + cc.height() > 50) {//超过2行切换为精简
                this.showBriefMode(true);
            }
        }
        this.$el.find(".gAddr:visible").find(".i_triangle_d").html(",");
        this.$el.find(".gAddr:visible:last").find(".i_triangle_d").html(self.isBriefMode ? "..." : " "); //去除最后一个逗号
        this.$el.find("#receiver_to").find(".gAddr:visible:last").find(".i_triangle_d").html(self.isBriefMode ? "..." : " ");
        this.$el.find("#receiver_from .gAddr").find(".i_triangle_d").html(" ");
    },
		
    resizeSwitchBtn: function() {
        // 往来邮件闭合按钮的默认right值是0，在有滚动条的时候要重置为16px
        // 当没有滚动条/展开的时候，需要将style中的right值清空，使样式设置的值生效
        var el = $(this.el);
        var switchBtn = el.find('.switchOn3');
        var inbox = el.find('div.J-readMailArea:eq(0)');
        if (!el.hasClass('inboxflOff'))  {
            switchBtn.css('right','');
        } else if (inbox[0] && inbox[0].scrollHeight > inbox.height()) {
            var right = $B.is.chrome ? '12px' : '16px';
            switchBtn.css('right',right);
        }
    },
		/**
		* 判断是否加载成功
		* @param {object} 图片对象
		*/
		checkLoadImg:function(){  
			var self = this;
			var errorImg = '/m2012/images/global/nopic.jpg'; //异常情况替换
			var prewImgObj = $(self.el).find("img.imgLink");
		
			prewImgObj.length>0 && $.each(prewImgObj,function(index){
				  var _this = this;
				  $(this).error(function(){ 
							$(this).attr('src',errorImg).attr('rel',2);	
							var imgUrl = $(this).attr('data-url');
							_this = null;
							self.logger.error("readmail prewImages load error", "[mbox:getThumbnail]", imgUrl);
						})
			})
		},    
	  
		/** 分栏读信更多菜单栏 */
		splitToolbarMore:function(toolbarview,mid){
			var self = this;
			if($App.getLayout()=='left' || $App.getLayout()=='top'){
				var btn = $('.toolBarArray #btn_more');
				var menupop = btn.find('.menuPop');
				if(menupop.length>0){menupop.remove();}
				btn.show().click(function(){
					toolbarview.createMoreToolMenu(mid,btn);
				});                
			}
		},	
		
		
		/** 来邮提醒链接 
		 * 不显示：我的订阅，群邮件，广告，病毒，垃圾不显示
		*/
		getMailNotifyLink:function(from,fid){
			var notifyLink = '';
			if(fid && $.inArray(fid,[5,6,9,11,12]) == -1){
				notifyLink = '<span style="padding-left:10px;"><a href="javascript:;" onClick="return false" id="addmailnotify" data-from="' + $T.Utils.htmlEncode(from) + '">[来邮短信提醒]</a></span>';
			}
			return notifyLink;
		},
		
		
		/** 标签功能 */
		mailTagEvent:function(){
			var self = this;
			appView.on("readmailControl",function(e){   
				var thismid = self.model.get('mid');
				if(e.mids && $.inArray(thismid,e.mids) > -1){
					if( e.command == 'tag'){
						setTimeout(function(){
							var labelIds = $App.getMailDataByMid(thismid).label; //邮件列表对应的标签数据
							if($.inArray(e.args.labelId,labelIds)==-1){ 
								labelIds.push(e.args.labelId); //插入新的标签数据
								appView.trigger("mailboxDataChange",{render:true});   //更新了数据才刷新列表
								console.log('读信页刷新列表');
							}
							self.renderTag($(self.el).find('.readTagdiv'), self.getTagHtml(labelIds));
						},500)
					} 
				}
			});
		},
		
		
		/** 信头渲染 */
		renderHeader:function(){
				
			/** === 数据定义 === */
			var self = this,
				$el = $(self.el),
				mid = this.model.get('mid'),
				dataSource = this.model.get('dataSource'),
				mailListData = self.model.get('mailListData'),
				currFid = self.model.get("currFid"),
				fid = currFid,
				label = [],
				mailData = $App.getMailDataByMid(mid),
				thistemp = self.template.mailHeader,
                searchMode = currFid == 0;

            $el.find('.J_toggleTriangle').die('click').live('click', function() {
                self.toogleIconsDesc();
            });
            $el.find('.J_backupMail').die('click').live('click', function() {
                self.backupMail();
            });
			
			if(this.el){this.setElement(this.el)}
		
			if(mailListData && mailListData.fid){
				fid = mailListData.fid;
                currFid=fid;
                self.model.set("currFid",fid);

			}

            var isSessionMode = $App.isSessionMode() && $App.isSessionFid(fid);
			
			//是否精品订阅邮件和任务邮件
			var isSubscribeaction = false;
			if(dataSource.headers){
				if(dataSource.headers["X-RICHINFO"]){
					isSubscribeaction = true; 
				}
				if(dataSource.headers.taskDate){
					dataSource.taskDate = dataSource.headers.taskDate;
				}
			}
			self.model.set({isSubscribeaction:isSubscribeaction});
			
			//邮件标签
			if(mailData && mailData.label){
				label = mailData.label;
			}
			self.model.set({dataSource:dataSource,label:label});

			//定义邮件撤回
			self.recallview.model.set({fid:fid,dataSource:dataSource});    		 
			
			//定义标题
			var title  =  dataSource.subject == "" ? "(无)" : dataSource.subject;
			
			//设置tab标题,只在飞信读信用
			if(self.model.get('source')=='interface'){	
				title = title.replace(/&nbsp;/i,'');
				$App.setTitle(title);
			}

			/** === 渲染工具栏 === */
			var showToolBar = true;			
			var toolbarContainer = $("#toolbar_" + mid);
			
			if($(self.el).attr('id') == 'readWrap' || $App.isNewWin()){
				showToolBar = false;
			}
			
			if(showToolBar){

				var toolbarview = new M2012.ReadMail.ToolBar.View({
                        el:"#toolbar_" + mid,
                        dataSource:dataSource,
                        currFid:currFid, 
                        getSessionPrevNextMail:isSessionMode, 
                        mailListData:mailListData,
                        searchMode: searchMode
                    });
				var toolbarHtml = toolbarview.render();
				toolbarContainer.html(toolbarHtml);
				toolbarview.initEvents();
				
				//工具栏下拉菜单
				var readmailOption = {
					mid:mid,
					mail:self.model.get("mailListData")
				};
				
				new M2012.Mailbox.View.MailMenu({ el: "#toolbar_" + mid + " .toolBarUl", model: new M2012.Mailbox.Model.Mailbox, readmail: readmailOption }).render();
			
				//分栏读信工具栏
				self.splitToolbarMore(toolbarview,mid);
			}else{
				toolbarContainer.hide();
			}
			
			/** === 渲染读信头部 === */
			var formatObj = {
				mid: mid,
				titleIco:self.getTitleIco(mid),
				titleColor:self.getColor(mid),
				reCall:self.recallview.render(),
				title: M139.Text.Utils.htmlEncode(title),
				tagHtml: self.getTagHtml(label),
				fromHtml: self.getReceiverHtml('发件人',dataSource.account,{type:'from',vip:self.getVipHtml(dataSource),agent:self.getAgentHtml(dataSource),refuse:self.getRefuseHtml(dataSource,fid),notify:self.getMailNotifyLink(dataSource.account,fid)}),//self.getFromHtml(dataSource.account,self.getAgentHtml(dataSource)),
				toHtml: self.getReceiverHtml('收件人',dataSource.to,{type:'to'}),
				ccHtml: self.getReceiverHtml('抄　送',dataSource.cc,{type:'cc'}),
				bccHtml: self.getReceiverHtml('密　送',dataSource.bcc,{type:'bcc'}),
				dateHtml : self.getDateHtml(dataSource),
				attachHtml: self.getAttachHtml(dataSource),
				remarkClass: self.getRemarkClass(dataSource),
				starAttributeNew: self.starAttributeNew(dataSource.flag),
				tagMenuHtml: self.getTagMenuHtml(),
				newWinUrl: $App.isNewWin() ? '' : self.newWinUrl(mid,currFid),
				cloudNote: self.cloudNote(mid, currFid),
				printMail: self.printMail(mid)

			};
			
			var thisCon = $('#readmail_' + mid);
			thisCon.html($T.Utils.format(thistemp,formatObj) || '');
			thisCon.find(".allgetdown").click(function(event){
			//	alert(123321);
				event.stopPropagation();
			});
            // 订阅邮件不显示功能icons
            if (!$App.getMailboxView().model.isSubscriptionMail()) {
                $el.find('#readMailIcons').show();
            }
			
			$el.find('div.J-readMailArea').css({'visibility':'visible'});

			/** === 我的标签 === */ 
			self.renderTag($el.find('.readTagdiv'));
			//self.mailTagEvent();
			
			/** === 任务提醒 === */
			$el.find('#readMailIcons').prepend(self.getRemindHtml(dataSource, '<a class="{iclass}" href="javascript:;" bh="readmail_icons_task" name="mailtask" title="设置任务" mid="{mid}" status="{status}" taskdate="{taskdate}" from="{from}" senddate="{senddate}" subject="{subject}"></a> <span>|</span> '));
            $el.find('.J_iconDesc').prepend(self.getRemindHtml(dataSource, '<a href="javascript:;" bh="readmail_desc_task" name="mailtask" mid="{mid}" status="{status}" taskdate="{taskdate}" from="{from}" senddate="{senddate}" subject="{subject}">设置任务</a> | '));

			self.remindview.addEvent($el.find('#leftbox'));
			
			
			/** === 投递状态 === */ 
			if(fid==3 && mailListData && mailListData.rcptFlag){
				var deliveryContainer = "#deliverystatus_div_" + mid ;
				self.deliverystatusview.el = deliveryContainer;
				self.deliverystatusview.model.set({mid:mid,rcptFlag:mailListData.rcptFlag});
				self.deliverystatusview.render();
			}
			

			/** === 批量添加联系人[收件和抄送] === */ 
			self.showBatchAddLink({data:dataSource.to,type:'to'});
			self.showBatchAddLink({data:dataSource.cc,type:'cc'});
			

            /** === 邮件备注 === */
			var remarkContainer = "#readmail_" + mid;
			var remarkview = new M2012.Remark.View({el:remarkContainer});
			if(dataSource.flag && dataSource.flag.memoFlag == 1){
				remarkview.model.set({opType:'get',mid:mid});
				remarkview.render();
			}else{
				remarkview.model.set({mid:mid});
			}
			remarkview.initEvents();	

			/** === 已读回执 === */ 			
			if(dataSource.requestReadReceipt == 1 && fid != 3){
				var readreceiptview = new M2012.Receipt.View();
				readreceiptview.model.set({
					mailListData:mailListData,
					requestReadReceipt:1,
					readReceipt:dataSource.readReceipt || null
				});
				readreceiptview.initEvents();
			} 

			/** === 往来邮件 === */ 	
			//判断是否默认显示往来邮件,精品订阅不显示
			var contactsFlag = true;
			var thismail = dataSource.account;
			if(isSubscribeaction || thismail==''){
				contactsFlag = false;
			}		
			//逼近式搜索时，上下视图、左右视图不显示往来邮件
			var mailboxModel = self.mailboxModel;
			if(mailboxModel && mailboxModel.get('layout') != 'list' && mailboxModel.isApproachMode()){
				contactsFlag = false;
			}

			if(contactsFlag && !self.model.isFromMyself(dataSource)){ 
				var contactsInfo = $App.getModel('contacts').getContactsByEmail(thismail);
				//往来邮件#￥%
				
				if (true || top.$User.isGrayUser()) { //灰度和全网上不同的版本
				    if (!this.contactRecordView) {
				        this.contactRecordView = new M2012.ReadMail.ContactRecord.View({ el: self.el, 
                        keyword: thismail, mid: mid, contactsInfo: contactsInfo,parentView:self });
				    }
				}else{
					//contactsmailview = new M2012.ReadMail.SessionContactsMail.View({el:self.el,keyword:thismail,mid:mid,contactsInfo:contactsInfo});
				}

                /*
                 * 往来邮件唤出Btn的点击事件
                 *
                 */
                var switchBtn = $el.find('.switchOn3');
                switchBtn.click(function(){
                    // 原有代码，通过切换样式（inboxflOff）来控制显示隐藏和定位
                    // 目前仍依赖这个样式进行判断
                    $el.hasClass('inboxflOff') ? BH('rmcontact_show') : BH('rmcontact_hide');
                    $el.toggleClass('inboxflOff');

                    // 控制往来邮件模块显示/隐藏
                    var contactMailsCon = $el.find('#contactMails');
                    if ($el.hasClass('inboxflOff')) {
                        BH("rmcontact_close");
                        contactMailsCon.hide();
                    } else {
                        BH("rmcontact_open");
                        contactMailsCon.show();
                    }
                    !contactMailsCon.length && self.contactRecordView.render();
                    self.resizeSwitchBtn();
                });
                // ie6下需要通过js实现来邮件唤出Btn的fixed效果
                if ($B.is.ie && $B.getVersion() === 6) {
                    // 初始位置校正
                    switchBtn.css({'position': 'absolute', 'top': '31px', 'right':0});
                    // 滚动实时位置调整
                    $el.find('div.J-readMailArea:eq(0)').scroll(function() {
                        var offsetTop = $(this).scrollTop();
                        switchBtn.css('top', offsetTop + 31);
                    });
                }
			}else{
				$el.addClass('inboxflOff');
				$el.find('.switchOn3').hide();
			}
            $el.addClass('inboxflOff');//总是隐藏			
			
			/** === 联系人页卡 === */ 
			if(!$App.isNewWin()){
				self.showContactCard($el);
			}
			
			/** === 附件 === */  			
			//附件缩略图预览
			var thumbnailsHtml = self.filepreview.getThumbnailsHtml(title,dataSource.attachments,mid);
			thumbnailsHtml = "";
			thumbnailsHtml!='' && $('#mailContent_' + mid).append(thumbnailsHtml);
			
			//附件缩略图加载失败处理
			self.checkLoadImg(); 
			
			//附件存彩云事件(头部和尾部)
			self.filepreview.el = $el.find('.convattrlist,#attach_' + mid);
			self.filepreview.initEvents(dataSource,mid);  
			
			/** === 邮件撤回功能 === */ 	
			self.recallview.el = $el.find('#recall');
			self.recallview.initEvents();  
			
			/** === 快捷回复 === */ 	
			var showQuickReply = true;
			if(isSubscribeaction){
				showQuickReply = false; //精品订阅不显示快捷回复
			}
			if(showQuickReply){
				var quickReplyContainer = "#quickreply_" + mid;
				var replyall = self.getReplyAllEmails(dataSource);
				self.quickreplyview.setElement(quickReplyContainer);
				self.quickreplyview.model.set({mid:mid,sender:dataSource.account,replyAll:replyall});
				self.quickreplyview.render();
				self.quickreplyview.initEvents();  
			}else{
				$el.find('.readMailReply').hide();
			}	

			self.showBriefMode(true);
			/** === 预警提醒 === */ 	
			self.riskTipsEvent();
			
			//滚动条
			self.scrollTopEvent();
			
			
			/** === 窗口自适应 === */ 	
			self.onResize();
			//$el.scrollTop(0);
			$(window).resize(function(){
				self.onResize();
			});
		

			
			//event define end 
		},
		
		/** 预警提醒 */
		riskTipsEvent:function(){
			var self = this;
			var $el = this.$el;
			var fid = self.model.get('currFid');
			var dataSource = self.model.get('dataSource');
			if(self.letterDomReady && self.letterInfoReady && !self.showRiskTips && fid && dataSource){
				self.showRiskTips = true;
				self.risktipsview.el = self.el;
				self.risktipsview.model.set({fid:fid,dataSource:dataSource});
				if(self.risktipsview.model.isDisableImg()){
					var mid = this.model.get('mid');
					var contentDoc = $('#mid_' + mid)[0].contentWindow.document;
					$(contentDoc).find('img').each(function(n,val){
						var src = $(this).attr('src');
						$(this).attr('original',src).removeAttr('src');
					});
					//dataSource.html.content = content.replace(/src=/ig, 'original='); //替换所有img src=变量            
				}
				var riskTipsHtml = self.risktipsview.render();
				if(riskTipsHtml){
					$el.find('div#leftPart').after(riskTipsHtml);
					self.risktipsview.initEvents();
				}	
			}
		},
		
		
		/** 邮件头事件 */
		initMailHeaderEvent:function(){
			var self = this;
			var mid = this.model.get('mid');
			var commandMid = 'letterInfoReady_' + mid;

			$App.off('letterInfoReady').on('letterInfoReady',function(data){ //off解除旧信监听
				if(data && data.omid !== mid){ 
					//超时处理
					if(data && data.code === "FA_INVALID_SESSION"){
						$App.showSessionOutDialog();
						M139.UI.TipMessage.hide();
					}
					return; 
				}                    
				self.letterInfoReady = true;
				letterInfoHandler(self,data);
				//console.log('我是第一次输出');
			});
			
			//二次验证
			$App.off(commandMid).on(commandMid,function(data){			
				if(self.letterInfoReady){return}
				letterInfoHandler(self,data);				
				self.letterInfoReady = true;
				//console.log('我是第二次输出');				
			});
			
			
			function letterInfoHandler(self,data){
				if(data && (data.errorCode || data.errorCode == 0)){ 
					self.logger.error("readmail letterInfo returndata error", "[view:readMessage]", data);
					self.readMailError(data, true); //异常处理
				}else{
					self.model.savePrintData(data); //保存数据
					self.model.set({dataSource:data});
					self.renderHeader();
				}
			}
		},
		
		
		
		/** 邮件正文事件 */
		initMailContentEvent:function(){
			var self = this;
			var fid = self.model.get('fid');
			var mid = self.model.get('mid');
			var commandMid = 'letterDomReady_' + mid;

            if(this.el){this.setElement(this.el)}
			
			$App.off('letterDomReady').on('letterDomReady',function(win){

                if(win && win.letterInfo && win.letterInfo.omid !== mid){
                    return;
                }
				
				self.letterDomReady = true;
				letterDomHanderl(self,win);
				
			});
			
			//二次验证
			$App.off(commandMid).on(commandMid,function(win){			
				if(self.letterDomReady){return}
				letterDomHanderl(self,win);				
				self.letterDomReady = true;
			});
			
			
			function letterDomHanderl(self,win){
				var errorFlag = false;
				if(win && win.letterInfo && win.letterInfo.errorCode){
					errorFlag = true;
				}
				if(!errorFlag && win.letterInfo && win.letterInfo.omid){
					
					//保存正文内容
					var content = win.document.body.innerHTML;
					M139.PageApplication.getTopApp().print[win.letterInfo.omid].html = {content:content}; 
					win.letterInfo.html = {content:content};
					self.readmailcontentview.mailDomReady(win.letterInfo,win);
					self.riskTipsEvent();
					_letterInlineScript(win);
					M139.UI.TipMessage.hide();

                    // 邮件正文样式兼容处理
//                    self.handleStyleForReadMailContent(win); // 暂不处理chrome的兼容性问题，损耗性能
				}
			}
		},

        // 读新内容样式的兼容性处理 add by chenzhuo
        handleStyleForReadMailContent: function (win) {
            var doc = win.document;

            // chrome中表格的单元格border宽度如果小于1pt，将无法显示
            if ($B.is.chrome) {
                var td = doc.getElementsByTagName("td");
                for (var i = 0, len = td.length; i < len; i++) {
                    var item = td[i];
                    var borderWidth = item.style.borderWidth;
                    if (borderWidth) {
                        // if border width less 1 (normal is 0.5), need 1 instead of it
                        item.style.borderWidth = borderWidth.replace(/0\.\d+/g, 1);
                    }
                }
            }
        },
		
		/** 滚动到顶部 */
		scrollTopEvent:function(){
			var self = this,
				scrollHeight = 0,
				scrollContainer = this.$el.find('div.J-readMailArea'),
				scrollTopIco = this.$el.find('a.i-backTop'),
				firstShow = false,
				times = 300; 
			
			this.scrollTimer = null; //函数节流，防止scroll频繁调用
			
			scrollTopIco[0] && scrollContainer.scroll(function(){
				
				var _this = this;
				
				if(!firstShow){
					firstShow = true;
					scrollTopIco.fadeIn(0);
				}

				clearTimeout(self.scrollTimer);
				
				self.scrollTimer = setTimeout(function(){
					scrollHeight = $(_this).scrollTop() || 0;
					if(scrollHeight > 0 && scrollTopIco[0].style.display === 'none'){
						scrollTopIco.fadeIn(0);
					}
					if( scrollHeight === 0 ){
						scrollTopIco.fadeOut(times);
						self.scrollTimer = null;
						firstShow = false;
					}				
				},times);
			});
			
			scrollTopIco.bind('click',function(){
				var _this = this;
				scrollContainer.animate({scrollTop:0}, times);
				setTimeout(function(){
					$(_this).fadeOut(times);
				},times);
			});
			
		},
		
		/** 加载运营邮件脚本,可以独立出来 */
		loadScript:function(options){
			var doc = options.doc || document,
				script = doc.createElement('script');
			script.src = options.src + '?sid=' + top.$App.getSid();
			doc.getElementsByTagName("body")[0].appendChild(script);
		},

		/** 读信异常 */
		readMailError:function(data, needClose){
			M139.UI.TipMessage.hide();
			needClose && $App.close();
			if(data && data.code === 'FA_INVALID_SESSION'){ //会话过期处理
				top.$App.showSessionOutDialog();
			}else{
				$Msg.alert('读取信件异常，请稍后再试。');
			}
		},		
	
		/** 读信主容器渲染 */
		render:function(isRendered){
			
			var self=this;
			var mid = this.model.get('mid');
			
			if(!isRendered){
				//self.model.set({isRendered:true});
				M139.UI.TipMessage.show("正在加载中...");
				var mailListData = self.model.get('mailListData'),
					currFid = self.model.get("currFid"),
					fid = currFid,
					label = [],
					mailData = $App.getMailDataByMid(mid),
					thistemp = self.template.readmailbody,
					options = {
						mid:mid,
						mailListData:mailListData,
						fid:fid,
						mailData:mailData
					};
				self.readmailcontentview.options = options;
				
				var formatObj = {
					mid: mid,
					contactStyle: $App.isNewWin() ? 'style="display:none"' : '',
					quickReplyHtml: self.getQuickReplyHtml(),
					mailContentHtml: self.readmailcontentview.getMailContentIframe(mid,true)
				};
				var thisHtml = $T.Utils.format(thistemp,formatObj);
				$(self.el)[0].innerHTML = thisHtml;
				
				//每次渲染时定义事件
				this.initMailHeaderEvent();
				this.initMailContentEvent();

                // 根据是否有滚动条来调整读信区域样式
                var $readMailArea = self.$el.find('div.J-readMailArea');
                setTimeout(function(){        
                    if ($readMailArea[0].scrollHeight <= $readMailArea.height()) {
                        $readMailArea.removeClass('bgPadding_left').addClass('bgPadding');
                    }
                }, 1000);
			}
			
		},
		
    
	
		/** 新窗口读信数据 */
		getNewWinData:function(callback){
			var self=this;
			var returnHtml = '';
			this.model.getDataSource(function(dataSource){
				var mid  =  dataSource.omid;
				var title  =  dataSource.subject == "" ? "(无)" : dataSource.subject;
				var dataObj = {
					dataSource:dataSource,
					mid: mid,
					titleIco:self.getTitleIco(mid),
					titleColor:self.getColor(mid),
					title: M139.Text.Utils.htmlEncode(title),
					fromHtml: self.getReceiverHtml('发件人',dataSource.account,{agent:self.getAgentHtml(dataSource)}),//self.getFromHtml(dataSource.account,self.getAgentHtml(dataSource)),
					toHtml: self.getReceiverHtml('收件人',dataSource.to),
					ccHtml: self.getReceiverHtml('抄　送',dataSource.cc),
					bccHtml: self.getReceiverHtml('密　送',dataSource.bcc),
					dateHtml : self.getDateHtml(dataSource),
					attachHtml: self.getAttachHtml(dataSource),
					mailContentHtml: self.readmailcontentview.getMailContentIframe(mid)
			   };
			   if(callback){callback(dataObj)};
			});
		 
		},

        onErrorCodeLinkClick: function(){
            var orignUrl = "/m2012/html/newwinreadmail.html?t=newwin&sid={0}&mid={1}&messycode=1";
            window.open($T.Utils.format(orignUrl,[sid,$App.getCurrMailMid()]));
        },

        showOriginalLetter: function(){
            var orignUrl = "/RmWeb/view.do?func=mbox:getMessageData&mode=text&part=0&sid={0}&mid={1}";
            window.open($T.Utils.format(orignUrl,[sid,$App.getCurrMailMid()]));
            BH('toolbar_mailcode');
        },

        onExportMailClick: function(){
            var wmsvrPath2 =  domainList.global.wmsvrPath2;
            var downloadUrl = wmsvrPath2 + "/mail?func=mbox:downloadMessages&sid={0}&mid={1}";
            window.open($T.Utils.format(downloadUrl,[sid,$App.getCurrMailMid()]));
            BH('toolbar_export');
        },

        onMoreBtnClick: function(e){
            var dom = $(e.target); 
            var This = this;
            var offset = dom.offset();
            var menu = M2012.UI.PopMenu.create({
                items: [
                    {
                        text: "导出邮件",
                        onClick: This.onExportMailClick
                        //command: "exportMail"
                    },
                    {
                        text: "显示邮件原文",
                        onClick: This.showOriginalLetter
                        //command: "importMail"
                    },
                    {
                        text: "邮件有乱码？",
                        onClick: This.onErrorCodeLinkClick
                        //command: "errorCodeMail"
                    }
                ],
                width: 102,
                left: offset.left - 102,
                top: offset.top + 16
            });
        },

        backupMail: function() {
            $App.trigger("mailCommand", {
                command: 'backupMail',
                mids: [$App.getCurrMailMid()]
            });
            BH('toolbar_backupMailSingle');
        },

        toogleIconsDesc: function() {
            var $J_iconDesc = this.$el.find('.J_iconDesc');
            var $readMailIcons = this.$el.find('#readMailIcons');
            var $i = this.$el.find('.J_toggleTriangle').find('i');

            if ($J_iconDesc.is(':visible')) {
                $J_iconDesc.hide();
                $i.removeClass('g-up').addClass('g-down');
                $readMailIcons.css('bottom', '13px');
            } else {
                $J_iconDesc.show();
                $i.removeClass('g-down').addClass('g-up');
                $readMailIcons.css('bottom', $J_iconDesc.height() + 13 + 'px');
            }
        }



}));
    
    
})(jQuery, _, M139); 



function _letterInlineScript(win) {
    //运营邮件处理
    win.from = '';
    win.subject = '';
    var document = win.document;

    /* 读信页面跳转处理特殊业务[没有重构的] */
    var jumpToKey = {
        partid: $User.getPartid(),
        source: 'jumpto',
        mid: $App.getCurrMailMid()
    }


    function writeScript(id, url) {
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.charset = 'utf-8';
        script.id = id;
        script.src = url + '?sid=' + $App.getSid();
        document.getElementsByTagName('body')[0].appendChild(script);
    }


    function letterInit(dataSource) {
        if (dataSource && dataSource.omid) {
            var mid = dataSource.omid;
            var letterScriptLoad = false;
            win.subject = dataSource.subject;
            win.from = $Email.getEmail(dataSource.account);
            var subjectMatch = [
                new RegExp("\u8fd9\u662f[\\s\\S]+?\u7684\u901a\u8baf\u5f55"),
                new RegExp("\u80fd\u628a\u901a\u8baf\u5f55\u5171\u4eab\u7ed9\u6211\u5417"),
                new RegExp("\u7684\u7535\u5b50\u540d\u7247"),
                new RegExp("\u66F4\u65B0\u4E86\u4E2A\u4EBA\u8D44\u6599")
            ];
            var idMatch = [
                "139command_flash",
                "mail139command",
                "aPostcard139",
                "139CommandQuickShare",
                "139Command_LinksShow",
                "addr_whoaddme",
                "welcome_alias",
                "welcome_mailnotify",
                "welcome_sms",
                "welcome_phoneFeixin",
                "welcome_pcFeixin",
                "welcome_foxmail",
                "welcome_collection",
                "welcome_mailList",
                "welcome_phoneToMail",
                "welcome_more",
                "139mailtobirthRemind",
                "birthRemind2",
                "checkin_go",
                "readmail",
                "quickHeadImg",
                "139olympic",
                "139jiayoly",
                "operationlinkId_0",
                "139Command_CustomLinks",
                "calendarInviteOp",
                "shareCalendarEmail",
                "shareLabel",
				"groupMailInviteOp"
            ];
        }
		
        checkMarketingMail();
        checkReadMark();
        checkSubscribeMail();

        var ua = navigator.userAgent.toLowerCase();
        var isIpad = ua.match(/ipad/i) == "ipad";

        if (isSubjectMatch() || isIdMatch() || isIpad) {
            if (isIpad) {
                top.ipadLetterMid = dataSource.omid;
            }
            letterScriptLoad = true;
            var scriptPath = "/m2012/js/richmail/readmail/m2012.readmail.letterscript.js";
            writeScript('letterscript', scriptPath);
        }


        var allLinks = document.links;

        $.each(allLinks, function (i) {
            var link = parent.$(allLinks[i], document);
            var href = link.attr('href');
            var rel = link.attr('rel');
            var param = link.attr('param');
            if (/^prod$/i.test(rel)) {//所有产品运营之类的跳转
                link.click(function () {
                    $PUtils && $PUtils.show(param, href);
                });
            } else if (/^http/i.test(href)) {
                link.attr('target', "_blank"); //是否每个a标签都加 _blank
            } else if (/^mailto:/i.test(href)) {
                link.click(function () {
                    var receiver = href.replace(/^mailto:/i, "");
                    $App.show("compose", null, {
                        inputData: {
                            receiver: href.replace(/^mailto:/i, "")
                        }
                    });
                    return false;
                });
            }
            if (link.attr("clicklog") == "true") {
                var thingId = link.attr("thingid");
                if (thingId && /^\d+$/.test(thingId)) {
                    link.click(function () {
                        top.addBehavior && top.addBehavior("邮件正文点击统计", this.getAttribute("thingid"));
                    });
                }
            }

        });

        if (win.frameElement.style.visibility == "hidden") {
            win.frameElement.style.visibility = "";
        }

        function isSubjectMatch() {
            var result = false;
            try {
                $.each(subjectMatch, function () {
                    if (this.test(win.subject)) {
                        result = true;
                    }
                });
                return result;
            } catch (e) {

            }
        }

        function isIdMatch() {
            var result = false;
            try {
                $.each(idMatch, function (n) {
                    if (document.getElementById(idMatch[n])) {
                        result = true;
                    }
                });
                return result;
            } catch (e) {
            }
            return result;
        }

        function checkMarketingMail() {
            var tag = document.getElementById("139Command_MarketingMail");
            if (!tag) return;
            var id = tag.getAttribute("rel");
            if (id && /^\d+$/.test(id)) {
				 top.addBehavior && top.addBehavior("打开运营邮件", id);
            }
        }

        function checkSubscribeMail() {
            var subscribeAccount = ['subscribe@139.com', 'cmpost@139.com', 'smpost@139.com', 'subscribe-service@139.com', 'subscribe-topic@139.com'];
            var accountFlag = false;
            $.each(subscribeAccount, function (n, val) {
                if (dataSource.account && dataSource.account.indexOf(val) >= 0) {
                    accountFlag = true;
                    return false; //退出循环
                }
            });
            if (dataSource.headers && dataSource.headers["X-RICHINFO"] && accountFlag) {
                //var scriptPath = "/m2012/js/richmail/readmail/m2012.readmail.subscribeaction.js"; // update by tkh 注入的JS由云邮局负责维护
                var scriptPath = "/mpost2014/js/mpost/mail/m2012.readmail.subscribeaction.js";
                
                writeScript('subscribeaction', scriptPath);
                var mediaplayerPath = "/m2012/component/mediaplayer/m139.component.mediaplayer.js";
                writeScript('mediaplayer', mediaplayerPath);
            }
        }

        function checkReadMark() {
            var element = document.getElementById("139Command_ReadMark");
            if (element) {
                var actionId = element.getAttribute("actionid");
                var thingId = element.getAttribute("thingid");
                var moduleId = element.getAttribute("moduleid");
				top.addBehaviorExt && top.addBehaviorExt({ actionId: actionId, thingId: thingId, moduleId:moduleId});
            }
        }
    }


    win.doc = $('body', document);
    win.doc.attr('rel', 1).attr('orignheight', win.doc.height());

    //页面初始化
    letterInit(win.letterInfo);
	$("#attachAndDisk").hide();
	(function(M139){
			var idMatch = ["attachAndDisk"];
			var result = false;
			try {
				$.each(idMatch, function (n) {
					if (document.getElementById(idMatch[n])) {
						result = true;
					}
				});
			}catch(e){}
			function setScript(url,callback) {
				var script = document.createElement('script');
				script.type = 'text/javascript';
				script.charset = 'utf-8';
				script.src = url + '?sid=' + $App.getSid();
				document.getElementsByTagName('body')[0].appendChild(script);
				if (document.all) {
					script.onreadystatechange = function () {
						if (script.readyState == "loaded" || script.readyState == "complete") {
							callback && callback();
						}
					}
				} else {
					script.onload = function () {
						callback && callback();
					}
				}
			}
			if(result && !top.$App.isSessionMode()){
			//	writeScript('jqu', "");
				setScript("/m2012/js/packs/libs.pack.js", function(){
					writeScript('attachanddiskdisplay', "/m2012/js/richmail/readmail/m2012.readmail.attachanddiskdisplay.js");
					if($("#downloadDisk").length == 0){
						$("<iframe id='downloadDisk' style='display: none;'></iframe>").appendTo(top.document.body)
					}
				});	
			}
			var infoSta = $("#infoSta");
				var listUp = $("i[id='listUp']");
				var listUpH = $("i[id='listUp']:visible");
				var listDown = $("i[id='listDown']");
				var listDownH = $("i[id='listDown']:visible");
				
				//	var infoStaCurrent = top.$("div[id='infoSta']");
				var mid = top.$App.getCurrMailMid();
				var curMail = top.$("#readmail_" + mid);
				var infoStaCurrent = curMail.find("#infoSta");
				if(infoStaCurrent.next("ul").find("li").length > 3){
					infoStaCurrent.next("ul").hide();
					listUp.show();
					listDown.hide();
				}
				
				$("div[id='infoSta']").unbind("click").bind("click", function () {
						var self = this;
						top.BH("readmail_toggle");
						if($("i[id='listUp']:visible").length == 0){
							listDown.hide();
							$(self).next().slideUp();
							listUp.show();
						}else{
							listUp.hide();
							$(self).next().slideDown();
							listDown.show();
						}
						
				});
			
	})(M139);
}
﻿/**   
* @fileOverview 读信入口
*/

(function (jQuery, _, M139) {

/**
* @namespace 
* 读信入口： 普通模式读信，新窗口读信，会话模式读信
*/

M139.namespace("M2012.ReadMail.Model",Backbone.Model.extend({
    
    defaults:{  
    	fid:null, //所在文件夹fid
		mid:null,
		win:false,
		currFid:null, //当前文件夹fid,因会话邮件聚合的，fid 不一定等于 currFid
		el:null
	}
	    
}));

})(jQuery, _, M139);


/**
* @fileOverview 读信入口
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
    /**
    * @namespace 
    * 读信路由，分发普通模式读信，新窗口读信，会话模式读信
    */
         
    M139.namespace('M2012.ReadMail.View', superClass.extend({

        /**
        *@lends M2012.ReadMail.View.prototype
        */
        initialize: function(){
            this.model = new M2012.ReadMail.Model();
            return superClass.prototype.initialize.apply(this, arguments);
        },
        
        /** 标题过滤处理 */
        filterSubject:function(subject){
            if(subject==''){
                subject = '(无)';
            }
            subject = subject.replace(/(&<{)|(}>&)/g,'');
            return subject;
        },

		/** 请求读信 */
        callReadMail:function(mid, win, currFid, options){
			var self = this;
			var searchMode = false;
			var win = win || false;
			var currFid = currFid;
			var fromSource = '';
			var isSearchList = $App.getMailboxView().model.get("isSearchMode"); //是否搜索列表
			if ( isSearchList || (options && options.searchMode) ) {
			   currFid = 0;
			   searchMode = true;
			}
			if (options && options.source) {
			   fromSource = options.source;
			}
			var setData = { mid: mid, win: win, currFid: currFid, searchMode: searchMode, source: fromSource };
			if (options && options.mailData) { setData.mailData = options.mailData }
			self.model.set(setData);

			var returnObj = self.render();


			if (win || fromSource != '') { //新窗口读信处理
			   return returnObj;
			}

			if(returnObj.view.model.get('mailListData')){
			    showReadMail(returnObj);
			}else{
			    var ids = [mid];
			    $RM.getMessageInfo(ids,function(response){
			        if(response.code == 'S_OK' && response['var']){
			            var mailListData = response['var'][0];  
			            setData.mailData = mailListData;
			            self.model.set(setData);
			            returnObj = self.render();
			            showReadMail(returnObj);                                                  
			        }
			    });
			}

			function showReadMail(returnObj){
			    if (returnObj) {
			       $App.showPage({ name: returnObj.name, view: returnObj.view });
			       $App.setTitle(returnObj.subject);
			    }
			}
        },
        
        render:function(){
	        var self = this;
	        var win = self.model.get("win");
	        var mid = self.model.get("mid");
	        var fid = self.model.get("fid");
	        var el = self.model.get("el");
	        var currFid = self.model.get('currFid');
	        var searchMode = self.model.get('searchMode');
            var source = self.model.get('source');
	        if( el == null ){ el = ''}
	        var routerObj = {};
	        var mailData = $App.getMailDataByMid(mid) || self.model.get('mailData'); //兼容往来邮件读信

	        if(!win && source != 'interface' && mailData){	        	
	            //会话读信入口需要加判断
	            var sessionInterface = false;
	            if(!currFid){
	            	currFid = $App.getCurrentFid();
	        	}
	            if(searchMode){
	                currFid = 0;
	                fid = 0;
	            }
	            if(mailData && mailData.mailSession && $App.isSessionMode() && $App.isSessionFid(currFid)){
	                sessionInterface = true;
	            }
	            if(sessionInterface && mailData.mailNum > 1 && mailData.sendId == 0){ //会话邮件模式读信
	            	BH('cMail_read');
	                var readSessionMailView = new M2012.ReadMail.Conversation.View({el:el});
		            readSessionMailView.model.set({mid:mid,mailListData:mailData,currFid:currFid,sessionInterface:sessionInterface});
		            routerObj.name = 'readmail_' + mid;
		            routerObj.view = readSessionMailView; 
		            routerObj.subject = self.filterSubject(mailData.subject);
	            }else{ //普通读信
		            var readmailView = new M2012.ReadMail.Normal.View({el:el});
		            readmailView.model.set({mid:mid,mailListData:mailData,currFid:currFid,sessionInterface:sessionInterface});
		            routerObj.name = 'readmail_' + mid; 
		            routerObj.view = readmailView; 
					
		            routerObj.subject = self.filterSubject(mailData.subject);
	            }
	        }
	        
	        if(win || source == 'interface' || !mailData){
	            //新窗口读信或飞信读信
	            var readmailView = new M2012.ReadMail.Normal.View({el:el});
	            readmailView.model.set({mid:mid,mailListData:null,win:true,currFid:0,source:source});
	            routerObj.name = 'readmail_' + mid; 
	            routerObj.view = readmailView;
	            routerObj.subject = ''; //不依靠邮件列表,暂时取不到，需要在读信时设置
	        }
	        this._readMailNormalView = readmailView;
	        this._readMailSessionView = readSessionMailView;

	        var flags = {};
	        if (mailData) {
	            flags = $.extend({}, mailData.flags, {
	                'billFlag': mailData.billFlag,
	                'subscriptionFlag': mailData.subscriptionFlag,
	                'mailFlag': mailData.mailFlag,
	                'rcptFlag': mailData.rcptFlag
	            });
	        }
	        $App.trigger('readmail', {
                mid: mid,
                fid: currFid,
                flags: flags
            });
	        return routerObj;
	        
        },
		
		/** 
		 * 销毁视图绑定事件
         * 防止分栏读信重复绑定
		 */
        disposeView: function () {
            if (this._readMailNormalView) {
                this._readMailNormalView.undelegateEvents();
            }
            if(this._readMailSessionView) {
            	this._readMailSessionView.undelegateEvents();
            }
        }
	    
    }));
    
    
})(jQuery, _, M139);
﻿/**   
* @fileOverview 
* 读信主要事务处理，主要涉及监听读信内容输出、标记、标签、备注同步等等
*/
    
    $(function(){

	
		//读信回调函数表达式
        window['readMailReady'] = function (win) {
			var args = arguments;
			var mid;
			
			if(args.length === 3 && args[1] === "json"){
				//渲染信头
				$App.trigger('letterInfoReady',args[2]);
				
				if( args[2] && args[2].omid ){
					mid = args[2].omid;
				}
				
				//二次验证读信加载
				if($App.getLayout()==='list' && mid && !$App.isSessionMid(mid)){
					setTimeout(function(){
						$App.trigger('letterInfoReady_' + mid, args[2]);
						//处理普通附件上传，添加到页面中
					},1500)
				}
			}
			
			if(args.length === 2 && args[1] === "domready"){
				//读信输出完毕
				$App.trigger('letterDomReady',args[0]);
			}
		    try {
		        win.alert = function () {
		            setTimeout(function () {
		                var content = (win.document.documentElement || win.document.body).innerHTML;
		                var index = content.indexOf("alert");
		                if (index > -1) {
		                    index = Math.max(0, index - 50);
		                    content = content.substr(index, 100);
		                }
		                M139.Logger.sendClientLog({
		                    level: "ERROR",
		                    name: "ReadMailXSS",
		                    account: win.letterInfo && win.letterInfo.account,
		                    subject: win.letterInfo && win.letterInfo.subject,
		                    url: win.location.href,
		                    content: encodeURIComponent(content)
		                });
		            }, 2000); 
		        };
		    } catch (e) { }
		};
		
        function validatetab(mids){
            $.each(mids,function(n){
                $App.validateTab("readmail_" + mids[n]);
            })
        }
        
        //监听mailCommand,所有读信邮件操作逻辑处理[删除、移动、彻底删除等等]
        $App.on("readmailControl", function (args) { 
		    
		    var readMailTab = $App.getCurrentTab().name.indexOf('readmail')>-1 ? true : false; //当前页是否读信
			
		    if(args){
		        var command = args.command;
		        var mids = args.mids;
		        
		        //移动、删除和彻底删除处理
		        if(command == 'move' || command == 'delete' ){
		            
                    /*
		            try{
                        for(var i = 0; i < mids.length; i++){
                            $App.closeTab('readmail_' + mids[i])                                                            
                        }                        
                    }catch(e){}
                    */

                    //读信页删除第一封会话邮件
                    if(args.sessionIds && args.sessionIds.length > 0 && /readmail/gi.test($App.getCurrentTab().name)){
                        //$App.close();
                    }
   		        }
		   
                //批量读信刷新处理[标记，标签，备注,星标]
                var commands = ['mark','tag'];
                var types = ['starFlag', 'priority', 'read'];
                var refresh = false;
                var sessionId;
                if(mids){
                    args = args.args;
                    if(command == 'mark' && $.inArray(args.type,types)>-1){     
                        if(readMailTab){
                            if( args.sessionIds && args.sessionIds[0] ) { sessionId = args.sessionIds[0] }
                            args.type == 'starFlag' && $App.trigger('markstar',{mid: mids[0],sessionId:sessionId, value:args.value});
                            args.type == 'priority' && $App.trigger('mailimportant',{mid: mids[0],sessionId:sessionId, value:args.value});
                            args.type == 'read' && $App.trigger('mailread',{mid: mids[0],sessionId:sessionId, value:args.value});
                        }else{
                            refresh=true;
                        }
                    }

                    if(command == 'tag' && readMailTab){
                        $App.trigger('mailtagschange', {mids: mids, labelId:args.labelId});
                    }

                    if(command == 'tag' && !readMailTab){ 
                        refresh = true;
                    }
                    if(refresh){
                        validatetab(mids);
                    }
                }
		    }
		    
		    //备注编辑框处理
		    $('#listremark').remove();
		    
		});

        //列表页操作时通知读信刷新,可以再细化下
        $App.on("readMaiDataChange",function (args){
            var command,
                mids,
                map = {
                    "mark":true,
                    "tag":true
                };
            if(args){
                command = args.command;
                mids = args.mids;
            }    
            if( command && map[command] && mids){
                validatetab(mids);
            }
        });

		
		//读信处理
		$App.on('readmail',function (args){
		    //分栏读信 
		    if(args.type && args.type == 'split'){
		        args.mid && $App.closeTab('readmail_' + args.mid);
		    }
		});
		
		//删除标签
		$App.on("removeTag",function(e){
            if(e.mids){
                validatetab(e.mids);
            }
        });
        
        //普通读信标记重要和取消重要
        $App.on("mailimportant",function(e){
           try{
                var readMailCon = $('#readmail_' + e.mid);
                if(readMailCon.find(".i_exc").length==0 && e.value == 1){
                    readMailCon.find('h2').prepend('<i class="i_exc mr_5"></i>');        
                }
                if(e.value == 5){
                    readMailCon.find('.i_exc').remove();        
                }
           }catch(e){}
        });
        
		
		try{
			$App.on("showTab", function (m) {
				var mid;
				if( m.name.indexOf('readmail_') > -1){
					mid = $App.getCurrMailMid();
					$App.trigger('mailResize',{mid:mid});	
				}
			});
		}catch(e){}
});
    

﻿/**
 * @fileOverview 读信页输出邮件正文
 */
(function(jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
     * @namespace
     * 读信页输出邮件正文内容
     */

    M139.namespace('M2012.ReadMail.View.ReadMailContent', superClass.extend({

        /**
         *@lends M2012.ReadMail.View.ReadMailContent.prototype
         */

        el: "",

        template: {
            quote: ['<p class="pt_10 pl_5 mb_10 showyi" >', '<a href="javascript:void(0)" id="quote" hidefocus="true" style="text-decoration:none;color:#666;">显示历史邮件 <i class="i_3trid"></i></a>', '</p>'],
            sessionStyle: ['<style type="text/css">',
            '.showyi a{text-decoration:none;color:#666;font-size:12px;}',
            '.i_3tridd{display:inline-block;width:0;height:0;overflow:hidden;line-height:0;font-size:0;vertical-align:middle;border-bottom:5px solid #666666;border-top:0 none;border-left:5px solid transparent;border-right:5px solid transparent;_color:#FF3FFF;_filter:chroma(color=#FF3FFF);}',
            '.i_3trid{display:inline-block;width:0;height:0;overflow:hidden;line-height:0;font-size:0;vertical-align:middle;border-top:5px solid #666666;border-bottom:0 none;border-left:5px solid transparent;border-right:5px solid transparent;_color:#FF3FFF;_filter:chroma(color=#FF3FFF);}',
                '</style>'].join('')
        
        }, 

        /** 
         * 获取内容视图 
         * @param {mid} String 邮件mid
         * @param {newUrl} Bollean 是否用新url
         * @param {csslink} String 添加样式参数                
         */
        getMailContentIframe: function(mid,newUrl,csslink) {
            var mid = mid || this.options.mid;
            var thisurl = newUrl ? this.getNewMailContentUrl(mid,csslink) : this.getMailContentUrl(mid);
            var iframe = "<iframe name='{1}' rel='' id='{1}' src='{0}' frameborder='0' height='160' style='width:100%'></iframe>";
            return $T.Utils.format(iframe, [thisurl, 'mid_' + mid]);
        },

		detactAttachPlayerMark: function(doc) {
			
			if(!doc || $(doc).find(".inserted_Mark").length === 0) {
				return ;
			}

			top.loadCSS("module/atta/in_mail_atta_preview.css", doc);
			top.loadScript("/m2012/js/packs/libs.pack.js", doc);
			//top.loadScript("/m2012/js/plugin/avplayer.js", doc);
			//top.loadScript("/m2012/js/richmail/readmail/initAllPlayers.js", doc);
			top.loadScript("/m2012/js/richmail/readmail/initReadMailAttachMedia.js", doc);
		},
		
		/** 读信渲染完毕 */
		mailDomReady:function(dataSource,win){
			var self = this,
				thisDoc = win.document,
				mid = dataSource.omid,
				thismid = "mid_" + mid,
				thisiframe = $($T.Utils.format("iframe[id='{0}']", [thismid]))[0];
				
			var hideQuoteFlag = self.hideQuoteFlag = false; 
			if(win && /csslink=cov/i.test(win.location.href)){
				hideQuoteFlag = self.hideQuoteFlag = true; //隐藏引文标记
			}
			
			BH('readmail_load');
			
            //add by yly
            self.replaceLinksSid(thisDoc.links);

            // add by xy
            self.detactAttachPlayerMark(thisDoc);

            // add by tkh
            var imgCollection = $("img", thisDoc);
            var imgCount = imgCollection.length; //图片总数
            var loaded = 0;
            setTimeout(function() {
                if(loaded < imgCount) { //避免图片404的容错，5秒钟还没加载完，强制执行一次resize
                    self.resize(mid);
                }
            }, 5000);

            imgCollection.each(function() {
                //ie6下 gif图片会一直触发onload事件  所以执行完一次之后要清空掉事件
                var This = this;
                This.onerror = function() {
                    loaded++; //图片加载失败也增加计数器，避免有只图片沉了，就永远也到不了岸。
                };
                This.onload = function() {
                    This.onload = null;
                    loaded++;
                    if(loaded >= imgCount) { //最后一张图片加载完再执行resize
                        self.resize(mid);
                    }
                }
            });

            BH('readmail_load');
            var iframe_content = $(thisDoc).find('body');
            self.initEvents(mid, thisDoc);

            new M139.Event.GlobalEventManager({
                window: win
            });

            
            $App.showImgEditor(iframe_content);

            //获取正文高度
            function getDocHeight(){
                return Math.max( $(thisDoc).find('body').height(), $(thisDoc).find('html').height());
            }
            
            //会话邮件加载后引用收起展开功能(支持外域） update by sukunwei
			if($App.isSessionMid($App.getCurrMailMid())) {
				var allHistoryContent = $(thisDoc).find('hr[id=replySplit],div[id=reply139content],div[id=isForwardContent],blockquote[id=isReplyContent],div[id=mailcontent],div[id=origbody],blockquote[id=oriMsgHtmlSeperator],div.gmail_extra,div.gmail_quote,div.yahoo_quoted');
				var outerContainr = allHistoryContent[0];
				if(outerContainr){
					hideQuoteFlag = self.hideQuoteFlag = true;
				}else{
					hideQuoteFlag = self.hideQuoteFlag = false;
				}
			}
			
			if(hideQuoteFlag) {
                var quotehtml = self.template.quote.join('');
                var replyContent = $(thisDoc).find('#reply139content');
                var replySplit = $(thisDoc).find("#replySplit");
                var allReplyContent = $(thisDoc).find('div[id=reply139content]');
                var allReplySplit = $(thisDoc).find('hr[id=replySplit]');
                var quoteContainer,bodyHeight,quoteOffsetTop,setChangeHeight = 0;
			
                if(replySplit[0] && !replyContent[0]){ //只有分割线没有引文不处理
                    hideQuoteFlag = self.hideQuoteFlag = false;
                } 

                if(outerContainr && hideQuoteFlag) {
					allHistoryContent.hide();
                    $(outerContainr).before(quotehtml);
                    quoteContainer = $(thisDoc).find("#quote");
                    quoteContainer.parents(".MsoNormal").css("text-align","left");	//避免客户端样式影响					
					$(thisDoc).find('body').append(self.template.sessionStyle); //插入会话邮件修改后的样式
					quoteOffsetTop = quoteContainer.offset().top;
					bodyHeight = getDocHeight();
					setChangeHeight = self.setChangeHeight = Math.max(quoteOffsetTop + 30,bodyHeight);
                    setChangeHeight = Math.max(setChangeHeight,270);                  
                    quoteContainer.attr('oldh', setChangeHeight);
                    $(win).load(function(){
                        quoteContainer.attr('oldh', getDocHeight);
                    });


					quoteContainer.click(function(){
                        if($(this).html().indexOf('显示') > -1) { //点击显示
                            $(this).html("收起历史邮件 <i class='i_3tridd'></i>");
                            allHistoryContent.show();
                            M139.Timing.watchIframeHeight(thisiframe, 10);
                            BH('cov_showhistorycontent');
                        } else { //点击收起
                            $(this).html("显示历史邮件 <i class='i_3trid'></i>");
                            allHistoryContent.hide();
                            var oldH = $(this).attr('oldh');
                            $(thisiframe).contents().height(oldH);
                            $(thisiframe).height(oldH);	
                            M139.Timing.watchIframeHeight(thisiframe, 10, hideQuoteFlag);
                            BH('cov_hidehistorycontent');
                        }
                    })
                }
            }

            M139.Timing.watchIframeHeight(thisiframe, 300, hideQuoteFlag);            

			// add by tkh
            self.resize(mid);
            // 读信视图往来邮件的开闭按钮定位依赖于正文长度 add by yeshuo
            setTimeout(function() {
                self.parentView.resizeSwitchBtn();
            }, 500);
            // 用于图片加载（之所以不放在resize是为了避免每张图片加载都要执行一次该方法） add by yeshuo
            setTimeout(function() {
                self.parentView.resizeSwitchBtn();
            }, 3000);
            self.parentView.resizeSwitchBtn();
		},
		
		
        /** 读信内容输出 */
        writeContent: function(dataSource, win) {
            var self = this;
            var thisDoc = win.document;
            var mid = dataSource.omid;
            var thismid = "mid_" + mid;

            var thisiframe = $($T.Utils.format("iframe[id='{0}']", [thismid]))[0];

            //正文内容特殊处理
            var content = dataSource.html.content;
            if($B.is.webkit && content.indexOf("windowtext") > -1) { //webkit excel粘贴加表格线
                content = content.replace(/windowtext 0.5pt solid/g, "windowtext 1pt solid");
            }

            thisDoc.write(content);
			
			this.mailDomReady(dataSource,win);
          
        },


		getNewMailContentHtml: function(mid, dataSource) {
            var self = this;
			var mid = mid || this.options.mid;
            var thismid = "mid_" + mid;
            var thisiframe = $($T.Utils.format("iframe[id='{0}']", [thismid]))[0];

            M139.Iframe.domReady(thisiframe, function() {
                //暂无callback 正文输出在iframe页调用
            }, {
                checkIframeHealth: true,
                query: "letterInfo" //检查iframe中的方法是否存在
            });

        },
		
        getMailContentHtml: function(mid, dataSource) {
            var self = this;
			var mid = mid || this.options.mid;
            var thismid = "mid_" + mid;
            var thisiframe = $($T.Utils.format("iframe[id='{0}']", [thismid]))[0];

            M139.Iframe.domReady(thisiframe, function() {
                //暂无callback 正文输出在iframe页调用
            }, {
                checkIframeHealth: true,
                query: "writeContent" //检查iframe中的方法是否存在
            });

        },

        /**
         *在$App里也调用了这个函数,做页面预加载
         */
        getNewMailContentUrl: function(mid,csslink) {
            var url = "/RmWeb/view.do?func=view:readMessage&comefrom="+$T.Url.queryString("comefrom");
			var self = this;
			var fid = self.options.fid;
            if(csslink){
                url+='&csslink=' + csslink;   
            }
			if(fid !== 0 ){
				fid = fid || 1;
			}
			url = $T.Url.makeUrl(url,{
					sid:$App.getSid(),
					cguid:Math.random(),
					mid:self.options.mid || mid,
					callback:'readMailReady',
					fid:fid
				});
            return url;
        },
		
		getMailContentUrl: function(mid) {
			var fid = $App.getCurrentFid() || 1;
            var url = "/m2012/html/readmailcontent.html?d={0}#mid={1}&fid="+fid;
			if(this.options && this.options.isSessionMail){
				url = url + '&t=sessionmail';
			}
			return $T.Utils.format(url, [top.$App.getSid().substring(0, 20), mid]);
			
		},
        
        replaceLinksSid: function(links){
            var link = '';
            for (var i = 0, len = links.length; i < len; i++) {
                 link = links[i];
                 try{
                    if (link.href.indexOf("javascript:") != 0) {
                        link.target = "_blank";
                    }
                    if (link.href.indexOf("$sid") >= 0) {
                        link.href=link.href.replace("$sid",top.$App.getSid());
                    }
                 }catch(e){}
            }
        },

        initialize: function() {
            this.model = this.options.model;
            this.parentView = this.options.parentView;
			return superClass.prototype.initialize.apply(this, arguments);
        },

        initEvents: function(mid) {
            var self = this;
            this.changeFontSize(mid);
            $App.on('mailResize', function(data) {
                if(data && data.mid == mid) {
                    self.resize(mid);
                }
            });
		
        },

        /** 字体大小切换 */
        changeFontSize: function(mid) {

            var self = this;

            //字体切换
            //*action  'increase':加大   'reduce':减小
            var iframeId = "mid_" + mid;
            var iframedoc = document.getElementById(iframeId).contentWindow.document;
            var contentText = iframedoc.body;
            var initContent = '';
            var contentNode = $(contentText).find("*"); //所有子节点
            var fontZoom = $('#fontzoom_' + mid).find("a");
            var fontSizes = [12, 14, 16, 18, 20, 22, 24, 32];
            var orignHeight = $(contentText).height(); //原始高度,要onload完才准确

            function getNewFontSize(action, size) {
                var newsize = size;
                var len = fontSizes.length;
                if(action == 'increase') {
                    for(var i = 0; i <= len; i++) {
                        if(size < fontSizes[i]) {
                            newsize = fontSizes[i];
                            break;
                        }
                    }
                } else { //缩小
                    for(var i = len - 1; i >= 0; i--) {
                        if(size > fontSizes[i]) {
                            newsize = fontSizes[i];
                            break;
                        }
                    }
                }
                return newsize;
            }

            //高度设置

            function setHeight(h) {
                $(contentText).height(h);
                $('#' + iframeId).height(h);
            }

            //字体大小

            function getFontSize(obj) {
                return parseInt((obj.css("font-size") || '14px').replace("px", ''));
            }

            fontZoom.click(function() {
                var action = $(this).attr("rel"); //切换操作：放大，原型，缩小
                $(contentText).attr('prevHeight', $(contentText).height()); //保存上一次高度
				var font_size = $(contentText).css("font-size") || "14px";
				var containerfontSize = parseInt(font_size.replace("px", ''));
                
				if(action == 'close') {
					$(this).parent().remove();
					return;
				}				
				if(action == 'normal') { //高度还原
                    setHeight($(contentText).attr('orignheight') || orignHeight);
                }
                if(action == 'reduce') {
                    setHeight($(contentText).attr('prevHeight'));
                }

                //body字体切换
                var bodyFontSize = getFontSize($(contentText));
                var bodyNewSize = '';
                if(!$(contentText).attr("data-size")) {
                    $(contentText).attr("data-size", bodyFontSize + 'px')
                }
                if(action == 'normal') {
                    $(contentText).css("font-size", $(contentText).attr("data-size"));
                } else {
                    bodyNewSize = getNewFontSize(action, bodyFontSize) + "px";
                    $(contentText).css({
                        "font-size": bodyNewSize
                    });
                }

                //子节点字体切换
                if(contentNode.length > 0) {
                    contentNode.each(function(n) {
                        if(!/br|button|hr|img|input|link|style|script/i.test($(this)[0].tagName)) {
                            var thisNodeSize = getFontSize($(this));
                            var parentNodeSize = getFontSize($(this).parent()); //父节点
                            var newSize = thisNodeSize;
                            var changeFlag = true;

                            if(thisNodeSize == parentNodeSize) {
                                changeFlag = false;
                            }

                            //保存原值
                            if(!$(this).attr("data-size") && changeFlag) {
                                $(this).attr("data-size", thisNodeSize + "px");
                            }

                            //字体大小切换
                            if(action == 'normal') {
                                $(this).attr("data-size") ? newSize = $(this).attr("data-size") : '';
                            } else {
                                if(!changeFlag) {
                                    return
                                }
                                newSize = getNewFontSize(action, thisNodeSize) + "px";
                            }
                            $(this).css({
                                "font-size": newSize,
                                'line-height': '1.6'
                            });
                        }
                    })

                }
                // add by tkh
                self.resize(mid);
            })
        },
        createScrollBar: function () {
            var self = this;
            var jContainer = self.jContainer;
            if(jContainer){
                var layout = $App.getLayout();
                if (layout == "left") {
                    jContainer.css("position", "relative");
                }

                self.scrollBarView = new M2012.ReadMail.ScrollBar.View({
                    container: jContainer,
                    widthEl: jContainer,
                    contentIframe: jContainer.find("iframe")[0]
                });
                self.scrollBarView.render();

                //fix css
			    if (layout == "top" || layout == "list") {
                    self.scrollBarView.$el.css("bottom", "3px");
			    }
            }

        },
        // add by tkh
        resize: function (mid) {
            //console.log("readmail resize.......");
            var self = this;
            var thismid = "mid_" + mid;
            var reduceH = this.hideQuoteFlag ? 45 : 0;
			var frame = window.frames[thismid];
            // 分栏模式下不存在读信放在容器$("#readWrap")内
            // 普通模式下会分配一个视图
            if ($App.getLayout() == "list") {
                self.jContainer = $("#toolbar_" + mid).closest("div[id^=view_]");
            } else {
                self.jContainer = $("#toolbar_" + mid).closest("#readWrap");
            }
            
            var jContainer = self.jContainer;
            
			if(reduceH > 0 && $B.is.ie && $B.getVersion() == 8){
				reduceH = 30;
			}
			
			try {
				if(!frame){return;} 
				var jReadPage = jContainer.find("div.J-readMailArea:eq(0)"); // pageRead 即为  inboxfl
				var _readPage = jContainer.find("div.cov-list:eq(0)"); //会话邮件
				if (_readPage.length > 0) {
				    jReadPage = _readPage;
                }
				var topBodyHeight = $App.getBodyHeight();
                if($App.getLayout() == "top" || $App.getLayout() == "left") { //上下分栏读信，读信的容器在分栏以下
                    jReadPage.height(topBodyHeight - jContainer.offset().top - 4); //整个读信模块高度
                } else { //普通读信
                    jContainer.height(topBodyHeight - 107); //整个读信模块高度
                    var readPageHeight = topBodyHeight - 164; //读信除去工具栏后的高度
                    jReadPage.height(readPageHeight);
                }
                var frmLetterContent = frame.frameElement || document.getElementById(thismid);
                var frmBody = frame.document.body || document.getElementById(thismid).contentWindow.document.body;

                if (!frmBody) return;
                if (frmBody.scrollHeight > frmLetterContent.offsetHeight) {
                    frmLetterContent.style.height = (frmBody.scrollHeight + 35 - reduceH).toString() + "px";
                    //frmBody.style.overflowX = "hidden";
                }
				
				//todo
				if ( frmBody.scrollHeight === 0 && frmLetterContent.offsetHeight === 0){
					frmLetterContent.style.height = '600px';
				}

                //会话邮件不显示滚动条
                if(_readPage.length > 0){return}

                if (!self.scrollBarView) {
                    self.createScrollBar();
                } else {
                    self.scrollBarView.update();
                }
            } catch(e) {
                console.log(e);
            }
        }
    }));
})(jQuery, _, M139);
/**
* @fileOverview 附件缩略图预览视图
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 附件缩略图预览视图
    */

    M139.namespace('M2012.ReadMail.View.FilePreview', superClass.extend({

        /**
        *@lends M2012.ReadMail.View.FilePreview.prototype
        */

        el: "",

        template: {
            thumbnails_li: ["<li>",
                            "<div class='imgInfo'>",
                                "{item}",
                                "<dl>",
                                    "<dt><span class='attrlist-title' title='{fileName}' >{fileName}</span>({fileSize})</dt>",
                                    "<dd><a href='{downLoad}' bh='readmail_download'>下载</a>{preView}<a href='javascript:;' data-id='{fileId}' bh='readmail_savedisk'>存彩云网盘</a></dd>",
                                "</dl>",
                            "</div>",
                        "</li>"],

            thumbnails: ["<div class='attrBody' {display} id='{id}'>",
                            "<div class='attrAll'>",
                                "<span class='fr attrall-title' id='select_attach' style='display:none'></span>",
            //"<span><strong>普通附件</strong>(共{num}个)</span> <a href='{downLoadAll}' bh='readmail_downloadall'>全部下载</a> <a href='javascript:;' id='allsavetodisk' bh='readmail_savediskall'>全部存彩云</a>",
                                "<span><strong>附件图片预览</strong>(共{num}个)</span>",
                            "</div>",
                            "<ul class='attrList'>",
                                "{liList}",
                            "</ul>",
                        "</div>"],

            notimgItem: ["<span class='imgLink attrico'>",
                            "<i class='{0}'></i>",
                        "</span>"],

            imgItem: ['<img index="{2}" class="imgLink" src="{0}" data-url="{0}" width="58" height="58" title="{1}"  rel="" />'],

            sessionAttach: [
 		                '<span class="rMl">附&#12288;件：</span>',
 		                '<div class="rMr convattrlist">',
 			            '<div id="infoSta" {displayall} class="attachmentAll attachmentAll_on clearfix"><span class="fl">共{num}个附件</span> <span ><a href="{downLoadAll}" class="allgetdown ml_10 fl" bh="{bh_downloadall}">全部下载</a><a href="javascript:;" id="allsavetodisk" style="display: none;" bh="{bh_savediskall}">全部存彩云网盘</a></span><a href="javascript:void(0);" class="attachmentAll_right"><i class="g-down" id="listUp" style="display:none;"></i><i class="g-up" id="listDown"></i></a></div>',
 			            '<ul class="attachmentAll_list">{data}</ul>',
 	                    '</div>'],

            conversationAttach: [
                        '<div class="covv-accessory">',
                            '<div {displayall}><span>共{num}个附件</span> <span ><a href="{downLoadAll}" bh="{bh_downloadall}">全部下载</a> | <a href="javascript:;" id="allsavetodisk" bh="{bh_savediskall}">全部存彩云网盘</a>{savemcloud}</span></div>',
                            '<ul class="attachmentAll_list">{data}</ul>',
                        '</div>'],                                                
			
			allMcloudLink: ' | <a href="javascript:;" id="readmail_allsavemcloud" bh="{0}">全部存彩云网盘</a>',
			
			mcloudLink: ' | <a href="javascript:;" data-mcloudid="{fileId}" bh="{bh_savemcloud}">存彩云网盘</a>',
			
			mcloudLinkImg: '<a href="javascript:;" data-mcloudid="{fileId}" bh="{bh_savemcloud}">存彩云网盘</a>',
			
			sessionLi: ['<li index="{index}" f="common"><i class="i_attachmentS" oldClass="i_file_16 {getFileIcoClass}"></i><span title="{fileName}" >{fileName}&nbsp;&nbsp;{fileSize}&nbsp;&nbsp;<a href="{downLoad}" bh="{bh_download}">下载</a>{preView} | <a href="javascript:;" data-id="{fileId}" bh="{bh_savedisk}">存彩云网盘</a></span></li>']

            //sessionLi: ['<li index="{index}"><i class="i_file_16 {getFileIcoClass}"></i><span title="{fileName}" >{fileName}&nbsp;&nbsp;{fileSize}&nbsp;&nbsp;<a href="{downLoad}" bh="readmail_download">下载</a>{preView} | <a href="javascript:;" data-id="{fileId}" bh="readmail_savedisk">存网盘</a></span></li>']


        },

        initialize: function () {
            this.model = new M2012.ReadMail.Normal.Model();
            if (!top.SiteConfig.colorCloudRelease) {
                console.log('彩云开关头没打开');
                this.template.mcloudLink = "";
                this.template.mcloudLinkImg = "";
                this.template.allMcloudLink = "";
            }
            return superClass.prototype.initialize.apply(this, arguments);
        },

        /**
        * 打开附件
        */
        open: function (p) {
            var url = M2012.ReadMail.View.FilePreview.getUrl(p, this.model.get("currFid"));
            window.open(url);
        },

        /**
        * 附件格式验证
        */
        checkFile: function (fileName, fileSize) {
            if (fileSize && fileSize > 1024 * 1024 * 20) {
                return -1;
            }
            //var reg = /\.(?:doc|docx|xls|xlsx|ppt|pptx|pdf|txt|html|htm|jpg|jpeg|jpe|jfif|gif|png|bmp|tif|tiff|ico|)$/i;
            var reg = /\.(?:doc|docx|xls|xlsx|ppt|pptx|pdf|txt|jpg|jpeg|jpe|jfif|gif|png|bmp|ico|)$/i;
            var reg2 = /\.(?:rar|zip|7z)$/i;
            if (reg.test(fileName)) {
                return 1;
            } else if (reg2.test(fileName)) {
                return 2;
            } else {
                return -1;
            }
        },

        /**
        * 获取文件格式图标
        * size = 1 大图标 size = 0 小图标
        */
        getFileIcoClass: function (size, fileName) {
            return $T.Utils.getFileIcoClass(size, fileName);
        },

        /**
        * 是否解压文件
        */
        isRelease: function () {
            return true;
        },

        /** 是否支持图片预览 */
        isPreviewImg: function (fileName) {
            return /(?:\.jpg|\.gif|\.png|\.ico|\.jfif|\.bmp|\.jpeg|\.jpe)$/i.test(fileName);
        },

        /** 获取预览图片路径 */
        getImgUrl: function (f, mid) {
            var self = this;
            var urltemp = "&sid={sid}&mid={mid}&realsize={realsize}&size={size}&offset={offset}&name={name}&type={type}&width={width}&height={height}&quality={quality}&encoding=1";
            var imgUrl = 'http://' + location.host + "/RmWeb/mail?func=mbox:getThumbnail" + $T.Utils.format(urltemp, {
                sid: $App.getSid(),
                mid: mid,
                size: f.fileSize,
                realsize: f.fileRealSize,
                offset: f.fileOffSet,
                name: f.fileName,
                type: f.type,
                width: 58,
                height: 58,
                quality: 80
            });
            return imgUrl;
        },

        /** 
        *获取附件预览视图
        */
        getThumbnailsHtml: function (title, attach, mid) {

            var self = this;
            var thisTemplate = self.template.thumbnails.join('');
            var num = attach.length;
            var id = "attach_" + mid;
            //var display = num > 0 ? "" : "style='display:none'";
            var display = '';
            var attachHtml = [];
            var previewImg = [];
            var imgUrl = '';
            var thisLiTemplate = self.template.thumbnails_li.join('');
            var notimgtemp = self.template.notimgItem.join('');
            var imgtemp = self.template.imgItem.join('');
			var mcloudLink = self.template.mcloudLinkImg;
            var getDownloadAllUrl = self.getDownloadAllUrl(mid);
            var picNum = 0;
            for (var i = 0; i < num; i++) {
                var f = attach[i];
                //判断是否可预览图片格式
                var isImgFlag = false;
                var index = "";
                var isImg = self.isPreviewImg(f.fileName);
                if (isImg) {
                    isImgFlag = true;
                    index = 'index=\"' + (picNum) + '\"';
                    imgUrl = self.getImgUrl(f, mid);
                    /*
                    var urltemp = "&sid={sid}&mid={mid}&size={size}&offset={offset}&name={name}&type={type}&width={width}&height={height}&quality={quality}&encoding=1";
                    imgUrl = 'http://' + location.host + "/RmWeb/mail?func=mbox:getThumbnail" + $T.Utils.format(urltemp, {
                    sid: $App.getSid(),
                    mid: mid,
                    size: f.fileSize,
                    offset: f.fileOffSet,
                    name: f.fileName,
                    type: f.type,
                    width: 58,
                    height: 58,
                    quality: 80
                    });
                    */
                    picNum++;
                }
                //console.log(imgUrl);
                var itemCode = isImgFlag ? $T.Utils.format(imgtemp, [imgUrl, f.fileName, picNum - 1]) : $T.Utils.format(notimgtemp, [self.getFileIcoClass(1, f.fileName)]);

                var previewType = self.checkFile(f.fileName, f.fileRealSize); //0表示不支持，1表示普通预览文件，2表示压缩包
                var downloadUrl = M2012.ReadMail.View.FilePreview.getDownloadAttachUrl(f, mid);
                var previewUrl = M2012.ReadMail.View.FilePreview.getUrl({
                    type: "email",
                    downloadUrl: downloadUrl,
                    contextId: mid,
                    fileName: encodeURIComponent(f.fileName),
                    fileSize: f.fileRealSize
                }, self.model.get("currFid"));

                var preViewTemp = "<a {3} href='{0}' target = '_self' bh='{2}'>{1}</a>";

                var preViewHtml = "";

                if (previewType == 1) {
                    preViewHtml = $T.Utils.format(preViewTemp, ['javascript:;', '预览', 'readmail_previewattach1',index]);
                }
                if (previewType == 2) {
                    preViewHtml = $T.Utils.format(preViewTemp, [previewUrl, '打开', 'readmail_previewattach2',index]);
                }

                var liformatData = {
                    index: picNum - 1,
                    item: itemCode,
                    fileId: f.fileId,
                    fileLink: 'javascript:;',
                    fileName: $T.Html.encode(f.fileName),
                    fileSize: $T.Utils.getFileSizeText(f.fileRealSize),
                    downLoad: M2012.ReadMail.View.FilePreview.getDownloadAttachUrl(f, mid),
                    preView: preViewHtml,
                    //mcloudlink: $User.isChinaMobileUser() ? $T.Utils.format(mcloudLink,{fileId: f.fileId, bh_savemcloud: 'readmail_savemcloud'}) : '', //彩云入口
                    saveWebDisk: 'javascript:'
                };
				
		
				
                if (isImgFlag) {
                    /*previewImg.push({
                    imgUrl: imgUrl,
                    fileName: f.fileName,
                    downLoad: M2012.ReadMail.View.FilePreview.getDownloadAttachUrl(f, mid)
                    });*/
                    attachHtml.push($T.Utils.format(thisLiTemplate, liformatData));
                }
            }

            //self.previewImg = previewImg; //附件预览用

            if (attachHtml.join('') == '') {
                return '';
            } else {
                var formatData = { display: display, id: id, num: picNum, liList: attachHtml.join(''), downLoadAll: getDownloadAllUrl };
                var thisCode = $T.Utils.format(thisTemplate, formatData);
                return thisCode || '';
            }
        },

        /** 
        *附件全部下载
        */
        getDownloadAllUrl: function (mid) {
            var temp = 'http://' + location.host + "/RmWeb/mail?func=mbox:autoPack&sid={0}&mid={1}&taskId={2}&format=zip";
            var url = $T.Utils.format(temp, [$App.getSid(), mid, Math.ceil(Math.random() * 10000)]);
            return url;
        },

        /** 
        *附件全部存彩云
        */
        getAllSaveToDiskUrl: function () {
            var self = this;
            var title = self.get("title");
            var mid = self.get("mid");
            var url = self.getDownloadAllUrl(mid);
            var reg = /[\\\/:*?"<>|]/g;
            var fileName = title.replace(reg, "_").substring(0, 80) + ".zip";
            self.saveToDiskRequest(url, fileName);
        },

        /**
        * 全部存彩云/彩云命名
        */
        getAllSaveToDiskName: function(fileName){
            var reg = /[\\\/:*?"<>|]/g;
            return (fileName || '附件').replace(reg, "_").substring(0, 80) + ".zip";
        },

        /** 
        *附件存彩云/彩云
        */
        saveToDiskRequest: function (options) {
            var saveToDiskview = new M2012.UI.Dialog.SaveToDisk({
                fileSize :options.fileSize,
                fileName: options.fileName || '附件.zip',
                downloadUrl: options.url || null,
                saveToMcloud:options.saveToMcloud || null,
				isreadmail:true

            });
			if(options.saveToMcloud){
				//存彩云
				saveToDiskview.repareSaveToMcloud().on("success", function () {
					//存彩云成功记日志
					if (options.packSave) { 
						BH("readmail_savediskall");
					} else {
						BH("readmail_savedisk");
					}
				});
			} else {
				saveToDiskview.render().on("success", function () {
					//存彩云成功记日志
					if (options.packSave) { 
						BH("readmail_savediskall");
					} else {
						BH("readmail_savedisk");
					}
				});			
			}

        },


        initEvents: function (dataSource, mid) {
            var self = this;
            var data = dataSource.attachments;
            var allFileSizeZip = 0;
            for(var i= 0,l=data.length; i<l; i++){
                allFileSizeZip +=parseInt(data[i].fileRealSize);
            }
            var attachList = $(this.el).find("ul");
            var allsavetodisk = $(this.el).find("#allsavetodisk");
            var allsavemcloud = $(this.el).find("#readmail_allsavemcloud");
            var downloadAllUrl = self.getDownloadAllUrl(mid);
            var fileName = self.getAllSaveToDiskName(dataSource.subject);




            //全部存彩云
            allsavetodisk.click(function () {
                self.saveToDiskRequest({
                    url:downloadAllUrl,
                    fileName:fileName,
                    fileSize :allFileSizeZip,
                    packSave:true
                });
            });

            //全部存彩云
            allsavemcloud.click(function () {

                if (top.mcloudSaving) {
                    $('#icon_mcloudSaving').remove();
                    var saving = '<span id="icon_mcloudSaving"><img src="../images/global/load.gif" class="mr_5 ml_5" alt="">正在保存</span>';
                    $(this).parent('div').append(saving);
                    top.mcloudSaving = false;
                }


                self.saveToDiskRequest({
                    url: downloadAllUrl,
                    fileName: fileName,
                    packSave: true,
                    saveToMcloud: true
                });

            });
            function getUnitData(fileid) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].fileId == fileid) {
                        return data[i];
                        break;
                    }
                }
            }

            attachList.find("a[data-id]!=''").click(function () {
                var fileid = $(this).attr('data-id');
                var url = M2012.ReadMail.View.FilePreview.getDownloadAttachUrl(getUnitData(fileid), mid);
                self.saveToDiskRequest({
                    url:url, 
                    fileName:getUnitData(fileid).fileName,
                    fileSize:getUnitData(fileid).fileRealSize
                });

            });

            //附件存彩云
            attachList.find("a[data-mcloudid]!=''").click(function(){
                var fileid = $(this).attr('data-mcloudid');

                if (top.mcloudSaving) {
                    $('#icon_mcloudSaving').remove();
                    var saving = '<span id="icon_mcloudSaving"><img src="../images/global/load.gif" class="mr_5 ml_5" alt="">正在保存</span>';
                    $(this).parent('span').parent('li').append(saving);
                    top.mcloudSaving = false;
                }

                var url = M2012.ReadMail.View.FilePreview.getDownloadAttachUrl(getUnitData(fileid), mid);
                self.saveToDiskRequest({
                    url:url, 
                    fileName:getUnitData(fileid).fileName,
                    saveToMcloud:true
                });
            });

            attachList.find("a[index]!='',img[index]!=''").click(function () {
                var num = $(this).attr("index");
                if (num != "") {
                    if (typeof (top.focusImagesView) != "undefined") {
                        top.focusImagesView.render({ data: self.previewImg, index: parseInt(num) });
                    }else {
                        top.M139.registerJS("M2012.OnlinePreview.FocusImages.View", "packs/focusimages.html.pack.js?v=20130603");
                        var timeout = ($.browser.msie && ($.browser.version == 6)) ? 350 : 50; //ie6 延迟加载
                        setTimeout(function () {
                            top.M139.requireJS(['M2012.OnlinePreview.FocusImages.View'], function () {
                                top.focusImagesView = new top.M2012.OnlinePreview.FocusImages.View();
                                top.focusImagesView.render({ data: self.previewImg, index: parseInt(num) });
                            });
                        }, timeout);
                    }
                }
            });

        },

        /**
        * 获取会话邮件附件
        */
        getConversationAttach: function (title, attach, mid) {
            this.isSessionMail = true;
            return this.getSessionAttach(title, attach, mid);
        },

        /**
        * 获取邮件附件
        */
        getSessionAttach: function (title, attach, mid) {
            var self = this;
            var isSessionMail = this.isSessionMail ? true : false;
            var thisTemplate = isSessionMail ? self.template.conversationAttach.join('') : self.template.sessionAttach.join('');
            var liTemplate = self.template.sessionLi.join('');
            var mcloudLink = self.template.mcloudLink;
            var allMcloudLink = self.template.allMcloudLink;
            var num = attach.length;
            var attachHtml = [];
            var previewImg = []; //预览图片
            var imgNum = 0;
            var display = num > 0 ? "" : "style='display:none'";
            var hrefTemplate = "<a href='{0}' title = '{2}' ><i class='{1}'></i>{2}</a>";
            if ($User.isChinaMobileUser()) {
                //liTemplate = $T.Utils.format(liTemplate, [mcloudLink]);
                top.mcloudSaving = true;
				//liTemplate = liTemplate + mcloudLink;
			}
			for (var i = 0; i < num; i++) {
                var f = attach[i];
                var previewType = self.checkFile(f.fileName, f.fileRealSize); //0表示不支持，1表示普通预览文件，2表示压缩包
                var downloadUrl = M2012.ReadMail.View.FilePreview.getDownloadAttachUrl(f, mid);
                var previewUrl = M2012.ReadMail.View.FilePreview.getUrl({
                    type: "email",
                    downloadUrl: encodeURIComponent(downloadUrl),
                    contextId: mid,
                    fileName: encodeURIComponent(f.fileName),
                    fileSize: f.fileRealSize
                }, self.model.get("currFid"));
                var preViewTemp = "<a href='{0}' target = '{4}' bh='{2}' {3}>{1}</a>";
                var preViewHtml = "";
                var target = "_blank";
                var previewbh;
                if (previewType == 1) {
                    var index = '';
                    var href = previewUrl;
                    //if (self.isPreviewImg(f.fileName)) {
                       // imgNum++;
                       // index = 'index=\"' + (imgNum - 1) + '\"';
                       // href = 'javascript:;';
                       // target = "_self";
                   // }
                    previewbh = isSessionMail ? 'cov_preview' : 'readmail_previewattach1';
                    preViewHtml = " | " + $T.Utils.format(preViewTemp, [href, '预览', previewbh, index, target]);
                }
                if (previewType == 2) {
                    previewbh = isSessionMail ? 'cov_preview' : 'readmail_previewattach2';
                    preViewHtml = " | " + $T.Utils.format(preViewTemp, [previewUrl, '打开', previewbh, '', target]);
                }
                var liformatData = {
                    fileId: f.fileId,
                    fileLink: 'javascript:;',
                    getFileIcoClass: self.getFileIcoClass(0, f.fileName),
                    fileName: $T.Html.encode(f.fileName),
                    fileSize: $T.Utils.getFileSizeText(f.fileRealSize),
                    downLoad: M2012.ReadMail.View.FilePreview.getDownloadAttachUrl(f, mid),
                    preView: preViewHtml,
                    saveWebDisk: 'javascript:;',
                    bh_savemcloud: isSessionMail ? 'cov_savetomcloud' : 'readmail_savemcloud',
                    bh_download: isSessionMail ? 'cov_download' : 'readmail_download',
                    bh_savedisk: isSessionMail ? 'cov_savetodisk' : 'readmail_savedisk'
                }

                //保存预览图片数组
                var isPreiviewImg = self.isPreviewImg(f.fileName);
                if (isPreiviewImg) {
                    previewImg.push({
                        imgUrl: self.getImgUrl(f, mid),
                        fileName: f.fileName,
                        downLoad: M2012.ReadMail.View.FilePreview.getDownloadAttachUrl(f, mid)
                    });
                }
                attachHtml.push($T.Utils.format(liTemplate, liformatData));
            }

            self.previewImg = previewImg;

            //会话邮件区分
            var bh_allsavemclound = 'readmail_savemcloud';
            if(allMcloudLink){
                if(isSessionMail){
                    bh_allsavemclound = 'cov_allsavetomcloud';
                }
                allMcloudLink = $T.Utils.format(allMcloudLink,[bh_allsavemclound]);
            }
            return $T.Utils.format(thisTemplate, {
                num: num,
				mt_4 : num > 1 ? 'mt_4' : '',
                downLoadAll: self.getDownloadAllUrl(mid),
                data: attachHtml.join(''),
                displayall: num > 1 ? '' : 'style="display:none"',
                bh_downloadall:isSessionMail ? 'cov_alldownload' : 'readmail_downloadall',
                bh_savediskall:isSessionMail ? 'cov_allsavetodisk' : 'readmail_savediskall'
                //savemcloud: allMcloudLink
            });
        }
    }, {
	    
        /**
        * 获取附件url
        * @param {object} p 附件属性
        */
        getUrl: function (p, fid) {
            var ucDomain = domainList[1].webmail;
            var ssoSid = $App.getSid();
            var skinPath = "skin_green";
            var rmResourcePath = domainList.global.rmResourcePath;
            var diskInterface = domainList.global.diskInterface;
            var disk = domainList.global.disk;
            var uid = $User.getUid() || null;
            var previewUrl = "/m2012/html/onlinepreview/online_preview.html?fi={fileName}&mo={uid}&dl={downloadUrl}&sid={sid}&id={contextId}&rnd={rnd}&src={type}&loginName={loginName}&fid={fid}&comefrom={comefrom}&composeId={composeId}";
            previewUrl += "&skin={skin}";
            previewUrl += "&resourcePath={resourcePath}";
            previewUrl += "&diskservice={diskService}";
            previewUrl += "&filesize={fileSize}";
            previewUrl += "&disk={disk}";
            previewUrl = $T.Utils.format(previewUrl, {
                uid: uid,
                sid: ssoSid,
                rnd: Math.random(),
                skin: skinPath,
                resourcePath: encodeURIComponent(rmResourcePath),
                diskService: encodeURIComponent(diskInterface),
                type: p.type || "attach",
                fileName: encodeURIComponent(p.fileName),
                downloadUrl: encodeURIComponent(p.downloadUrl),
                contextId: p.contextId || "",
                fileSize: p.fileSize || "",
                encoding: 1,
                disk: disk,
                loginName: $User.getLoginName(),
                fid: fid,
                comefrom: p.comefrom || "readmail",
                composeId: p.composeId || ""
            });
            return previewUrl;
        },

        /** 
        *附件单个下载
        */
        getDownloadAttachUrl: function (file, mid) {
            return this.getPreViewUrl({
                mid: mid,
                offset: file.fileOffSet,
                size: file.fileSize,
                name: file.fileName,
                type: file.type,
                encoding: file.encoding ? file.encoding : 1
            });
        },

	    // 静态方法 file参数和业务逻辑都与对象实例没有关联
        getPreViewUrl: function (file) {
            if (file) {
                var url = 'http://' + location.host + "/RmWeb/view.do";
                return M139.Text.Url.makeUrl(url, {
                    func: 'attach:download',
                    mid: file.mid,
                    offset: file.offset,
                    size: file.size,
                    sid: $App.getSid(),
                    type: file.attachType || file.type,
                    encoding: file.encode || file.encoding
                }) + '&name=' + encodeURIComponent(file.name);
            } else {
                return '';
            }
        }
	}));

})(jQuery, _, M139);


﻿﻿/**   
* @fileOverview 读信页邮件投递状态查询
*/

(function (jQuery, _, M139) {

/**
*@namespace 
*读信页邮件投递状态查询
*/

M139.namespace("M2012.DeliveryStatus.Model",Backbone.Model.extend({
   
    defaults:{  //默认数据
        mid:null,
		sort:0,
		start:0,
		total:50,
		rcptFlag:null
	},
	
	//邮件发送详细状态[尽量不要改动]
    sendStatus:{
            state_0:  "投递中",
            state_60: "已投递到对方邮箱",
            state_61: "已投递到对方邮箱，但被对方认定为病毒邮件",
            state_70: "投递失败，该邮件疑似含病毒",
            state_71: "投递失败，收件人不存在",
            state_72: "投递失败，收件人已被冻结或注销",
            state_73: "投递失败，服务器通信错误",
            state_74: "投递失败，您的帐户无权向此邮件组发送邮件",
            state_75: "投递失败，您的帐户无权向此邮件组发送邮件",
            state_76: "投递失败，您的帐户无权向此邮件组发送邮件",
            state_77: "投递失败，收件人帐户已被限制接收接收",
            state_78: "投递失败，您的帐户已被限制发送邮件",
            state_79: "投递失败，您的帐户在对方的黑名单中",
            state_80: "投递失败，对方邮箱拒收此邮件",
            state_81: "投递失败，服务器通信错误",
            state_82: "投递失败，被对方邮箱判定为垃圾邮件",
            state_83: "投递失败，被对方邮箱判定为病毒邮件",
            state_84: "网关退信",
            state_85: "邮件大小超时收件人设置的大小",
            state_86: "邮箱容量已满",
            state_87: "本域投递失败，用户反病毒，邮件作为附件来通知收件人",
            state_88: "本域投递失败，用户分拣规则设置为直接删除",
            state_89: "已投递到对方邮箱，对方已回复（自动回复）",
            state_90: "已投递到对方邮箱，对方已转发（自动转发）",
            state_91: "本域投递失败，邮件审核未通过",
            state_99: "投递中",
            state_100: "已投递对方服务器",
            state_101: "投递中",
            state_119: "投递失败",
            state_250: "该邮件已超出发信状态查询有效期"
        },

	
	getDataSource:function(callback){
	
		var options={
			mid:this.get("mid"),
			sort:this.get("sort"),
			start:this.get("start"),
			total:this.get("total")
		}

        M139.RichMail.API.call("mbox:getDeliverStatus",options,function(result){            
            callback(result.responseData);
        });
        
	}

}));

})(jQuery, _, M139);

/**
* @fileOverview 读信页邮件投递状态查询
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
    /**
    * @namespace 
    * 读信页邮件投递状态查询
    */   
         
    M139.namespace('M2012.DeliveryStatus.View', superClass.extend({

    /**
    *@lends M2012.DeliveryStatus.View.prototype
    */

    el:"",

    events:{},

    template:{
        content:[
 		        '<span class="rMl">发信状态：</span>',
 		        '<div class="rMr">',
 			        '<span><a href="javascript:;">查看详情</a><a href="javascript:;" style="display:none">关闭</a></span>',
 			        '<div class="mail-tdztdiv">',
 			        '<table class="mail-tdzt" style="display:none; width: 70%;">',
 			            '<tr>',
 				            '<th>收件人</th><th>投递状态</th><th>时间</th>',
 			            '</tr>',
 			            '{0}',
 		            '</table>',
 		            '</div>',
 		        '</div>'].join(''),
 		        
 	        tips:[
 		        '<span class="rMl">发信状态：</span>',
 		        '<div class="rMr">',
 			        '<span>{0}</span>',
 		        '</div>'].join(''),

 		    item:['<tr>',
		            '<td>{0}</td>',
		            '<td>{1}</td>',
		            '<td>{2}</td>',
 			      '</tr>'].join('')        
 		      },

    initialize: function(){
       var self=this;
       this.model=new M2012.DeliveryStatus.Model();
       return superClass.prototype.initialize.apply(this, arguments);
       
    },

    initEvents:function(){
        var self = this;
        var span = $(self.el).find(".rMr span");
        var detail = $(self.el).find(".mail-tdzt");
        $(self.el).show();
        span.find("a:eq(0)").click(function(){
            $(this).hide();
            span.find("a:eq(1)").show();
            detail.show();        
        });
        span.find("a:eq(1)").click(function(){
            $(this).hide();
            span.find("a:eq(0)").show();
            detail.hide();        
        });
    },

    render:function (){
        var self=this;
        var contentTemp = self.template.content;
        var tipsTemp = self.template.tips;
		var itemTemp = self.template.item;   
        var rcptFlag = self.model.get('rcptFlag');
        var tipsHtml = '';
        var tips1 = '邮件发送已经超过系统设置的最大天数，查询不到详情';
        var tips2 = '投递失败，邮件被反垃圾系统过滤';
        
		if(rcptFlag && rcptFlag < 5){
		     this.model.getDataSource(function(dataSource){
		        if(dataSource.code == 'FS_UNKNOWN' && dataSource.errorCode == '2308309' ){
		            tipsHtml = $T.Utils.format(tipsTemp,[tips1]);
		            $(self.el).html(tipsHtml).show();
		        }
		        
		        //查到详情
		        if(dataSource.code == 'S_OK' && dataSource['var']){
		            var itemData = [];
		            var html = '';
		            var data = dataSource['var'][0]; //数据格式比较特殊	
		            if(data && data.tos){
		                var tos = data.tos;
		                for(var i = 0; i< tos.length;i++){
		                    var mails = $T.Utils.htmlEncode(tos[i]['mail']);
		                    var times = self.getDate(tos[i]['lastTime']);
		                    var states = self.getStatus(tos[i]['state']);
		                    itemData.push($T.Utils.format(itemTemp,[mails,states,times]));
		                }
		            }
		            html = $T.Utils.format(contentTemp,[itemData.join('')]);    
		            $(self.el).html(html).show();
                    self.initEvents();		        
		        }
            }); 
		}
		
		//邮件被反垃圾过滤
		if(rcptFlag && rcptFlag == 6){
		    tipsHtml = $T.Utils.format(tipsTemp,[tips2]);
		    $(self.el).html(tipsHtml).show();
		}
    },
    
    /**
    * 获取邮件投递状态
    */
    getStatus:function(state){
        var sendStatus = this.model.sendStatus;
        var statusText = sendStatus["state_" + state];
        return statusText != undefined ? statusText : sendStatus["state_0"];  
    },
    
    /**
    * 获取邮件投递日期格式
    */
    getDate:function(lastTime){
       //有时用lastDate
        return $Date.format("yyyy年MM月dd日(星期w) hh点mm分",new Date(lastTime * 1000));
    }    
   



}));
    
    
})(jQuery, _, M139);    



﻿/**   
* @fileOverview 邮件列表和读信页加星标和取消星标
*/

(function (jQuery, _, M139) {

/**
* @namespace 
* 邮件列表和读信页加星标和取消星标
*/

M139.namespace("M2012.ChangeStar.Model",Backbone.Model.extend({
    
    defaults:{  
		ids:[], //星标邮件mid
		type:'starFlag',
	   value:0  // 0 - 取消星标 1 - 标记星标
	},
	
    UpdatStar: function (options, callback) {
	
		var options= options || {
			ids:this.get("ids"),
            sessionIds:this.get("sessionIds"),
			type:this.get("type"),
			value:this.get("value")
		}

        if(!options.ids){delete options.ids}
        if(!options.sessionIds){delete options.sessionIds}
        
        M139.RichMail.API.call("mbox:updateMessagesStatus",options,function(result){
            if(result.responseData.code && result.responseData.code == 'S_OK'){
                callback && callback(result.responseData["var"]);
            }
        });
        
	}

}));

})(jQuery, _, M139);

/*
*报文格式：
    <object> 
    <array name="ids"> 
        <string>208102e80ed5a52d00000003</string>
    </array> 
    <string name = "type" >starFlag</string> 
    <int name="value">0</int> 
    </object>
*/

﻿/**
* @fileOverview 邮件列表和读信页加星标和取消星标
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
    /**
    * @namespace 
    * 邮件列表和读信页加星标和取消星标
    */   
         
    M139.namespace('M2012.ChangeStar.View', superClass.extend({

        /**
        *@lends M2012.ChangeStar.View.prototype
        */

    el:"body",

    events: {
        //"hover [name=tag_starmail]": "hoverStar",
        "click [name=stardel]": "deleteStar",
        "click [name=list_starmail]":"clickStar",
        "click [name=read_starmail]":"clickStar"
    },
    
    initialize: function(){
       var self=this;
       this.model=new M2012.ChangeStar.Model();
      
       $App.on('markstar',function(args){
            var mid = args.mid;
            self.el = "#list_star_" + mid + ",#rsession_star_" + mid + ",#rsm_star_" + mid + ",#list_left_star_" + mid;   
            if (args.value == 1) {
                var stariconInTitle = $("#readmail_" + mid + " h2").find('[name=read_starmail]')[0];
                stariconInTitle && (stariconInTitle.className = "i_star_y");
                if ($App.isSessionMode()) { //会话模式，保持原来的星标
                    $("#readmail_" + mid + " h2").find('[name=read_starmail]')[0].className = "i_star_y";
                    self.addStar();
                } else {
                    //if ($("#readmail_" + mid + " [name=tag_starmail]").length == 0) { //避免重复
                    $("#readmail_" + mid + " h2").find('[name=read_starmail]')[0].className = "i_star_y";
                    BH("mailbox_markStar");
                    //}
                }

            } else {
                self.removeStar();
                $("#readmail_" + mid + " h2").find('[name=read_starmail]')[0].className = "i_star";
            }
       });

        //新会话邮件星标
        $App.off("changeCovStar").on("changeCovStar",function(args){
            if(args){
                var options = args.options,
                    callback = args.callback;
                self.model.UpdatStar(options,function(){
                    callback && callback();
                    appView.trigger("changeStar",{}); //同步刷新
                    appView.trigger('reloadFolder', { reload: true });
                })
            }
        });
       
       return superClass.prototype.initialize.apply(this, arguments);
       
    },
    hoverStar:function(sender){
        var target = sender.srcElement || sender.target;
        if ($(target).attr("name") != "tag_starmail") { //如果不是当前元素，冒泡到上级一直找到tagItem
            target = $(target).parents("[name=tag_starmail]");
        }
        if ($(target).hasClass("stardel-on")) {
            $(target).removeClass("stardel-on");
        } else {
            if ($(target).attr("name") == "tag_starmail") {
                $(target).addClass("stardel-on");
            }
        }
    },
    deleteStar: function (e) {
       
        M139.Event.stopEvent(e);
        var target = e.srcElement || e.target;
        
        var mid = $(target).parents("[mid]").attr("mid");
		var sessionId = $(target).parents("[sessionId]").attr("sessionId");

        if( $App.isSessionMode() && $App.getCurrentTab().group === "mailbox" && sessionId ){
            this.model.set({ 'ids': null, sessionIds:[Number(sessionId)], value: 0 });
        }else{
            this.model.set({ 'ids': [mid], sessionIds:null, value: 0 });
        }

		var callback = function(){
			$App.trigger("showMailbox", { comefrom: "commandCallback" });
			$App.trigger("refreshSplitView");//刷新分栏		
		};
		
        this.update(callback);
        $(target).parents("[name=tag_starmail]").remove();
		$("#readmail_" + mid + " [name=tag_starmail]").remove();
        //$App.trigger("mailboxDataChange");

    },
    //点击星标
    clickStar: function (e) {
        var self = this;
        var elem = $(e.currentTarget);
        var mid;
        var sessionId=elem.parents("[sessionId]").attr("sessionId");
        if (elem.attr("name") == "read_starmail") {
            mid = elem.parents("div[mid]").attr("mid");
            BH("readmail_star")
        } else {
            mid = elem.parents("tr").attr("mid");
            BH("mailbox_star2")
        }
        var flag = (elem.hasClass("i_star") || elem.hasClass("i_starM")) ? 1 : 0;
        this.starCommand(mid,sessionId,flag);
        /*
        var id = elem.attr("id");
        var ids = [];
        ids.push(mid);
        self.el = "#list_star_" + mid + ",#rsession_star_" + mid + ",#rsm_star_" + mid + ",#list_left_star_" + mid;
        self.model.set({'ids':ids,value:elem.hasClass("i_star_y") ? 0 : 1});
		var callback = function(){
			appView.trigger("changeStar"); //同步刷新
			appView.trigger('reloadFolder', { reload: true });
		};
        self.update(callback); */
    },
    starCommand:function(mid,sessionId,flag){
        var args = { type: "starFlag", value: flag };
        args.command = "mark";
        args.mids = [mid];
        args.mailtype ="";
        args.sessionIds=sessionId;
        $App.trigger("mailCommand", args);
    },
    //标记星标
    addStar:function(){
        var self = this;
        $(self.el).addClass("i_star_y");
        //$(self.el).attr("title",'取消星标');
        $(self.el).attr("val", 1);
        BH("mailbox_markStar");
    },
    
    //取消星标
    removeStar: function () {
        
        var self = this;
        $(self.el).removeClass("i_star_y");
        //$(self.el).attr("title",'标记星标');
        $(self.el).attr("val", 0);
        BH("mailbox_markStar");

        $App.trigger("changeStar") 
    
    },
    
    update:function (callback){
        var self=this;
        var action = self.model.get("value");
        self.model.UpdatStar(null, function(result){
            if (result > 0) {
	            action == 0 ? self.removeStar() : self.addStar() 
	        }
			callback && callback();
        });   
       
    }

}));


$(function(){
    var changestarview = new M2012.ChangeStar.View();
})

})(jQuery, _, M139);    
﻿/**   
* @fileOverview 读信页邮件快捷回复
*/

(function (jQuery, _, M139) {

/**
* @namespace 
* 读信页邮件快捷回复
*/

M139.namespace("M2012.ReadMail.Model.QuickReply",Backbone.Model.extend({
        
    	
	    /**
        *快捷回复提示语
        */
	    tips:{
	        replySuccess:'邮件回复成功',
	        replyFail:'系统繁忙,请稍后重试。',
	        replyContentError:'请输入要回复的内容。',
	        replyMailError:'请输入正确的邮件地址。',
	        replyMailNull:'请输入回复的邮件地址。'
	    },
    		
	    /**
        *快捷回复信件
        *@param {Object} options 初始化参数集
        */
	    compose:function(options,callback){	
            var self = this;
            M139.RichMail.API.call("mbox:compose&comefrom=5&categroyId=103000000",options,function(result){
                if(result.responseData.code && result.responseData.code == 'S_OK'){
                    callback && callback(true);
                }else{
                    callback && callback();
                }
            });   
	    },
    	
        /**
        *快捷回复信件数据组装
        *@param {Object} postData 传递参数
        *@param {Object} replyMessageData 传递参数
        *@param {function} callback 回调函数 
        */
	    replyMessage:function(postData,replyMessageData,callback){
	        var self = this;
	        var thiscallback = callback;
			//add by zsx 代收邮箱快捷回复的时候，取当前代收账户作为默认值
			var defaultSender = $User.getDefaultSender();
			var mid = $App.getCurrMailMid();
			var url = $("#mid_"+mid).attr("src");
			var thisone,fid;
			if(url && url.indexOf('fid')){
				var i = url.indexOf("fid=");
				fid = url.substring(i + 4);
				fid = parseInt(fid);
				if($App.getFolderType(fid) == -3){
					thisone = $App.getFolderById(fid).email;
					var poplist = top.$App.getPopList();
					var list =[];
					for(var i =0;i<poplist.length;i++){
						list.push(poplist[i]["email"]);
					}
					if($.inArray(thisone,list) > -1){
						defaultSender = thisone;
					}
				}	
			}
			//add by zsx如果是其他文件夹移动过来的邮件，快捷回复的时候，回复人要回复为默认值
			var findEmail = (function(){
				var toDiv = $(".readMail").filter("[mid='"+top.$App.getCurrMailMid()+"']").find("#receiver_to").children("div").children(".gAddr");
				var toList = [];
				for(var i=0;i<toDiv.length;i++){
					toList.push(top.$Email.getEmail($(toDiv[i]).attr('addr')));
				}
				var poplist = top.$App.getPopList();
				var popArray = $.map(poplist,function(n){
					return n.email;
				});
				for(var j=0;j<toList.length;j++){
					if($.inArray(toList[j],popArray) > -1){
						return toList[j];
					}
				}
				return "";
			})();
			if(findEmail == ""){
				defaultSender = $User.getDefaultSender();
			}else{
				defaultSender = findEmail;
			}
            M139.RichMail.API.call("mbox:replyMessage",replyMessageData,function(result){
                if(result.responseData.code && result.responseData.code == 'S_OK'){
                    var content = postData.content;
                    var data = result.responseData["var"];
                    var composeId = data.id;
                   // var uid = $User.getLoginName(); //发件人用默认帐号
                    var list = postData.list;
                    var sendMailRequest = {
                        attrs:{ 
                                account: defaultSender,
                                to: list,
                                cc: '',
                                bcc: '',
                                showOneRcpt: 0,
                                isHtml: 1,
                                subject: data.subject,
                                content: content + data.content, //包含所有回复过程的邮件原文,若content单出现，则是当前快速回复的内容
                                priority: 3,
                                requestReadReceipt: 0,
                                saveSentCopy: 1,
                                inlineResources: 1,
                                scheduleDate: 0,
                                normalizeRfc822: 0,
                                id: composeId
                            },
                        action:"deliver",
                        returnInfo:1   
                    };
                    
                    if(data.messageId){
                        sendMailRequest.attrs.messageId = data.messageId;
                    }
                    thiscallback && thiscallback(sendMailRequest);
                }else{
                     $Msg.alert(self.tips.replyFail,{ icon:'fail'
                     });
                }
            });   
	    }

}));

})(jQuery, _, M139);



/**
* @fileOverview 读信页快捷回复
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
    /**
    * @namespace 
    * 读信页快捷回复
    */   
         
    M139.namespace('M2012.ReadMail.View.QuickReply', superClass.extend({

    /**
    *@lends M2012.ReadMail.View.QuickReply.prototype
    */
        
    el:"",
    
    template:{
        replyAreaHtml:[
            '<table width="100%">',
                '<tbody><tr>',
                    '<td width="100" valign="top" id="quickReplyMenu">',
                    '</td>',
                    '<td valign="top">',
                        '<div class="readMailReplyMes-w">',
                        '<textarea class="readMailReplyMes" id="reply_textarea">来信已阅，我会尽快回复！</textarea>',
                        '</div>',
                    '</td>',
                    '<td align="right" valign="top" width="60" ><a id="quickreply_send" href="javascript:;" bh="readmail_quicksend" class="btnTb ml_5"><span>发 送</span></a></td>',
					
				'</tr>',
                '</tbody>',
            '</table>'
            ]
    },
    
    events:{
        "click #quickreply_send":"replySend"
    },
    
    initialize: function(){
       var self=this;
       this.model = new M2012.ReadMail.Model.QuickReply();  
       return superClass.prototype.initialize.apply(this, arguments);
    },
    
    initEvents:function(){
        var self = this;
        
        //监控输入框变化
        var textArea = $(self.el).find(".readMailReplyMes");
        textArea.focus(function(){
            $(this).addClass("focus-on");
        }).blur(function(){
            $.trim(textArea.val())=='' &&  $(this).removeClass("focus-on");
        });
        try{
            M139.Timing.watchInputChange(textArea[0], function () {
                if($.trim(textArea.val())!=''){
                    textArea.addClass("focus-on");
                }else{
                    textArea.removeClass("focus-on");
                }
            });   
        }catch(e){};
        var replyall = self.model.get("replyAll");
        
        var menuItems = [{text:"回复发件人",myData:0}];
        
        //if(replyall.indexOf(',')>-1){
            menuItems.push({text:"回复全部",myData:1});
        //}  
        
        var replyContainer = $(self.el).find("#quickReplyMenu");
             
        var dropMenu = M2012.UI.DropMenu.create({
            defaultText:"回复发件人",
            //selectedIndex:1,
            menuItems:menuItems,
            container:replyContainer
        });
        $(self.el).find("#quickReplyMenu>div").width(100);
        $(self.el).find(".dropDownText").attr("rel",'0');
        dropMenu.on("change",function(item){
            $(self.el).find(".dropDownText").attr("rel",item.myData);
            item.myData == '0' ? BH('readmail_quickreply') : BH('readmail_quickreplyall');
        });

        //发送
        /*$(self.el).find("#quickreply_send").click(function(){
            self.replySend();
        })*/
    },
	
	//回复邮件
    replySend: function (){
        var self = this;
		var mid = self.model.get("mid");
		var sender = self.model.get("sender"); //发件人
		var replyall = self.model.get("replyAll"); //回复全部人（已过滤不必要帐号）
		var content = $(self.el).find("#reply_textarea").val();
		var type = $(self.el).find(".dropDownText").attr("rel");
		var replyMessageData = {mid:mid};
		
		if($.trim(content) == ""){
		    $Msg.alert(self.model.tips.replyContentError);                     
		    return;
		}
		
		//省略验证邮件地址格式
		var enableQuote = $App.getConfig("UserAttrs").replyWithQuote == 1 ? true : false; //是否引用原文
		content = M139.Text.Utils.htmlEncode(content);
        content = content.replace(/\r/gm, '').replace(/\n/gm, '<br>');
		
		if(enableQuote){
            content += "<br/><br/><br/><br/><hr id=\"replySplit\"/>";
        }
        var postData = {
		    list:type == 0 ? sender : replyall, // 0 - 回复发件人  1- 回复所有
		    mid:mid,
		    content:content
		};
		var replyMessageData = {
		    mid:mid
		};
		
        M139.UI.TipMessage.show("正在发送邮件...");
		self.model.replyMessage(postData,replyMessageData,function(sendMailRequest){
            if(!enableQuote){
                sendMailRequest.attrs.content = content; //不带引文
            }else{
                
                //处理引文结构，引文内容加<div id="replyContent">引文内容</div>
                var replyCon = sendMailRequest.attrs.content,
                    splitflagstr = '<hr id="replySplit"/>';
                
                if(replyCon.indexOf(splitflagstr) > -1){
                    replyCon = replyCon.replace(splitflagstr, splitflagstr + '<div id="reply139content">');
                    replyCon += "</div>";
                    sendMailRequest.attrs.content = replyCon;        
                }
            }
            sendMailRequest && self.model.compose(sendMailRequest,function(flag){
                if(flag){
                    self.showSuccessBar();
                }else{
                    var failText = self.model.tips.replyFail;
                    M139.UI.TipMessage.show(failText, { delay:3000 });
                }
            });
        });
        
    },

    //快捷回复成功提示
    showSuccessBar:function(){
        var self = this;
        var replyContainer = $(self.el);
        var replyDoneContainer = replyContainer.siblings(".readMailReplyDone");
        var text = self.model.tips.replySuccess;

        replyContainer.hide();
        setTimeout(function(){
            M139.UI.TipMessage.show(text, { delay:3000 });
        },500);
        replyDoneContainer.show().find('a:eq(0)').click(function(){
            replyContainer.show();
            replyDoneContainer.hide();
        });

    },

    render: function () {
        var self = this;
        var sender = $Email.getEmail(this.model.get("sender")); //发件人
        if ($.inArray(sender, $App.getSysAccount()) > -1) { //系统邮件不显示快捷回复
            $(self.el).removeClass().html("");
        } else {
            var thisCode = self.template.replyAreaHtml.join('');
            $(self.el).html(thisCode);
        }
    }

}));
    
    
})(jQuery, _, M139);   



﻿/**   
* @fileOverview 已读回执功能
*/

(function (jQuery, _, M139) {

/**
*@namespace 
*已读回执功能
*/

M139.namespace("M2012.Receipt.Model",Backbone.Model.extend({
        
        defaults:{
            mailListData:null,
            requestReadReceipt:false, //是否已读
	        askMe:1, //总是提示
	        notSend:2, //总是不发送
	        alwaysSend:3, //总是发送
	        readReceipt:null //是否询问
	    },
    	
	    /**
	    *获取配置信息
	    */
	    getAttrs:function(callback){   
		    var options = {server:1};
            M139.RichMail.API.call("user:getAttrs",options,function(result){
                if(result.responseData.code && result.responseData.code == 'S_OK'){
                    callback && callback(result.responseData["var"]);
                }
            });
	    },
    	
	    /**
	    *设置总是发送回执
	    */
	    setAlwaysSend:function(callback){
	        var self = this;
	        var alwaysSend = self.get("alwaysSend");
	        var options = { attrs: { preference_receipt : alwaysSend } };
	        M139.RichMail.API.call("user:setAttrs",options,function(result){
                if(result.responseData.code && result.responseData.code == 'S_OK'){
                    callback && callback(result.responseData["var"]);
                }
            });    
	    },
    	
	    /**
	    *设置总是不发送回执
	    */
	    setNotSend:function(callback){
	        var self = this;
	        var notSend = self.get("notSend");
	        var options = { attrs: { preference_receipt : notSend } };
	        M139.RichMail.API.call("user:setAttrs",options,function(result){
                if(result.responseData.code && result.responseData.code == 'S_OK'){
                    callback && callback(result.responseData["var"]);
                }
            });    
	    },
    	
	    /**
	    * 发送已读回执
	    */        
        sendMDN:function(callback){
            var self = this;
            var options = self.get("readReceipt");
                options.to = $Email.getEmail(options.to);
            console.log(options);
            M139.RichMail.API.call("mbox:sendMDN&comefrom=5&categroyId=103000000",options,function(result){
                if(result.responseData.code && result.responseData.code == 'S_OK'){
                    callback && callback(result.responseData["var"]);
                }else{
                    //接口异常上报
                }
            });            
        }
        
}));
})(jQuery, _, M139);
/**
* @fileOverview 已读回执功能
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
    /**
    * @namespace 
    * 已读回执功能
    */   
         
    M139.namespace('M2012.Receipt.View', superClass.extend({

        /**
        *@lends M2012.Receipt.View.prototype
        */

    el:"body",

    events:{},
    
    template:{
        poptips:['<div class="norTips">',
                    '<span class="norTipsIco">',
                        '<i style="display:none" class="MB_Icon">',
                        '</i>',
                    '</span>',
                    '<dl class="norTipsContent">',
                        '<dd class="norTipsLine MB_MessageBox_Content">',
                            "对方要求发送已读回执,是否发送?<br />",
                            "<label for='returnReceipt'>",
                            "<input id='returnReceipt'  type='checkbox' />",
                            "&nbsp;以后都按本次操作",
                            "</label>",
                        '</dd>',
                    '</dl>',
                '</div>']
    },
    
    initialize: function(){
        var self = this;
        this.model = new M2012.Receipt.Model();
        var readReceipt = self.model.get("readReceipt");
        return superClass.prototype.initialize.apply(this, arguments);
    },
    
    
    initEvents:function(){
        var self = this;
        var fid = self.model.get("mailListData").fid;
        self.model.getAttrs(function(result){           
            var action = result.preference_receipt;
            if (action == self.model.get("askMe") || action === null) {
                self.render();
            }
            if (action == self.model.get("alwaysSend")) {
                window.setTimeout(function(){
                    self.model.sendMDN();
                },500);
            }
                
        });
    },
    
    //输出对话框
    render:function (){
        var self = this;
        var html = self.template.poptips.join('');
        $Msg.showHTML(
            html,
            function(e){
                if($("#returnReceipt").attr("checked")){
                    //设置以后都发送
                    self.model.setAlwaysSend(function(result){ 
                         //两个提示冲突，这里不再设置提示
                    })
                }
                self.model.sendMDN(function(result){
                    M139.UI.TipMessage.show("发送回执成功",{delay:3000});      
                });
                
               
            },
            function(){
                if($("#returnReceipt").attr("checked")){
                    //设置以后不发送
                    self.model.setNotSend(function(result){ 
                        M139.UI.TipMessage.show("发送回执设置成功",{delay:3000});
                    })
                }
            },
            {
                buttons:["确定","取消"],
                dialogTitle:'发送回执',
                icon:"warn" //showhtml不支持icon?
            }
        );
   
    }


}));
    
})(jQuery, _, M139);    



﻿/**   
* @fileOverview 读信页头部工具栏
*/

(function (jQuery, _, M139) {

/**
*@namespace 
*读信页头部工具栏
*/

M139.namespace("M2012.ReadMail.ToolBar.Model",Backbone.Model.extend({

    defaults:{  
       dataSource:null
	}
	
}));

})(jQuery, _, M139);


/**
* 
*/
/**
prev:{mid:"008200000402a89a000016ed",receiveDate:1344409300,account:"zhumyconstantine <13911111115@rd139.com>",subject:"Fw:23个附件"},
newPrev:{mid:"008200000402f6490000102c",receiveDate:1355328540,account:"zhumy@rd139.com",subject:""},
next:{mid:"0082000004024404000016e8",
*/

/**
* @fileOverview 读信页工具栏
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
    /**
    * @namespace 
    * 读信页工具栏
    */   
         
    M139.namespace('M2012.ReadMail.ToolBar.View', superClass.extend({

    /**
    *@lends M2012.ReadMail.ToolBar.View.prototype
    */

    el:"",

    events:{},

    template:{
        toolbar:[
            '<ul class="toolBarUl">',
            '</ul>',
            '<div class="toolBarSet p_relative">',
                '<span class="toolBarArray" style="display:{1};">',
                    '<a class="one rdCl mr_5" href="javascript:void(0)"></a>',
                '</span>',
                '<span class="toolBarPaging">{0}</span>',
            '</div>'].join('')
    },
    
    initialize: function(data){
        this.dataSource = data.dataSource;
        this.parentview = data.parentview;
        this.currFid = data.currFid;
        this.searchMode = data.searchMode;
        this.isSessionMail = data.isSessionMail; //会话邮件读信
        this.getSessionPrevNextMail = data.getSessionPrevNextMail; //普通邮件读信
        this.mailListData = data.mailListData;
        return superClass.prototype.initialize.apply(this, arguments);
    },
    
    initEvents: function(){ 
        var self = this;
        var currMid = self.dataSource.omid;
        var prevCon = $(self.el).find("a.up");
        var nextCon = $(self.el).find("a.down");
        var pageCon = $(self.el).find("span.toolBarPaging");

        //更多操作
        $(self.el).find(".toolBarArray").click(function(){
            self.createMoreToolMenu(currMid,$(self.el).find(".toolBarSet"));
        });

        /*var shouldCheckBeforeJump = function() {
            var composeiframes = $App.getCurrentTab().view.$el.find('div[name=covMail_bottom_compose]:visible');
            if ($App.isReadSessionMail() && composeiframes.length) {
                return true;
            } else {
                return false;
            }
        };   */     
        //上一封
        $(self.el).delegate("a.up", "click", function(){
            if (self.parentview && self.parentview.hasUnsavedComposeframe()) {
                if(window.confirm('未保存的内容将会丢失，是否跳转？')){
                    BH('cMail_toolbar_prev');
                    self.goToPrevMail();
                }
            } else {
                BH($App.isReadSessionMail() ? 'cMail_toolbar_prev' : 'toolbar_premail');
                self.goToPrevMail();
            }
        });
        
        //下一封
        $(self.el).delegate("a.down", "click", function(){
            if (self.parentview && self.parentview.hasUnsavedComposeframe()) {
                if(window.confirm('未保存的内容将会丢失，是否跳转？')){
                    BH('cMail_toolbar_next');
                    self.goToNextMail();
                }
            } else {
                BH($App.isReadSessionMail() ? 'cMail_toolbar_next' : 'toolbar_nextmail');
                self.goToNextMail();
            }
            
        });

        // 设置会话
        $(self.el).find('#btn_setting').click( function() {
            $Event.stopEvent()
            new M2012.ReadMail.View.ConversationSetting({el: self.el}).render();
            BH('cMail_toolbar_set');
        });
        //会话模式下的普通邮件需要重置上下封数据
        if($App.isSessionMode() && $App.isSessionFid(this.currFid) && !this.searchMode && !this.isSessionMail ){

            this.getSessionPrevNextMailData(function(data){
                var prev,next,html;
                if(data){
                    if(data.prev){
                        self.dataSource.prev = data.prev;
                    }
                    if(data.next){
                        self.dataSource.next = data.next;  
                    }
                    this.getSessionPrevNextMail = false;
                    html = self.getPrevNextMailHtml();
                    pageCon.html(html);
                }
            });
        }


        $App.on('readNextMail',function(data){
            if(data.mid &&  data.mid == currMid ){
                setTimeout(function(){
                    self.goToNextMail();
                },200);
            }
        });
    },
    
    /**
    * 更多操作菜单
    */
    createMoreToolMenu:function(mid,container){
        var self = this;
        var sid = $App.getSid();
        M2012.UI.PopMenu.create({
            items:[
                {
                    text:"新窗口打开",
                    onClick:function(){
  		       	        $App.openNewWin(mid);
                        BH('toolbar_newwin');
                    }
                },
                {
                    isLine:true
                },

                {
                    text: "保存到和笔记",
                    onClick: function () {
                        top.addBehaviorExt({ actionId: 104705, thingId: 1 });
                        var mailObj = M139.PageApplication.getTopApp().print[mid];
                        if (mailObj && mailObj.html) {
                            var title = mailObj.subject || "";
                            title = title.slice(0, 65);
                            var content = mailObj.html.content || "";
                        }
                        //content = content.replace(/\\/ig, "\\\\").replace(/(\r)?\n/ig, "\\n").replace(/\"/ig, "\\\"").replace(/\//ig, "\\\/"); //转义
                        var options = {
                            title: title || '邮件标题',
                            content: content || '邮件内容',
                            attachmentDirId: ""
                        }
                        top.M139.RichMail.API.call("mnote:createNote", options, function (res) {       //创建笔记
                            if (res.responseData && res.responseData["code"] == "S_OK") {
                                M139.UI.TipMessage.show("邮件已转存至和笔记 <a href='javascript:top.$App.show(\"note\")'>查看</a>");
                                //var noteId = res.responseData["var"]["noteid"];         //返回新建的noteId
                            } else {
                                M139.UI.TipMessage.show("保存失败，请重试");
                            }
                            setTimeout(function () {
                                M139.UI.TipMessage.hide();
                            }, 5000);
                        });
                    }
                },

                {
                    text:"导出邮件",
                    onClick:function(){
                        var wmsvrPath2 =  domainList.global.wmsvrPath2;
                        var downloadUrl = wmsvrPath2 + "/mail?func=mbox:downloadMessages&sid={0}&mid={1}";
                        window.open($T.Utils.format(downloadUrl,[sid,mid]));
                        BH('toolbar_export');
                    }
                },
                {
                    text:"打印",
                    onClick:function(){
                        window.open("/m2012/html/printmail.html?mid=" + mid);
                        BH('toolbar_print');
                    }
                },
                {
                    text:"显示邮件原文",
                    onClick:function(){
                        var orignUrl = "/RmWeb/view.do?func=mbox:getMessageData&mode=text&part=0&sid={0}&mid={1}";
                        window.open($T.Utils.format(orignUrl,[sid,mid]));
                        BH('toolbar_mailcode');
                    }
                },
                {
                    text:"邮件有乱码？",
                    onClick:function(){
                        var orignUrl = "/m2012/html/newwinreadmail.html?t=newwin&sid={0}&mid={1}&messycode=1";
                        window.open($T.Utils.format(orignUrl,[sid,mid]));
                    }
                }
            ],
            container:container,
            top:"22px",
            left:"-115px",    
            onItemClick:function(item){
               // alert("子项点击");
            }
        });
    },
    
    /**
	* 上一封邮件
	*/
	goToPrevMail:function(){
	    var data = this.dataSource;
	    var normalTabName = "readmail_" + data.omid;
         setTimeout(function () {
             $App.closeTab(normalTabName);
         }, 200);
	    if(data.prev && data.prev.mid){
			$App.readMail(data.prev.mid, false, this.currFid, { searchMode: this.searchMode });
			function callback_readmail() {
			    $App.trigger("reloadFolder", { reload: true });
			    $App.off("reloadFolder", callback_readmail);//只执行一次
			}
			$App.on('letterInfoReady', callback_readmail);//读信成功后再刷新
	    }
	},
	
	/**
	* 下一封邮件
	*/
	goToNextMail:function(){
	    var data = this.dataSource;
        var normalTabName = "readmail_" + data.omid;
        setTimeout(function () {
            $App.closeTab(normalTabName);
        }, 200);
	  
        if(data.next && data.next.mid){
			$App.readMail(data.next.mid, false, this.currFid, { searchMode: this.searchMode });
        	function callback_readmail() {
        	    $App.trigger("reloadFolder", { reload: true });
        	    $App.off("reloadFolder", callback_readmail);//只执行一次
        	}
        	$App.on('letterInfoReady', callback_readmail);//读信成功后再刷新
		}
	},
    
    /**
    * 工具栏更多操作菜单，上下封邮件输出，注意会话邮件上下封
    */
    getPrevNextMailHtml:function(){
        var data = this.dataSource;
        var prevnextTemp = '<a class="{0}" href="javascript:;" onClick="return false;" mid="{1}" title="{2}"  ></a>';
        var prevnextHtml = [];
        var prevTitle = "";
        var nextTitle = "";
        
		if(data.prev && data.prev.subject){
            prevTitle = "上一封：" + $T.Utils.htmlEncode(data.prev.subject);
        }
        if(data.next && data.next.subject){
            nextTitle = "下一封：" + $T.Utils.htmlEncode(data.next.subject);
        }

        //飞信也支持上下封读信                                                                 
        data.prev && data.prev.mid && prevnextHtml.push($T.Utils.format(prevnextTemp,['up',data.prev.mid,prevTitle]));
        data.next && data.next.mid && prevnextHtml.push($T.Utils.format(prevnextTemp,['down',data.next.mid,nextTitle]));          
        
		return prevnextHtml.join(''); 
    },

    /** 获取上下封数据 */
    getSessionPrevNextMailData:function(callback){
        var dataSource = this.dataSource,
            mid = this.dataSource.omid,
            sessionId;

        if(this.mailListData){
            sessionId = this.mailListData.mailSession;
        }

        var options = {
            fid: this.currFid,
            mid: mid,
            sessionId:sessionId,
            readFlag:0,
            start:0,
            total:1,
            folderPass:'',
            showhtml:0, // 0 - 不显示正文 
            currFid:this.currFid
        };

        
        $RM.readSessionMail(options,function(result){
            if(result.code === 'S_OK' && result['var']){
                callback && callback(result['var']);
            }else{
               callback && callback(null,result); //接口报文异常
            }
        });

    },


    /**
    * 工具栏更多操作菜单和上下封邮件输出
    */
    render:function(){
       var hideFlag = this.getSessionPrevNextMail;
       var PrevNextMailHtml = this.getPrevNextMailHtml(hideFlag);
       var html = this.template.toolbar;
       if ( $App.isReadSessionMail() ) {
            html += '<div style="margin-top:0px;" class="toolBarArray fr mr_5 p_relative"> <a href="javascript:" id="btn_setting" class="two"></a></div>';
       }
       // 【需求调整】读信页隐藏更多操作菜单
       var display = 'none';
       return $T.Utils.format(html,[PrevNextMailHtml, display]);
    }

}));
    
    
})(jQuery, _, M139);    



﻿﻿/**   
* @fileOverview 会话邮件模型
* code by sukunwei
*/

(function (jQuery, _, M139) {

M139.namespace("M2012.ReadMail.Conversation.Model",Backbone.Model.extend({
   
    defaults:{ 
	    fid:null,
	    mid:null,
        mids:null,
	    sessionId:null,
	    folderPass:null,
	    currFid:null,
	    mailListData:null,
	    showToolBar:true,
        dataSource:null,
        showStopBtn:10, //出现停止展开按钮
        lockCount:0, //加锁邮件数
        importantCount:0, //重要邮件总数
        unReadedCount:0, //未读邮件数
        starCount:0, //星标邮件数
        total:0, //邮件总数
        allReaded:false, //标识已读完
        firstCurrMailMid:null, //第一封展示邮件的mid
        lastMailMid:null,
        isShowMore:false, //是否点击过展示更多
        labelMids:null, //带标签的邮件
        sessionLabel:[], //会话邮件标签
        sessionData:{} //'mid':{ accounts: 'xxx', data: 'xxx'}		    
    },

    /** 从读信获取数据保存 */
    saveData:function(data){
        var sessionData = this.get('sessionData');
        if(data && data.omid){
            if(sessionData[data.omid]){
                sessionData[data.omid].dataSource = data; 
            }
        }
    },

	/**
    * 判断是否为会话邮件: mailnum > 1
    */
    isSessionMid:function(){
        return this.get("mailListData").mailnum > 1  
    },

   /**
    * 判断是否会话文件夹
    * 非会话文件夹：草稿箱（2）已删除（4）垃圾邮件（5）保留文件夹（10）病毒文件夹
    * 非会话文件夹：我的标签，星标邮件，搜索邮件
    */
    isSessionFid:function(){
        var fid = this.get("fid");
        var notSessionFids = [2,3,4,5,10];
        var flag = true;
        
        if($.inArray(fid,notSessionFids)>-1){
            flag = false;
        }
        
        if(flag && $App.getFolders('tag')){
            var tagsFolders = $App.getFolders('tag');
            $.each($App.getFolders('tag'), function (index, val) {
                if(tagsFolders[index].fid == fid){
                    flag = false;
                    return false;
                }
            });    
        }
         
        return flag;
    },
        
    /**
    * 获取数据接口
    */
    getDataSource:function(callback){
        var self = this;
        var fid = this.get('currFid');
        if(fid!=0 && this.get("mailListData") && this.get("mailListData").fid){
            fid = this.get("mailListData").fid;
        }
	    var data = {
			    fid: fid,
			    mid: this.get("mid"),
			    autoName: 1, //有些附件会没有文件名，此属性自动命名附件
			    markRead: 0, //请求会话邮件接口不标为已读，从普通读信标记已读
			    returnHeaders:{Sender:"","X-RICHINFO":""},//为订阅平台增加参数
			    filterStylesheets: 0,
			    filterImages: 0,
			    filterLinks: 0,
			    keepWellFormed: 0,
			    header:1,
			    supportTNEF:1,
			    returnAntispamInfo:1,
			    sessionId: this.get("mailListData").mailSession,
		        readFlag:0,
		        start:0,
		        total:199,
		        folderPass: this.get("folderPass"),
                mode:'html',
                showhtml:0, // 0 - 不显示正文 
                currFid:this.get('currFid')
	    };

		M139.UI.TipMessage.show("正在加载中,请稍后...");
        $RM.readSessionMail(data,function(result){
            M139.UI.TipMessage.hide();
            if(result.code === 'S_OK' && result['var']){
                callback && callback(result['var']);
            }else{

                //超时处理
                if(result && result.code === "FA_INVALID_SESSION"){
                    top.$App.showSessionOutDialog();
                    return;
                }

                callback && callback(null,result); //接口报文异常
            }
        });
    }    
    

}));

})(jQuery, _, M139);

﻿/**
* @fileOverview 会话邮件视图
* code by sukunwei
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

       
    M139.namespace('M2012.ReadMail.Conversation.View', superClass.extend({

    events:{
        "click #covmore": "onConversationMoreClick", //更多会话邮件
        "click [name=readMailContactsDropdown]": "showContactsDialog", //联系人浮层
        "click i[name=conversation_star]": "onStarClick", //星标
        "click i[name=title_star]": "onStarClick", //批量星标
        "click i[name=itemStatus]": "onItemStatusClick", //单项邮件状态修改
        "click i[name=title_ico]": "onItemStatusClick", //批量已读未读
		"click strong[email], h2[email], em[email]": "onContactsNameClick",//联系人页卡 
		"click span.cov-tdr-span": "onContactsNameClick",//联系人页卡
        "click #safelock": "showUnlock", //验证安全锁
        "click a.i_u_close": "hideInboxTips" //关闭提示层
    },

    name:"M2012.ReadMail.Conversation",

        /**
        * 读信页会话邮件内容加载模板
        */
        template:{

            toolbar:['<div class="bgMargin"><div class="toolBar" id="toolbar_{mid}">{content}</div></div>'].join(''),
            
            covMailSubject:[ '<div class="inboxTips" style="display:none"></div>',
                    '<div class="covv-title clearfix">',
                         '<div class="covv-i-w">',
                             '<input type="checkbox" id="checkAll" class="mail-select" style="{checkboxDisplay}">',
                             '<i class="{star}" name="title_star" style="cursor: pointer;" title="全部标为星标"></i>',
                         '</div>',
                         '<div class="covv-t-s">',
                             '<span class="covv-t-t">{title}&nbsp;</span>',
                             '<span class="covv-t-date" name="count"></span>',
                             '<span class="covv-t-m">由{from}发起了会话，{to}参与了讨论</span>',
                         '</div>',
                     '</div>'].join(""),

            covMailSummary: [ '<div id="covMail_summary_{mid}" name="covMail_summary"  data-read ="0" data-mid="{mid}" class="covv-tab-title" style="{display}">',
                             '<div class="covv-i-w">',
                                '<input type="checkbox" name="covMail_summary_checkbox" class="mail-select" style="{checkboxDisplay}">',
                             '</div>',
                             '<div class="covv-tab-warp">',
                                 '<table class="covv-tab innerboxshadow">',
                                     '<tbody>',
                                         '<tr class="{statusTr}">',
                                             '<td class="td1">',
                                                 '<span>{time}</span>',
                                             '</td>',
                                             '<td class="td2">',
                                                 '<div class="covv-tdr">',
                                                     '<span class="covv-tdr-span" title="{title}" email="{email}" {nameStyle}>{name}</span>',
                                                     '<a class="{vipicon}"></a>',
                                                 '</div>',
                                             '</td>',
                                             '<td class="td3">',
                                                 '<div class="mittle-warp">',
                                                     '<div class="star-warp">{starIco}</div>',
                                                     '{summary}',
                                                     '<div class="TagDiv">{labels}</div>',
                                                 '</div>',
                                             '</td>',
                                             '<td class="td4">',
                                                 '<div id="list_ico_210725d326bfe9c700000002" style="_zoom:1;">',
                                                 '{attachIco}',
                                                 '{remindhtml}',
                                                 '<a href="javascript:;" name="covTagMenu" class="i_tagfor_n"></a>',
                                                 '</div>',
                                             '</td>',
                                         '</tr>',
                                     '</tbody>',
                                 '</table>',
                             '</div>',
                         '</div>'].join(""),

            covMailMainbody: [ '',
                '<div id="covcur_{mid}" name="covMail_mainbody" mid="{mid}" class="covv-details-warp on">',
                     '<div name="loading" style="text-align:center;padding:50px"><img src="/m2012/images/global/loading.gif">&nbsp;正在加载中...</div>',
                     '<div class="covv-i-w" name="checkboxDiv" style="display: none">',
                        '<input type="checkbox" class="mail-select" style="{checkboxDisplay}">',
                     '</div>',
                     '<div class="covv-min-warp innerboxshadow" name="covMail_mainbody_content" style="display:none;">',
                         '<div id="mainbodyHeader" name="mainbody_header" class="covv-mintitle">',
                             
                         '</div>',
                         '<div class="covv-mincontent">',
                             
                             '<div class="covv-mailtextwarp">',
                               '<div id="attachs" class="covv-accessorywarp"></div>',
                               '<div class="mailtext">{contentInfo}</div>',
                               '<a class="go-top go-pack" name="go_top" href="javascript:;" bh="cMail_tab_packup_rightTop"><span class="triangle-top"></span><span class="triangle-w"></span><span class="go-top-text">收起</span></a>',
                               '<a id="goTop" name="go_top" class="go-top" href="javascript:;" bh="cMail_tab_packup">',
                                 '<span class="triangle-top"></span>',
                                 '<span class="triangle-w"></span>',
                                 '<span class="go-top-text">收起</span>',
                               '</a>',
                             '</div>',
                         '</div>',
                         '<div class="covv-minbottom" name="covMail_bottom">',
                             
                         '</div>',
                     '</div>',
             '</div>'].join(""),

             mainbodyHeader: ['<div class="hTitle">',
                               '{from}',
                               '<div class="starwarp">{vipicon}</div>',
                               '<span class="stardel" name="tag_starmail">',
                                 '<a href="javascript:;">{starIco}</a>',
                               '</span>',
                               '{foldername}',
                               '<span class="readTagdiv" style="">{labels}</span>',
                               '<div class="adjunct">',
                                     '{remindhtml}',
                                     '<a href="javascript:;" name="covTagMenu" class="i_tagfor_n"></a>',
                                '</div>',
                                '<div class="covv-inber-warp">',
                                        '<div id="receiver_to" class="inber-warp rMList">',
                                            '<span class="rMl">于<span class="data">{yyyyMMdd}</span><span class="time">{hhmmss}</span>发送至</span>',
                                            '{to}',
                                            '<a class="covv-sj-xhwrap" name="readMailContactsDropdown" mid="{mid}">',
                                                '<span class="covv-sj-xh"></span>',
                                            '</a>',
                                        '</div>',
                                 '</div>',
                            '</div>'].join(""),           

            covMailSummaryOmissioned:[ '<div id="covmore" class="covv-details-warp on"><a class="covv-more innerboxshadow" href="javascript:;">还有<span>{0}</span>封邮件</a></div>'].join(""),
            
            itemContactInfo:['<div class="cov-inber" style="height:12px;overflow:hidden;">',
                                '<span>发送至 {namelist}</span><span class="sj-xh" style="cursor:pointer" mid="{mid}"></span>', //<span class="sj-xh"></span><span class="sj-xs"></span>
                            '</div>'].join(""),

            itemContactDialog:['<div class="menuPop shadow cov-more" id="conversationDialog" style="position:absolute;left:{left}px;top:{top}px;z-index:100;{height}">',
                                    '<table class="cov-more-talbe">',
                                        '<tbody>', 
                                            '{data}',
                                        '</tbody>',
                                    '</table>',
                                '</div>'].join(""),

            itemContactTr:['<tr>',
                                '<td class="td1">{title}：</td>',
                                '<td>{namelist}</td>', //'<div class="cov-ad">蔡冠冕<span>&lt;franyu@139.com&gt;</span></div>
                            '</tr>'].join(''),

            inboxTips:['<a href="javascript:;" class="i_u_close" ></a>{0}'].join("")
        },

    initialize: function(){
       
        var self = this;
        this.body = $("body");
        this.useraccounts = $User.getAccountListArray();
        this.model= new M2012.ReadMail.Conversation.Model();
        this.mid = this.model.get('mid');
        this.sessionId = this.model.get('sessionId');
        this.readmailview = new M2012.ReadMail.Normal.View();
        this.readmailcontentview = this.readmailview.readmailcontentview;
        this.getTagHtml = this.readmailview.getTagHtml;
        this.renderTag = this.readmailview.renderTag;
        this.setElement(this.el);
        this.list = [];
        this.getNameCache = {};
        this.scrollTime = 300;
        if(M139.PageApplication.getTopApp().print){
            this.print = M139.PageApplication.getTopApp().print;
        }else{
            this.print = M139.PageApplication.getTopApp().print = {};
        }
        return superClass.prototype.initialize.apply(this, arguments);
    },

    /** 先搭桥 */
    initContainer:function(){
        this.covCon = this.$el.find('#covMailSummaryList');
        this.toolBarCon = this.$el.find("div.toolBar");
        this.titleCon = this.$el.find("div.covv-title");
        this.titleParentCon = this.titleCon.parent();
        this.titleCountCon = this.titleCon.find("span[name='count']");
        this.titleStarCon = this.titleCon.find("i[name='title_star']");
        this.titleIcoCon = this.titleCon.find("i[name='title_ico']");
        this.tagsCon = this.titleCon.find("span.readTagdiv");
    },

    /** 数据改动事件定义 */
    initModelChangeEvent:function(){
        var self = this;
        
        //记录修改已读数量
        this.model.on("change:unReadedCount", function () { 
            self.renderTitleCount();
        });

        //修改总数
        this.model.on("change:total", function () { 
            var countStr = self.getTitleCount();
            self.titleCountCon.html(countStr);
        }); 

        //记录修改星标
        this.model.on("change:starCount", function () { 
            self.changeTitleStar();
        });

        //记录修改重要标签
        this.model.on("change:importantCount",function(){
            self.changeImportantFlag();
        });
    },

    /** 定义标题属性 */
    initTitleAttr:function(){
        this.renderTitleCount(); //状态图标和邮件数量
        this.changeTitleStar(); //星标
        this.initTitleTags(); //标签
        this.changeImportantFlag(); //重要标记
    },

    /** 标题数量变化 */
    renderTitleCount:function(){
        var countStr = this.getTitleCount();
        this.titleCountCon.html(countStr); 
        this.changeTitleIco();
    },

    /** 
     * 标题区域高度设置 
     * 主题+标签不超过4行，超过4行后折叠显示，点击小三角展开
     */
    changeTitleHeight:function(){
        var self = this;
        var showMoreTags;
        if(this.titleCon.height() > 84){
            this.titleCon.addClass("cov-title-over");
            this.tagsCon.append('<span class="g-down" title="点击展开更多" style="cursor:pointer;position:absolute;bottom:5px;right:15px"></span>') 
            showMoreTags = this.tagsCon.find("span.g-down");
            showMoreTags.click(function(){
                self.titleCon.removeClass("cov-title-over"); //75px
                $(this).remove();
                //self.onResize();
            });
            //this.onResize();
        }
    },

    /** 标题图标 */
    changeTitleIco:function(){
        var unReadedCount = this.model.get("unReadedCount"),
            icoClass = 'i_m_n',
            delClass = 'i_m_o',
            icoTitle = '全部标为已读';
        
        if(unReadedCount < 1){
            icoTitle = '全部标为未读';
            icoClass = 'i_m_o';
            delClass = 'i_m_n';
        }

        this.titleIcoCon.removeClass(delClass).addClass(icoClass).attr("title",icoTitle).show();
    },

    /** 标题星标 */
    changeTitleStar:function(){
        var starCount = this.model.get('starCount'),
            starClass = 'i_star_y',
            delClass = 'i_star',
            starTitle = '全部取消星标';
        if(starCount <= 0 ){
            starTitle = '全部标为星标';
            starClass = 'i_star';
            delClass = 'i_star_y';
        }
        this.titleStarCon.removeClass(delClass).addClass(starClass).attr("title",starTitle).show();
        // 分栏模式下需要同步更新收件箱列表里邮件的星标
        if ($App.getLayout() != 'list') {
            var mid = this.model.get('mid');
            $('#div_maillist').find('tr[mid='+mid+'] i[name=list_starmail]').removeClass(delClass).addClass(starClass);
        }
    },

    /** 
     * 用于生成会话主题的标签（该需求现已取消）
     * model:sessionData, labels
     * 是所有邮件标签集合
     */
   initTitleTags:function(){
        var self = this,
        sessionData = this.model.get('sessionData'),
        labels = [],
        resultLabels = [],
        map = {},
        labelMids = [];
        $.each(sessionData,function(i,val){
            if(val.label && val.label[0]){
                labels = labels.concat(val.label);
            }
            labelMids.push(i);
        });
        
        //排重处理
        $.each(labels,function(i,val){
            if(!map[val]){
                map[val] = val;
                resultLabels.push(val);
            }
        });

        this.model.set({labelMids:labelMids,sessionLabel: resultLabels});

    },

    getMailLabels: function(labels){
        if (labels && labels.length) {
            return this.readmailview.getTagHtml(labels);
        } else {
            return '';
        }
    },

    /** 
     * 重要标记 
     * 会话集里只要有一封邮件是重要邮件就显示重要标志
     */
    changeImportantFlag:function(){
        var count = this.model.get("importantCount");
        if( count > 0){
            !this.titleCon.find("i.i_exc")[0]  &&  this.titleCon.find("span.cov-t-s").prepend('<i class="i_exc mr_5" title="重要邮件"></i>');
        }else{
            this.titleCon.find("i.i_exc").remove();
        }
    },

    /** 事件初始化 */
    initEvents:function(){
        var self = this;
        var sessionData = self.model.get("sessionData");
        var isRendered = this.model.get('isRendered');

        // 设置el
        this.el && this.setElement(this.el);

        // 缓存常用DOM节点
        this.initContainer();

        //工具栏定义
        if(self.toolbarview){
            self.toolbarview.el = "#toolbar_" + self.model.get('mid');
            self.renderToolBarMenu();
            self.toolbarview.initEvents();
        }

        //标题属性定义
        this.initTitleAttr();

        // 关闭其他已打开标签页，详见函数规则
        self.closeOtherTabs();

        // 代办任务
        appView.getView("remind").addEvent(this.$el);   

        // 标签
        self.$el.find('a[name=covTagMenu]').die('click').live('click', function(e) {self.oncovTagMenuClick(e);})     
        
        //监听model数据改动
        this.initModelChangeEvent();

        $App.off('changeCovMailSetting');
        $App.on("changeCovMailSetting", function() {
            self.model.getDataSource(function(result,error){
                if(result){
                    // 处理会话邮件数据，存储在model中方便后续调用
                    self.setCovModel(result);
                    var html = self.getCovMailListDOM();
                    self.$el.find('#covMailSummaryList').html(html);
                    // 尝试展开第一封邮件
                    self.expandFirstMail();
                }else{
                    self.readmailview.readMailError();
                    self.logger.error("readSessionMail letterInfo returndata error", "[view:readSessionMessage]", error); //日志上报
                }
            });            
        });

        //联系人浮层绑定
        $('body').delegate('#conversationDialog','click',function(e){
            M139.Event.stopEvent(e); //阻止冒泡
        });

        //全局点击判断            
        top.$GlobalEvent.on("click", function (e) {
            $('#conversationDialog').remove();
        });

        // 鼠标划过列表添加hover样式
        this.$el.find('[name=covMail_summary] table').live('mouseover', function() {
            $(this).closest('[name=covMail_summary]').addClass('on').find('a.check-mail').show();
        }).live('mouseout', function() {
            $(this).closest('[name=covMail_summary]').removeClass('on').find('a.check-mail').hide();
        });
        
        //标题点击
        this.$el.undelegate("div[name='covMail_summary']","click"); //避免分栏读信重复绑定
        this.$el.delegate("div[name='covMail_summary']","click",function(e){
            var target = e.target || e.srcElement;
            var mid = $(this).attr('data-mid');
            var titleId = $(this).attr('id');
            var data = self.model.get('sessionData')[mid];
            var conContainer = self.$el.find('#covcur_' + mid);
            var firstFlag = $(this).attr("data-first");
            // 判断是否需要打开邮件（点击标签代办等节点时无需展开）
            var needExpandMail = function(target) {
                // 星标、VIP等操作
                if (/sj-xh|i_star|i_star_y|i_m_o|i_m_n|mail-select/i.test(target.className)) {
                    return false;
                }
                // 标签操作
                if ($(target).closest('[name=tag_span]').length || $(target).closest('[name=cl_tag]').length || $(target).closest('[name=mailtask]').length || $(target).closest('[name=covTagMenu]').length) {
                    return false;
                }
                return true;
            }(target);

            if(needExpandMail){
                // 关闭其他展开邮件（全部展开时除外）
                !self.loadIng && $(this).siblings('div[name=covMail_mainbody]:visible').each(function() {
                    if ($(this).attr('mid') != mid) {
                        $(this).find('a[name=go_top]:first').click();    
                    }                    
                });
                !self.loadIng && $(this).siblings('div[name=covMail_summary]').removeClass('click-on').find('[name=covMail_summary_checkbox]').attr('checked', false);
                !self.loadIng && self.$el.find('#checkAll').attr('checked', false);

                // 选中当前邮件
                var $curCheckbox = $(this).find(':checkbox[name=covMail_summary_checkbox]');
                if (!$curCheckbox.attr('checked')) {
                    $curCheckbox.attr('checked', true);
                    $curCheckbox.closest('div[name=covMail_summary]')['addClass']('click-on');
                }

                if(!conContainer[0] && data){
                    var currInfo = self.getCurrTabInfo(data);
                    var html = currInfo.html;
                    if(html === ''){ return; }
                    $(this).after(html).attr("data-flag",1);
                    conContainer = self.$el.find('#covcur_' + mid);
                    if(!self.loadIng){
                        self.scrollToCurrTab(mid);
                    }
                    self.refreshFolder(currInfo.options);
                }

                if(titleId){
                    $(this).hide();

                    // 如果邮件正文已经完全加载过（通过邮件头部是否填充判断），需要将可能隐藏的结构取消隐藏（存在写信且修改未保存的情况）
                    if (conContainer.find('#mainbodyHeader').html()) {
                        conContainer.find('div[name=covMail_mainbody_content], div.covv-i-w, #bottombar-cur-pos').show();    
                    }                    
                    // 如果邮件正文完全隐藏（不存在对外暴露的写信卡片），可以滑动下拉展开，否则直接显示（暴露的写信卡会破坏动画效果）
                    if (!conContainer.find('[name=covMail_bottom_compose]:visible')[0]) {
                        conContainer.slideDown('normal')
                    }
                                        
                    conContainer.find(':checkbox').attr('checked', true);   // 选中当前邮件正文的checkbox

                    if (data && data.flags && data.flags.read == 1) {
                        self.markHasReaded($(this), mid);
                        data.flags.read = 0;
                    }
                    
                    if(!firstFlag){ //第一次和全部展开不显示蓝色边框
                        !self.loadIng && conContainer.addClass("on");
                    }else{
                        $(this).removeAttr("data-first");
                    }

                    $App.trigger('showBottomBar',{ mid: mid});
                    
                    if(!self.loadIng){
                        self.scrollToCurrTab(mid);
                    }
                }

                //点击iframe
                var contentIframe = self.$el.find('#mid_' + mid);
                contentIframe.load(function(){
					try{
						$(this).contents().click(function(){
						});
					}catch(e){}
                });

                //样式调整
                self.changePreviousStyle(mid);
                self.checkIsAllMailCardShow();
                self.onResize();
				BH('cMail_read');
            }
        });
        
        // 展开第一封邮件
        this.expandFirstMail();

        //内容点击
        this.$el.undelegate("div[name=mainbody_header], a[name=go_top]", "click"); //避免分栏读信重复绑定
        this.$el.delegate("div[name=mainbody_header], a[name=go_top]", "click",function(e){
            var target = e.target || e.srcElement;
            var pContainer = $(this).closest('div[name=covMail_mainbody]');
            var mid = pContainer.attr('mid');
            var composeView = self['compose'+ mid];
            if(!/sj-xh|inber-name|cov-tdr-span|i_starM|i_starM_y|i_cl_w|i_m_o|send-name|i_m_n|i_tx_n|i_tx_nb|i_tx_ng|user_vip|i_tagfor_n/i.test(target.className)){
                //self.removeCurrentTabBorder();
                // pContainer.addClass('hide');
                if (pContainer.find('[name=covMail_bottom_compose]')[0] && composeView && composeView.isDataChanged()) {
                    pContainer.find('div[name=covMail_mainbody_content], div.covv-i-w, #bottombar-cur-pos').hide();    
                } else {
                    pContainer.hide();
                }
                
                //$('#covMail_summary_' + mid).removeClass('hide').addClass("cov-cur-blue");
				self.$el.find('#covMail_summary_' + mid).show()//.addClass("cov-cur-blue");
				//样式调整
                self.removeItemBorderStyle();
                self.changePreviousStyle(mid);
                self.checkIsAllMailCardShow();
                BH('cov_slideup');				
            }
        });


        //滚动条
        this.covCon.scroll(function(){
            var _this = this;
			if(!self.addBgClass){
				// self.titleParentCon.addClass("cov-title-bg").removeClass("cov-title-bb");
				self.addBgClass = true;
			}
			clearTimeout(self.scrollTimer);
			self.scrollTimer = setTimeout(function(){
				if( $(_this).scrollTop()=== 0 ){ //出现标题背景
					// self.titleParentCon.addClass("cov-title-bb").removeClass("cov-title-bg");
					self.addBgClass = false;
				}
			},200);
			$('#conversationDialog')[0] && $('#conversationDialog').remove();
		});

        // 监听事件
        this.initMailCardTriggerEvent();        
        
        //加锁提示（仅提示一次）
        //因为会话下邮件的真实数量是在收件箱列表点击时注入的，删除不会同步更新，所以这里不再进行解锁提示
        if ( this.getInboxTips ) {
            var inboxTipsHtml = this.getInboxTips();
            inboxTipsHtml!=='' && this.$el.find("div.inboxTips").html(inboxTipsHtml).show();
            this.getInboxTips = null;
        }

        //自适应高度
        this.onResize();

        function closeTabCallback(args) {
            if (self.hasUnsavedComposeframe()) {
                if(window.confirm('关闭写信页，未保存的内容将会丢失，是否关闭？')){
                    args.cancel = false;
                    $App.off("closeTab", arguments.callee);
                }else{
                    args.cancel = true;
                }
            }
        }
        if (!this.hasInitEvents) {
            $(window).resize(function(){
                self.onResize();
            });
            
            $App.on("closeTab", closeTabCallback);
            
            this.hasInitEvents = true;
        }

        // 收起按钮浮动效果
        if (!$B.is.ie || $B.getVersion() >= 7) {
            this.$el.find('#covMailSummaryList').scroll(function() {self.collapseBtnCSSControl()});
        }        

        //切换时高度调整
        var mid = this.model.get('mid'),
            thisTabName = 'readmail_' + mid;
        $App.on("showTab", function (tab) {
            if(tab.name === thisTabName){
                self.onResize();
            }
        });
		
		//hover联系人行为统计
        this.$el.undelegate("a.inber-name","mouseover");
		this.$el.delegate("a.inber-name","mouseover",function(e){
			BH('cov_contacthover');
		});

        this.$el.undelegate("div[name='covMail_mainbody'] span.cov-tdr-span","mouseover");
        this.$el.delegate("div[name='covMail_mainbody'] span.cov-tdr-span","mouseover",function(){
            BH('cov_contacthover');
            $(this).addClass("cov-tdr-spanhover");
        });

        this.$el.undelegate("div[name='covMail_mainbody'] span.cov-tdr-span","mouseout");
        this.$el.delegate("div[name='covMail_mainbody'] span.cov-tdr-span","mouseout",function(){
            $(this).removeClass("cov-tdr-spanhover");
        });

        // 复选框事件
        this.addCheckBoxEvent();

        $App.on('deleteCovMailTag', function(args){
            var mid = args.mid;
            var tagId = args.tagId;
            var sessionData = self.model.get('sessionData') || {};
            var mailData = sessionData[mid];
            var labels = mailData && mailData.label || [];
            for (var i = 0, len = labels.length; i < len; i++) {
                if (labels[i] == tagId) {
                    labels.splice(i, 1);
                }
            }
            // 摘要和正文的标签都要移除
            self.$el.find('div[name=covMail_summary][data-mid='+ mid +'] span[tagid='+ tagId +']').remove();
            self.$el.find('div[name=covMail_mainbody][mid='+ mid +'] span[tagid='+ tagId +']').remove();
        });//{mid: mid, tagId: tagId}

        // 触发会话邮件待办图标及DOM属性（status/taskDate/class）更新
        $App.on('covMailRemindRender', function(args){
            var mid = args.mid;
            var taskFlag = args.taskFlag;
            var taskDate = args.taskDate;
            var status = ['add','update','finish'][taskFlag]; //任务状态
            var map = { //样式
                'add':'i_tx_n',
                'update':'i_tx_nb',
                'finish':'i_tx_ng'
            };

            var covMailSummary = self.$el.find('div[name=covMail_summary][data-mid='+ mid +'] a[name=mailtask]');
            var covMailMainbody = self.$el.find('div[name=covMail_mainbody][mid='+ mid +'] a[name=mailtask]');
            covMailSummary.removeClass('i_tx_n i_tx_nb i_tx_ng').addClass(map[status]);
            covMailSummary.find('span').attr('taskdate', taskDate).attr('status', status);
            covMailMainbody.removeClass('i_tx_n i_tx_nb i_tx_ng').addClass(map[status]);
            covMailMainbody.find('span').attr('taskdate', taskDate).attr('status', status);
        });

        /*
         *
         * 实现删除邮件/标记/转移操作的异步刷新
         *
         */
        $App.off('delCovMails');
        $App.on('delCovMails', function(args) {
            var mids = args.mids || [];
            var len = mids.length;
            var mid;
            var count = 0;
            while (mid = mids.pop()) {
                var summary = self.$el.find('[name=covMail_summary][data-mid='+ mid +']');
                var mainbody = self.$el.find('[id=covcur_'+ mid +']');
                var covMails = self.model.get('sessionData');
                var mail = covMails[mid];
                if (mail && mail.flags && mail.flags.read == 1) count++;

                summary.remove();
                if (mainbody[0]) {
                    var frame = mainbody.find('[name=covMail_bottom_compose]');
                    var composeView = self['compose'+mid];
                    if (frame[0] && composeView && composeView.isDataChanged()) {
                        mainbody.find('div[name=covMail_mainbody_content], div.covv-i-w, #bottombar-cur-pos').remove();
                    } else {
                        mainbody.remove();
                    }
                }
            }

            // 修改未读和星标数量
            var unReadedCount = 0;
            var starCount = 0;
            var sessionMails = self.model.get('dataSource') && self.model.get('dataSource').sessionMails || [];
            $.each(sessionMails,function(i,val){
                if(val.flags){
                    if(val.flags.read === 1){
                        unReadedCount++; 
                    }
                    if(val.flags.starFlag){
                        starCount++;
                    }
                }
            });

            var total = self.model.get('total');
            total -= len;
            var composeiframes = self.$el.find('[name=covMail_bottom_compose]:visible');
            // 邮件全部删除且不存在写信frame关闭标签
            if (total == 0 && composeiframes.length == 0){
                $App.close();
            // 更新邮件数量
            } else {
                self.model.set({
                    total: total,
                    unReadedCount: unReadedCount,
                    starCount:starCount
                });
            }
        });

        $App.off('moveCovMails');
        $App.on('moveCovMails', function(args) {

            var sessionData = self.model.get("sessionData") || {};
            // var sessionMails = self.model.get('dataSource') && self.model.get('dataSource').sessionMails || [];
            var fid = args.fid;//fromFolderName
            var midArr = args.mids;
            var mid;
            var mail;

            while (mid = midArr.pop()) {

                // 更新sessionData
                sessionData[mid] && (sessionData[mid].fid = fid);

                // 更新dataSource.sessionMails
                // for (var i = 0, len = sessionMails.length; i < len; i++) {
                //     mail = sessionMails[i];
                //     if (mail.mid == mid) {
                //         mail.fid = fid;
                //     }
                // }

                // 局部刷新页面
                var originDOM = self.$el.find('#covcur_'+ mid +' [name=covMailFolderName]');
                if (originDOM[0]) {
                    var folderNameHTML = self.fromFolderName(fid);
                    originDOM.replaceWith(folderNameHTML);
                }
            }
        });

        $App.off('markCovMails');
        $App.on('markCovMails', function(args) {

            var sessionData = self.model.get("sessionData") || {};
            // var sessionMails = self.model.get('dataSource') && self.model.get('dataSource').sessionMails || [];            
            var midArr = args.mids;
            var type = args.type;
            var val = args.value;
            var mid;
            var mail;

            while (mid = midArr.pop()) {

                mail = sessionData[mid] || {};
                mail.flags[type] = val;

                if (type === 'read') {
                    var mailSummaryDOM = self.$el.find('#covMail_summary_'+ mid);
                    mailSummaryDOM.find('tr:first')[val === 1 ? 'addClass' : 'removeClass']('on');

                    // 如果标记为未读，则移除之前已经存在的正文（因为读信会依赖正文是否存在做判断）
                    if (val === 1) {
                        mailSummaryDOM.show();
                        self.$el.find('#covcur_'+ mid).remove();
                    }
                } else if (type === 'starFlag') {
                    if( val === 0 ){
                        var title = "标记星标";
                        self.covCon.find("i.i_star_y[mid=" + mid + "]").removeClass("i_star_y").addClass("i_star").attr("title",title);
                        self.covCon.find("i.i_starM_y[mid=" + mid + "]").removeClass("i_starM_y").addClass("i_starM").attr("title",title);
                        // self.model.set({starCount:--count});
                    }else{
                        var title = "取消星标";
                        self.covCon.find("i.i_star[mid=" + mid + "]").addClass("i_star_y").removeClass("i_star").attr("title",title);
                        self.covCon.find("i.i_starM[mid=" + mid + "]").addClass("i_starM_y").removeClass("i_starM").attr("title",title);
                        // self.model.set({starCount:++count});
                    }
                    
                } else if (type === 'top') {
                    // 置顶在会话邮件列表没有任何标识，暂不处理
                }
            }

            // 修改未读和星标数量
            var unReadedCount = 0;
            var starCount = 0;
            var sessionMails = self.model.get('dataSource') && self.model.get('dataSource').sessionMails || [];
            $.each(sessionMails,function(i,val){
                if(val.flags){
                    if(val.flags.read === 1){
                        unReadedCount++; 
                    }
                    if(val.flags.starFlag){
                        starCount++;
                    }
                }
            });
            self.model.set({
                unReadedCount:unReadedCount,
                starCount:starCount
            });
        });

        $App.off('tagCovMails');
        $App.on('tagCovMails', function(args) {

            var sessionData = self.model.get("sessionData") || {};
            // var sessionMails = self.model.get('dataSource') && self.model.get('dataSource').sessionMails || [];
            var labelId = args.labelId;//fromFolderName
            var midArr = args.mids;
            var mid;
            var mail;
            var labelArr;

            while (mid = midArr.pop()) {

                // 更新sessionData
                mail = sessionData[mid] || {};
                labelArr = mail.label || [];

                if (labelArr.length >= 10) {
                    $Msg.alert("标签数量已经超过上限!");
                    return false;
                }

                if (labelArr && $.inArray(labelId, labelArr) == -1) {
                    labelArr.push(labelId);
                    var labelHTML = self.getMailLabels(labelArr);
                    // 如果摘要和正文都存在，DOM都要更新
                    self.$el.find('div[name=covMail_summary][data-mid='+mid+'] div.TagDiv').html(labelHTML);
                    self.$el.find('div[name=covMail_mainbody][mid='+mid+'] span.readTagdiv').html(labelHTML);
                }

                // 更新dataSource.sessionMails
                // for (var i = 0, len = sessionMails.length; i < len; i++) {
                //     mail = sessionMails[i] || {};
                //     if (mail.mid == mid) {
                //         labelArr = mail.label || [];
                //         if (labelArr && $.inArray(labelId, labelArr) == -1) {
                //             labelArr.push(labelId);
                //         }
                //     }
                // }
            }
        });
    },

    //展开第一封邮件
    expandFirstMail: function() {
        var covMaiSet = $App.getUserCustomInfo('covsetting') || '10';
        var expand = covMaiSet.slice(1, 2) == 1;
        var currMailMid = this.model.get('lastMailMid');
        if(expand && currMailMid){
            $('#covMail_summary_' + currMailMid).attr("data-first",1).trigger("click");
        }
    },

    addCheckBoxEvent: function(){
        var self = this;
        // 摘要checkbox
        this.$el.find(':checkbox[name=covMail_summary_checkbox]').live('click',function(){
            //$Event.stopEvent();
            var that = this;
            // 通过.click（）触发click事件，事件会在复选框被选中或取消选中前执行，因此要加上延时
            // setTimeout(function(){
            var status = !!$(that).attr('checked');
            BH(status ? 'cMail_checkOne' : 'cMail_uncheckOne');
            var isAllCheckBoxSameStatus = function(status) {
                var flag = true;
                self.$el.find(':checkbox[name=covMail_summary_checkbox]').each(function(i){
                    var itemStatus = !!$(this).attr('checked');
                    if ( itemStatus != status) {
                        return flag = false;
                    }
                });
                return flag;
            }(status);
            var p = $(that).closest('div[name=covMail_summary]');
            var mid = p.attr('data-mid');
            $(that).closest('div[name=covMail_summary]')[status ? 'addClass' : 'removeClass']('click-on');
            self.$el.find('#covcur_'+ mid)[status ? 'addClass' : 'removeClass']('on');
            self.$el.find('#checkAll').attr('checked', isAllCheckBoxSameStatus && status);
            // }, 100);            
        });
        // 全选checkbox
        this.$el.find('#checkAll').live('click',function() {
            var status = !!$(this).attr('checked');
            BH(status ? 'cMail_checkAll' : 'cMail_uncheckAll');
            self.$el.find(':checkbox[name=covMail_summary_checkbox]').attr('checked', status);
            self.$el.find('div[name=covMail_summary]')[status ? 'addClass' : 'removeClass']('click-on');
            self.$el.find('[name=covMail_mainbody] :checkbox').attr('checked', status);
            self.$el.find('[name=covMail_mainbody]')[status ? 'addClass' : 'removeClass']('on');
        });
        // 正文checkbox
        this.$el.find('div[name=covMail_mainbody] :checkbox').live('click', function() {
            var status = !!$(this).attr('checked');
            var isAllCheckBoxSameStatus = function(status) {
                var flag = true;
                self.$el.find(':checkbox[name=covMail_summary_checkbox]').each(function(i){
                    var itemStatus = !!$(this).attr('checked');
                    if ( itemStatus != status) {
                        return flag = false;
                    }
                });
                return flag;
            }(status);
            var mid = $(this).closest('div[name=covMail_mainbody]').attr('mid');
            $(this).closest('div[name=covMail_mainbody]')[status ? 'addClass': 'removeClass']('on');
            self.$el.find('#covMail_summary_'+ mid)[status ? 'addClass': 'removeClass']('click-on').find('[name=covMail_summary_checkbox]').attr('checked', status);
            self.$el.find('#checkAll').attr('checked', isAllCheckBoxSameStatus && status);
        });
    },

    // 返回被选中邮件的mid数组
    getCheckedMidArr: function() {
        var arr = [];
        this.$el.find(':checkbox[name=covMail_summary_checkbox]').each(function() {
            var mid = $(this).closest('div[name=covMail_summary]').attr('mid');
            mid && arr.push(mid);
        });
        return arr.length ? arr : null;
    },

    oncovTagMenuClick:function(e){
        var self = this;
        var tagItems = [];
        BH('cMail_tab_addTag');

        tagItems = tagItems.concat($App.getView('mailbox').model.getTagMenuItems());
        if(tagItems.length<4){ //变态需求，无标签时只显示新建标签，有标签时去掉新建和管理
            tagItems.pop();tagItems.shift();
        }else{
            tagItems.splice(tagItems.length-3);
        }
        M2012.UI.PopMenu.create({
            dockElement: e.target,
            direction: "auto",
            items: tagItems,
            onItemClick: function (item) {
                var args = item.args || {};
                args.bh && BH(args.bh);
                var curMailCon = $(e.target).closest('div[name=covMail_summary]')[0] || $(e.target).closest('div[name=covMail_mainbody]')[0];
                var $curMailCon = $(curMailCon);
                //var inCovMainbody = $curMailCon.attr('name') == 'covMail_summary' ? false : true;
                var mid = $curMailCon.attr("data-mid") || $curMailCon.attr('mid');
                if (item.command) {
                    args.command = item.command;
                    args.mids = [mid];
                    args.callback = function() {

                        $App.trigger('tagCovMails', {mids: [mid], labelId: args.labelId});

                        // var sessionData = self.model.get('sessionData') || {};
                        // var mailData = sessionData[mid];
                        // var labels = mailData && mailData.label || [];
                        // if (labels.length >= 10) {
                        //     $Msg.alert("标签数量已经超过上限!");
                        //     return false;
                        // }
                        // if ($.inArray(args.labelId, labels) == -1) {
                        //     mailData.label.push(args.labelId);
                        //     var labelsDOM = self.getMailLabels(mailData.label);
                        //     // 如果摘要和正文都存在，DOM都要更新
                        //     self.$el.find('div[name=covMail_summary][data-mid='+mid+'] div.TagDiv').html(labelsDOM);
                        //     self.$el.find('div[name=covMail_mainbody][mid='+mid+'] span.readTagdiv').html(labelsDOM);
                        // }
                    };
                    // args.inCovMainbody = true;
                    $App.trigger("mailCommand", args);
                    M139.Event.stopEvent();
                }
            }
        });
    },

    /** 定位到当前邮件 */
    scrollToCurrTab:function(mid){
        var conContainer = $('#covcur_' + mid);
        if(!conContainer[0]){return}
        var currTop = conContainer.offset().top || 0,
            fristContainer = this.getFirstContainer(),
            toTop;
        
		if($(fristContainer).offset()){
            toTop = currTop - $(fristContainer).offset().top;
            this.covCon.animate({scrollTop:toTop - 2}, this.scrollTime);
        }
    },
	
	/** 查找第1个显示的节点 */
	getFirstContainer:function(){
		var firstContainer  =  this.covCon.children("div:lt(2)");
        firstContainer = $.grep(firstContainer,function(val){
            return  $(val).css("display") !== "none";
        })[0];
		return firstContainer;
	},	
	
	/** 固定编辑器位置 */
    scrollToEditorPos:function(mid, areaHeight){
        var conContainer = $('#covcur_' + mid),
            currTop = conContainer.offset().top || 0,
            fristContainer = this.getFirstContainer(),
            toTop;
     
		if($(fristContainer).offset()){
            toTop = currTop + conContainer.height() - $(fristContainer).offset().top - areaHeight - 60;
            this.covCon.animate({scrollTop:toTop},300);
        }
    },
	

    /** 
     * 滚动条定位
     * @param {number} 滚动高度
     */
    scrollToPosition:function(height){
        var scrolltop = this.covCon.scrollTop();
        this.covCon.animate({scrollTop:scrolltop + height}, 50);
    },
    
    /** 移除当前邮件边框 */
    removeCurrentTabBorder:function(){
        this.$el.find("div.cov-cur-blue").removeClass("cov-cur-blue");
    },

    /** 删除无边框的样式 */
    removeItemBorderStyle:function(){
         this.$el.find("div[name='covMail_summary']").removeClass("cov-cur-b0");
    },

    /** 修改上一封邮件样式  */
    changePreviousStyle:function(mid){
        var previousCon = $('#covMail_summary_' + mid).prev();
        if(previousCon && previousCon.attr("mid")){
            previousCon = previousCon.prev();
        }
        previousCon.addClass("cov-cur-b0");
    },

    /** 
     * 验证安全锁 
     * 可能第一封邮件是加锁的
     */
    showUnlock:function(){
        var mid = $App.getCurrentTab().name.split("_")[1] || this.model.get('mid');
        var fid = $('#sb_h i.i_lock:eq(0)').parent().parent().attr('fid');
        if( fid && mid ){
            $App.showUnlock(fid, mid);
        }else{
            $App.show('account');
        }
    },
        
    /** 顶部提示条 */
    getInboxTips:function(){
        var lockNum = 0,
            lockCount = this.model.get("lockCount"),
            temp = this.template.inboxTips,
            lockFlag = $('#sb_h i.i_lock')[0],
            text = '';
        if(lockFlag && lockCount > 0){
            text = '本会话邮件有' + lockCount + '封邮件已加锁，如需查看，请先<a href="javascript:;" id="safelock">验证安全锁</a>。';
        }
        return text === '' ? '' : $T.Utils.format(temp,[text]);
    },

    /** 隐藏提示条 */
    hideInboxTips:function(){
        this.$el.find("div.inboxTips").remove();
        this.onResize();
    },
    
    /**
     * 大容器自适应高度
     */
    onResize:function(){
        var self = this;
        clearTimeout(self.resizeTimer);
        self.resizeTimer = setTimeout(function(){
            self.bContainer = self.$el.find('#covMailSummaryList');
            var containerH = self.body.height() - self.bContainer.offset().top - 15;// 15为外层容器的上下边距
            self.bContainer.height(containerH).css({'overflow-x':'hidden','overflow-y':'auto','position':'relative'});
        },200)

        // 保证收件人不换行
        this.sliceContactsText($(self.el).find('[id^=covcur_] #receiver_to:visible')[0]);
    },

    /** 
     * 同步文件夹
     * 逻辑同邮件列表
     */
    refreshFolder:function(mail){
        if (mail && mail.flags && mail.flags.read == 1) {
            var isStar = (mail.flags && mail.flags.starFlag) ? true : false;
            var isVip = $App.getView("mailbox").model.isVipMail(mail.from);
            $App.trigger("reduceFolderMail", { fid: mail.fid, isStar: isStar, isVip: isVip });//文件夹未读邮件减少
            if (mail.label && mail.label.length > 0) {//有标签，标签未读邮件减少
                $App.trigger("reduceTagMail", { label: mail.label });
            }
        }         
    },
    
    /** 界面渲染 */
    render:function(isRendered){
        var self = this;

        this.model.set('isRendered', !!isRendered);
        !isRendered && self.model.getDataSource(function(result,error){
            if(result){
                // 处理会话邮件数据，存储在model中方便后续调用
                self.setCovModel(result);
                // 渲染整体DOM
                html = self.getContainerDOM(result);
                $(self.el).html(html);
                // 绑定事件
                self.initEvents();
            }else{
                self.readmailview.readMailError();
                self.logger.error("readSessionMail letterInfo returndata error", "[view:readSessionMessage]", error); //日志上报
            }
        });
    },

    setCovModel: function(result) {
        var self = this;
        var sessionMails = result.sessionMails || [];   // 接口输出按降序排列
        var slen = sessionMails.length;
        var sessionData = {};                           // 保存mail数据，便于后续通过mid直接调用
        var lastMailMid = sessionMails[0].mid;          // 最新一封信mid
        var firstCurrMailMid;
        var unReadedCount = 0;
        var starCount = 0;
        var lockCount = 0;
        var importantCount = 0;
        var mids = [];
        var html;


        $.each(sessionMails,function(i,val){ 
            sessionData[val.mid] = val;
            mids.push(val.mid);
            if(val.priority === 1){
                importantCount++;
            }
            if(val.flags){
                if(val.flags.read === 1){
                    unReadedCount++; 
                    if(!firstCurrMailMid){
                        firstCurrMailMid = val.mid; 
                    }
                }
                if(val.flags.starFlag){
                    starCount++;
                }
            }
        });
    
        try{ 
            lockCount = self.model.get("mailListData").mailNum - slen;            
        }catch(e){

        }  

        self.model.set({
            dataSource:result,
            mid:result.omid,
            mids:mids,
            sessionData:sessionData,
            unReadedCount:unReadedCount,
            starCount:starCount,
            total:slen,
            lockCount:lockCount,
            importantCount:importantCount,
            firstCurrMailMid:firstCurrMailMid,
            lastMailMid:lastMailMid,
            sessionId:sessionMails[0].mailSession
        });
    },

    // 截取收件人列表，保证一行显示
    sliceContactsText: function(con) {
        if (!con) return;

        con = $(con);
        con.find('strong').hide();
        var reg = /，$/;
        var strong;
        var text;
        while (!con.find('strong:visible').length || con.height() < 30 && con.find('strong:hidden').length) {
            strong = con.find('strong:hidden:first').show();
            text = strong.text();
            !reg.test(text) && strong.text(text+ '，');
        }

        if (con.height() > 30 && con.find('strong:visible').length > 1) {
            con.find('strong:visible:last').hide();
        }

        var last = con.find('strong:visible:last');
        text = last.text().replace(reg, '');
        last.text(text);
    },

    /** 
     * 关闭其他已打开标签页  
     * 规则：
     * 如果会话邮件聚合了(A:收件箱，B:已发送)，从收件箱打开Tab_AB,再从已发送打开B,需要关闭Tab_AB.
     * 首先打开会话邮件Tab_ABC,删除B和C,快捷回复A,收件箱打开Tab_ADE,由于新的会话邮件包含A,需要关闭Tab_ABC.
     * $App.getTopPageApp().sessionMail['mailmid'] = { mid:val, parentmid:currmid };
     */
    closeOtherTabs:function(){
        var mids = this.model.get('mids'),
            currmid = $App.getCurrMailMid(),
            tabName,
            topSessionData;

        if(!$App.getTopPageApp().sessionMail){
            $App.getTopPageApp().sessionMail = {};
        }

        $.each(mids,function(i,val){
            tabName = "readmail_" + val;
            if( val !== currmid ){
                 _closeTab(tabName);
            }
            topSessionData = $App.getTopPageApp().sessionMail[val];
            if(topSessionData && topSessionData.parentmid !== currmid ){ //已经有会话邮件读取数据且不是本邮件打开
                 _closeTab('readmail_' + topSessionData.parentmid);
            }
            $App.getTopPageApp().sessionMail[val] = { mid:val, parentmid:currmid }; //保存最新数据
        });

        function _closeTab(tabName){
            $App.getTabByName(tabName) && $App.closeTab(tabName);
        }
    },

    /** 
     * 获取容器数据 
     * 1、有未读邮件时，不折叠；
     * 2、无未读邮件时，超过7封时折叠；
     */
    getContainerDOM:function(data){
        var self = this;
        var html = [];
        var currCoversation;
        var moreInfo; 
        var content; 
        // 会话工具栏
        var toolbar = this.getToolBarHtml();
        html.push(toolbar);
        // 会话主题
        var subject = this.getTitleHtml(data);
        html.push(subject);
        // 会话邮件列表
        var covlist = this.getCovMailListDOM();
        html.push($T.Utils.format('<div class="covv-list" id="covMailSummaryList">{0}</div>',[covlist]));

        return html.join('');
    },

    getCovMailListDOM: function() {
        var self = this;
        var sessionMails = this.model.get('dataSource') && this.model.get('dataSource').sessionMails || [];
        var hasUnreadMail = this.model.get('firstCurrMailMid') ? true : false;
        var html = [];

        var covMaiSet = $App.getUserCustomInfo('covsetting') || '10';
        var sort = covMaiSet.slice(0, 1);
        var expand = covMaiSet.slice(1, 2);
        sessionMails = sort == 1 ? sessionMails : sessionMails.reverse();
        $.each(sessionMails,function(i,val){
            val.index = i;
            val.sort = sort;
            html.push(self.getConversationItem(val));
        });
        // 因为sessionMails.reverse()之后会影响保存在dataSource里的原始数据
        // 这里要再次反转回来
        if (sort == 0) sessionMails.reverse();

        // 不包含未读邮件且大于7封时对列表进行折叠,隐藏的邮件显示为“更多邮件”
        var len = sessionMails.length;
        var spliceIndex = sort == 0 ? 1 : len - 1;
        if(!hasUnreadMail && len > 7){
            moreInfo = this.getMoreMailInfo(len);
            content = html.splice(spliceIndex, 0, moreInfo);
        }

        this.moreInfoData = sessionMails;

        return html.join('');
    },

    /** 获取工具栏 */
    getToolBarHtml:function(){
        var self = this,
            flag = true,
            dataSource = self.model.get('dataSource'),
            mid = this.model.get('mid'),
            temp = this.template.toolbar;
        
        if($(self.el).attr('id')== 'readWrap' || $App.isNewWin()){
            flag = false;
        }

        if(flag){
            self.toolbarview = new M2012.ReadMail.ToolBar.View({
                el:"#toolbar_" + mid,
                dataSource:dataSource,
                currFid:self.model.get('currFid'),
                isSessionMail:true,
                parentview: self
            });

            return $T.Utils.format(temp,{
                mid:dataSource.omid, 
                content:self.toolbarview.render()
            });

        }else{
            return '';
        }
    },

    /** 输出工具栏按钮 */
    renderToolBarMenu:function(){
        var self = this,
            mid = this.model.get('mid');

        var readmailOption = {
                mid:mid,
                mail:self.model.get("mailListData")
            };
         
        if( $App.getCurrentTab().name.indexOf("readmail") >= 0 ) {
            new M2012.Mailbox.View.MailMenu({ 
                el: "#toolbar_" + mid + " .toolBarUl", 
                model: new M2012.Mailbox.Model.Mailbox, 
                readmail:{
                    mid:mid,
                    isSessionMail:true,
                    total:self.model.get('total'),
                    mail:self.model.get("mailListData")
                }
            }).render();
        }
    },

    /** 
     * 标题邮件数量 
     * 有未读：显示（1/3)
     * 无未读：显示（3）
     * 只有一封：不显示
     */
    getTitleCount:function(){
        var unReadedCount = this.model.get('unReadedCount');
        var total = this.model.get('total');
        var temp = '({0}/{1})';
        if(unReadedCount > 0){
            return $T.Utils.format(temp,[unReadedCount,total]);
        }else{
            return total > 1 ? '(' + total + ')' : '';
        }
    },

    /** 
     * 获取邮件标题 
     */
    getTitleHtml:function(options){
        var self = this;
        var mails = this.model.get('dataSource').sessionMails || [];
        var sponsor = mails[mails.length - 1].from;
        var temp = this.template.covMailSubject;
        var formatobj = {
            title:$T.Utils.htmlEncode($TextUtils.getTextOverFlow(options.subject, 200, true)),
            sessionId:this.model.get("sessionId"),
            mid:options.omid,
            from: this.getCovMailContactsText({to: sponsor, tag: 'em'}),
            to: this.getSessionContactsText(),
            star: options.flag && options.flag.starFlag ? 'i_star_y' : 'i_star',
            checkboxDisplay: $App.getLayout() == 'list' ? '' : 'display: none'
        };
        return $T.Utils.format(temp,formatobj) || '';
    },

    /** 获取摘要 */
    getSummary:function(summary, isCurrTab){
        if(isCurrTab){
            return '';
        }
        return '<div class="sov-tdt"><span class="title-text">' + ( $T.Utils.htmlEncode(summary) || '&nbsp;') + '</span></div><a class="check-mail" href="javascript:;" bh="cMail_tab_readMailLink" style="display:none;">查看正文</a>';
    },

    /** 获取会话列表 */
    getConversationItem:function(options){
        var self = this;
        var hasUnreadMail = this.model.get('firstCurrMailMid') ? true : false;
        var len = this.model.get('total');
        var index = options.index;
        var sort = options.sort;
        var isHiddenItem = false;
        if (!hasUnreadMail && len > 7) {
            if (sort == 1 && (index > 3 && index < len - 1)) {
                isHiddenItem = true;
            }
            if (sort == 0 && (index > 0 && index < len - 4)) {
                isHiddenItem = true;
            }
        }

        if(options && options.from && options.sendDate){
            var temp = this.template.covMailSummary;
            var html = $T.Utils.format(temp,{
                    mid:options.mid,
                    tabAttr:'',
                    statusTr:self.getStatusTrClass(options),
                    status:self.getStatus(options),
                    title:$T.Utils.htmlEncode($Email.getEmail(options.from)),
                    email:$T.Utils.htmlEncode(options.from),
					name:$T.Utils.htmlEncode(self.getMailName(options.from)),
                    summary:self.getSummary(options.summary), //已经encode
                    attachIco:self.getAttachIco(options),
                    starIco:self.getStarIco(options),
                    time:self.getMailDate(options.sendDate), //$Date.format("yyyy-MM-dd hh:mm:ss",new Date(options.sendDate * 1000))
                    vipicon: $App.getView("mailbox").model.isVipMail(options.from) ? 'user_vip' : '',
                    labels: self.getMailLabels(options.label),
                    remindhtml: self.getRemindHtml(options, true),
                    display: isHiddenItem ? 'display: none' : '',
                    checkboxDisplay: $App.getLayout() == 'list' ? '' : 'display: none',
                    nameStyle: self.getNameStyle(options.from)
                });
            return html;
        }
        return '';       
    },

    getNameStyle: function(name) {
        if (!$B.is.ie || $B.getVersion() > 7) return '';
        name = this.getMailName(name);
        return $TextUtils.getTextOverFlow2(name,16) == name ? 'style="width:auto;"' : '';
    },

    getRemindHtml: function(dataSource, inCovMaiSummary){
        var temp = '<a href="javascript:;" class="{aclass}" name="mailtask"><span mid="{mid}" status="{status}" taskdate="{taskdate}" from="{from}" senddate="{senddate}" subject="{subject}"></span></a>';
        
        // 会话列表和读信接口返回taskFlag/taskDate数据结构不同
        if (inCovMaiSummary) {
            var taskFlag = dataSource.flags && dataSource.flags.taskFlag || 0;
        } else {
            var taskFlag = dataSource.flag && dataSource.flag.taskFlag || 0;
        }
        // 读信页的taskDate存储在dataSource.headers中
        // 列表页存储在dataSource
        var taskDate = dataSource.headers && dataSource.headers.taskDate || dataSource.taskDate || 0;
        var status = ['add','update','finish'][taskFlag]; //任务状态
        var map = { //样式
            'add':'i_tx_n',
            'update':'i_tx_nb',
            'finish':'i_tx_ng'
        };
        var data = {
            aclass: map[status],
            mid: dataSource.mid||dataSource.omid,
            status: status,
            taskdate: taskDate,
            from: $T.Html.encode(dataSource.from||dataSource.account),
            senddate: dataSource.sendDate,
            subject: $T.Html.encode(dataSource.subject)
        };
        return $T.Utils.format(temp,data);
    },

    /** 获取邮件阅读状态 */
    getStatusTrClass:function(options){
        if(options.flags && options.flags.read == 1){
         return 'on';
        }
        return '';
    },

    /** 获取邮件阅读状态 */
    getStatus:function(options){
        if(options.flags && options.flags.read == 1){
            return '<i class="i_m_n" mid="' + options.mid + '" name="itemStatus" style="cursor:pointer" title="未读"></i>';
        }
        return '<i class="i_m_o" mid="' + options.mid + '" name="itemStatus" style="cursor:pointer" title="已读"></i>';        
    },

    /** 
     * 获取邮件姓名
     * 是本人显示‘我’，其他根据通讯录优先级规则显示 
     */
    getMailName:function(account){
        var name = '',
            self = this;
        if(!this.getNameCache){
            this.getNameCache = {};
        }
        if(this.getNameCache && this.getNameCache[account]){
            return this.getNameCache[account];
        }    
        if($.inArray($Email.getEmail(account),self.useraccounts) > -1){
            name = '我';
        }else{
            name = $App.getAddrNameByEmail(account);
            if(name.length > 10 && $T.Utils.getBytes(name) > 20){
                name = $T.Utils.getTextOverFlow2(name,20) + '...' 
            }
        }
        if(this.getNameCache){
            this.getNameCache[account] = name;
        }
        return name;
    },

    /** 获取更多邮件 */
    getMoreMailInfo:function(len){
        var temp = this.template.covMailSummaryOmissioned;
        return len > 7 ? $T.Utils.format(temp,[len-5]) : '';
    },

    /** 更多会话邮件信息 */
    getMoreTabHtml:function(){
        var self = this;
        var data = this.moreInfoData;
        var len = data.length;
        var html = [];
        $.each(data,function(i,val){
            if(i > 0 && i < len - 1){
                html.push(self.getConversationItem(val));                
            }
        })
        return html.join('');
    },

    /** 显示更多会话邮件 */
    onConversationMoreClick:function(){
        if ($B.is.ie && $B.getVersion() < 9) {
            this.$el.find('div[name=covMail_summary]').show();
        } else {
            this.$el.find('div[name=covMail_summary]').slideDown('slow');
        }
        
        this.$el.find('#covmore').remove();
        BH('cov_showmoremail');
    },

    /** 
     * 获取当前邮件信息 
     * @param {Object} options 邮件数据
     * @param {Bollean} isCurrTab 是否当前邮件
     */
    getCurrTabInfo:function(options, isCurrTab){

        var self = this;
        var temp = this.template.covMailMainbody;
        
        //为了重用函数，做参数兼容处理
        if(isCurrTab){
            options.summary = '';
            options.from = options.account;
            options.mid = options.omid;
            options.flags = options.flag;
        }

        var formatobj = {
            contentInfo:self.getContentInfo(options),
            mid:options.mid,
            checkboxDisplay: $App.getLayout() == 'list' ? '' : 'display: none'
        };
        var html = $T.Utils.format(temp,formatobj) || '';

        return {
            html:html,
            options:options
        };
    },

    /** 
     * 获取附件图标 
     * @param {Number} options.attachmentNum 
     */
    getAttachIco:function(options){
        return options.attachmentNum > 0 ?'<i class="i_atta"></i>' : '';
    },
    
    getMailDate:function(d){
        var mailDate = new Date(Number(d) * 1000),
            day = $Date.format("d", mailDate),
            yyMM = $Date.format("yyyy/M", mailDate),

            yyyyMMdd = $Date.format("yyyyMMdd", mailDate),
            today = $Date.format("yyyyMMdd",new Date);
        
        if(yyyyMMdd == today){
            return '<span class="covv-time">' + $Date.format("hh:mm", mailDate) + '</span>';
        }else{
            return ['<div class="covv-date">',
                          '<p class=""><span class="num">'+ day +'</span><span>日</span></p>',
                          '<p class="year"><span>'+ yyMM +'</span></p>',
                    '</div>'].join("");
        }
    },

    /** 
     * 获取星标图标 
     * @param {Object} flag  读取options.flags.starFlag
     */
    getStarIco:function(options, inCovMainbody){
        
        var temp = '<i class="{starclass}" style="cursor:pointer" mid="{mid}" name="conversation_star" data-val="{val}" title="{title}"></i>';
        if (inCovMainbody) {
            var starVal = options.flag && options.flag.starFlag;
        } else {
            var starVal = options.flags && options.flags.starFlag;
        }
        
        
        if(starVal == 1){
            var starClass = inCovMainbody ? 'i_starM_y' : 'i_star_y';
        } else {
            var starClass = inCovMainbody ? 'i_starM' : 'i_star';
        }

        return $T.Utils.format(temp,{
            mid:options.mid || options.omid,
            starclass: starClass,
            val: starVal || 0,
            title: starVal == 1 ? '取消星标':'标记星标'
        });
    },

    /** 
     * 标记星标 
     * @param {Object} 事件
     */
    onStarClick:function(e){
        var self = this,
            $target = $(e.target || e.srcElement),
            mid = $target.attr("mid"),
            name = $target.attr("name"),
            isTitleFlag = name === "title_star" ? true : false,
            isSummaryStar = $target.closest('div[name=covMail_summary]')[0] ? true : false;// 根据父元素区分星标所在位置
            value = $target.hasClass(isTitleFlag || isSummaryStar ? "i_star_y" : "i_starM_y") ? 0 : 1,
            count = self.model.get('starCount'),
            options = {
                type:'starFlag',
                value:value
            };

        var midArr = isTitleFlag ? self.model.get('mids').concat() : [mid];    // 此处之所以用concat()是为了返回一个副本作为参数，防止后续对这个数组的操作影响model中数据的准确性
        var thisCallBack = function() {
            $App.trigger('markCovMails', {mids: midArr, type: 'starFlag', value: value});
            M139.UI.TipMessage.show("邮件标记成功",{ delay:2000});
            BH(isTitleFlag ? 'cov_markallstar' : 'cov_markstar');
        };

            /*if(isTitleFlag){
                options.sessionIds = [this.model.get('sessionId')];
                //starCon = self.$el.find("i[name='conversation_star']");
                var thisCallBack = function(){
                    self.allStarChange({
                        $target:$target,
                        value:value
                    });

                    M139.UI.TipMessage.show("邮件标记成功",{ delay:2000});
                };      
                BH('cov_markallstar');      
            }else{ //需要区分是点击子标题还是内容
                options.mids = [mid];
                var thisCallBack = function(){
                    if( value === 0 ){
                        var title = "标记星标";
                        self.covCon.find("i.i_star_y[mid=" + mid + "]").removeClass("i_star_y").addClass("i_star").attr("title",title);
                        self.covCon.find("i.i_starM_y[mid=" + mid + "]").removeClass("i_starM_y").addClass("i_starM").attr("title",title);
                        self.model.set({starCount:--count});
                    }else{
                        var title = "取消星标";
                        self.covCon.find("i.i_star[mid=" + mid + "]").addClass("i_star_y").removeClass("i_star").attr("title",title);
                        self.covCon.find("i.i_starM[mid=" + mid + "]").addClass("i_starM_y").removeClass("i_starM").attr("title",title);
                        self.model.set({starCount:++count});
                    }
                    M139.UI.TipMessage.show("邮件标记成功",{ delay:2000});
                }; 
                BH('cov_markstar');
            }*/

            if (isTitleFlag) {
                options.sessionIds = [this.model.get('sessionId')];
            } else {
                options.mids = [mid];
            }
            $App.trigger('changeCovStar',{ options:options,callback:thisCallBack});
    },

    /** 
     * 星标批量修改 
     * @param {Object} options  数据对象
     */
    allStarChange:function(options){
        var self = this,
            value = options.value,
            $target = options.$target || this.titleStarCon,
            total = this.model.get('total'),
            title,
            tit,
            count,
            starCon = this.$el.find("i[name='conversation_star']");


        if( value === 0 ){
            $target.removeClass("i_star_y").addClass("i_star");
            this.$el.find("div[name=covMail_summary] i[name='conversation_star']").removeClass("i_star_y").addClass("i_star");
            this.$el.find("div[name=covMail_mainbody] i[name='conversation_star']").removeClass("i_starM_y").addClass("i_starM");
            title = "全部标记星标";
            tit = "标记星标";
            count = 0;
        }else{
            $target.removeClass("i_star").addClass("i_star_y");
            this.$el.find("div[name=covMail_summary] i[name='conversation_star']").removeClass("i_star").addClass("i_star_y");
            this.$el.find("div[name=covMail_mainbody] i[name='conversation_star']").removeClass("i_starM").addClass("i_starM_y");
            title = "全部取消星标";
            tit = "取消星标";
            count = total;
        }
        self.model.set({starCount:count});
        $target.attr("title",title);
        starCon.attr("title",tit);

        //同时要修改缓存数据
        var isShowMore = $(this.el).find('div.cov-show');
        if(isShowMore.length > 0){
            $.each(this.moreInfoData,function(i,val){
                val.flags.starFlag = value;
            });
        }
    },

    /** 获取发信人抄送人等相关信息 */
    getContactsInfo:function(options){
        if(options && options.from){ delete options.from} //不显示发件人
        var self = this,
            temp = this.template.itemContactInfo,
            accounts = this.getMailAllAccounts(options),
			name,
            title,
            email,
			info = [];
        
        //获取名称，发件人名称最多显示20个字符，超过则截取，截取后最后一个字符用半省略后代替
        $.each(accounts,function(i,val){
			name = $T.Utils.htmlEncode(self.getMailName(val));
            title = $T.Utils.htmlEncode($Email.getEmail(val));
            email = $T.Utils.htmlEncode(val);
			info.push('<a class="inber-name" title=\"' + title + '\" email=\"' + email + '\" >' + name + '</a>');
        })

        var formatobj = {
            mid:options.mid,
            namelist:info.join(", ")  //英文逗号加空格
        };

        return $T.Utils.format(temp,formatobj);
    },

    // 参与人为剔除了最旧一封外的其他所有发件人
    getSessionContactsText: function() {
        var mails = this.model.get('dataSource').sessionMails || [];
        var len = mails.length;
        var oldest = mails[len - 1];
        var contacts = [];
        for (var i = len; len--;) {
            var mail = mails[len];
            var from = mail && mail.from && mail.from;
            contacts.push(from);
        }

        contacts = contacts.join(',').split(/,|;/);
        // 排除最老一封邮件的发件人（即发起人）
        contacts.shift();

        var exsitedObj = {};
        var uniqueArr = [];
        for (var i = contacts.length; i--;) {
            var contact = contacts[i];
            var name = $Email.getAccount(contact);
            if (name != '' && !exsitedObj[name]) {
                exsitedObj[name] = true;
                uniqueArr.push(contact);
            }
        }

        uniqueArr.reverse();

        return this.getCovMailContactsText({to: uniqueArr});
    },

    getCovMailContactsText: function(options) { 
        var self = this;
        var accounts = [];
        if (options) {            
            options.to && accounts.push(options.to);
            options.cc && accounts.push(options.cc);
            options.bcc && accounts.push(options.bcc);
        }
        accounts = accounts.join(',').split(",");
        var info = [];
        var len = accounts.length;
        $.each(accounts,function(i,val){
            var name = $T.Utils.htmlEncode(self.getMailName(val));
            var title = $T.Utils.htmlEncode($Email.getEmail(val));
            var email = $T.Utils.htmlEncode(val);
            var tagName = options && options.tag || 'strong';
            var className = tagName != 'strong' ? ' class="send-name" style="cursor: pointer;"' : '';
            var frag = '<'+ tagName + className +' title=\"' + title + '\" email=\"' + email + '\">' + name;
            info.push(i < len - 1 ? frag + '，</'+tagName+'>' : frag + '</'+tagName+'>');
        });

        return info.join("");
    },

    /** 联系人事件绑定 */
    initContactsInfoEvent:function(thisEl){
        var container = thisEl.find('div.cov-inber:eq(0)');
        var span = container.find('span:eq(0)');
        var w1 = container.width();
        var w2 = span.width();
        var w3 = w1 - 45;
        var spanHeight = span.height();
        if( (w1 - w2 < 42) || spanHeight > 20 ){        
            span.attr("style","float:left;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;display:inline-block;");
            span.width(w3);
        }
    },

    /** 联系人弹层单项数据 */
    getContactItem:function(d){
        var self = this,
            name = '',
            email = '',
            html = [],
            item = '<div class="cov-ad">{name}<span>&lt;{email}&gt;</span></div>';
        
        $.each(d,function(i,val){
            name = self.getMailName(val);
            email = $Email.getEmail(val);
            html.push($T.Utils.format(item,{
                name:$T.Utils.htmlEncode(name),
                email:email
            }));
        })

        return html.join('');
    },    

    /** 联系人弹层 */
    showContactsDialog:function(e){
        var self = this,
            $target = $(e.target || e.srcElement),
            mid = $target.attr('mid');
            if(!mid){return}
        var sessionData = this.model.get('sessionData'),
            temp = this.template.itemContactDialog,
            tr = this.template.itemContactTr,
            html = [],
            count = 0,
            data = sessionData && sessionData[mid].dataSource;
        
        $('#conversationDialog').remove();
        
        if(data){

            var showdata = [
                {
                    title:'发件人',
                    d:data.account
                },
                {
                    title:'收件人',
                    d:data.to
                },
                {
                    title:'抄送人',
                    d:data.cc
                },
                {
                    title:'密送人',
                    d:data.bcc
                }                                
            ];

            $.each(showdata,function(i,val){
                if(val.d){
                    var item = val.d.split(",");
                    count += item.length;
                    html.push($T.Utils.format(tr,{
                        title:val.title,
                        namelist:self.getContactItem(item)
                    }));
                }
            });

            html = html.join('');

            var left = $target.offset().left;
            if(this.body.width() - left < 400){
                left -= 320;
            }

            var formatobj = {
                left:left,
                top:$target.offset().top + 10,
                height: count > 12 ? 'height:245px;overflow-y:auto;overflow-x:hidden' : '',
                data:html
            };

            setTimeout(function(){
                !$('#conversationDialog')[0] && $('body').append($T.Utils.format(temp,formatobj));                 
            },200);

            /*M139.Dom.bindAutoHide({
                action: "click",
                element: $('#conversationDialog')
            });*/

            BH('cov_showmorecontacts');
        }
    },

    /** 
     * 获取所有邮件帐号 
     * 发信人，收件人，抄送人，密送人
     */
    getMailAllAccounts:function(options){
        var options = options || this.model.get('dataSource');
        var accounts = [];
        if(options){
            options.from && accounts.push(options.from);
            options.to && accounts.push(options.to);
            options.cc && accounts.push(options.cc);
            options.bcc && accounts.push(options.bcc);
        }
        accounts = accounts.join(',').split(",");
        return $.unique(accounts);
    },

    /** 获取附件信息 */
    getAttachsInfo:function(options){
        if(options.attachments && options.attachments.length > 0){
            var attach = this.readmailview.filepreview.getConversationAttach(options.subject,options.attachments,options.omid);
            return attach;
        }
        return '';
    },

    /** 阅读状态修改 */
    onItemStatusClick:function(e){
        var self = this,
            target = e.target || e.srcElement,
            $target = $(target),
            mid = $target.attr("mid"),
            sessionId = this.model.get('sessionId'),
            value = $target.hasClass("i_m_n") ? 0 : 1,
            unReadedCount = this.model.get('unReadedCount'),
            changeCon,
            changePcon,
            _callback,
            args;
        if($target.hasClass("cov-t-io")){ //点击标题
            isTitleFlag = true;
            _callback = function(){
                self.allReadStatusChange({ value:value });
            };
             
            args = {
                sessionIds:[sessionId],
                command:'mark',
                type:'read',
                value: value,
                callback:_callback
            };

            BH('cov_markallread');

        }else{  //点击子项
            changePcon = $('#covMail_summary_' + mid + ", #covcur_" + mid);
            changeCon = changePcon.find("i[name='itemStatus']");
            _callback = function(){
                if( value === 0 ){
                    changeCon.removeClass("i_m_n").addClass("i_m_o").attr("title","已读");
                    changePcon.find("tr").removeClass("on");
                    self.model.set({unReadedCount:--unReadedCount});
                }else{
                    changeCon.removeClass("i_m_o").addClass("i_m_n").attr("title","未读");
                    changePcon.find("tr").addClass("on");
                    self.model.set({unReadedCount:++unReadedCount});
                }
            };
            args = {
                mids:[mid],
                command:'mark',
                type:'read',
                comefrom:'singleSessionMail',
                value: value,
                callback:_callback
            };
            BH('cov_markread');
        }
        $App.trigger("mailCommand", args);
    },

    /** 批量修改阅读状态 */
    allReadStatusChange:function(options){
        var self = this,
            value = options.value,
            $target = this.titleIcoCon,
            changeCon,
            changeTr;
        if( value === 0 ){ 
            changeCon = self.$el.find("i.i_m_n");
            changeTr = self.$el.find("tr.on");
            changeCon.removeClass("i_m_n").addClass("i_m_o").attr("title","已读");
            changeTr.removeClass("on");
            $target.attr("title","全部标为未读");
            self.model.set({unReadedCount:0});
        }else{ //标为未读
            changeCon = self.$el.find("i.i_m_o");
            changeTr = self.$el.find("tr");
            changeCon.removeClass("i_m_o").addClass("i_m_n").attr("title","未读");
            changeTr.addClass("on");
            $target.attr("title","全部标为已读");
            self.model.set({unReadedCount:self.model.get("total")});
        }

        //同时要修改缓存数据
        var isShowMore = $(this.el).find('div.cov-show');
        if(isShowMore.length > 0){
            $.each(this.moreInfoData,function(i,val){
                val.flags.read = value;
            });
        }
    },
	
	/**
	 * 联系人页卡绑定
	 */
	onContactsNameClick:function(e){
        $Event.stopEvent(e);
		var self = this,
			target = e.target || e.srcElement,
			email = target.getAttribute("email");
        
		if(email){
			M2012.UI.Widget.ContactsCard.show({
				dockElement:$(target),
				email:email
			});
		}
		BH('cov_contactclick');
	},

    /** 
     * 展开时标记为已读状态 
     * el为折叠的标题
     */
    markHasReaded:function(el, mid){
        //var unReadIcon = el.find("i.i_m_n"),
        var unReadedCount = this.model.get('unReadedCount');
        
        /*if(unReadIcon[0]){
            unReadIcon.addClass("i_m_o").removeClass("i_m_n").attr("title","已读"); //标题
            $('#covcur_' + mid).find("i[name=itemStatus]").addClass("i_m_o").removeClass("i_m_n").attr("title","已读");*/
        el.find("tr").removeClass("on");
        $('#covcur_' + mid).find("tr").removeClass("on");
        unReadedCount > 0 && unReadedCount--;
        this.model.set({unReadedCount:unReadedCount});
        // }

    },

    /** 获取正文信息 */
    getContentInfo:function(options){
        return this.readmailcontentview.getMailContentIframe(options.mid,true,'cov');
    },         

    /** 渲染邮件卡片头 */
    renderMailCardHeader:function(options){
        var self = this;
        var mid = options.omid;
        var thisEl = $('#covcur_' + mid);
        var len = thisEl.find("div.cov-inber").length;
		if( len > 0 ){ return } //防止局部刷新
        // 填充头部信息
        var headerDOM = this.getMailHeaderDOM(options);//this.template.mailHeader
        thisEl.find('#mainbodyHeader').html(headerDOM); //渲染DOM
        appView.getView("remind").addEvent(thisEl);             //绑定代办事件
        // 生成附件列表
        var attachsInfo = this.getAttachsInfo(options);
        if (attachsInfo) {
            thisEl.find('#attachs').append(attachsInfo);
        }
        // 移除“加载中”，显示正文
        thisEl.find("div[name=loading]").remove();
        thisEl.find('div[name=checkboxDiv]').show();
        thisEl.find('div[name=covMail_mainbody_content]').slideDown('normal');

        //附件事件绑定
        this.readmailview.filepreview.isSessionMail = true;
        this.readmailview.filepreview.el = thisEl.find('div.covv-accessory')[0];
        this.readmailview.filepreview.initEvents(options,mid);

        //底部工具栏
        if(!top.M139.PageApplication.getTopApp().sessionCompose){
            top.M139.PageApplication.getTopApp().sessionCompose = {};
        }

        var options = {
            el:thisEl.find('div[name=covMail_bottom]')[0],
            parentview:self,
            mid:mid,
            data:self.model.get('dataSource')
        };

        top.M139.PageApplication.getTopApp().sessionCompose[mid] = options;       
        this.bottomview = new M2012.ReadMail.ConversationBottomBar.View(options);
        this.bottomview.initEvents();
        
        //标记这封邮件单元加载完毕
        $('#covMail_summary_' + mid).attr("data-read",1);
        this.onResize();
        M139.UI.TipMessage.hide();

    },

    fromFolderName: function(fid) {

        var curFid = this.model.get('currFid');
        
        if (fid && curFid != fid) {
            var folder =  $App.getFolderById(fid);
            if (folder && folder.name) {
                return '<span class="filesource" name="covMailFolderName">(来自 '+ folder.name +')</span>'
            }          
        }
        return '<span class="filesource" name="covMailFolderName"></span>';
    },

    // 获取单封邮件的头部信息（在读信接口返回数据后渲染）
    getMailHeaderDOM: function(options) {
        var self = this;
        var temp = this.template.mainbodyHeader;  
        var mails = self.model.get('sessionData') || {};
        var fid = mails[options.omid] && mails[options.omid].fid || null;
        var html = $T.Utils.format(temp, {
                        from: this.getCovMailContactsText({to: options.account, tag: 'h2'}),
                        attachIco:options.attachments.length ?'<i class="i_atta" title="带附件"></i>' : '',
                        vipicon: $App.getView("mailbox").model.isVipMail(options.account) ? '<span class="user_vip"></span>' : '',
                        labels: self.getMailLabels(options.label),
                        yyyyMMdd: $Date.format("yyyy-MM-dd",new Date(options.sendDate * 1000)),
                        hhmmss: $Date.format("hh:mm:ss",new Date(options.sendDate * 1000)),
                        to: this.getCovMailContactsText(options),
                        mid:options.omid,
                        remindhtml: self.getRemindHtml(options),
                        foldername: self.fromFolderName(fid),
                        starIco: self.getStarIco(options, true)
                    });
        return html;
    },


    /** 邮件广播事件 */
    initMailCardTriggerEvent:function(){
        var self = this;
        var errorFlag = false;
        var total = self.model.get('total');
        var mid = self.model.get('mid');
        var toggleCon = self.toolBarCon.find("li[name=cov-toggle]");
		var sessionData = this.model.get('sessionData');
		var currMid = $App.getCurrMailMid();        

        //邮件正文
        $App.off('letterDomReady').on('letterDomReady',function(win){

            if(win && win.letterInfo && win.letterInfo.errorCode){
                errorFlag = true;
            }
            if(!errorFlag && win.letterInfo && win.letterInfo.omid){
                
                self.print[win.letterInfo.omid] = win.letterInfo;
                //保存正文内容
                var content = win.document.body.innerHTML;
                self.print[win.letterInfo.omid].html = {content:content}; 
                win.letterInfo.html = {content:content};
                self.readmailcontentview.mailDomReady(win.letterInfo,win);
                _letterInlineScript(win);
            }            
        });

        //邮件头
        $App.off('letterInfoReady').on('letterInfoReady',function(data){            
            if(data && (data.errorCode || data.errorCode == 0)){ 
                self.logger.error("read conversationmail letterInfo returndata error", "[view:readMessage]", data);
                self.readmailview.readMailError(data); //异常处理
            }else{
                self.model.saveData(data); //保存数据
                self.renderMailCardHeader(data);
            }
        });

        //全部展开折叠
        //1、先展开更多的
        //2、要一封封展开，计时器检测
        $App.off('conversationToggle').on('conversationToggle',function(options){           
            var doAction = options.doAction;
            var readedLen = self.covCon.find("div[data-read='1']").length;
            if( options && options.sessionId !== self.model.get('sessionId')){
                return;
            }

            if(doAction === 'showConversation'){  //全部展开
                if(!self.loadOver || readedLen < total){

                    total > self.model.get('showStopBtn') && M139.UI.TipMessage.showMiddleTip("会话邮件展开中，请稍后...");
                    self.$el.find('#covmore').trigger("click"); //先展开更多
                    self.loadAllCovTimer = setInterval(function(){
                        var len = self.covCon.find("div[data-read='1']").length;
                        total = self.model.get('total'); //取最新的
                        if( len < total){
                            self.loadIng = true;
                            var loadContainer = self.$el.find("div[name=covMail_summary][data-read='0']:eq(0)");
                            if(!loadContainer.attr("data-flag")){
                                loadContainer.trigger("click");
                            }
                        }else{
                            clearInterval(self.loadAllCovTimer);
                            self.loadAllCovTimer = null;
                            self.loadOver = true;
                            self.loadIng = false;
                            M139.UI.TipMessage.hideMiddleTip();
                            self.showAllMailCardChangeStyle();
                            options.callBack && options.callBack(); //执行回调
                        }      
                    },1000);
                }else{
                    self.showAllMailCardChangeStyle();
                    options.callBack && options.callBack(); //执行回调
                }
                BH('cov_showhistorycontent');
            }else if(doAction === 'stopConversation'){ //停止展开
                M139.UI.TipMessage.hideMiddleTip();
                clearInterval(self.loadAllCovTimer);
                options.callBack && options.callBack(); //执行回调

            }else{ //全部收起
                self.hideAllMailCardChangeStyle();
                options.callBack && options.callBack(); //执行回调
                BH('cov_hidehistorycontent');
            }
            
        });

        //解锁成功后从新加载邮件
        $App.off("unLockOk").on("unLockOk",function(){
            var thismid = self.mid;
            $App.validateTab("readmail_" + thismid);
        }); 

        //同步标记
        this.markTriggerEvent();

        //标签同步
        this.tagsTriggerEvent();
    },

    /** 标记事件广播 */
    markTriggerEvent:function(){
        
        var self = this;

        //工具栏标记重要
        $App.on("mailimportant",function(args){
            
            var count;
            if( args && args.sessionId && args.sessionId === self.model.get('sessionId')) {                
                args.value === 1 ? count = self.model.get('total') : count = 0;
                self.model.set({ importantCount: count});
            }
        });

        //工具栏标记星标
        $App.on("markstar",function(args){
            var count;
            if( args && args.sessionId && args.sessionId === self.model.get('sessionId')) {
                args.value === 1 ? count = self.model.get('total') : count = 0;
                self.model.set({ starCount: count});
                self.allStarChange({value:args.value});
            }
        });

        //工具栏标记已读/未读
        $App.on("mailread",function(args){
            var count;
            if( args && args.sessionId && args.sessionId === self.model.get('sessionId')) {
                args.value === 1 ? count = self.model.get('total') : count = 0;
                self.model.set({ unReadedCount: count});
                self.allReadStatusChange({value:args.value});
            }
        });

    },

    /** 标签事件 */
    tagsTriggerEvent:function(){
        var self = this;
        var mid = $App.getCurrMailMid();

        //增加标签
        $App.on("mailtagschange",function(args){
            var labelId;
            
            var sessionLabel = self.model.get('sessionLabel');
            if( args && args.mids && $.inArray(mid, args.mids) !== -1){    
                labelId = args.labelId;
                if($.inArray(labelId, sessionLabel) === -1){
                    sessionLabel.push(labelId);
                    self.model.set({sessionLabel: sessionLabel});
                }
            }
        });

        //删除标签
        $App.on("removeTag", function(args){
            if(args){
                var sessionLabel = self.model.get('sessionLabel');
                var currmid = args.currMid;
                if( mid === currmid && args.labelId){
                    $.each(sessionLabel,function(i,val){
                        val == args.labelId && sessionLabel.splice(i,1);        
                    });
                    self.model.set({ sessionLabel: sessionLabel});
                }                
            }
        });
        
    },

    /** 全部展开样式 */
    showAllMailCardChangeStyle:function(){
        //this.removeCurrentTabBorder();
        this.removeItemBorderStyle();
        this.covCon.find("div[name='covMail_summary']").addClass('hide');
        this.covCon.find("div[name=covMail_mainbody]").removeClass('hide');
        //this.covCon.find("div.cov-cur:eq(0)").addClass("cov-cur-blue"); //第一封邮件标记
        if( this.model.get('unReadedCount') > 0){
            this.titleIcoCon.trigger("click");
        }
        this.covCon.animate({scrollTop:0}, this.scrollTime);
    },

    /** 全部收起样式 */
    hideAllMailCardChangeStyle:function(){
        //this.removeCurrentTabBorder();
        this.removeItemBorderStyle();
        this.covCon.find("div[name='covMail_summary']").removeClass('hide');
        this.covCon.find("div[name=covMail_mainbody]").addClass('hide');
        this.covCon.animate({scrollTop:0}, this.scrollTime);
    },

    /** 判断是否全部展开 */
    checkIsAllMailCardShow:function(){
        var hideTitleCon = this.covCon.find("div.hide[name='covMail_summary']"),
            contentLength = this.covCon.find("div.cov-cur").length,
            total = this.model.get('total');
        this.showAllBtn =  this.showAllBtn || this.toolBarCon.find("li[name=cov-toggle] span");
        
        if( contentLength === total ){
            if(hideTitleCon.length === total){ //全部展开
                this.showAllBtn.text('全部收起').attr("data-flag", 2);
                this.loadOver = true;
            }
            if(hideTitleCon.length === 0){ //全部收起
                this.showAllBtn.text('全部展开');
            }
        }
    },

    // 获取当前会话下选择的邮件
    getCheckedMidArr:function() {
        var arr = [];
        var $checkboxs = this.$el.find('#covMailSummaryList :checkbox:checked');
        $checkboxs.each(function() {
            var mid = $(this).closest('div[name=covMail_summary]').attr('data-mid');
            if(mid) arr.push(mid);            
        });
        return arr.length ? arr : null;
    },

    // 根据底部工具条的top值来控制底部收起按钮的样式
    collapseBtnCSSControl: function() {
        var curMainbody = this.$el.find('[name=covMail_mainbody_content]:visible:first').parent();
        if (!curMainbody.length) return;

        var btn1 = curMainbody.find('[name=go_top]:first');
        var btn2 = curMainbody.find('[name=go_top]:last');
        var left = btn1.offset().left;
        var top = btn1.offset().top;
        var documentH = $D.getWinHeight();
        var bottomBarH = curMainbody.find('[name=covMail_bottom]').offset().top;
        var btnH = btn2.height();
        var FLOAT_H = 50;
        if (bottomBarH > documentH - FLOAT_H && top < documentH - FLOAT_H - 3*btnH) {
            btn2.addClass('go-fixed');
            btn2.css({'bottom': FLOAT_H, 'left': left});
        } else {
            btn2.removeClass('go-fixed');
            btn2.css({'bottom': '', 'left': ''});
        }
    },

    hasUnsavedComposeframe: function() {
        var frames = this.$el.find('[name=covMail_bottom_compose]:visible');
        var frame;
        frames = [].slice.call(frames);
        while(frame = frames.pop()) {
            var mid = $(frame).find('iframe').attr('id').split('_')[1];
            var composeView = this['compose'+ mid];//.isDataChanged()
            if (composeView && composeView.isDataChanged()) {
                return true;
            }
        }
        return false;
    }
}));    
    
})(jQuery, _, M139);
﻿/**
* @fileOverview 会话邮件卡片底部工具栏
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
         
    M139.namespace('M2012.ReadMail.ConversationBottomBar.View', superClass.extend({

        /**
        *快捷回复提示语
        */
        tips: {
            replySuccess: '邮件回复成功',
            replyFail: '系统繁忙,请稍后重试。',
            replyContentError: '请输入要回复的内容。',
            replyMailError: '请输入正确的邮件地址。',
            replyMailNull: '请输入回复的邮件地址。'
        },

        replyPrefix: {
            "1": "Re:",
            "2": ">",
            "3": "Reply:"
        },

        events: {
            "click li[name=more]": "onBottomToolbarClick",
            "click li[name=reply]": "onBottomToolbarClick",
            "click li[name=replyall]": "onBottomToolbarClick",
            "click li[name=forward]": "onBottomToolbarClick",
            "click li[name=del]": "onBottomToolbarClick",
            "click li[name=edit]": "onBottomToolbarClick"
        },
	
        name: "M2012.ReadMail.ConversationBottomBar", // 45<!--  94px  150px  189px -->'

        bottombarCurPos: {
            "reply": "45px",
            "replyall": "94px",
            "forward": "150px",
            "del": "200px",
            "edit": "200px"
        },

	    template:{
	        replybox: (function () {
	            return ['<ul class="toolBarUl" name="covMail_bottom_toolbar" style="display: block;">',
                               '<li name="reply"><a href="javascript:;" class="btnTb"><span class="p_relative">回复<i class="r-line"></i></span></a></li>',
                               '<li name="replyall" class="ml-1 ml_10"><a href="javascript:;" class="btnTb ml_10"><span class="p_relative">全部回复<i class="l-line"></i></span></a></li>',
                               '<li name="forward" class="ml-1 ml_10"><a href="javascript:;" class="btnTb ml_10"><span class="r two">转发</span></a></li>',                               
                               '<li name="del"><a href="javascript:;" class="btnTb ml_10"><span class="p_relative">删除<i class="r-line"></i></span></a></li>',
                               '<li name="edit" style="display: none;"><a href="javascript:;" class="btnTb ml_10"><span class="r two">编辑主题</span></a></li>',
                               '<li name="more"><a href="javascript:;" class="btnTb ml_10"><span class="p_relative">更多</span></a></li>',
                         '</ul>'].join("")
	        })(),

            bottomCompose: [ '<div class="covv-min-warp innerboxshadow" name="covMail_bottom_compose">',
                                '<div class="tipsTopblue diamond" id="bottombar-cur-pos" style="display: none;"></div>',
                                '<iframe id="conversationcompose_{mid}" width="100%" src="conversationcompose.html?sid={sid}&v={random}#mid={mid}" frameborder="0" ></iframe>',
                             '</div>'].join("")
        },        
        
        initialize: function(options){
            this.parentview = options.parentview;
            this.model = this.parentview.model;
            this.mid = options.mid;
            this.dataSource = options.data;
            this.setElement(options.el); //定义el
            this.curMail = this.model.get('sessionData')[this.mid];
            this.attachments = this.curMail && this.curMail.dataSource.attachments;
            this.rPrefix = this.replyPrefix[$App.getConfig('UserAttrs').replyPrefix];
            this.rQuote = $App.getConfig('UserAttrs').replyWithQuote;
            return superClass.prototype.initialize.apply(this, arguments);
        },    
    
        initEvents: function () {
            this.setBottombar();
        },

        setBottombar: function () {
            var self = this,
                _$el = this.$el;

            _$el.html(self.template.replybox);

            setTimeout(function(){
                self.parentview.onResize();
            },300);
        },

        onBottomToolbarClick: function (e) {
            var self = this;
            var $el = this.$el;
            var target = $(e.target || e.srcElement).closest('li[name]');
            var name = target.attr("name");
            var isCurrentTab = this.curBtn == name;
            var mid = this.mid;
            var iframe = $('#conversationcompose_' + mid)[0];
            var curMail = this.curMail;

            if (isCurrentTab && name != 'more' && name != 'del' && name != 'edit') {
                return false;
            }

            // 保存上一次点击按钮
            this.curBtn = name;
            
            if (name === "more") {
                self.createMoreMenu($(target));
            } else if (name == 'del') {
                self.delMailInMailbody();//ovcur_
            } else if (name == 'edit') {
                $App.trigger('bottomComposeEditSubject')
            } else {
                self.composeHandler(name);
            }

            //滚动条调整
            if(!/edit|more/i.test(name)){
                var scrollTop = $(target).parent().offset().top;
                var toTop = 180;
                if(scrollTop > toTop){
                    this.parentview.scrollToPosition(scrollTop-toTop);
                }
            }           
        },
        //ovcur_
        delMailInMailbody: function() {
            BH('cov_delmail');
            /*var changed = this.parentview['compose'+this.mid].isDataChanged();
            alert(changed);
            return*/

            var self = this;
            var mid = self.mid;
            var args = {
                    command: "move" , 
                    fid: 4,
                    mid: [self.mid],
                    inCovMainbody: true,
                    comefrom: 'singleSessionMail',
                    callback: function() {
                        $App.trigger('delCovMails', {mids: [mid]});
                    }
                }
            if(self.model.get('total') === 1){ delete args.comefrom }
            $App.trigger("mailCommand", args);            
        },

        /** 写信处理 */
        composeHandler:function( type ){
            var self = this;
            var mid = this.mid;
            var options = {
                type:type,
                parentview:this.parentview,
                model:this.model,
                mid:mid,
                dataSource:this.dataSource,
                curMail:this.curMail,
                attachments:this.attachments,
                rPrefix:this.rPrefix,
                rQuote:this.rQuote
            };

            if(!$('#conversationcompose_' + mid)[0]){
                self.createIframe(mid, options); //第一次要创建iframe
            }else{
                self.parentview.$el.find("div[name=covMail_bottom_compose]").show();
                self.composeTrigger(mid, options);
            }
           
        },

        /** 写信通知消息 */
        composeTrigger:function(mid, options){
			setTimeout(function(){
				$App.trigger('conversationCompose_' + mid, options);	
			},200);
        },

        /** 写信页创建iframe */
        createIframe:function(mid, options){
            var self = this,
                mid = mid || this.mid,
                container = $('#bottomBar_' + mid),
                iframe = "";
            
            iframe = $T.Utils.format(this.template.bottomCompose ,{
                mid:mid,
                sid:$App.getSid(),
                random: Math.random()
            });
            this.$el.closest('div[name=covMail_mainbody_content]').after(iframe).after('<div name="loading" style="position:absolute;left:40%;top:30%;text-align:center;padding:30px"><img src="/m2012/images/global/loading.gif">&nbsp;正在加载中...</div>');
            $('#conversationcompose_' + mid).load(function(){
                self.$el.closest('div[name=covMail_mainbody]').find("div[name='loading']").remove();
                self.composeTrigger(mid, options);
                // self.$el.find('li[name=del]').hide();
                // self.$el.find('li[name=edit]').show();
            });

        },

        /**
        * 更多操作菜单
        */
        createMoreMenu:function(moreContainer){
            var self = this,
                mid = this.mid, 
                lastFlag = false;
            var hasComposeFrame = !$('#conversationcompose_'+ this.mid)[0];

            if( mid === this.parentview.covCon.find("div.cov-cur:last").attr("mid")){
                lastFlag = true;
            }    

            var moreItems = [
                    {
                        text:"导出邮件",
                        onClick:function(){
                            var wmsvrPath2 =  domainList.global.wmsvrPath2;
                            var sid = $App.getSid();
                            var downloadUrl = wmsvrPath2 + "/mail?func=mbox:downloadMessages&sid={0}&mid={1}&";
                            window.open($T.Utils.format(downloadUrl,[sid,mid]));
                            BH('cov_exportmail');
                        }
                    },

                    {
                        text:"打印",
                        onClick:function(){
                        window.open("/m2012/html/printmail.html?mid=" + mid);
                        BH('cov_print');
                        }
                    },                    
                    
                    {
                        text:"显示邮件原文",
                        onClick:function(){
                            var orignUrl = "/RmWeb/view.do?func=mbox:getMessageData&mode=text&part=0&sid={0}&mid={1}&";
                            window.open($T.Utils.format(orignUrl,[sid,mid]));
                            BH('cov_mailcode');
                        }
                    },

                    {
                        text:"新窗口打开",
                        onClick:function(){
                            $App.openNewWin(mid);
                            BH('cov_newwinreadmail');
                        }
                    },

                    {
                        text:"备份至彩云网盘",
                        onClick:function(){   
                            BH('cMail_tab_saveDisk');                         
                            $App.trigger("mailCommand", {
                                command: 'backupMail',
                                mids: [mid]
                            });
                        }
                    },

                    {
                        text:"保存至和笔记",
                        onClick:function(){
                            BH('cMail_tab_saveNote');
                            var mailObj = M139.PageApplication.getTopApp().print[mid];
                            if (mailObj && mailObj.html) {
                                var title = mailObj.subject || "";
                                title = title.slice(0, 65);
                                var content = mailObj.html.content || "";
                            }
                            // content = content.replace(/\\/ig, "\\\\").replace(/(\r)?\n/ig, "\\n").replace(/\"/ig, "\\\"").replace(/\//ig, "\\\/"); //转义
                            var options = {
                                title: title || '邮件标题',
                                content: content || '邮件内容',
                                attachmentDirId: ""
                            }
                            top.M139.RichMail.API.call("mnote:createNote", options, function (res) {       //创建笔记
                                if (res.responseData && res.responseData["code"] == "S_OK") {
                                    M139.UI.TipMessage.show("邮件已转存至和笔记 <a href='javascript:top.$App.show(\"note\")'>查看</a>");
                                    // var noteId = res.responseData["var"]["noteid"];         //返回新建的noteId
                                } else {
                                    M139.UI.TipMessage.show("保存失败，请重试");
                                }
                                setTimeout(function () {
                                    M139.UI.TipMessage.hide();
                                }, 5000);
                            });
                        }
                    }
                ];
            /*if (!hasComposeFrame) {
                moreItems.push({
                        text:"删除",
                        onClick:function(){
                            self.delMailInMailbody();
                        }
                    });
            }*/

            M2012.UI.PopMenu.create({
                items: moreItems,
                container: moreContainer[0],
                top: '-161px',
                left: "10px"
            });
        }      
       
    }));


})(jQuery, _, M139);    



﻿/**   
* @fileOverview 读信页往来邮件会话
*/

(function (jQuery, _, M139) {

/**
* @namespace 
* 读信页往来邮件会话
*/

    M139.namespace("M2012.ReadMail.SessionContactsMail.Model",Backbone.Model.extend({
        
        defaults:{
            email:null, //往来邮件帐号
            mailListData: null
        },

		/**
		* 获取邮件列表
		*/
        searchContactsMail: function(callback){
            var self = this,
				keyword = this.get('email'),
				option = {
					fid: 0,
					recursive: 0,
					isSearch: 1,
					start: 1,
					total: 21,
					limit: 20
				},
				_options = {
					condictions: [ //往来邮件条件
						{
							field: "from",
							operator: "contains",
							value: keyword
						},
						{
							field: "to",
							operator: "contains",
							value: keyword
						},
						{
							field: "cc",
							operator: "contains",
							value: keyword
						}
					]
				};
			option = $.extend(option,_options);
		    this.set("searchContactsMailOptions", _options); //查看等多
			M139.RichMail.API.call("mbox:searchMessages", option, function (result) {
				callback && callback(result.responseData);
	        });
        },
		
	    /**
	    * 获取附件列表数据
	    */
	    getAttachData:function(options,callback){
	        var self = this;
            M139.RichMail.API.call("attach:listAttachments",options,function(result){
                callback && callback(result.responseData);
            });   
	    }

}));

})(jQuery, _, M139);



﻿/**
* @fileOverview 读信页往来邮件会话
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 读信页往来邮件会话
    */

        M139.namespace('M2012.ReadMail.SessionContactsMail.View', superClass.extend({

        /**
        *@lends M2012.ReadMail.SessionContactsMail.View.prototype
        */

        el: "",
		
		name: "M2012.ReadMail.ContactsMail",

        template: {
            container: ['<div class="contactsMail p_relative" id="contactsMail" style="background:white;">',
                        '</div>'
                        ].join(''),
        
        containerCon:['<div class="contactsMail-info">',
             '<div class="norTips">',
                '{contactsInfo}',
             '</div>',
            //'<p>邮件到达通知：<span class="gray">接收</span> <a href="#">修改</a></p>',
         '</div>',
         '<div class="contactsMail-btn ">',
             '<a class="btnTb" id="writeMailTo" href="javascript:;" bh="rmcontact_writemail"><span>写 信</span></a><a class="btnTb ml_5" href="javascript:$App.jumpTo(\'sms\')" bh="rmcontact_sendsms"><span>写短信</span></a>',
         '</div>',
		 '<div class="readtab">',
			'<ul class="readtab-ul clearfix">',
				'<li class="li1 on" bh="rmcontact_mailtab" >',
					'<a href="javascript:;" hidefocus="true">',
						'<i class="i_m_n"></i>',
						'<span>往来邮件</span>',
					'</a>',
				'</li>',
				'<li class="li2" bh="rmcontact_attachtab" >',
					'<a href="javascript:;" hidefocus="true">',
						'<i class="i_atta"></i>',
						'<span>往来附件</span>',
					'</a>',
				'</li>',
			'</ul>',
			'<div class="readtab-text readtab-text-mail" id="mailItem">',
				'<p class="ta_c pt_10 pb_10"><img src="../images/global/load.gif"> 正在加载中...</p>',
			'</div>',
			'<div class="readtab-text hide" id="attachItem">',
				'<p class="ta_c pt_10 pb_10"><img src="../images/global/load.gif"> 正在加载中...</p>',			
			'</div>',
		'</div>'
         ].join(''),
        
			inMailItem:['<div class="tips tips-attr">', //发来的邮件
				'<div class="tips-text">',
					'<div class="imgInfo imgInfo-attr">',
						'{1}',
						'<ul class="readtab-list">',
							'{0}',
						'</ul>',
					'</div>',
				'</div>',
				'<div class="tipsLeft2 diamond2"></div>',
			'</div>'].join(''),
			
			outMailItem:['<div class="tips tips-attrl">', //发出的邮件
				'<div class="tips-text">',
					'<div class="imgInfo imgInfo-attr">',
						'{1}',
						'<ul class="readtab-list">',
							'{0}',
						'</ul>',
					'</div>',
				'</div>',
				'<div class="tipsRight2 diamond2"></div>',
			'</div>'].join(''),
			
			moreLink:[ 
			'<p class="ta_c f_st pt_10 pb_10" id="moremail">',
				'<a href="javascript:;">查看更多&gt;&gt;</a>',
			'</p>'].join(''),
			
			fail:'<p class="ta_c pt_10 pb_10">内容加载失败，请稍候<a href="javascript:;" id="reload" style="text-decoration:underline;">重试</a></p>',
		
            contactsInfo:[ '<span class="norTipsIco"><a href="javascript:;" bh="rmcontact_seeinfo" ><img src="{img}" width="52" height="52" /></a></span>', //<img src="images/ad/face.jpg" width="52" height="52" alt="">
                 '<div class="norTipsContent">',
                     '<div class="norTipsTitle widthdiv"><a href="javascript:;" bh="rmcontact_seeinfo" title="{name}" >{name}</a></div>',
                     '<div class="norTipsLine gray widthdiv" title="{email}">{email}</div>',
                     '<div class="norTipsLine gray widthdiv" title="{mobile}">{mobile}</div>',
                 '</div>'].join(''),
           
            mbMessageShow: ['<p id="yidongweibo11" class="weibop"><i class="i_wiebo mr_5"></i><a href="{link}" title="来我的微博看看吧！" id="microBlogNews">{message}</a></p>'].join(''),
            mbInvitelogShow: ['<p id="yidongweibo11"><a class="btnTb" href="javascript:void(0)" id="invite_register"><span><i class="i_wiebo mr_5"></i>邀请开通</span></a></p>'].join(''),
            mbLetterContent: ['<div style="font-family: 宋体; font-size: 14px; color: rgb(0, 0, 0);"><strong>Hi，亲爱的{name}：</strong></div>',
                           '<div style="font-family: 宋体; font-size: 14px; color: rgb(0, 0, 0); word-break:break-all;word-wrap:break-word;">您的好友{me}通过139邮箱邀请您开通移动微博，随时一句话，传遍好友圈，只需两步，注册成功！</div>',
                           '<div style="font-family: 宋体; font-size: 14px; color: rgb(0, 0, 0); word-break:break-all;word-wrap:break-word;">&nbsp;</div>',
                           '<div style="font-family: 宋体; font-size: 14px; color: rgb(0, 0, 0);">请点击以下链接进行开通：</div>',
                           '<div style="font-family: 宋体; font-size: 14px; color: rgb(0, 0, 0);">',
 						   '<a href="http://139url.cn/9ge2az">http://139url.cn/9ge2az</a>',
 						   '</div>',
                           '<div style="font-family: 宋体; font-size: 14px; color: rgb(153, 153, 153);">(如果点击无效，请复制链接到浏览器地址栏中)</div> ',
                           '<div style="font-family: 宋体;text-align:right; font-size: 14px; color: rgb(153, 153, 153);">{time}</div>',
                           '<div style="font-family: 宋体; font-size: 14px; color: rgb(0, 0, 0);">&nbsp;</div>',
                           '<div style="font-family: 宋体; font-size: 14px; color: rgb(0, 0, 0);">&nbsp;</div>'].join("")

        },

        initialize: function (options) {
            var self = this;
            this.keyword = options.keyword;
            this.email = $Email.getEmail(this.keyword);
            this.contactsInfo = options.contactsInfo;
            this.mid = options.mid;
            this.model = new M2012.ReadMail.SessionContactsMail.Model();
			this.model.set('email',this.email);
            this.mailmodel = $App.getView("mailbox").model;
			this.originHeight = 0;
			this.timer = null;
			this.layOut = $App.getLayout();
            return superClass.prototype.initialize.apply(this, arguments);
        },

        /**
        * 通讯录信息
        */
        getContactsInfo: function(email){
            var self = this;
            var data = this.contactsInfo;
            var temp = self.template.contactsInfo;
            var imgSrc = '/m2012/images/ad/face.jpg';    
            M2012.Contacts.API.getContactsImage([$Email.getAccount(email)],function(url){
               if(url!=''){imgSrc = url}
            });
                        
            var name = $App.getModel('contacts').getAddrNameByEmail(email);
            return $T.Utils.format(temp,{
                img:imgSrc,
                name:M139.Text.Utils.htmlEncode(name),
                email:M139.Text.Utils.htmlEncode($Email.getEmail(email)),
                mobile:M139.Text.Utils.htmlEncode(data.MobilePhone)
            });
        },

        /**
        * 获取 微博信息，是邀请开通还是显示微博消息
        */

        showMicroblog: function () {

            var addres = this.keyword;
            //括取号内邮箱地址
            if (/[<>]/.test(addres)) {
                var reg = new RegExp("<(.+)>", "g");
                addres = reg.exec(addres)[1];
            }

            var showMicroBlog = top.SiteConfig.showMicroBlog;  //微博开关

            var senderDomain = $Email.getDomain(addres);  //发件人的域名
            var mailDomain = top.SiteConfig.mailDomain;   //当前线域名

            if (showMicroBlog && mailDomain == senderDomain) {
                var self = this;
                top.M139.RichMail.API.call("weibo:userinfo", { weibo: addres }, function (response) {
                    var res = response.responseData;
                    if (res && res['code'] == "S_OK") {
                        var data = res['var'];     
                        firstMessage = data.text?data.text:'我在移动微博，你在哪儿？';      
                        var link = data.screenName;
                        var showMessage = self.template.mbMessageShow;
                        showMessage = $T.Utils.format(showMessage, { message: firstMessage, link: link });
                        $(self.el).find('div.contactsMail-info').append(showMessage).find('#microBlogNews').click(function () {
                            BH('microblog_message');
                            var linkUrl = 'http://tmail.weibo.10086.cn/';
                            linkUrl += link;
                            if(!top.weibovalid){
                                var img = new Image();
                                img.src = top.SiteConfig.ssoInterface + "/GetUserByKeyEncrypt?url=" + encodeURIComponent("http://auth.weibo.10086.cn/sso/139mailframe.php?sid=") + "&comeFrom=weibo&sid=" + top.sid  //单点登录请求
                                img.onerror = function () {
                                    top.weibovalid = true;
                                    top.$App.showUrl(linkUrl, '移动微博');
                                }                                
                            }else{
                                top.$App.showUrl(linkUrl, '移动微博');
                            }
                            return false;
                        });
						
						self.reSize(); 

                    } else {

                        var invite = self.template.mbInvitelogShow;
                        //$(self.el).find('div.contactsMail-info').find('p#yidongweibo11').remove();
                        $(self.el).find('div.contactsMail-info').append(invite).find('#invite_register').click(function () {
                            BH('microblog_invite');
                            var name = addres || '';  //收件人的名字
                            name = name.split('@')[0];
                            var time = top.M139.Date.getServerTime() || new Date();
                            time = time.format('yyyy年MM月dd日');
                            var sendName = $User.getSendName();
                            var letterContent = self.template.mbLetterContent;
                            letterContent = $T.Utils.format(letterContent, { name: name, time: time, me: sendName });
                            var sendTitle = '您的好友' + sendName + '邀请您开通移动微博';
                            $App.show("compose", null, { inputData: { receiver: addres, subject: sendTitle, content: letterContent, letterPaperId: '0090' } });
                            return false;
                        });
						self.reSize(); 

                    };

                    
                })
            }
        },

        
        /**
        * 往来邮件列表
        */
        getMailList: function (data) {
            var self = this,
				mailItem = '',
				subject = '',
				subjectHtml = '',
				html = [],
				email = self.email,
				hrefTemp = '<li><a href="javascript:;" mid="{mid}" title="{subject}" bh="rmcontact_readmail">{subject}</a></li>';
			
            if (data) {
				for (var i = 0, len = data.length; i < len; i++) {
                    if( i >= 20 ){ break }
					mailItem = self.getItemTemplate(data[i], email);
                    data[i].subject == '' ? subject = '(无)' : subject = data[i].subject;
                    subject = subject.replace(/(&<{)|(}>&)/g,''); //过滤搜索字符
                    subjectHtml = $T.Utils.format(hrefTemp, {
                            mid: data[i].mid,
                            subject: $T.Utils.htmlEncode(subject)
                        });
					html.push($T.Utils.format(mailItem,[subjectHtml,'']));
                }
            }
            return html.join('');
        },

        /**
        * 往来附件列表
        */
        getAttachList: function (data) {
            var self = this,
				hrefTemp = '<li><a href="{0}" title="{1}" bh="rmcontact_downattach">{1}</a></li>',
				email = self.email,
				attachName = '',
				newData = {},
				html = [];
            if (data) {
			
				//先组装数组
				$.each(data,function(n,val){
					if(!newData[val.mid]){
						newData[val.mid] = [val];
					}else{
						newData[val.mid].push(val);
					}
				});

				$.each(newData,function(n,d){ //data为数组		
					var href = [],
						attachItem = '';
					$.each(d,function(i,val){						
						val.attachName == '' ? attachName = '(无)' : attachName = val.attachName;
						href.push($T.Utils.format(hrefTemp, [self.getDownLoadUrl(val), $T.Utils.htmlEncode(attachName)]));
					});					
					attachItem = self.getItemTemplate(d[0], email);
                    html.push($T.Utils.format(attachItem,[href.join(''), '<i class="imgLink i_atta" title="' + $T.Utils.htmlEncode(d[0].from) + '"></i>']));
				});
				
            }
            return html.join('');
        },
		
		/** 获取会话模版 */
		getItemTemplate:function(data,email){
			var self = this, 
			inMailItem = self.template.inMailItem,
			outMailItem = self.template.outMailItem;
			var isIn = data.from.indexOf(email)>-1;
            if (data.fid == 3) {isIn = false};
			return isIn ? inMailItem : outMailItem;
		},

        /**获取往来附件下载路径*/
        getDownLoadUrl: function (file) {
            var self = this;
            return $App.getDownLoadUrl({
                mid:file.mid,
                offset:file.attachOffset, 
                size:file.attachSize, 
                name:file.attachName,
                type:file.attachType, 
                encoding:file.encode
            });
        },

        /**往来邮件列表*/
        mailListRender: function () {
            var self = this,
				moreLinkHtml = this.template.moreLink,
				noDataTips = '<p class="notext">暂无往来邮件</p>',
				thisContainer = $(self.el).find('#mailItem');
            this.model.searchContactsMail(function (result) {
				if (result && result.code === 'S_OK' && result['var']) {
					mailListHtml = self.getMailList(result['var']);
					self.model.set({mailListData:result['var']});
					
					if(result['var'].length == 0){
						mailListHtml = noDataTips;
					}
					
					if($App.getLayout() == 'list' &&  result['var'].length > 20 ){
						 mailListHtml += moreLinkHtml;       
					}
					thisContainer.html(mailListHtml);
					$App.trigger("mailboxDataChange");		
					self.readMailEvent();				
				} else { //重新加载
					thisContainer.html(self.template.fail)
						.find('#reload').click(function(){
							$(this).parent().html('<img src="../images/global/load.gif"> 正在加载中...');
							setTimeout(function(){ self.mailListRender()},1000);
						});
					self.reSize();
					self.logger.error("readmail contactsmail mailList returndata error", "[mbox:searchMessages]", result);
				}
            });
        },

        /** 往来附件列表 */
        attachListRender: function (keyword) {
            var self = this,
				attachListHtml = '',
				container = $(self.el).find('#attachItem'),
				options = {
					start: 1,
					total: 20,
					order: 'receiveDate',
					desc: 1,
					stat: 1,
					isSearch: 1,
					filter: {
						relation: 2,
						from: keyword,
						to: keyword
					}
				};
            this.model.getAttachData(options, function (result) {
				var noDataTips = '<p class="notext">暂无往来附件</p>';
                if (result && result.code === 'S_OK' && result['var']) {
                    if(result['var'].length > 0){
                        attachListHtml = self.getAttachList(result['var']);
                        container.html(attachListHtml);
						setTimeout(function(){
							self.attachsEvent();
						},200);
					}else{
                        container.html(noDataTips);
                    }
                } else { //重新加载
					container.html(self.template.fail)
						.find('#reload').click(function(){
							$(this).parent().html('<img src="../images/global/load.gif"> 正在加载中...');
							setTimeout(function(){ self.attachListRender(); },1000);
						});
					self.reSize();
                    self.logger.error("readmail contactsmail attach returndata error", "[attach:listAttachments]", result);
                }
            });

        },
        
        /** 获取往来单封邮件数据 */
        getMailDataByMid:function(mid){
            var self = this;
            var mailListData = self.model.get('mailListData');
            var mailData = null;
            $.each(mailListData,function(n){
                if(mailListData[n].mid == mid){
                    mailData = mailListData[n];
                    return false;
                }
            });
            return mailData;
        },

        /**定义事件*/
        initEvents: function (show) {
            var self = this;
            if(show){ 
                self.showInfo();
            }
            self.showMicroblog();
			
			//往来邮件，往来附件切换
			var sessionTabCon = self.sessionTabCon = $(self.el).find(".readtab");
			sessionTabCon.find('.readtab-ul li').click(function(){
				if( $(this).hasClass("on") ){
					return;
				}else{
					$(this).addClass("on").siblings().removeClass("on");
					sessionTabCon.find('.readtab-text').addClass('hide');
					sessionTabCon.find('.readtab-text:eq(' + $(this).index() + ')').removeClass('hide');
					
					//加载往来附件
					if($(this).hasClass("li2") && !$(this).attr('data-load')){
						self.attachListRender(self.email);
						$(this).attr('data-load',1);
					}
					
					self.reSize(); 
				}				
			});
			
			//窗口缩放自适应
			$(window).resize(function(){
				if(self.mid !== $App.getCurrMailMid()){return;}
				clearTimeout(self.timer);
				self.timer = setTimeout(function(){
					self.reSize();
				},300);
			});
			
			//写信点击
            $(self.el).find('#writeMailTo,#quickcompose').click(function(){
                $App.show("compose",null,{inputData:{receiver:self.keyword}});
            });
            
            //联系人信息事件
            self.contactInfoEvent();
			
        },
        
        /** 显示往来邮件信息 */
        showInfo:function(){
            var self = this,
				containerCon = self.template.containerCon,       
				content = $T.Utils.format(containerCon, {
					contactsInfo: self.getContactsInfo(self.keyword)
				});
            var htmlContainer = $(self.el).find('#contactsMail');
            if(!htmlContainer.attr('rel') && self.keyword){
                htmlContainer.prepend(content).attr('rel',1);
                self.mailListRender();
            }            
        },
        
        //联系人信息事件
        contactInfoEvent:function(){
            var self = this;
            $(self.el).find('.contactsMail-info .norTips a').bind('click',function(){
                var contactsInfo = self.contactsInfo;
                if(contactsInfo && contactsInfo[0]){ //编辑联系人
                    top.$App.show("addrEdit","&id=" + contactsInfo[0].SerialId + "&pageId=0");
                }else{
                    //添加联系人
                    var name = $Email.getName(self.keyword);
                    var account = $Email.getAccount(self.keyword);
                    new M2012.UI.Dialog.ContactsEditor({
                        name: name,
                        email: $Email.getEmail(self.keyword),
                        mobile: $Mobile.isMobile(account) ? account : '' 
                    }).render();
                }
            });
        },
		
		//鼠标hover效果
		itemHoverEvent:function(selector){
			this.sessionTabCon.find(selector).hover(function(){
				$(this).addClass('tips-attr-on');
			},function(){
				$(this).removeClass('tips-attr-on');
			});
		},

		//高度自适应,往来邮件和往来附件切换时判断
		//要考虑分栏读信
		reSize:function(){
			var self = this,
				layOutIsList = (self.layOut === 'list') ? true : false,
				toolbarHeight = layOutIsList ? 41 : 0,
				contactsCon = $(self.el).find('#contactsMail'),
				readTabHeight = contactsCon.find('.readtab').height() + 30,
				infoHeight = contactsCon.find('.contactsMail-info').height(),
				btnHeight = contactsCon.find('.contactsMail-btn').height(),
				thisElHeight = $(self.el).height(),
				totalHeight = toolbarHeight + readTabHeight + infoHeight + btnHeight,
				fixHeight = layOutIsList ? 18 : 10,
				newHeight = 0;
			
			if( $B.is.ie ) { fixHeight = 0 }
			
			if(self.layOut === 'top'){ thisElHeight = thisElHeight - 8 } //上下分栏
			
			
			if( thisElHeight > totalHeight ){
				newHeight = thisElHeight - toolbarHeight - fixHeight;
			}else{
				newHeight = totalHeight - toolbarHeight;
			}
			
			//console.log('toolbarHeight:' + toolbarHeight + 'newHeight:' + newHeight + 'thisElHeight:' + thisElHeight);
			
			contactsCon.height(newHeight);
			
			/*setTimeout(function(){
				self.arguments.callee();
			},1000)*/
		},
		
		
        //往来邮件读信
        readMailEvent:function(){
            var self = this;
            			
			//鼠标hover效果
			self.itemHoverEvent('#mailItem .tips');
			
			//读信事件
			var mailItemCon = self.sessionTabCon.find('#mailItem');
			mailItemCon.find('li a').bind('click',function(){
				var mid = $(this).attr('mid'),
					mailData = self.getMailDataByMid(mid); 
					
				//要区分草稿箱
				if(mailData && mailData.fid == 2){
					$App.restoreDraft(mid);
				}else{
					$App.readMail(mid,false,null,{mailData:mailData});
				}
			});
			
            //更多往来邮件
            $(self.el).find('#moremail').click(function(){
                var options = self.model.get("searchContactsMailOptions");
                $App.trigger("mailCommand", { command: "showTraffic", email: options });
            });
			
			//自适应
			setTimeout(function(){
				self.reSize();
			},200)
			
        },
		
		//往来附件事件
		attachsEvent:function(){
			this.originHeight = $(self.el).find('#contactsMail').height();
			this.itemHoverEvent('#attachItem .tips');
			this.reSize();
		},
        
        render: function (show) {
            var self = this;
            var container = self.template.container;
            $(self.el).find(".J-readMailArea").append(container);
            self.initEvents(show);
        }

    }));
    

})(jQuery, _, M139);



﻿/**
 * @fileOverview 读信页往来邮件会话 create by zhangsixue
 */
(function (jQuery, _, M139) {

	M139.namespace("M2012.ReadMail.ContactRecord.Model", Backbone.Model.extend({
			defaults : {
				email : null, //往来邮件帐号
				mailListData: null,
				type: "myreceive",
				attachListData : null
			},
		//	
			/**
			 * 获取邮件列表数据
			 */
			getDefaultsAccount : function(){
				return top.$User.getDefaultSender();
			},
            //通过mid从缓存中找到邮件数据
			getMailById:function(mid){
			    var result=$.grep(this.get("listData"), function (n, i) {
			        return (n["mid"]==mid)
			    })
			    if (result.length > 0) {
			        return result[0];
			    }
			},
            //得到友好的日期供前端展示
			getReceiveDate:function(date){
			    var now = new Date();
			    var diff = $Date.getDaysPass(date, now);
			    if (diff == 0) {
			        return '<p class="time">' + $Date.format("hh:mm", date) + '</p>';
			    } else {
			        var html = '<p class=""><span class="num">' + $Date.format("dd", date) + '</span><span>日</span></p>\
                      <p class="year"><span>' + $Date.format("yyyy/MM", date) + '</span></p>';
			        return html;


			    }

			},
			readMail:function(mid,callback){
			    var data = {
			        mid: mid,
			        autoName: 1,
			        markRead: 0,
			        mode: "text"
			    }

			    M139.RichMail.API.call("mbox:readMessage", data, function (result) {
			        callback && callback(result.responseData["var"]);
			    });

             
			},
			searchContactsMail : function (callback) {
				var self = this;
				var from = this.get('email');
				//var keywords = keyword + ";" + self.getDefaultsAccount();
				var keywords = [];
				var list = $User.getAccountList();
				var type = this.get("type");
				$($User.getAccountList()).each(function(i,n){
				    
				    if (type == "myreceive") {//收到的邮件
				        keywords.push(from + ";" + n.name);
				    } else { //发出的邮件
				        keywords.push( n.name + ";"+from );
				    }
		    		
		    	});
		
				var option = {
						start : 1,
						total: 20, 
						pairs :keywords
					};
				this.set("searchContactsMailOptions", option); //查看等多
				M139.RichMail.API.call("mbox:queryContactMessages", option, function (result) {
				    var moreData = false;
				    if (result.responseData.stats && result.responseData.stats.messageCount >20) {
				        moreData=true;
				    }
				    var data = result.responseData["var"];
				    /*for (var i = 0; i < data.length; i++) {
				        if (data[i].mid == self.get("mid") || i == data.length-1) { //剔除当前邮件，如找不到就剔除最后一封，保持总数为20封
				            data.splice(i,1);
				            break;
				        }
				    }*/


				    self.set("listData", data);
				    callback && callback(result.responseData["var"], moreData);
				});
			}

			

		}));

})(jQuery, _, M139);

﻿/**
* @fileOverview 读信页往来邮件
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 读信页往来邮件会话
    */
        M139.namespace('M2012.ReadMail.ContactRecord.View', superClass.extend({
            el: "",
            template: {
                container: ['<div id="contactMails" class="contactsMailnew innerboxshadow">',
         '<div class="contactsMailnew-name">',
           '<p>与<span class="sendname"><a class="name" id="sendname" href="javascript:" bh="rmcontact_clickContacts">-</a></span>的往来邮件</p>',
         '</div>',
         '<div class="readtabnew">',
           '<ul class="readtabnew-ul clearfix">',
             '<li class="li1 on">',
               '<a href="javascript:void(0)"  hidefocus="" bh="rmcontact_clickRecMessage">',
                 '<span name="myreceive">我收到的邮件</span>',
               '</a>',
             '</li>',
             '<li class="li2">',
               '<a href="javascript:void(0)" hidefocus="" bh="rmcontact_clickSendMessage">',
                 '<span name="mysend" >我发送的邮件</span>',
               '</a>',
             '</li>',
           '</ul>',
           '<div class="readtabnew-text sweb dealings-scroll" id="contactrecord">',

             '</div>'].join(""),
                list: ['<div class="tips-attr {on}" mid="{mid}">',
           '<div class="tips-text innerboxshadow">',
             '<div class="imgInfo imgInfo-attr">',
               '<ul class="readtabnew-list">',
                 '<li>',
                     '<div class="readtabnew-warp">',
                           '<div class="date">',
                               '<p class="time">{receiveDate}</p>',
                           '</div>',
                           '<div class="cutline"></div>',
                           '<div class="mail-title">{subject}{attach}</div>',
                     '</div>',
                 '</li>',
               '</ul>',
             '</div>',
           '</div></div>'].join(""),
                tipRead: ['<div class="tipsRight-small"></div>',
           '<div class="readMailInfo">',
             '<div class="rMList" id="receiver_from"><span class="rMl">主　题：</span>',
               '<div class="rMr">',
                 '<div class="gAddr">{subject}</div>',
                 '</div>',
             '</div>',
             '<div class="rMList" id="receiver_to"><span class="rMl">发送至：</span>',
               '<div class="rMr">',
                 '<div class="gAddr" id="receiver_list"><strong class="gAddrN">{to}</strong></div>',
               '</div>',
             '</div>',
             '<div id="sendDate" class="rMList"><span class="rMl">日　期：</span>',
               '<div class="rMr p_relative">{receiveDate}</div>',
             '</div>',
             '<div class="rMList" id="tip_attach" style="display:none"><span class="rMl">附　件：</span>',
               '<div class="rMr">',
                 '<div id="card_attach">共<span class="orange">{attachCount}</span>个附件</div>',
               '</div>',
             '</div>',
           '</div>'].join("")
            },
            events:{
                "click [name=myreceive]": "changeType",
                "click [name=mysend]": "changeType",
                "click #contact_more": "showMore",
                "click [name=contact_compose]":"compose"
            },

        initialize: function (options) {
            var self = this;
            this.keyword = options.keyword;
            this.email = $Email.getEmail(this.keyword);
            this.contactsInfo = options.contactsInfo;
            console.log(options.contactsInfo);
            this.parentView = options.parentView;
            this.model = new M2012.ReadMail.ContactRecord.Model();
            this.model.set('email', this.email);
            this.mid = options.mid;
            this.model.set('mid', this.mid);
            this.mailmodel = $App.getView("mailbox").model;
			this.originHeight = 0;
			this.timer = null;
			this.layOut = $App.getLayout();

			this.model.on("change:type", function () {
			    self.renderList();
			});


            return superClass.prototype.initialize.apply(this, arguments);
        },
        initListEvents: function () {
            var self = this;
            //引入nicescroll组件，添加滚动条
             // M139.core.utilCreateScriptTag({src: "/m2012/js/lib/jquery.nicescroll.min.js" }, function(){
             //    self.$el.find("#contactrecord").niceScroll();
             // });
             
            var row = this.$el.find("#contactrecord .tips-attr");
            var rowCon = this.$el.find("#contactrecord");
            var curMid = this.mid;
            // 列表的hover事件：如果存在滚动条鼠标移入才显示，移除消失
            rowCon.unbind().hover(function() {
                rowCon.css('overflow-y', 'auto');
            }, function() {
                // 消除单个row重绘造成长度不一致
                if (row.length * 52 > rowCon.height()) {
                    rowCon.css('overflow-y', 'auto').css('overflow-y', 'hidden');
                } else {
                    rowCon.css('overflow-y', 'hidden');
                }
                self.$el.find("#tip_readcard").hide();
            });
            // 列表项hover事件
            row.hover(function (e) {
                BH("rmcontact_hoverreadmail");
                var that = $(this);
                var mid = $(this).attr("mid");
                $(this).addClass("on");                
                self.rowTimeout = setTimeout(function() {
                    self.$el.find("#tip_readcard").show().css("top", (that.position().top+72) + "px");
                    self.showReadCard(mid,that);
                    self.rowTimeout = null;
                }, 100);                 
            }, function (e) {
                // 当前邮件始终选中
                $(this).removeClass("on");
                if (self.rowTimeout) {
                    clearTimeout(self.rowTimeout);
                }
            });

            row.click(function (e) {
                BH("rmcontact_readmail");
                var mid = $(this).attr("mid");
                // row.removeClass("click-on");
                // $(this).removeClass('on').addClass("click-on");
                self.readMail(mid);
            });

            var contactCard;
            this.$el.find("#sendname").click(function () {
                
                contactCard = self.showContact(this);
            });

            /*this.$el.find("#contactrecord").css("overflow", "hidden");
            this.$el.find("#contactrecord").hover(function () {
                $(this).css("overflow", "scroll");
            }, function () {
                $(this).css("overflow", "hidden");
            });*/
 
            
        },
        changeType:function(e){
            $(e.target).parents("ul").find("li").removeClass("on");
            $(e.target).parents("li").addClass("on");
            this.model.set("type", $(e.target).attr("name"));
        },
        showMore:function(){
            var options = this.model.get("searchContactsMailOptions"); 
			//点了搜索更多之后，再点未读邮件，再点搜索更多，会显示上一次的未读，清空此影响
			if(options && options.flags){
				delete options.flags["read"];
			}
			var sendName = this.model.get("email");
			if (this.contactsInfo.length > 0) {
			    sendName = this.contactsInfo[0].name;
			}
			top.$App.getView("mailbox_other").model.set("IamFromLaiwang",true);//设置是来往邮件的搜索
			top.$App.getView("mailbox_other").model.set("UnReadIamFromLaiwang", false);//点击未读后，再重新点更多，会用影响，清楚此影响
			top.$App.getView("mailbox_other").model.set("contactsEmail", sendName);
            $App.trigger("mailCommand", { command: "showTraffic", email: options, thisEmail: this.model.get("email")});//把这个人的邮件地址传下去
        },
        showContact:function(target){
            return M2012.UI.Widget.ContactsCard.show({
                dockElement: target,
                margin: 5,
                email: this.email
            });
        },
        showReadCard: function (mid,target) {
            var self = this;
            var row = this.model.getMailById(mid);
            var receiver = this.parentView.getReceiverEmail(false, row.to);
            $(self.el).find("#receiver_list").html("");
            var subject = $TextUtils.htmlEncode($TextUtils.getTextOverFlow2(row.subject, 52, true));
            var html = M139.Text.Utils.format(this.template.tipRead, {
                mid: row.mid,
                subject: subject,
                to: receiver,
                attachCount: row.attachmentNum,//附件数量
                receiveDate: $Date.format("yyyy-MM-dd hh:mm:ss",new Date(row.receiveDate * 1000))
            });
            this.$el.find("#tip_readcard").html(html);
            //this.$el.find("#receiver_to").css("text-overflow", "ellipsis");
            this.currentCardMid = mid;
            this.model.readMail(mid, function (result) {
                if (self.currentCardMid == mid) {  //防止鼠标移的太快，上一个加载的数据覆盖到当前的卡片
                    if (result && result.cc) {
                        var cc = self.parentView.getReceiverEmail(false, result.cc);
                        //$(self.el).find("#receiver_to").find("div").remove();//先清除，避免来回移动太快重复添加
                        $(self.el).find("#receiver_list").append(cc);
                    }  
                    var attachments = result.attachments;
                    if (attachments && attachments.length > 0) {
                        $(self.el).find("#tip_attach").show();
                    } else {
                        $(self.el).find("#tip_attach").hide();
                    }
                    /*var attachList = [];
                    $(attachments).each(function (i, n) {
                        if (i < 5) {
                            attachList.push("<div><i class=\"i_atta\"></i>" +$TextUtils.htmlEncode( $TextUtils.getTextOverFlow2(n.fileName,24,"...")) + "</div>")
                        } else if (i == 5) {
                            attachList.push("<div>......</div>")
                        }
                    });*/
                    $(self.el).find("#card_attach").find("div").remove();//先清除，避免来回移动太快重复添加
                    // $(self.el).find("#card_attach").append(attachList.join(""));

                    var card = self.$el.find("#tip_readcard");
                    //console.log(card.offset().top + card.height());
                    //console.log($(document.body).height());
                    //console.log($(target).position().top - card.height());
                    if (card.offset().top + card.height() + 25 > $(document.body).height()) {
                        console.log("move up");
                        self.$el.find("#tip_readcard").css("top", ($(target).position().top + 65 - card.height()) + "px");

                        self.$el.find(".tipsRight-small").css("top", card.height());//小三角
                    }
                }
            });
        },
        readMail:function(mid){
            var mailData = this.model.getMailById(mid);
            var maillistLayout = $App.getView("mailbox").model.get("layout");
            //要区分草稿箱
            if (mailData && mailData.fid == 2) {
                $App.restoreDraft(mid);
            } else {
                //列表上下和左右模式的时候，不单独处理
                if (maillistLayout == "list") {

                    $App.readMail(mid, false, null, { mailData: mailData });
                    if (this.targetTab) {
                        $App.getView("tabpage").replace(this.targetTab.name, $App.getCurrentTab().name);
                    } 
                    this.targetTab = $App.getCurrentTab();
                    
                   
                } else {
                    //$App.getView("maillist").readMailSplitView(mid);//上下模式，当前页面打开
                    $App.readMail(mid, false, null, { mailData: mailData });
                }

            }
           
        },
        
        compose:function(){
            $App.show("compose", null, {
                inputData: {
                    receiver: this.keyword
                }
            });
        },
        render: function (show) {
            var self = this;
            BH("rmcontact_render");
            

            if ($(self.el).find(".contactsMailnew").length == 0) {                
                var sendName=this.model.get("email");
                if (this.contactsInfo.length > 0) {
                    sendName = this.contactsInfo[0].name; 
                }

                var container = $(this.template.container);
                container.find("#sendname").html($TextUtils.htmlEncode(sendName));
                container.append('<div class="mail-msgtips tips innerboxshadow" id="tip_readcard" style="display:none"></div>');
                // 追加页面前设置往来邮件容器高度
                // var contactrecordH = self.getContactsMailConH();
                // container.find('#contactrecord').height(contactrecordH);
                $(self.el).find(".J-readMailArea").append(container);
                self.setContactsMailConH();
                // ie6下需要通过js实现来邮件容器的fixed效果
                if ($B.is.ie && $B.getVersion() === 6) {
                    // 初始位置校正
                    container.css({'position': 'absolute', 'top': 0, 'right':0});
                    // 滚动实时位置调整
                    $(self.parentView.el).find('div.J-readMailArea:eq(0)').scroll(function() {
                        var offsetTop = $(this).scrollTop();
                        container.css('top', offsetTop);
                    });
                }
                this.renderList();
            }
            

        },

        setContactsMailConH: function() {
            var el = $(this.parentView.el);
            var h = $D.getWinHeight() - el.find('#leftbox').offset().top - 67 - 30 - 17;// 顶部元素 + 边距 + 微调                                
            el.find('#contactrecord').height(h);
        },

        renderList:function(){
            var self = this;
            var container = self.$el.find("#contactrecord");
            var paddingTop = (container.height() - 87)/2;
            container.html('<p class="ta_c pt_10 pb_10"><img src="../images/global/load.gif"> 加载中...</p>');
            this.model.searchContactsMail(function (result,moreData) {
                    
                var arr = [];
                var len = result && result.length || 0;
                if (len > 0) {
                    for (var i = 0; i < len; i++) {
                        var row = result[i];
                        var subject = $TextUtils.htmlEncode($TextUtils.getTextOverFlow2(row.subject, row.attachmentNum > 0 ? 50 : 52, true));
                                                
                        arr.push(M139.Text.Utils.format(self.template.list, {
                            mid: row.mid,
                            subject: subject,
                            attach:row.attachmentNum>0?'<i class="i_atta"></i>':"",//是否有附件
                            receiveDate:self.model.getReceiveDate(new Date(row.receiveDate*1000)),
                            on: row.mid == self.mid ? 'click-on' : ''
                        })); 

                    }
                    if (moreData) { 
                        arr.push('<div class="checkmore on"><a id="contact_more" href="javascript:void(0)" bh="rmcontact_moremail" >查看更多</a></div>');
                    }
                    container.css('overflow-y', 'hidden').html(arr.join(""));

                    /*if (52 * len > container.height()) { // 52为单封往来邮件的整体高度
                        container.css('overflow-y', 'auto');
                    } else {
                        container.css('overflow-y', 'hidden');
                    }*/


                } else { //无群组，显示引导页                    
                    var emptyDOM = '<div class="notext" style="padding-top: '+paddingTop+'px"><span class="i-smile"></span><p>还没有邮件，要多多<a name="contact_compose" href="javascript:" bh="rmcontact_connect">联系</a>哦</p></div>';                    
                    container.html(emptyDOM);
                }



                self.initListEvents();

                //var readmailHeight = $(self.el).find(".J-readMailArea").height();
                //readmailHeight - 70;

                /*var targetHeight = $(document.body).height() - container.offset().top - 15;
                container.height(targetHeight);
                console.log(targetHeight);
                console.log(container.height());
                if (container[0].scrollHeight > targetHeight) {
                    container.height(container[0].scrollHeight);
                }*/
            });
        }

    }));
    

})(jQuery, _, M139);



﻿/**   
* @fileOverview 邮件撤回功能
*/

(function (jQuery, _, M139) {

/**
* @namespace 
* 邮件撤回功能
* 仅支持本域邮件帐号
*/

M139.namespace("M2012.ReadMail.Recall.Model",Backbone.Model.extend({
        
        defaults:{
            fid:null,
            mid:null,
            dataSource:null
	    },
	    
	    tips:{
	        error1:"撤回失败,邮件不存在",
            error2:"撤回失败,此邮件不支持召回",
            error3:"撤回失败,该邮件已超过撤回期限"
	    },
        
        recallMsg:{
            "0": "撤回失败，邮件可能已被删除、自动转发，或其它未知原因",
            "1": "稍后执行",
            "2": "成功撤回",
            "3": "撤回失败，邮件可能彻底删除或已经撤回(重复操作)",
            "4": "撤回失败，邮件可能已被删除、自动转发或其它未知原因",
            "5": "撤回失败，邮件已读",
            "6": "撤回失败，邮件已被POP过",
            "7": "撤回失败，邮件可能已被删除、自动转发或其它未知原因",
            "8": "撤回失败，邮件发送已经超过系统设置的最大天数",
            "9": "撤回失败，邮件可能已被删除、自动转发，或其它未知原因",
            "10": "撤回失败，收件人地址不存在",
            "11": "撤回失败，邮件可能已被删除、自动转发，或其它未知原因",
            "12": "撤回失败，邮件被拒收",
            "13": "撤回失败，收件人账号被冻结",
            "14": "撤回失败，收件人账号已注销",
			"15": "撤回失败，邮件被imap过"
        },
        
        /** 判断是否本域邮件 */
        isSameDomain:function(email){
            return $App.isLocalDomainAccount(email);
        },
        
        /* 获取收件抄送密送所有帐号 */
        getReceiveAddrList:function(){
            var self = this;
            var data = this.get('dataSource');
            var to = data.to;
            var cc = data.cc;
            var bcc = data.bcc;
            var all = '';
            var allArray = [];
            var newArray = [];
            if(to) all+= to;
            if(cc) all = all + ',' + cc;
            if(bcc) all = all + ',' + bcc;
            allArray = $.unique(all.split(','));
            for(var i = 0; i<allArray.length; i++){
                var email = $Email.getEmail(allArray[i]);
                if(self.isSameDomain(email)){
                    newArray.push(email);
                }
            }
            return newArray;
        },

	    callDataSource:function(options,callback){
	        var self = this;
            M139.RichMail.API.call("mbox:recallMessage",options,function(result){
                callback && callback(result.responseData);
            });   
	    }
	    
}));

})(jQuery, _, M139);



﻿/**
* @fileOverview 邮件撤回功能
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 邮件撤回功能
    */

        M139.namespace('M2012.ReadMail.Recall.View', superClass.extend({

        /**
        *@lends M2012.ReadMail.Recall.View.prototype
        */

        el: "",

        template:{
            list:[
                '<p class="pl_20 pt_10" {style}>仅支持撤回发往@{domain}的邮件</p>',
 		        '<div class="chexiaoBox" id="recallbox">',
 				    '<table>',
 				        '<tbody>',
 				            '{listData}',
 				        '</tbody>',
 				    '</table>',
 		        '</div>'
            ].join(''),
            itemStart:'<tr><td colspan="2"><input type="checkbox" checked="checked" value="{val}" class="mr_5" id="{id}"><label for="{id}">{email}</label></td></tr>',
            itemResult:'<tr><td class="td1"><div>{email}</div></td><td class="td2"><span class="{color}">{tips}</span></td></li>',
            
            link:'<a href="javascript:;" id="recall">撤回邮件</a>'
        
        },

        initialize: function (options) {
            var self = this;
            this.model = new M2012.ReadMail.Recall.Model();
            return superClass.prototype.initialize.apply(this, arguments);
        },
        
        
        /** 入口 */
        render:function(){
            var recallable = false;
            var fid = this.model.get('fid');
            var data = this.model.get('dataSource');
            var html = '';
            if(fid == 3){ //是否加开关？
                var recallText = '<a href="javascript:;" id="recall" class="che">[撤回邮件]</a>';
                if (data.flag && data.flag.recallok) {
                    html = "<a style='color:silver' title='邮件已经撤回' class='che'>[已撤回]</a>";
                }else if(data.flag && data.flag.recall) {
                    html = recallText;
                }
            }
            return html;
        },
        
        
        /** 打开列表 */
        showStartList:function(){
            
            var self = this;
            var temp = self.template.list;
            var itemTemp = self.template.itemStart;
            var listData = self.model.getReceiveAddrList();
            var list = [];
            self.model.set({receiveAddr:listData}); //所有地址数组
            
            for(var i = 0; i<listData.length; i++){
                list.push($T.Utils.format(itemTemp,{
                    id:'recall_' + i,
                    email:listData[i]
                }));
            }
            
            var html = $T.Utils.format(temp,{
                    style:'',
                    domain:$App.getMailDomain(),
                    listData:list.join('')
                });
                
            var dialog = $Msg.showHTML(
                html,
                function(){
                    self.submit();
                },
                function(){
                },
                {   
                    onClose:function(e){
                        e.cancel = false;
                        if( /确定/gi.test(e.event.target.innerText) && $('#recallbox').find('input:checked').length == 0){
                            e.cancel = true;//撤销关闭                        
                        }
                    },
                    width:480,
                    buttons:["确定","取消"],
                    dialogTitle:'请选择要撤回的邮件地址'
                }
            );
            
        },
        
        /** 结果列表 */
        showResultList:function(data){
            var self = this;
            var temp = self.template.list;
            var itemTemp = self.template.itemResult;
            var list = [];
            var msg = self.model.recallMsg;
            var color = 'red';
            for(var i in data){ //data是object
                var stat = $.trim(data[i]);
                if( stat == "2"){
                    color = 'c_009900';
                }
                list.push($T.Utils.format(itemTemp,{
                    color:color,
                    tips:msg[stat] || '',
                    email:i
                }));            
            }
            var html = $T.Utils.format(temp,{
                style:'style="display:none"',
                domain:'',
                listData:list.join('')
            });
            $Msg.showHTML(html,{
                width:480,
                dialogTitle:'撤回结果',
                buttons:["确定"]
            }); 
        },
        
        //确定操作
        submit:function(){
            var self = this;
            var checkedEmail = [];
            var receiveList = self.model.get('receiveAddr');
            $('#recallbox').find('input:checked').each(function(){
                var index = parseInt($(this).attr('id').split('_')[1]);
                checkedEmail.push(receiveList[index]); 
            })
            //console.log(checkedEmail);
            if(checkedEmail.length > 0 ){
                var options = {
                    mid:self.model.get('dataSource').omid,
                    rcpts:checkedEmail
                };
                self.model.callDataSource(options,function(data){
                    var msg = '';
                    if(data && data.code == 'S_OK'){
                        var okList = data['var'];
                        self.showResultList(okList);
                        return;
                    }else if(data.code == "FA_MAIL_NOT_FOUND"){
                        msg = self.model.tips.error1;
                    }else if(data.code == "FA_UNSUPPORT_RECALL"){
                        msg = self.model.tips.error2;
                    }else if(data.code == "FA_MAIL_EXPIRED"){
                        msg = self.model.tips.error3;
                    }
                    $Msg.alert(msg);                    
                });
            }else{
                $Msg.alert('请至少选择一个收件人帐号！');
            }
        },

        initEvents: function(){
            var self = this;
            $(self.el).click(function(){
                self.showStartList();
            }); 
        }

    }));
    

})(jQuery, _, M139);



﻿/**   
* @fileOverview 邮件风险预警提醒
*/

(function (jQuery, _, M139) {

/**
* @namespace 
* 邮件风险预警提醒
*/

M139.namespace("M2012.ReadMail.RiskTips.Model",Backbone.Model.extend({
        
    defaults:{
        fid:null,
        mid:null,
        dataSource:null
        //warnFile:[1, 5, 6, 9, 11] //定义预警的文件夹：收件箱(1)、垃圾箱(5)、病毒文件夹(6)、我的订阅(9)、广告文件夹(11)
    },
	
	/** 入口判断：预警提醒是否生效 */    
	isEnable: function () {
	    var self = this;
        var fid = this.get('fid');
        var response = this.get('dataSource');
        
        /*
        var warnFile = this.get('warnFile');
        if($.inArray(fid, warnFile) == -1) {
            return false;
        }*/
        
        //发件人是自己不提醒
        var sender = $Email.getEmail(response.account);
        if($.inArray(sender,self.getMyAccount())>-1){ 
            return false;
        }
        //系统邮件不提醒
        if($.inArray(sender,self.getSysAccount())>-1){ 
            return false;
        }
        //会话邮件不提醒
        if( response.sessionMails && response.sessionMails.length > 1){
            return false;
        }
        
        //会话邮件里的单封邮件不提醒
        /*if( response.readMode && response.readMode == 'sessionMode'){
            return false;
        }*/
        
        //我的订阅是本域邮件不提醒
        if( fid == 9 && $App.isLocalDomainAccount(response.account)){
            return false;
        }
        //转发邮件不提示        
        if(response.headers && response.headers.Sender != undefined) {
            return false;
        }
        
        return true;
    },
    
    /** 是否符合图片不显示 */
    isDisableImg: function(){
        //垃圾箱和广告箱预警提示是否显示图片
        var self = this;
        var fid = this.get('fid');
        if(self.isEnable() && ( fid == 5 || fid == 11)) {
            return true;       
        }
    },  
    
    getMyAccount:function(){
        return $User.getAccountListArray().join(',').toLowerCase().split(',');
    },
    
    //系统邮件地址
    getSysAccount:function(){
        return $App.getSysAccount() || [];
    },
    
    //是否密送邮件
    isBcc: function () {
        var flag = true;
        var myAccount = this.getMyAccount();
        
        //合并收件抄送
        var data = this.get('dataSource');
        var to = data.to || '';
        var cc = data.cc || '';
        var mail = [];
        if (to!= '' && cc!= '') {
            mail = to.split(',').concat(cc.split(','));
        }else{
            mail = to.split(',');
        }
        
        //验证
        for(var i=0;i< mail.length;i++){
            var email = mail[i];
            var addr = $Email.getEmail(email).toLowerCase();
             
            if ($.inArray(addr, myAccount) > -1) {
                flag = false;
                break;
            }          
        }
        return flag;
    },
    
    //是否涉及财产安全
    isPropertySafe: function(){
        var exceptFid = [5,6,9,11]; //这些文件夹显示原本的提醒
        var fid = this.get('fid')/1; //确保为数字
        if( $.inArray(fid,exceptFid) > -1 ){ 
            return false;
        }
        var data = this.get('dataSource');
        if(data.headers && data.headers.fraudFlag != 0){
            return true;
        }
        return false; 
    }, 

    //预警文件夹配置 
    config:{
        1: [{
                text:'您不在收件人里，可能这封邮件是密送或者自动转发给您的。',
                style:'rmListGray'
           }],
        5: [{
                text:'这是一封垃圾箱中的邮件，请勿轻信密保、汇款、中奖信息，请勿轻易拨打陌生电话。', //无图无附件
                style:'rmListYellow',
                trust:true,
                refuse:true 
            },
            {
                text:'为了保护邮箱安全，内容中的图片未被显示。', //有图片无附件 
                style:'rmListYellow',
                showpic:true,
                trust:true,
                refuse:true 
            },
            {
                text:'该邮件中包含附件，为保护邮箱安全，请勿轻易打开附件。',//只有附件  
                style:'rmListYellow',
                trust:true,
                refuse:true             
            }    
           ],
        6: [{ 
                text:'这是一封病毒文件夹中的邮件，可能会损害您的电脑及帐号安全！',
                style:'rmListRed',
                refuse:true 
                
            }], 
        9: [{ 
                text:'为营造健康的邮件环境，如果不是您订阅的邮件，请点击',
                style:'rmListRed',
                refuse:true 
            }],
            
        11: [{
                text:'这是一封广告文件夹中的邮件，请勿轻信密保、汇款、中奖信息，请勿轻易拨打陌生电话。', //无图无附件
                style:'rmListYellow',
                trust:true,
                refuse:true 
            },
            {
                text:'这是一封广告文件夹中的邮件，内容中的图片未被显示。', //有图片无附件 
                style:'rmListYellow',
                showpic:true,
                trust:true,
                refuse:true 
            },
            {
                text:'这是一封广告文件夹中的邮件，为保护邮箱安全，请勿轻易打开附件。',//只有附件  
                style:'rmListYellow',
                trust:true,
                refuse:true             
            }],
        propertySafe:[{
                text:'邮件中可能有涉及账号或财产安全的操作，请先对发件人身份进行核实。',
                style:'rmListYellow',
                spam:'true'
           }]
            
    }
    
    
}));

})(jQuery, _, M139);



﻿/**
* @fileOverview 邮件风险预警提醒
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 邮件风险预警提醒功能
    */

    M139.namespace('M2012.ReadMail.RiskTips.View', superClass.extend({

    /**
    *@lends M2012.ReadMail.RiskTips.View.prototype
    */
    
    template:{
        tips:['<div id="risktips" class="rMList {colorStyle}">',
                   '<span class="rMl">提　醒：</span>',
                   '<div class="rMr">',
                        '{tips}',
                   '</div>',
              '</div>'].join(""),
        line:'<span class="line"> | </span>',      
        trust:'<a href="javascript:;" id="trust" key="white">信任此人</a>',
        refuse:'<a href="javascript:;" id="refuse" key="black" >拒收此人</a>', 
        showpic:'<a href="javascript:;" id="showpic" >显示图片</a>',
        spam:'<a href="javascript:;" id="spam" key="spam">点击举报</a>'
    },

    initialize: function (data) {
        var self = this;
        this.model = new M2012.ReadMail.RiskTips.Model();
        return superClass.prototype.initialize.apply(this, arguments);
    },

    //显示图片
    showContentImg: function() {
        var self = this;
        var data = this.model.get('dataSource');
        var fid = this.model.get('fid');
        var text = self.model.config[fid][0].text;
        var thismid = 'mid_' + data.omid;
        $($T.Utils.format('iframe[id={0}]',[thismid])).contents().find("img").each(function () {
            var original = $(this).attr('original');
            original && $(this).attr('src', original);
        });
        var rmr = $(self.el).find('#risktips .rMr');
        rmr.find('em').html(text);
        rmr.find('a:eq(0)').remove();
        rmr.find('.line:eq(0)').remove();
    },
    
    //添加黑白名单
    addBlackAndWhite:function(e,callback){
        var response = this.model.get('dataSource');
        var account = $Email.getEmail(response.account);
        if(account){
            var options = {
                name:account,
                comefrom:'readmail'
            };
            $App.addBlackWhite(e,options,callback);
        }
    },


    //拒收此人
    refuse: function (e,options) {
        var self = this;
        var response = this.model.get('dataSource');
        var from = M139.Text.Email.getEmail(response.account);
        top.$App.trigger("mailCommand", { command: "refuseMail", email: from });
        
        /*var tipsText = "系统会将此邮件地址添加到黑名单，并将此邮件移到垃圾邮件文件夹。您将不会再收到来自此地址的邮件。<br/>您确定要<span style='color:blue'>拒收此发件人的邮件</span>吗?";
        var callback = function(){
            self.moveMessage(5); //移到垃圾箱
        };
        $Msg.confirm(
            tipsText,
            function(){
                self.addBlackAndWhite(e,callback);
            },
            {
                dialogTitle:'拒收此人',
                icon:'warn',
                isHtml:true
            }
        );*/
    },
    
    //举报
    spam: function(){
        var self = this;
        $App.trigger("mailCommand", {
            command:"spam",
            mids:[self.model.get('dataSource').omid],
            comefrom:'risktips_spam'
        });
    },
    
    //移动邮件
    moveMessage:function(fid){
        var self = this;
        $App.trigger("mailCommand", {
            command:"move",
            fid:fid,
            mids:[self.model.get('dataSource').omid]
        });
    },
    
    //信任此人
    trust: function(e,options) {
        var self = this;
        top.$App.trigger("mailCommand", { command: "unSpam"});
        
        /*var tipsText = "系统会将此邮件地址添加到白名单，并将此邮件移动到收件箱。<br/>您确定<span style='color:blue'>要信任此发件人</span>吗？";
        var callback = function(){
            self.moveMessage(1); //移到收件箱
            $Msg.alert('操作成功，邮件已被还原到收件箱中。');
        };
        $Msg.confirm(
            tipsText,
            function(){
                self.addBlackAndWhite(e,callback);
            },
            {
                dialogTitle:'信任此人',
                icon:'warn',
                isHtml:true
            }
        );*/
    },

    /** 定义点击事件--拒收，信任，显示图片 */
    initEvents: function () {
        var self = this;
        var tipsContainer = $(self.el).find('#risktips .rMr');
        tipsContainer.find('a[id=trust]').click(function(e){
            self.trust(e);
        });
        tipsContainer.find('a[id=refuse]').click(function(e){
            self.refuse(e);
        });
        tipsContainer.find('a[id=showpic]').click(function(){
            self.showContentImg();
        });
        tipsContainer.find('a[id=spam]').click(function(e){
            self.spam(e);
        });
    },

    /** 是否有图片 */
    hasImg: function () {
        var data = this.model.get('dataSource');
        return /src=|original=/gi.test(data.html.content);
    },

    /** 是否有附件 */
    hasAttach: function () {
        var data = this.model.get('dataSource');
        return data.attachments.length > 0;
    },
    
    /** 预警提示输出 */
    render: function() {
        var self = this;
        var fid = this.model.get('fid');
        var config = this.model.config;
        var html = '';
        if(self.model.isEnable()){
            if(fid == 5 || fid == 11) { //垃圾文件夹，广告文件夹
                if (self.hasImg()) { //有图片
                    html = self.getItemHtml(config[fid][1]);
                } else if (self.hasAttach()) { //有附件
                    html = self.getItemHtml(config[fid][2]);
                } else { //无图无附件
                    html = self.getItemHtml(config[fid][0]);
                }
            }else if(fid == 6 || fid == 9){
                html = self.getItemHtml(config[fid][0]);
            }else if(self.model.isPropertySafe()){
                top.BH('readmail_showpropertysafetip');
                html = self.getItemHtml(config['propertySafe'][0]); //涉及财产安全提示
            }else if(fid == 1){ //收件箱
                if(self.model.isBcc()){
                    html = self.getItemHtml(config[fid][0]);
                }
            }
        }
        return html;
    },
    
    /** 返回单项信息 */
    getItemHtml:function(obj){
        var self = this;
        var temp = self.template.tips;
        var refuseLink = self.template.refuse;
        var trustLink = self.template.trust;
        var showPicLink = self.template.showpic;
        var spamLink = self.template.spam;
        var line = self.template.line;
        var tips = [];
        tips.push('<em>' + obj.text + '</em>');
        if(obj.showpic){
            tips.push(showPicLink);
        }
        if(obj.trust){
            obj.showpic ? tips.push(line + trustLink) : tips.push(trustLink);
        }
        if(obj.refuse){
            obj.trust ? tips.push(line + refuseLink) : tips.push(refuseLink);
        }
        if(obj.spam){
            tips.push(spamLink);
        }
        var formatObj = {
            colorStyle:obj.style,
            tips:tips.join('')
        };
        return $T.Utils.format(temp,formatObj);
    }

}));

})(jQuery, _, M139);



﻿/**   
* @fileOverview 读信正文底部滚动条组件
*/

(function (jQuery, _, M139) {
    var superClass = M139.View.ViewBase;
    var cssLoaded = false;
    M139.namespace("M2012.ReadMail.ScrollBar.View", superClass.extend(
    /**
    *@lends M2012.ReadMail.ScrollBar.View.prototype
    */
    {
        /**
         *@param {Object} options 参数集合
         *@param {HTMLElement} options.container
         *@param {HTMLElement} options.widthEl 根据什么元素调整滚动条的大小
         *@param {HTMLElement} options.contentIframe
         */
        initialize: function (options) {
            var $el = $(this.template);
            this.setElement($el);
            this.widthEl = $(this.options.widthEl);
            this.contentChild = $(this.el.firstChild);
            var win = options.contentIframe.contentWindow;
            this.scrollContent = win.document.documentElement;
            $(options.contentIframe).addClass("ReadMailContentIframe");

            if (($B.is.ie && $B.getVersion() < 9) || $B.is.firefox) {
                win.document.body.style.overflowX = "hidden";
                win.document.documentElement.style.overflowX = "hidden";
                win.document.getElementsByTagName("html")[0].style.overflowX = "hidden";
            }else if (!cssLoaded) {
                if ($B.is.webkit) {
                    //由于不能组织横向滚动条显示，只能用样式把它弱化到看不清
                    /*var style = ['<style>',
                     '.ReadMailContentIframe::-webkit-scrollbar {',
                         'color:white;',
                         'background:white;',
                     '}',
                     '.ReadMailContentIframe::-webkit-scrollbar-track {',
                         'color:white;',
                         'background:white;',
                     '}',
                     '.ReadMailContentIframe::-webkit-scrollbar-thumb {',
                         'color:white;',
                         'background:white;',
                     '}',
                     '.ReadMailContentIframe::-webkit-scrollbar-thumb:window-inactive {',
                         'color:white;',
                         'background:white;',
                     '}',
                     '</style>'].join("");
                    $(style).appendTo(document.body);
					*/
					win.document.getElementsByTagName("html")[0].style.overflowX = "hidden";
					//$(win.document).find('html').css({'overflow-x':'hidden'});
				}
                //cssLoaded = true;
            }

            return superClass.prototype.initialize.apply(this, arguments);
        },
        template: [
            '<div class="M2012_ReadMail_ScrollBar_View" style="position:absolute;left:0px;padding-left:20px;bottom:0;overflow-x:scroll;overflow-y:hidden;height:25px;">',
                '<div>&nbsp;</div>',
            '</div>'
        ].join(""),


        render: function () {
            var This = this;
            this.$el.appendTo(this.options.container);
            //todo待优化到特定事件触发
            var timer = setInterval(function () {
                if (M139.Dom.isRemove(This.el)) {
                    clearInterval(timer);
                    This.update = new Function();
                } else if (M139.Dom.isHide(This.el,true)) {

                } else {
                    This.update();
                }
            }, 2000);
            this.bindEvents();
            return superClass.prototype.render.apply(this, arguments);
        },
        /**
         *更新滚动条的宽度、滚动位置
         */
        update: function () {
            var scrollContainerWidth = this.widthEl.width() - 35;
            this.$el.width(scrollContainerWidth);
            //邮件正文区的宽度
            var iframeContentWidth = this.getIframeScrollWidth();
            this.contentChild.width(iframeContentWidth);
            this.el.scrollLeft = this.getIframeScrollLeft();
            if (iframeContentWidth - scrollContainerWidth < 20) {
                this.hide();
            } else {
                this.show();
            }
        },

        /**
         *在ie9，ie10下 有个缺陷是会看到双滚动条：模拟的和iframe实际的
         *@inner
         */
        isIframeScrollInView:function(){
            var div = this.getIFrameScrollParent();
            console.log('div.scrollHeight'+div.scrollHeight+'div.scrollTop'+div.scrollTop+'$(div).height()'+$(div).height())
            if (div.scrollHeight - (div.scrollTop + $(div).height()) < 100) {
                return true;
            } else {
                return false;
            }
        },

        /**
         *得到iframe滚动的容器
         *@inner
         */
        getIFrameScrollParent:function(){
            if (!this.iframeScrollParent) {
                var el = this.options.contentIframe;
                while (el) {
                    if (el.style && el.style.overflowY == "auto") {
                        this.iframeScrollParent = el;
                        break;
                    }
                    el = el.parentNode;
                }
            }
            return this.iframeScrollParent;
        },

        /**
         *获得iframe内容的实际最大宽度
         *@inner
         */
        getIframeScrollWidth:function(){
            var iframe = this.options.contentIframe;
            var doc = iframe.contentWindow.document;
            return Math.max(iframe.scrollWidth, doc.documentElement.scrollWidth, doc.body.scrollWidth);
        },

        /**
         *获得iframe内容的滚动值
         *@inner
         */
        getIframeScrollLeft: function () {
            var iframe = this.options.contentIframe;
            var doc = iframe.contentWindow.document;
            return Math.max(doc.documentElement.scrollLeft, doc.body.scrollLeft, doc.getElementsByTagName("html")[0].scrollLeft);
        },
        
        /**
         *设置iframe内容的滚动值
         *@inner
         */
        setIframeScrollLeft:function(scrollLeft){
            var iframe = this.options.contentIframe;
            var doc = iframe.contentWindow.document;
            doc.documentElement.scrollLeft = scrollLeft;
            doc.body.scrollLeft = scrollLeft;
            doc.getElementsByTagName("html")[0].scrollLeft = scrollLeft;
        },

        /**
         *@inner
         */
        bindEvents: function () {
            var This = this;
            this.$el.bind("scroll", function () {
                //console.log("scrollLeft:" + This.el.scrollLeft + ",getIframeScrollLeft:" + This.getIframeScrollLeft());
                This.setIframeScrollLeft(This.el.scrollLeft);
            });

            if ($B.is.ie && $B.getVersion() >= 9) {
                //console.log(this.getIFrameScrollParent())// undefined
                $(this.getIFrameScrollParent()).bind("scroll", function () {
                    //防止显示双滚动条
                    if (This.isIframeScrollInView()) {
                        This.$el.css("visibility", "hidden");
                    } else {
                        This.$el.css("visibility", "");
                    }
                });
            }
        }
    }));
    
})(jQuery, _, M139);
﻿/**   
* @fileOverview 我的应用
*/
(function (jQuery, _, M139) {

/**
* @namespace 
* 我的应用
*/

M139.namespace("M2012.Myapp.Model",Backbone.Model.extend({
    defaults:{
        userData: null,
        offsetTop:null,//app弹出层弹出后的offset().top值，防止应用增加和减少的时候弹出层跟着动
        joinList:false, //是否合并数据
        defaultApp: [ //默认数据 发彩信、贺卡、文件快递和彩云笔记
        		{id:"",key:"1",name:"短信",state:"1"},
        		{id:"",key:"3",name:"发贺卡",state:"1"},
        		{id:"",key:"14",name:"附件夹",state:"1"},
				{id:"87",key:"2",name:"彩信",state:"1"},
				{ id: "", key: "6", name: "暂存柜", state: "1" },
				{id:"90",key:"11",name:"和笔记",state:"1"},
				{ id: "", key: "8", name: "收发传真", state: "1" },
                { id: "", key: "21", name: "群邮件", state: "1" },
				{id:"",key:"4",name:"明信片",state:"1"}
            ],
        customAppAll:{
            "1": { order:1,icon: "i_apps i_apps_mess", text: "短信　", behavior: "left_sms", link: "sms", desc: "在邮箱就能发短信，打字更快更方便。长短信支持一次显示350字。", id: "sms_link", ext: "1",alwaysShow:true},
            "2": { order:2, icon: "i_apps i_apps_cmess", text: "彩信", behavior: "left_mms", link: "mms", desc: "在邮箱就能发彩信，可添加动画及音乐，支持长达10000字。", id: "mms_link", ext: "1", alwaysShow: true,order:2 },
            "3": { order:3,icon: "i_apps i_apps_hk", text: "发贺卡", behavior: "left_grettingcard", link: "greetingcard", desc: "精美的FLASH贺卡，为您的朋友送去最真诚的祝福！",id:'greetingcard_link',order:3 },
            //"5": { icon: "i_apps i_apps_mdisk", text: "彩云", behavior: "left_disk", link: "javascript:top.Links.show('diskDev','&id=2');", desc: "存储您的音乐、照片以及各种文档，并支持分享给您的好友。", id: "disk" },
            "6": { order: 7, icon: "i_apps i_apps_file", text: "暂存柜", behavior: "left_quicklyShare", link: "javascript:$App.show(\'diskDev\', {from:\'cabinet\'})", desc: "可上传G级超大文件，快递到任意邮箱、中国移动手机。", id: "quicklyShare" },
            //"7": { icon: "i_apps i_apps_day", text: "日历", behavior: "left_calendar", link: "javascript:$App.show(\'calendar\')", desc: "按日历安排事项、约会、生日、备忘，在指定时间短信提醒自己或他人。", ext: "1",id:'calendar_link' },            
		    //"19": {icon:"icos funs9",text:"彩信仓库",behavior:"彩信仓库",link:"mmsstore",desc:"可存放彩信、图片和手机照片，支持图片编辑，在线发送彩信。",id:'mmsstore_link'},
		    //"10": { icon: "icos funsa", text: "网络书签", behavior: "网络书签", link: "weblink", desc: "备份保存您的IE收藏夹，珍藏的网络书签永不丢失。", ext: "1" },
		    //"18":{icon:"icos funsc",text:"资讯中心",behavior:"资讯中心",link:"rss",desc:"浏览新闻、娱乐、体育等资讯，多个精彩频道，让您轻松订阅。",ext:"1"},
		    //"16":{icon:"icos funsd",text:"实用工具",behavior:"实用工具",link:"uzone",desc:"火车时刻、身份证归属、手机、IP、区号轻松查询。",ext:"1"},
		    //"14":{icon:"icos funsm",text:"手机支付",behavior:"我的应用-手机支付",link:"pay139",desc:"中国移动提供的综合性移动支付服务,省时、省力更省心！",ext:"1"},
		    //"15":{icon:"icos funsk",text:"飞信位缘",behavior:"飞信位缘",link:"fetionFate",desc:"飞信上的真实地理位置交友社区服务，通过手机定位，可以迅速结识身边朋友，还能获取最酷的周边生活信息。"},
            //"9":{icon:"i_apps i_apps_tc",text:"购买体彩", target:"_blank", behavior:"left_buylottery",link:top.SiteConfig.ssoInterface + "/GetUserByKeyEncrypt?url=" + encodeURIComponent("http://3g.weicai.com/139mail/index.php?sid=") + "&comeFrom=weibo&sid=" + top.sid,desc:"广东移动体彩，300万用户的选择！支持话费买彩票，2元最高可中1000万！",id:"tc_link"},
		    //"10": { icon: "i_apps i_apps_fc", text: "手机福彩", target: "_blank", behavior: "left_fucai", link: top.SiteConfig.ssoInterface + "/GetUserByKeyEncrypt?url=" + encodeURIComponent("http://10086.gd-fc.net/waiwei/139GetLogin.jsp?sid=") + "&comeFrom=weibo&sid=" + top.sid, desc: "支持双色球、36选7、好彩1、26选5、3D手机投注，安全高效、操作简便、24小时服务！", id: "fc_link" },
		    "11":{order:5,icon:"i_apps i_apps_cynote",text:"和笔记",behavior:"left_note",link:"javascript:$App.show(\'note\')",desc:"中国移动彩云平台首款云应用，记录瞬间想法，跨平台同步！",id:"note_link"},
		    //"12":{icon:"i_apps i_apps_cy",text:"和彩云", target:"_blank", behavior:"left_colorcloud",link:"https://caiyun.feixin.10086.cn",desc:"中国移动旗下的个人云服务，提供安全便捷、跨平台跨终端的文件备份存储功能。",id:"colorcloud_link"},
		    //"13":{icon:"i_apps i_apps_music",text:"咪咕音乐",behavior:"left_music",link:"javascript:$App.show(\'myrings\')",desc:"咪咕音乐为您提供美妙的音乐。",id:"music_link"},
		    //"14": { order: 6, icon: "i_apps i_apps_fjj", text: "附件夹", behavior: "left_attach", link: "javascript:$App.show(\'diskDev\', {from:\'attachment\'})", desc: "管理你邮件中的所有附件。可以按文件类型、发件人、时间范围进行分类查找。", id: "attach_link" },
		    "8": { order: 8, icon: "i_apps i_apps_cz", text: "收发传真", behavior: "left_fax", link: "javascript:top.$App.show('googSubscription');top.$App.show('mpostOnlineService', null, {title : '收发传真',key : '38487',inputData : {columnId : '38487',columnName : '收发传真'}});", desc: "不需要传真机，就能向全国任意传真机发送接收传真，节省纸张更环保。", id: 'fax_link' },
        	"4": { order: 9, icon: "i_apps i_apps_mxp", text: "明信片", behavior: "left_postcard", link: "javascript:top.$App.show('googSubscription');top.$App.show('mpostOnlineService', null, {title : '明信片',key : '38488',inputData : {columnId : '38488',columnName : '明信片'}});", desc: "免费精致的明信片，方便您给亲朋好友送去温馨祝福！", ext: "1", id: 'postcard_link' },
        	"20": { order: 10, icon: "i_apps i_apps_egg", text: "生日彩蛋", behavior: "left_colorfulEgg", link: "javascript:top.$App.show('colorfulEgg');", desc: "在您生日来临之际，有机会获得来自139邮箱或好友赠送的生日彩蛋。", ext: "1", id: 'postcard_link' },
			//"15": { icon: "i_apps i_apps_yyt", text: "邮箱营业厅", behavior: "mail_hall", link: "javascript:top.hallReload=true;$App.show(\'mailHall\');", desc: "１３９邮箱营业厅通过中国移动互联网站，向客户提供以互联网为平台的业务咨询和办理，让客户充分享受自由自在的感受。", id: "hall_link" },
			//"16":{icon:"i_apps i_apps_txl",text:"通讯录", behavior:"left_addr",link:"javascript:$App.show(\'addr\')",desc:"邮箱通讯录，随时保存朋友的个人信息，方便随时交流。",id:"addr_link"},
			//"17":{icon:"i_apps i_apps_date",text:"日历", behavior:"left_calendar",link:"javascript:$App.show(\'calendar\')",desc:"按日历安排事项、约会、生日、备忘，在指定时间短信提醒自己或者他人。",id:"calendar_link"},
			//"18":{icon:"i_apps i_apps_jpdy", text: "云邮局", behavior: "left_googSubscription", link: "javascript:$App.show(\'googSubscription\');", desc: "轻松阅读海量的免费互联网、杂志内容，让您轻松享受阅读之旅。", id:"googSubscription_link"},
            //"19":{icon:"i_apps  i_apps_hred", text: "和阅读", behavior: "left_heyuedu", link: "javascript:$App.show(\'heyuedu\');", desc: "轻松享受海量精品图书、最新书讯，让你真正享受随身阅读的乐趣", id:"heyuedu_link"}
        	"21": { order: 4, icon: "i_apps i_apps_hk", text: "群邮件", behavior: "", link: "groupMail", desc: "群邮件", id: 'groupmail_link', alwaysShow: true },
        	"22":  { order: 11, icon: "i_apps i_apps_fjj", text: "语音信箱", behavior: "", link: "voiceMail", desc: "语音信箱", id: 'groupmail_link', alwaysShow: true }
		}
	},
	
	/** 固定标签对应 */
	specialApp:{
		'16':{name:'addr'},
		'17':{name:'calendar'},
		'18':{name:'googSubscription'}
	},

	
	/**
	* 获取我的应用
	*/
	getMyapp: function () {
	    var self = this;
	    var appData = $User.getMyApp();
	    var allData = this.get("customAppAll");
	    /** 权重排序（接口不作处理，只能前端排序），依靠customAppAll中定义的order属性排序 */
	    appData.sort(function (a, b) {
	        var o1 = allData[a.key]?allData[a.key].order:999;
	        var o2 = allData[b.key] ? allData[b.key].order : 999; 

	        return o1 - o2;

	    });
	    return appData;
   
	},
	
	/**
	* 我的应用默认数据
	*/
	getDefaultMyapp:function(){
		return this.get('defaultApp');
	
	},
	
	/**
	* 设置我的应用,可以批量设置
	*/
	setMyApp:function(options,callback){
		
		//添加通讯录、日历、云邮局统计
		var addr_id = $User.getMyAppIdByKey('16'),
			calendar_id = $User.getMyAppIdByKey('17'),
			googSubscription_id = $User.getMyAppIdByKey('18');
			
		$.each(options.apps,function(i,val){
			if(val.state === '1'){
				addr_id === val.id && BH('left_add_addr');
				calendar_id === val.id && BH('left_add_calendar');
				googSubscription_id === val.id && BH('left_add_googSubscription');
			}
		});
	
	    M139.RichMail.API.call("user:setMyApp",options,function(result){            
            callback && callback(result.responseData);
        });
	},
	
	/**
	* 设置myapp缓存对象状态
	*/
	changeState:function(id,state,callback){
	    var myapp = this.getMyapp();
	    for(var i=0;i<myapp.length;i++){
	        if(myapp[i].id == id){
	            myapp[i].state = state;
	        } 
	    }
	    callback && callback();
	},
	
	
	/**
	* 加载客户应用
	* @param Bollean {first} 是否设置过
	* @param int {getState} 选择状态 0 - state:0  1 - state:1  2- all
	*/
	loadCustomApp:function(first,getState){
	    var self = this;
	    var customAppAll = self.get('customAppAll');
	    var myapp = self.getDefaultMyapp();
	    if (this.get('loadData')) { myapp = self.getMyapp() }
	    var result = [];	    	    
	    for(var i = 0; i < myapp.length; i++){
	        if(customAppAll[myapp[i].key]){
	            customAppAll[myapp[i].key].state = myapp[i].state;
	            customAppAll[myapp[i].key].key = myapp[i].id;
	            if(i<17){ //这里数量限制暂不确定，以前规定是不超过8项
					if(getState == 1){
					    if (customAppAll[myapp[i].key].state == '1'  || customAppAll[myapp[i].key].alwaysShow) {
					        result.push(customAppAll[myapp[i].key]);
					    }
	                }
					if(getState == 2){
	                    result.push(customAppAll[myapp[i].key]);
	                }
	            }
	        }
	    }	    
	    return result;
    }
    
}));

})(jQuery, _, M139);

﻿
/**
* @fileOverview 我的应用
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 我的应用
    */

    M139.namespace('M2012.Myapp.View', superClass.extend({

        /**
        *@lends M2012.Myapp.View.prototype
        */
        el: '#myapp',

        template: {
            link: '<a href="{linkShow}" {target} bh="{behavior}" id="{id}" hidefocus="true" title="{title}">{name}</a>',
            //staticlink : '<li><a href="javascript:appView.jumpTo(\'attachlist\')"  bh="left_attach" style="display:block;" >附件夹</a></li>',
            //line: '<span class="line">|</span>',
            popitem: ['<li><i class="{icon}"></i><span class="appListName ml_5">{text}</span><a class="appListBtn" {btnDisplay} href="javascript:void(0)" hidefocus="true" rel="{rel}" key="{key}">{btn}</a><span class="appListHave">{gray}</span>',
            '<div class="singleApp hide" style="left:208px;top:{top}px;">',
            '<span class="rightDiv" style="z-index:1;"></span>',
            '<div class="dRound" style="position:relative;zoom:1;top:-{singleTop}px">',
            '<div class="dRoundBody">',
            '<div class="top">',
            '<h3>{text}</h3>',
            '<p class="info">{desc}</p>',
            '</div>',
            '<div class="bot hide">',
            '<a class="sl-rc">',
            '<span class="sl-rc-cnt appListBtn" rel="{rel}" key="{key}">',
            '{descbtn}',
            '</span>',
            '</a>',
            '</div>',
            '</div>',
            '</div>	',
            '</div></li>'].join(''),
            popdiv: ['<div class="dRound adminMyApp" id="adminMyApp" style="{0}">',
            '<h2>特色应用</h2>',
            '<div class="dRoundBody adminMyAppList">',
            '<ul>',
            '{1}',
            '</ul>',
            '</div>',
            //'<i class="i_set"></i>',
            '</div>'].join('')
        },

        initialize: function () {
            var self = this;
            this.model = new M2012.Myapp.Model();
            return superClass.prototype.initialize.apply(this, arguments);
        },

        initEvents: function () {
            var self = this;
            $("#setapp").click(function () {
                self.showPopDiv();
                M139.Event.stopEvent();
            });

            //切换“特色应用”展开/折叠显示		
			function showAppList(){
			    $('#listAppsSwitchIcon').removeClass('t_blackRight').addClass('t_blackDown');
                $('#myappList').show();
			}
			function hideAppList(){
			    $('#listAppsSwitchIcon').removeClass('t_blackDown').addClass('t_blackRight');
                $('#myappList').hide();
			}
			
			$('#listAppsSwitch').click(function () {
			    if ($('#listAppsSwitchIcon').hasClass('t_blackRight')) {
                    showAppList();
                } else {
					hideAppList();
                }
            });

			self.model.on("change:showListState", function (model, value) {
				if(self.model.get('showListState')){
					showAppList();
				}else{
					hideAppList();
				}
			});
			
			//监听tab设置事件，取消固定标签（精品订阅，日历和通讯录要在特色应用添加）
			$App.on('setMyApp',function(data){
				var thisapps = [];
				var keys = data.keys || null;
				var ids = [];
				if($.isArray(keys) && keys[0]){
					$.each(keys,function(i,val){
						var appid = $User.getMyAppIdByKey(val);
						ids.push(appid);
						thisapps.push({
							id:appid,
							state:'1' 
						});
					});
					var options = { apps: thisapps};
					self.model.setMyApp(options,function(result){
						$.each(ids,function(i,val){
							self.model.changeState(val, '1');
						});
						self.render("");
					});
				}
			});
			
        },

        /**
        * 定义弹出层事件
        */
        initPopEvent: function () {
            var self = this;
            $('#adminMyApp li').live('mouseover', function () {
                $(this).addClass("current").find(".singleApp").removeClass("hide");
            })
            $('#adminMyApp li').live('mouseleave', function () {
                $(this).removeClass("current").find(".singleApp").addClass("hide");
            });
            $('#adminMyApp').live('mouseleave', function () {
                self.removePopDiv();
            });
            $('.adminMyAppList li .appListBtn').bind('click', function () {
                var id = $(this).attr('key');
                var state = $(this).attr('rel');
                var setState = state == "0" ? "1" : "0";
                var options = { apps: [] };
                var _this = this;
                var thisbtn = $(this).text();
                options.apps.push({
                    id: id,
                    state: setState
                });
                self.model.setMyApp(options, function (result) {
                    if (result.code === 'S_OK') {
                        self.model.changeState(id, setState, function () {
                            var parentsLi = $(_this).parents('li');
                            if (thisbtn.indexOf('添加') > -1) {
                                var obj = parentsLi.find('.appListBtn');
                                var len = obj.length;
                                for (var i = 0; i < len; i++) {
                                    var text = obj[i].innerHTML;
                                    text = text.replace('添加', '取消');
                                    obj[i].innerHTML = '取消';
                                }
                                obj.attr("rel", 1);
                                parentsLi.find('.appListHave').text('已添加');
                            } else if (thisbtn.indexOf('取消') > -1) {
                                var obj = parentsLi.find('.appListBtn');
                                var len = obj.length;
                                for (var i = 0; i < len; i++) {
                                    var text = obj[i].innerHTML;
                                    text = text.replace('取消', '添加');
                                    obj[i].innerHTML = text;
                                    if (!obj[i].getAttribute("hidefocus")) {
                                        obj[i].innerHTML = "立即添加";
                                    }
                                }
                                obj.attr("rel", 0);
                                parentsLi.find('.appListHave').text("");
                            }
                            self.render("", function () {
                                $("#appmorelink").html('<span>更多</span><i class="i_xiax" style="display: inline-block;"></i><i class="i_xias" style="display: none;"></i>');
                            });
                        });

                    }
                })
            });
        },



        /**
        * 调整弹出层位置
        */
        getOffsetTop: function () {
            var self = this;
            var offsettop = $('#setapp').offset().top;
            var conHeight = $('.adminMyApp').height();
			var height = offsettop - conHeight + 8;
            return height > 10 ? height : 10;
        },

        /**
        * 管理弹出层
        */
        showPopDiv: function () {
            var self = this;
            self.removePopDiv();
            var html = self.template.popdiv;
            var style = 'z-index:999;left:200px; display:none';

            var itemData = self.model.loadCustomApp(true, 2);
            var itemTemp = self.template.popitem;

            var itemHtml = [];
            var len = itemData.length;
            for (var i = 0; i < len; i++) {
                var state = itemData[i].state;
                var btn = '';
                var gray = '';
                var descbtn = '';
                /*state == 0 ? btn = '添加' : btn = '取消';
                state == 0 ? descbtn = '立即添加' : descbtn = '取消';
                state == 0 ? gray = '' : gray = '已添加';*/
                if (state == 0) {
                    btn = '添加';
                    descbtn = '立即添加';
                    gray = '';
                } else {
                    btn = '取消';
                    descbtn = '取消';
                    gray = '已添加';
                }

                var singleTop = "";
				var fixh = 29;
				if(itemData[i].id === 'music_link'){ fixh = 20; }
                if (i > len-3) {//最后2个特殊处理，以防止滑动菜单下面有部分界面被浏览器遮盖
                    singleTop = (3-len+i) * fixh;
                }
                itemHtml.push($T.Utils.format(itemTemp, {
                    rel: state,
                    btn: btn,
                    gray: gray,
                    descbtn: descbtn,
                    btnDisplay:itemData[i].alwaysShow?"style='display:none'":"",
                    text: itemData[i].text,
                    key: itemData[i].key,
                    icon: itemData[i].icon,
                    desc: itemData[i].desc,
                    top: i * 28 + 23,
                    singleTop: singleTop
                }));
            }

            html = $T.Utils.format(html, [style, itemHtml.join('')]);

            $('#adminMyApp').length < 1 && $('body').append(html);

            var top = self.getOffsetTop();
            $('.adminMyApp').css('top', top);
            $('#adminMyApp').show();

            self.initPopEvent();
        },

        /**
        * 清除弹出层
        */
        removePopDiv: function () {
            $('#adminMyApp').remove();
        },


        /**
        * 左则导航我的应用列表
        * @param bollean {showAll} 是否显示所有
        */
        render: function (showAll, callback) {
            var self = this;
			
            function response(hasload) {
                var myapp = $User.getMyApp();
                if (!self.hasAddDefault) {
                    self.hasAddDefault = true;
                    myapp.push({ id: 1, key: "1", state: "1", name: "短信" });//短信，后台没加数据，暂时写死
                    myapp.push({ id: 0, key: "21", state: "1", name: "群邮件" });//群邮件，后台没加数据，暂时写死
                    if ($.grep(myapp, function (n, i) { return n.key == "22" }).length == 0) {
                        myapp.push({ id: 3, key: "22", state: "1", name: "语音信箱" });//群邮件，后台没加数据，暂时写死
                    }
                }
                
                self.model.set({ userData: null,loadData:hasload ? true : false}); //标志已加载
                var linkTemp = self.template.link;
                //var staticLinkTemp = self.template.staticlink;
                //var lineTemp = self.template.line;
                //var showMore = false;
                //var hideMore = false;
                //hideList = self.model.loadCustomApp(true, 0);
                var showList = self.model.loadCustomApp(true, 1);
                var allList = self.model.loadCustomApp(true);
				var showListState = true;
                
				//所有不显示
				if(showList.length == 0){
					showListState = false;
				}
				
                //合并数据
                if (showAll) {
                    showList = allList;
                    self.model.set({ joinList: true });
                }
				
				//保存状态到model
				self.model.set({showListState:showListState});

				
                //还要添加未设置显示的
                var html = [];
                var isSmsMmsBothExisted = false;
                var urlTemp = 'javascript:$App.jumpTo(\'{0}\')';
                for (var i = 0; i < showList.length; i++) {
                    var text = showList[i].text;
                    var class_ = '';
                    var linkShow = '';

                    //链接处理
                    var link = showList[i].link;
                    if (/javascript/i.test(link) || showList[i].target) {
                        linkShow = link;
                    } else {
                        linkShow = $T.Utils.format(urlTemp, [showList[i].link]);
                    }
                    
                    if (i % 2 == 0) {//奇数行，开始li
                        html.push('<li class="bottomLi_first clearfix">'); 
                    } else if (i % 2 == 1) { //&& link == 'mms'
                        html.push('<span>|</span>');
                        isSmsMmsBothExisted = true;// 因为特色应用顺序固定，所以当彩信再第二位的时候可以判断短彩信都存在
                        
                    } 
                    
                    html.push($T.Utils.format(linkTemp, {
                        linkShow: linkShow,
                        behavior: showList[i].behavior ? showList[i].behavior : '',
                        target: showList[i].target ? 'target="_blank"' : '',
                        id: showList[i].id ? showList[i].id : '',
                        css: class_,
                        title: showList[i].desc ? showList[i].desc : '',
                        name: text
                    }));

                    if (i % 2 == 1) { //偶数行，闭合li
                        html.push('</li>');
                    }
                }

                // 因为最后印个标签没有关闭，所以在循环后补上
                html.push('</li>');				
                $("#myappList").html(html.join(''));
                
                // 短彩共存时需要调整样式
                //isSmsMmsBothExisted && $("#myappList li:first").addClass('bottomLi_first clearfix');
                
                $('#appmorelink').hide();

                if (callback) { callback() }
                $App.getView("folder").resizeSideBar();//重新计算左侧高度
			}
			
			//response(); //第一次输出默认数据,避免空白
            M139.Timing.waitForReady("$User.getMyApp()",function(){
				setTimeout(function(){
					response(true); //第二次输出加载数据
				},50);				
			});
        }

    }));

    $(function () {
        var myappView = new M2012.Myapp.View();
		    myappView.render();
            myappView.initEvents();
	})

})(jQuery, _, M139);
﻿/**
 * @fileOverview 定义通讯录的Http客户端类.
 */

  /*global Contacts: false */

(function (M139) {

    function _getUrl_(page, type) {
        return "/sharpapi/addr/apiserver/" + page + "?sid=" + $App.getSid() + (type ? "&APIType=" + type : "") + "&r=" + Math.random();
    }

    function addrInterfaceUrl (action) {
        return _getUrl_("addrinterface.ashx", action);
    }

    var namespace = "M2012.Contacts.HttpClient";
    M139.namespace(namespace, M139.ExchangeHttpClient.extend(
    /**
    *@lends M2012.Contacts.HttpClient.prototype
    */
    {
        /** 与通讯录通讯的http客户端类，调用接口有两种方式，一种是提供报文，调用request，一种是以注册的形式添加方法
        *@constructs M2012.Contacts.HttpClient
        *@extends M139.ExchangeHttpClient
        *@param {Object} options 初始化配置，参数继承M139.HttpClient的初始化参数
        *@example
        var contactsClient = new M2012.Contacts.HttpClient();
        */
        initialize: function (options) {
            M139.ExchangeHttpClient.prototype.initialize.apply(this, arguments);
            this.router = M139.HttpRouter;

            this.router.addRouter("addr", [
                "GetUserAddrJsonData", "QueryUserInfo", "ModUserInfo", "QueryContactsImageUrl","GetLastContactsDetail","AddUserInfo","WhoAddMe",
                "AddGroupList","DelGroupList","AddCAndGToGroup","EditGroupList","DelContacts","AddGroup","AddBatchContacts","GetDealList","ModDealStatus",
                "AgreeOrRefuseAll","QueryContactsInGroup","GetRepeatContacts","AddContacts","ModContacts","DelLastContacts","ModGroup","MoveGroupList",
                "MergeContacts","QueryMergeResult","DelLCContacts","ModContactsField",
                "GetNumWaitForCleaning", "QueryInfoWaitForCleaning", "OneKeyClean",
                "BatchQuery", "GetUncompletedContacts",
                "GetPrivacySettings", "SavePrivacySettings", 
                "GetRepeatContactsNew","AutoMergeContacts","QueryContactsAndGroup",
				"GetBatchImageUrl", "WhoAddMeByPage"
            ]);
            this.router.addRouter("addr_p3_gw", [
                "andAddr:readGroups", "andAddr:readGroupContacts", "andAddr:readContactDetail"
            ]);
            this.router.addRouter("webdav", [
                "wangyisync", "googlesync"
            ]);
        },

        defaults: {
            name: namespace,
            requestDataType: "ObjectToXML2",
            responseDataType: "JSON2Object"
        },

        /**
        *继承自M139.ExchangeHttpClient.request方法， 增加了一些参数功能
        *@see M139.ExchangeHttpClient#request
        *@param {Object} options 配置参数
        *@returns {M139.HttpClient} 返回对象自身
        *@example
        client.request(
            {
                method:"post",
                timeout:10000,
                data:{
                    fid:1
                },
                api:"mbox:listMessage",
                    headers:{
                    "Content-Type":"text/javascript"
                }
            },
            function(e){
                console.log(e.status);//http返回码，200,404等
                console.log(e.isTimeout);//返回是否超时
                console.log(e.responseText);//http返回码，200,404等
                console.log(e.getHeaders());//返回的http头集合，使用函数因为默认处理http头会消耗性能
            }
        );
        */
        request: function (options, callback) {
            var This = this;
            //请求父类的方法
            M139.ExchangeHttpClient.prototype.request.apply(this, arguments);
            return this;
        },
        /**@inner*/
        onResponse: function (info) {
            var This = this;
            M139.ExchangeHttpClient.prototype.onResponse.apply(this, arguments);
        }
    }));

    //提示语
    var YIBUMSG = {
        addfail: "添加失败",
        addsuccess: "联系人添加成功",
        addcontactfail: "联系人添加失败",
        addfailunknown: "添加失败,未知错误",
        addfailserver: "添加失败,服务器异常",
        editfail: "系统繁忙，请稍候再试",
        processing: "程序运行中,请稍候",
        ajax_othererror: "系统繁忙，请稍后再试",
        groupname_not_exists: "组名不能为空",
        group_alreadyexists: "组名已存在",
        groupadded: "添加组成功",
        groupmodified: "组修改成功",
        groupdeleted: "删除成功",
        contactdeleted: "删除成功",
        contactcopyed: "复制成功",
        contactmoved: "移动成功",
        groupsaved: "保存成功",
        contactreaded: "获取成功",
        contactsaved: "保存成功",
        saveing: "保存中……",
        memooverlimit: "您合并通讯录重复联系人资料，超过备注可显示的资料已发送到您的邮箱。",
        sysbusy: "系统繁忙，请稍候再试。",
        merging: "自动合并操作正在处理中，请不重复提交。",
        fail_commitmerge: "提交自动合并请求失败。",
        warn_contactexists: "通讯录已存在邮箱/手机相同的联系人",
        warn_emailRepeat: "该邮箱已存在，是否仍要保存？",
        warn_mobileRepeat: "该手机号已存在，是否仍要保存？",
        isAlwaysSave: "是否仍要保存？",
        sysUpdateing: "暂时无法处理该请求，请稍后再试",
		contactexisted: {
			"224": "手机号码已存在",
			"225": "商务手机已存在",
			"226": "电子邮箱已存在",
			"227": "商务邮箱已存在"
			},
		groupoverLimit:       "联系人分组已达上限",
		groupcontactsoverlimit: "保存失败，分组联系人总数已达上限5000"
    };

    var ERR_CONTACT_OVERLIMIT = "21";
    var ERR_CONTACT_GROUPEDLIMIT = "23";
    var ERR_CONTACT_REACHLIMIT = "24";
    var ERR_CONTACT_REPEAT = "28";
    var ERR_CONTACT_EDIT_EXIST_LIST = ["224", "225", "226", "227"];//编辑已存在联系人

    var ERROR_MESSAGE = {
        OVER_LIMIT: '保存失败，联系人数量已达上限3000。<a href="javascript:top.FF.close();top.$App.showOrderinfo();" style="color:#0344AE">升级邮箱</a>添加更多！',
        REACH_LIMIT: '保存联系人部分成功，联系人数量超出上限部分未保存，你可以<a href="javascript:top.FF.close();top.$App.showOrderinfo();" style="color:#0344AE">升级邮箱</a>添加更多！',
        REPEAT: '保存联系人失败，联系人已存在。',
        NAME_LENGTH_ERROR: "联系人姓名太长了",
        EMAIL_ERROR: "邮箱格式不正确。<br/>应如zhangsan@139.com，长度6-90位",
        MOBILE_LENGTH_ERROR: "手机号码格式不正确，请输入3-20位数字"
    };
    /**
    *实例化M2012.Contacts.HttpClient，然后封装使用的过程
    *@namespace 
    *@name M2012.Contacts.API
    */
    M139.core.namespace("M2012.Contacts.API",
    /**@lends M2012.Contacts.API*/
    {
        call: function (api, data, callback, options) {
            //var url = "/s?func=" + api + "&sid=" + $T.Url.queryString("sid") + "&rnd="+Math.random();
            options = options || {};
            var client = new M2012.Contacts.HttpClient({});
            var url = api.indexOf("/") > -1 ? api : client.router.getUrl(api);

            if (options.loadingMsg) {
                if (options.loadingMsg) {
                    top.M139.UI.TipMessage.show(options.loadingMsg);
                }
            }

            var scope = this;
            if (options && options.scope) {
                scope = options.scope;
            }

            client.on('error', function() {
                if (options.error) {
                    options.error.apply(client, arguments);
                } else {
                    callback.call(scope, { responseData: null, status: arguments[0].status, responseText: arguments[0].responseText });
                }
            });

            //注意处理异常
            var httpMethod = "post";
            if (options.httpMethod) {
                httpMethod = options.httpMethod;
            }
            client.request({
                url: url,
                method: httpMethod,
                data: data,
                requestDataType: options.requestDataType,
                responseDataType: options.responseDataType
            }, function (e) {
                if (options.loadingMsg) {
                    try{
                        top.M139.UI.TipMessage.hide();
                    } catch (e) { }
                }

                callback.call(scope, e);                
            });
        },



        //验证新增联系人数据 todo move
        validateAddContacts: function (obj) {
            var result = {};
            var error = "";
            if (!obj.name || obj.name.trim() == "") {
                error = "请输入联系人姓名";
            } else if (obj.name.trim().getByteCount() > 100) {
                error = ERROR_MESSAGE.NAME_LENGTH_ERROR;
            } else if (!obj.email && !obj.mobile) {
                error = "电子邮箱和手机号码，请至少填写一项";
            } else if (obj.email) {
                /*
                通用的E-MAIL正则表达式校验，长度6-90位（数据库字段长度为90）；
                */
				
                if (!M139.Text.Email.isEmail(obj.email)) {
                    error = ERROR_MESSAGE.EMAIL_ERROR;
                } else if (obj.email.length < 6 || obj.email.length > 90) {
                    error = ERROR_MESSAGE.EMAIL_ERROR;
                }
            }
            if (!error && obj.mobile) {
                /*
                手机号码：
                长度3-20位数字并支持“-”分隔符的输入。（数据保存到数据库中需要将“-”过滤掉）。
                */
                if (!/^\d([\d-])+\d$/.test(obj.mobile) || obj.mobile.replace(/\D/g, "").length > 20) {
                    error = ERROR_MESSAGE.MOBILE_LENGTH_ERROR;
                }
            }

            if(obj.newGroup){
                if (Contacts.getGroupByName(obj.newGroup)) {
                    delete obj.newGroup;
                }
            }

            result.error = error;
            return result;
        },

        //自动保存联系人
        /*
        xml=<AddLastContacts><AddContactsInfo><SerialId>0</SerialId><AddrName>kkkkkkk</AddrName><AddrType>E</AddrType><AddrContent>kkkkkkk@rd139c.om</AddrContent><AddrMobile></AddrMobile><AddrId>0</AddrId><AddrTitle>title</AddrTitle><ComeFrom>1</ComeFrom></AddContactsInfo>
<AddContactsInfo><SerialId>0</SerialId><AddrName>bbbbbb</AddrName><AddrType>E</AddrType><AddrContent>bbbbbb@rd139.com</AddrContent><AddrMobile></AddrMobile><AddrId>0</AddrId><AddrTitle>title</AddrTitle><ComeFrom>1</ComeFrom></AddContactsInfo></AddLastContacts>
        */
        /**
         *发送成功后添加最近联系人
         *@param {Object} options 参数集合
         *@param {String} options.type email|mobile|fax
         *@param {Array} options.list 添加的列表
         *@example
         M2012.Contacts.API.addSendContacts({
            type:"email",
            list:[
                '"李福拉"&ltlifula@139.com&gt;',
                '"帅哥"&lt;lifl@richinfo.cn&gt;'
            ]
         },function(e){
         
         });

         */
        addSendContacts: function (options, callback) {
            var This = this;
            var items = [];
            var type = options.type;
            var addr = options.list;
            var _subject = options.subject;
            var from = options.from || 0;

            if (type == "mobile") {
                $(addr).each(function (index, value) {
                    var list = [];

                    list = Contacts.getContactsByMobile(this.toString());
                    if (list.length > 0) {
                        var info = list[0];
                        items.push({ SerialId: info.SerialId, AddrName: info.name, AddrType: "M", AddrContent: this.toString() });
                    } else {

                        var mobile = M139.Text.Mobile.getNumber(value);
                        mobile = M139.Text.Mobile.remove86(mobile);
                        items.push({
                            SerialId: "0",
                            AddrName: mobile,
                            AddrType: "M",
                            AddrContent: mobile,
                            AddrMobile: mobile,
                            AddrId: "0",
                            AddrTitle: "",
                            ComeFrom: from || "1"
                        });
                    }
                })
            } else if (type == "fax") {
                $(addr).each(function (index, value) {
                    var list = [];//todo Contacts.getContactsByFax(this.toString());
                    if (list.length > 0) {
                        var info = list[0];
                        items.push({ SerialId: info.SerialId, AddrName: info.name, AddrType: "F", AddrContent: value });
                    } else {
                        items.push({ SerialId: "0", AddrName: value, AddrType: "F", AddrContent: value });
                    }
                })
            } else {
                $(addr).each(function (index, value) {
                    var list = [];

                    list = Contacts.getContactsByEmail(M139.Text.Email.getEmail(value));
                    if (list.length > 0) {
                        var info = list[0];
                        items.push({
                            SerialId: info.SerialId,
                            AddrType: "E",
                            ComeFrom: from,
                            AddrTitle: _subject,
                            AddrName: M139.Text.Email.getName(value),
                            AddrContent: M139.Text.Email.getEmail(value)
                        });
                    } else {
                        items.push({
                            SerialId: "0",
                            AddrType: "E",
                            ComeFrom: from,
                            AddrTitle: _subject,
                            AddrName: M139.Text.Email.getName(value),
                            AddrContent: M139.Text.Email.getEmail(value)
                        });
                    }
                })
            }
            var requestData = {
                AddLastContacts: {
                    "AddContactsInfo": items
                }
            }
            //todo
            if (options.autoSave) {
                //自动保存联系人
                var requestUrl = _getUrl_("autosavecontact.ashx");
            } else {
                var requestUrl = _getUrl_("addlastcontacts.ashx");
            }
            this.call(requestUrl, requestData, function (e) {
                var result = {};
                var json = e.responseData;
                if (json) {
                    if (json.ResultCode == "0") {
                        result.success = true;
                        //保存了多个是返回数组
                        if (_.isArray(json.ContactsInfo)) {
                            result.list = json.ContactsInfo;
                        } else if (typeof json.ContactsInfo == "object") {
                            result.list = [json.ContactsInfo];
                        } else {
                            result.list = [];
                        }
                        if (callback) {
                            callback(result);
                        }
                        //更新缓存
                        This.updateCache({
                            type:"AddSendContacts",
                            data:{
                                items:items,
                                newContacts:result.list
                            }
                        });
                    } else {
                        result.success = false;
                        //todo
                        result.error = YIBUMSG.sysbusy;
                    }
                } else {
                    result.success = false;
                    result.error = "未知异常";
                }
            },
            {
                requestDataType: "ObjectToXML2_URL",
                responseDataType: "XML2Object"
            });
        },

        /**
         *删除联系人
         *@param {Object} options 参数集合
         *@param {String} options.serialId 要删除的联系人id
         */
        deleteContacts: function (options, callback) {
            var This = this;
            var serialId = options.serialId;
            var requestBody = {
                DelContacts: {
                    SerialId: serialId
                }
            };

            var requestUrl = "/addrsvr/DelContacts?formattype=json&sid=" + $App.getSid();

            this.call(requestUrl, requestBody, function (e) {
                var json = e.responseData;
                var result = {};
                if (json) {
                    if (json.ResultCode == "0") {
                        result.success = true;
                        result.msg = YIBUMSG.contactdeleted;
                        This.updateCache({
                            type: "DeleteContacts",
                            data: {
                                serialId: serialId
                            }
                        });
                    } else {
                        result.success = false;
                        result.error = YIBUMSG.sysbusy;
                    }
                } else {
                    result.success = false;
                    result.error = YIBUMSG.sysbusy;
                }
                if (callback) {
                    callback(result);
                }
            }, {
                loadingMsg: "正在删除联系人..."
            });
        },

        /**
         *添加联系人
        */
        addContacts: function (info, callback, options) {
            var This = this;
            options = options || {};
            var result = {};

            var result = this.validateAddContacts(info);
            if (result.error) {
                result.success = false;
                if (callback) {
                    callback(result);
                }
                return;
            }

            var groupId = _.isArray(info.groupId) ? info.groupId.join(",") : info.groupId;
            var requestBody = {
                AddContacts: {
                    UserType: 1,
                    AddrFirstName: info.name,
                    MobilePhone: info.mobile,
                    FamilyEmail: info.email,
                    BusinessFax: info.fax,
                    GroupId: groupId,
                    AddGroupName: info.newGroup,
                    AddNewGroup: Boolean(info.newGroup),
                    DealStatus: info.DealStatus,
                    SecondUIN: info.SecondUIN
                }
            };

            var message = {loadingMsg:"正在添加联系人..."};
            var requestUrl = "/addrsvr/AddContacts?formattype=json&sid=" + $App.getSid();

            if (options.thingid) {
                requestUrl += "&thingid=" + options.thingid;
            }

            if(info.DealStatus && info.SecondUIN){
                message = {};
            }

            this.call(requestUrl, requestBody, function (e) {

                var addResult = e.responseData;
                if (addResult) {

                    //添加成功
                    if (addResult.ResultCode == "0") {
                        var contactinfos = addResult.ContactsInfo;

                        result.success = true;
                        result.msg = YIBUMSG.addsuccess;

                        if (contactinfos && contactinfos.length) {

                            for (var i = 0; i < contactinfos.length; i++) {
                                contactinfos[i].AddrFirstName = info.name;
                                contactinfos[i].MobilePhone = info.mobile;
                                contactinfos[i].FamilyEmail = info.email;
                                contactinfos[i].BusinessFax = info.fax;
                                contactinfos[i].GroupId = groupId;
                            }

                            This.updateCache({
                                type: "AddContacts",
                                data: contactinfos
                            });
                        }

                        result.contacts = contactinfos;

                        if (callback) {
                            callback(result);
                        }
                        //todo 更新积分？
                        /*
                        try {
                            GlobalEvent.broadcast("contacts_change");
                            if (top.postJiFen) {
                                top.postJiFen(72, 1);
                            }
                        } catch ( e ) { }
                        */
                    } else {

                        var msg = "";
                        switch (addResult.ResultCode) {
                            case ERR_CONTACT_OVERLIMIT:
                                msg = ERROR_MESSAGE['OVER_LIMIT'];
                                msg = msg.replace("3000", $User.getMaxContactLimit());
                                break;
                            case ERR_CONTACT_REACHLIMIT:msg = ERROR_MESSAGE['REACH_LIMIT'];break;
                            case ERR_CONTACT_REPEAT:msg = ERROR_MESSAGE['REPEAT'];break;
                            case ERR_CONTACT_GROUPEDLIMIT:msg = YIBUMSG.groupcontactsoverlimit;break;
                            default: 
                                msg = YIBUMSG.contactexisted[addResult.ResultCode];
                                if (!msg) { msg = YIBUMSG.addcontactfail; }
                                break;
                        }
                        result.success = false;
                        result.msg = msg;
                        result.error = msg;
                        if (callback) {
                            callback(result);
                        }
                    }
                } else {
                    result.success = false;
                    result.msg = YIBUMSG.addfailunknown;
                    result.error = result.msg;
                    if (callback) {
                        callback(result);
                    }
                }
            }, message);
        },

        //AutoSaveReceivers保存单个联系人 不加积分需求
        addBatchContactsNew: function(obj, callback) {
            var list = obj.sort ? obj:[obj];
			
            var validateResult = this.validateAddContacts(list[0]);
            if (validateResult.error) {
                validateResult.success = false;
                if (callback) {
                    callback(validateResult);
                }
                return;
            }

            var _list = $.map(list, function(i) {
                var item = { Name: i.name, SourceType: 2 };
                if (i.email) {
                    item.Email = i.email;
                }

                if (i.mobile) {
                    item.MobilePhone = i.mobile;
                }

                if (i.GroupId) {
                    item.GroupId = i.GroupId;
                }

                return item;
            });

            var requestBody = {
                AutoSaveReceivers: {
                    Count: 1,
                    ContactsInfo: _list
                }
            };

            var requestUrl = "/addrsvr/AutoSaveReceivers?formattype=json&sid=" + $App.getSid();

            var _this = this;
            _this.call(requestUrl, requestBody, function (e) {
                var result = {};
                if (e.responseData) {
                    var code = e.responseData.ResultCode;
                    if (code == "0") {
                        result.success = true;
                        
                        var ci = e.responseData.ContactsInfo;

                        if (_.isArray(ci)) {
                            for (var i=0; i<ci.length; i++) {
                                $.each(_list, function(index, item) {
                                    if (item.Email == ci[i].FamilyEmail) {
                                        ci[i].GroupId = item.GroupId;
                                        return false;
                                    }
                                });
                            }
                            result.list = ci;
                        } else if (typeof ci == "object") {
                            result.list = [ci];
                        } else {
                            result.list = [];
                        }
                        if (callback) {
                            callback(result);
                        }
                        //更新缓存
                        _this.updateCache({
                            type:"AddSendContacts",
                            data:{
                                items:[],
                                newContacts:result.list
                            }
                        });
                    } else {
                        result.success = false;
                        result.msg = YIBUMSG.addfailunknown
                        if (callback) {
                            callback(result);
                        }
                    }
                }
            });
        },

        /**
         *添加联系组
         *@param {String} groupName 添加的组名称
         *@param {Function} callback 操作结果回调函数
        */
        addGroup: function (groupName, callback) {
            var This = this;
            if(groupName==""){
                if(callback)callback({success:false,msg: YIBUMSG.groupname_not_exists});
                return;
            }
            var group = M2012.Contacts.getModel().getGroupByName(groupName);
            if(group){
                if(callback)callback({success:false,msg:YIBUMSG.group_alreadyexists});
                return;    
            }
            var requestBody = {
                AddGroup:{
                    GroupName:groupName
                }
            };
            //todo
            var requestUrl = "/addrsvr/AddGroup?formattype=json&sid=" + $App.getSid();
            this.call(requestUrl, requestBody, function (e) {
                var addResult = e.responseData;
                var result = {};
                if (addResult) {
                    var resultCode = addResult.ResultCode;
                    if (resultCode == "0") {
                        result.success = true;
                        result.msg = YIBUMSG.groupadded;
                        result.groupId = addResult.GroupInfo[0].GroupId;
                        result.groupName = groupName;
                        //更新缓存
                        This.updateCache({
                            type: "AddGroup",
                            data: result
                        });
                    } else {
                        if (resultCode == "9") {
                            result.error = YIBUMSG.group_alreadyexists;
                        } else {
                            result.error = YIBUMSG.addfailunknown;
                        }
                        result.success = false;
                    }
                } else {
                    result.success = false;
                    result.error = YIBUMSG.addfailunknown;
                }
                if(callback){
                    callback(result);
                }
            }, {
                loadingMsg: "正在添加分组..."
            });
        },

        /**
         *获得联系人详细资料
         *@param {String} serialId 联系人id
         *@param {Function} callback 回调函数
         *@example
         M2012.Contacts.API.getContactsDetail("602955467",function(result){
            alert(JSON.stringify(result));
         });
        */
        getContactsDetail: function (serialId, callback) {
            var This = this;
            var requestBody = {
                QueryContactsAndGroup: {
                    SerialId: serialId,
                    UserNumber: $User.getUid()
                }
            };
            //todo
            var requestUrl = "/addrsvr/QueryContactsAndGroup?sid=" + $App.getSid();
            this.call(requestUrl, requestBody, function (e) {
                var result = {};
                if (e.responseData) {
                    if (e.responseData.rc == "0") {
                        var info = e.responseData.ci;
                        //翻译简写属性
                        var c = M2012.Contacts.getModel().userInfoTranslate(info);
                        result.success = true;
                        result.data = c;
                    } else {
                        result.success = false;
                        //todo
                        result.error = e.responseData.rm || "未知异常";
                    }
                    
                }else{
                    result.success = false;
                    //todo
                    result.error = "未知异常";
                }
                if (callback) {
                    callback(result);
                }
                
            }, {
                responseDataType: "XML2Object"
            });
        },
        /*
        <?xml version="1.0" encoding="UTF-8"?><ModContactsResp><ResultCode>0</ResultCode><ResultMsg>Operate successful</ResultMsg><ContactsInfo><SerialId>160126039</SerialId><FirstNameword>Z</FirstNameword><FullNameword>zhanggangzuchang（jiangaojixitongweihugongchengshi)</FullNameword><FirstWord>zgzc（jgjxtwhgcs)</FirstWord></ContactsInfo></ModContactsResp>
        */
        /**
         *编辑联系人
         *@param {String} serialId 联系人id
         *@param {Object} info 编辑的字段集合：name，email，mobile，groupId
         *@param {Function} callback 回调函数
         *@example
         M2012.Contacts.API.editContacts("602955467",{
            name:"改个名",
            mobile:"15889394143"
         },function(result){
            alert(JSON.stringify(result));
         });
        */
        editContacts: function (serialId, info, callback) {
            var This = this;


            var result = this.validateAddContacts(info);
            if (result.error) {
                result.success = false;
                if (callback) {
                    callback(result);
                }
                return;
            }

            this.getContactsDetail(serialId, function (e) {
                if (!e.success) {
                    if (callback) {
                        callback(e);
                    }
                } else {
                    var c = e.data;
                    c.AddrFirstName = info.name;
                    c.FamilyEmail = info.email;
                    c.MobilePhone = info.mobile;
                    c.GroupId = _.isArray(info.groupId) ? info.groupId.join(",") : (info.groupId || "");
                    update(c);
                }
            });


            function update(c) {
                var requestBody = {
                    ModContacts: c
                };
                //todo
                var requestUrl = "/addrsvr/ModContacts?formattype=json&sid=" + $App.getSid();
                This.call(requestUrl, requestBody, function (e) {
                    var result = {};
                    if (e.responseData) {
                        var code = e.responseData.ResultCode;
                        if (code == "0") {
                            result.success = true;
                            result.msg = YIBUMSG.contactsaved;
                            result.data = e.responseData.ContactsInfo;

/*
result: Object
    data: Array[1]
        0: Object
            FirstNameword: "S"
            FirstWord: "sd"
            FullNameword: "shandong"
            SerialId: "1408641207"

c: Object
    AddrFirstName: "山东"
    ContactCount: "0"
    ContactFlag: "0"
    ContactType: "0"
    FamilyEmail: "test9167@139.com"
    FirstNameword: "S"
    GroupId: "1406706914,1406730786,1406748929"
    MobilePhone: ""
    RecordSeq: "591398532"
    SerialId: "1408641207"
    SourceType: "2"
    SynFlag: "0"
    SynId: "0"
    UserSex: "2"
    UserType: "1"
*/
                            if (Boolean(result.data.length)) {
                                c.FirstWord = result.data[0].FirstWord;
                                c.FirstNameword = result.data[0].FirstNameword;
                                c.FullNameword = result.data[0].FullNameword;
                            }

                            This.updateCache({
                                type: "EditContacts",
                                data: c
                            });
                            if(top.$App){//避免其它页面引用
                                top.$App.trigger("ContactsDataChange",{type:"EditContacts"});
                            }

                        } else {
                            result.success = false;
                            if (code == ERR_CONTACT_REPEAT) {
                                result.error = YIBUMSG.warn_contactexists;
                            }
                            else if ($.inArray(code, ERR_CONTACT_EDIT_EXIST_LIST) > -1) {
                                //编辑已存在联系人，继续提示用户是否保存
                                result.holdon = true;
                                result.resultCode = code;
                            }
                            else {
                                //todo
                                result.error = YIBUMSG.editfail || e.responseData.ResultMsg || "未知异常";
                            }
                        }
                    } else {
                        result.success = false;
                        //todo
                        result.error = "未知异常";
                    }

                    if (result.holdon) {
                        //var msg = result.resultCode == "226" ? YIBUMSG.warn_emailRepeat : YIBUMSG.warn_mobileRepeat;
                        var msg = YIBUMSG.contactexisted[result.resultCode] + "，" + YIBUMSG.isAlwaysSave;
                        top.$Msg.confirm(
                            msg,
                            function () {
                                top.Contacts.ModContactsField(c.SerialId, c, true, function (result) {
                                    if (result.resultCode == '0') {
                                        result.success = true;
                                        result.msg = YIBUMSG.contactsaved;
                                        result.data = result.ContactInfo;
                                    }
                                    else {
                                        //TODO 重复联系人编辑又失败了。
                                        result.error = YIBUMSG.editfail || e.responseData.ResultMsg || "未知异常";
                                    }
                                    callback && callback(result);
                                }, YIBUMSG.contactsaved);
                            },
                            function () {
                                //on calcel handler,do nothing
                            });
                        return false;
                    }

                    if (callback) {
                        callback(result);
                    }

                }, {
                    loadingMsg: "正在保存联系人..."
                });
            }

        },

        addBatchContacts: function(obj, callback) {
            var result = {}, list = obj.sort ? obj:[obj];

            for (var i = 0; i < list.length; i++) {
                var bool = this.validateAddContacts(list[i]);
                if (!bool) {
                    result.success = false;
                    result.errorIndex = i;
                    result.msg =  this.validateAddContacts.error;
                    if (callback) {
                        callback(result);
                    }
                    return;
                }
            }

            var _list = $.map(list, function(i) {
                var item = { Name: i.name, SourceType: 2 };
                if (i.email) {
                    item.Email = i.email;
                }

                if (i.mobile) {
                    item.MobilePhone = i.mobile;
                }

                if (i.GroupId) {
                    item.GroupId = i.GroupId;
                }

                return item;
            });

            var requestBody = {
                AutoSaveReceivers: {
                    Count: 1,
                    ContactsInfo: _list
                }
            };

            var requestUrl = "/addrsvr/AutoSaveReceivers?formattype=json&sid=" + $App.getSid();

            var _this = this;
            _this.call(requestUrl, requestBody, function (e) {
                var result = {};
                if (e.responseData) {
                    var code = e.responseData.ResultCode;
                    if (code == "0") {
                        result.success = true;
                        
                        var ci = e.responseData.ContactsInfo;

                        if (_.isArray(ci)) {
                            for (var i=0; i<ci.length; i++) {
                                $.each(_list, function(index, item) {
                                    if (item.Email == ci[i].FamilyEmail) {
                                        ci[i].GroupId = item.GroupId;
                                        return false;
                                    }
                                });
                            }
                            result.list = ci;
                        } else if (typeof ci == "object") {
                            result.list = [ci];
                        } else {
                            result.list = [];
                        }
                        if (callback) {
                            callback(result);
                        }
                        //更新缓存
                        _this.updateCache({
                            type:"AddSendContacts",
                            data:{
                                items:[],
                                newContacts:result.list
                            }
                        });
                    } else {
                        result.success = false;
                        result.msg = YIBUMSG.addfailunknown
                        if (callback) {
                            callback(result);
                        }
                    }
                }
            });
        },
        //url:http://addrsvr/QueryContactsImageUrl?sid=
        //post:<QueryContactsImageUrl><UserNumber>8615889394143</UserNumber><AddrInfo>手机号,别名</AddrInfo></QueryContactsImageUrl>
        /*response
        <QueryContactsImageUrlResp>
            <ResultCode>0</ResultCode>
            <ResultMsg>Operate successful</ResultMsg>
            <ImageInfo>
                <SerialId>802068819</SerialId>
                <ImageUrl>/upload/photo/861343087/8613430878413/20088181922924.jpg</ImageUrl>
            </ImageInfo>
            <ImageInfo>
                <SerialId>802068819</SerialId>
                <ImageUrl>/upload/photo/861343087/8613430878413/20088181922924.jpg</ImageUrl>
            </ImageInfo>
        </QueryContactsImageUrlResp>
        imgURL
        */
        /**
         *获得联系人头像
         *@param {Array} addrList 联系人的139别名、手机号
         *@param {Function} callback 回调函数
         */
        getContactsImage: function (addrList, callback) {
            var This = this;
            var cacheMap = This.contactsImageQueryCache;
            //先从缓存中找
            var key = addrList[0];
            var url = cacheMap[key];
            if (url !== undefined) {
                if (callback) {
                    callback(url);
                }
                return;
            }

            var requestData = {
                QueryContactsImageUrl: {
                    UserNumber: $User.getUid(),
                    AddrInfo: addrList.join(",")
                }
            };
            M2012.Contacts.API.call("QueryContactsImageUrl", requestData,
                function (e) {
                    if (e.responseData && e.responseData.ResultCode == "0") {
                        var url = "";
                        var json = e.responseData;
                        if (json.ImageInfo) {
                            if (!_.isArray(json.ImageInfo)) {
                                json.ImageInfo = [json.ImageInfo];
                            }
                            var list = json.ImageInfo;
                            var result = {};
                            for (var i = 0; i < list.length; i++) {
                                var item = list[i];
                                if (item.ImageUrl) {
                                    url = This.getContactsImageUrl(item.ImageUrl);
                                    break;
                                }
                            }
                        }
                        //查询结果要缓存起来
                        _.each(addrList, function (value) {
                            cacheMap[value] = url;
                        });
                        if (callback) {
                            callback(url);
                        }
                    }
                }
            );
        },
	    /**
         *直接通过调用后台的接口获取邮件地址的联系人头像(联系人是否在通讯录中存在由后台做判断)
         *@param {{addrInfo}, {info}} addrInfo ,Array里包含只包含有联系人的139别名、手机号信息
         *@param {Function} callback 回调函数
         */
        GetBatchImageUrl: function (addrInfo, callback) {
            var cacheMap = this.contactsImageQueryCache,
                key = addrInfo.addressInfo[0],
                url = cacheMap[key];

            //先从缓存中找
            if (url) {
                // 如果存在, 直接从缓存中获取, 否则保存
                _.isFunction(callback) && callback(url);
                return;
            }

            var param = {
                GetBatchImageUrl: {
                    ImageSrc : {
                        Name :  addrInfo.info.name,
                        Email : addrInfo.info.email
                    }
                }
            };

            M2012.Contacts.API.call("GetBatchImageUrl", param,
                function (response) {
                    var data = response.responseData;
                    if (!data || !data.ResultCode || data.ResultCode !== "0") {
                        // 无任何信息, 直接返回
                        console.error && data.ResultCode && console.error("errorCode: " + data.ResultCode);
                        return;
                    }

                    var url = "";
                    // 如果后台接口有返回, 则取返回值, 否则为空字符串
                    url = (data.ImageUrl) ? getDomain("resource") + data.ImageUrl[addrInfo.info.email] : url;

                    // 查询结果要缓存起来
                    _.each(addrInfo.addressInfo, function (value) {
                        cacheMap[value] = url;
                    });

                    _.isFunction(callback) && callback(url);
                }
            );
        },
        /**
         *缓存头像查询结果，避免反复查询
         */
        contactsImageQueryCache:{},
        /**
         *返回联系人头像url地址
         */
        getContactsImageUrl:function(path){
            var url = M139.Text.Url.makeUrl("/g2/addr/apiserver/httpimgload.ashx", {
                sid: $App.getSid(),
                path: path
            });
            return M139.HttpRouter.getNoProxyUrl(url);
        },


        /**
         * 通讯录只读类批量查询接口
         * @param {Object} options 参数
        */
        batchQuery: function (options) {
            var This = this;
            this.call("BatchQuery", options.requestData, function (e) {
                var result = e.responseData;
                if (e.status === 200 && result) {
                    if ($.isFunction(options.success)) options.success(result);
                } else {
                    if ($.isFunction(options.error)) options.error(result, e);
                }
            });
        },


        /**
         *更新缓存
         */
        updateCache: function (options) {
            var model = M2012.Contacts.getModel();
            model.updateCache(options);
        },

        //共享联系人
        shareContacts: function (options) {
            var This = this;

            var requestUrl = addrInterfaceUrl("ShareContacts");
            var requestData = {
                ShareContacts: {
                    "SendTo": options.sendto,
                    "SerialId": options.serialids
                }
            };

            This.call(requestUrl, requestData, function (e) {
                var result = e.responseData;

                if (!result || result.ResultCode != 0) {
                    if (options.error) options.error(result);
                    return;
                }

                if (options.success) options.success(result);
            },{
                requestDataType: "ObjectToXML2_URL",
                responseDataType: "JSON2Object"
            });
        },

        //克隆其他邮箱联系人
        cloneContacts: function (options) {
            var requestUrl = addrInterfaceUrl("CloneContacts");
            this.call(requestUrl, options.params, function (e) {
                if (options.callback) options.callback(e);
            }, {
                requestDataType: "ObjectToXML2_URL",
                responseDataType: "JSON2Object",
                error: options.error
            });
        },
        //异步查询联系人详细数据
        getContactsInfoById: function(id , callback){
            var result = {};
            var request = "<QueryContactsAndGroup><SerialId>{0}</SerialId><UserNumber>{1}</UserNumber></QueryContactsAndGroup>";
                request = request.format(id, $User.getUid());

            var error = function(e){
                 if(callback){
                    callback(e);
                 }
            };
                
            this.call('QueryContactsAndGroup', request, function(doc){
                var info = doc.responseData;

                if(info.ResultCode == "0"){
                        result.success=true;
                        result.msg= YIBUMSG.contactreaded;
                        result.contacts=[];

                    var helper = top.$App.getModel("contacts");

                    $.each(info.ContactsInfo, function() {
                        var fullInfo = helper.userInfoTranslate(this);
                        var contact = new M2012.Contacts.ContactsInfo( fullInfo );
                        result.contacts.push(contact);
                    });

                    result.contactsInfo = result.contacts[0];
                }else{
                    result.ResultCode = info.ResultCode;
                    result.success = false;
                    result.msg = YIBUMSG.sysbusy;
                    result.contacts =[];
                }

                if(callback){
                    callback(result);
                }
            }, {error: error});
        },
        //获取可能认识的人,接口
        getWhoAddMePageData: function(info, callback) {
            var _this = this;
            var userId = top.$User.getUid();
            var request = '<WhoAddMeByPage Page="{0}" Record="{1}" Relation="{3}" IsRand="{4}"><UserNumber>{2}</UserNumber></WhoAddMeByPage>';

            request = request.format(info.pageIndex, info.pageSize, userId, info.relation || 0, info.isRand || 0);

            var error = function() {
                M139.UI.TipMessage.hide();
                M139.UI.TipMessage.show("通讯录接口无法连接，请检查网络或稍候再试", { delay:2000 });
            };

            this.call('WhoAddMeByPage', request, function(response){
                var info = response.responseData;
                var result = {};
                result.success = true;
                result.msg = YIBUMSG.contactreaded;
                result.list = info.UserInfo;
                result.total = info.TotalRecord;

                if(callback){
                    callback(result);
                }

            }, {error: error});
        },
        modDealStatus: function(info, callback) {
            info.relationId = info.relationId.toString();

            var request = "<ModDealStatus><RelationId>{0}</RelationId><DealStatus>{1}</DealStatus><GroupId>{2}</GroupId><ReqMsg>{3}</ReqMsg><ReplyMsg>{4}</ReplyMsg><OperUserType>{5}</OperUserType><UserNumber>{6}</UserNumber>{7}</ModDealStatus>";
                request = request.format(info.relationId, info.dealStatus, info.groupId, info.reqMsg, info.replyMsg, info.operUserType, top.$User.getUid());
          
            this.call("ModDealStatus", request, function(response){
                var result = {};
                var info = response.responseData;

                result.info = info;
                result.success = true;
                result.msg = YIBUMSG.contactreaded;

                if (info.ResultCode != "0") {
                    result.success = false;
                    delete result.msg; //错误时去掉提示语，各页面自己提供.20130923
                }

                if (callback) {
                    callback(result);
                };
            }, { error: function() { alert("连接失败"); } });
        }
    });
})(M139);
﻿
;(function() {
	var nav = null;

	var options;

	function getOptions(){

		if(options) {
			return options;
		}

		options = {
			template: ['<div id="setNavcontainer" class="inAside">',
				'<div class="subList subListSet">',
					'<ul class="big subListScrollLast">',
						'<li>',
							'<a class="groupToggleShow" hidefocus="" href="javascript:;"><i name="i_unfold" class="triangle t_blackDown"></i><span class="fz_14">邮件</span></a>',
							'<ul class="small" style="display: block;">{basicItems}</ul>',
						'</li>',
					'</ul>',
					'<ul id="subListOthers" class="big"><li class="bottomLi"></li>{otherItems}</ul>',
				'</div>',
			'</div>'].join(""),
			items: {
				basicItems: {
					//  class="nav-item" 必须
					itemTemplate: '<li class="nav-item"><a href="javascript:;" bh="{bh}"><span class="otheMail">{title}</span></a></li>',
					data: [
						{title: "常规设置", key: "preference", bh: "set_nav_preference"},
						{title: "帐户设置", key: "account", bh: "set_nav_account"},
						{title: "文件夹与标签", key: "tags", bh: "set_nav_tags"},
						{title: "代收邮箱", key: "popmail", bh: "set_nav_pop"},
						{title: "收信规则", key: "type_new", bh: "classifymailnormal_onclick"},
						{title: "手机通知", key: "notice", bh: "set_nav_notice"},
						{title: "邮箱安全", key: "spam", bh: "set_nav_spam"},
						{title: "邮箱套餐", key: "mobile", bh: "set_nav_mobile"}
					]
				},
				otherItems: {
					itemTemplate: '<li class="nav-item"><a href="javascript:;" bh="{bh}"><span class="fz_14">{title}</span></a></li>',
					data: [
						{title: "通讯录", key: "set_addr", bh: "set_addr_load"},
						{title: "日历", key: "set_calendar", bh: "set_calendar_load"},
						{title: "彩云网盘", key: "set_disk", bh: "set_disk_load"},
						{title: "云邮局", key: "set_mpost", bh: "set_mpost_load"}
					]
				}
			},
			onTabChange: function(data) {
			},
			container: "#mainContentBox"
		};
		
		if ($User.isNotChinaMobileUser()) {
			options.items.basicItems.data.pop();	// 无邮箱套餐
		}

		if ($User.isInternetUser()) {
			options.items.basicItems.data.splice(4, 1);	// 无手机通知
		}
		return options;
	}

	function onOpenPage(args) {
		var index, items;
		var config = FrameModel.getLinkByKey(args.name);
		if(!config || config.group !== "setting") {
			return;		// don't care
		}
		nav && nav.switchItem(args.name);
	}

	function onCloseTab(args){
		var config = FrameModel.getLinkByKey(args.name);
		if(config && config.group === "setting"){
			nav && nav.hide();
			$App.off("closeTab", onCloseTab);
		}
	}

	$(function(){
		$App.on("showPage", onOpenPage);
		$App.on("closeTab", onCloseTab);

		$App.on("showTab", function(args){
			if(!args || args.group !== "setting") {
				nav && nav.hide();
				return;		// don't care
			}
			//console.log("setting tab opened.");
			top.BH({key: "setting_load"});
			if($("#setNavcontainer").length === 0){
				nav = new M139.UI.TabNav(getOptions()).render();	// 新开页
			}
			nav && nav.show();
		});
	});
})();

/**
* @fileOverview 定义设置页基本参数的文件.
*/


    (function (jQuery, _, M139) {
        /**
        *@namespace 
        *设置页基本参数
        */
        M139.namespace('M2012.Settings.Initset.Model_New', Backbone.Model.extend(
        /**
        *@lends M2012.Settings.Initset.Model.prototype
        */
    {
    defaults: {
    },
    callApi: M139.RichMail.API.call,
	getUserinfo: function (callback) {
        this.callApi("guide:getUserinfo", {}, function (result) {
            if (callback) { callback(result.responseData); }
        });
    },
    gotoMail: function () {
        location.href = domainList.global.mail+"/login/sso.aspx?sid="+sid;
    },
    serverCheckAlias: function (alias, callback) {
        var data = { "alias": alias };
        M139.RichMail.API.call("user:checkAliasAction", data, function (response) {
            callback(response.responseData);
        });
    },
    clientCheckStr: function (text) {
        var message = this.messages.cantEdit;
        var resultCode = 0;
    //    console.log($.trim(text)=="");
        if ($.trim(text) == "") {
            message = this.messages.aliasStrLength; //空是允许的
            resultCode = 0;
        }else if (/\s/.test(text) ||                 //空格
                /[^A-Za-z0-9_\-\.]/.test(text)) {  //其他字符
            message = this.messages.aliasStrRange;
            resultCode = 1;
        }else if (/^[^A-Za-z]\w*/.test(text)) {
            message = this.messages.aliasEnStart; //开头非字母
            resultCode = 2;
        }else if (text.length < 5 || text.length > 15) {
            message = this.messages.aliasStrLength;
            resultCode = 3;
        }
        if (resultCode == 0) {
            return { code: "S_OK", msg: message, resultCode: resultCode };
        }else {
            return { code: "FA_FALSE", msg: message, resultCode: resultCode };
        };
    },
    setUserinfo: function (options, callback) {
        this.callApi("guide:setUserinfo", options, function (result) {
            if (callback) { callback(result.responseData); }
        });
    },
    messages: {
        saveSuccess: "您的设置已保存",
        saveError: "服务器繁忙，请稍后再试",
        aliasCanUse: "保护我的手机隐私",
        aliasStrRange: "别名支持字符范围：0~9,a~z,“.”,“_”,“-”",
        aliasEnStart: "必须以英文字母开头",
        aliasStrLength: "别名帐号为5-15个字符，以英文字母开头",
        sendNameError: "让发件人知道我是谁",
        picFormatError: "头像上传失败，支持小于1M的jpg、jpeg、gif、bmp、png图片",
        cantEdit: "只能设置一次，保存后不能修改",
        defaultAlias: "例:zhangsan"
    }
}))
    })(jQuery, _, M139);
/**
* @fileOverview 定义新手上路的文件.
*/
/**
*@namespace 
*新手引导
*/
(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    M139.namespace('M2012.Settings.Initset.View_New', superClass.extend(
    /**
    *@lends SpamView.prototype
    */
        {
        initialize: function () {
            this.model = new M2012.Settings.Initset.Model_New();
			this.firstFlag = true;
			this.secondFlag = true;
            return superClass.prototype.initialize.apply(this, arguments);
        },
        render: function () {
            var self = this;
			this.getUserinfo(function(){
				self.controlDialogShow();
			});
        //    this.getBirthday();
        //    this.initEvents();
            return superClass.prototype.render.apply(this, arguments);
        },
		htmlTemplate: {
			firstStep:['<div class="seltips-iframe">',
						'<div class="norTips"><span class="norTipsIco"><i class="i_ok"></i></span>',
							'<dl class="norTipsContent">',
								'<dt class="norTipsTitle">感谢您选择139邮箱！</dt>',
								'<dd class="norTipsLine gray">轻松两步让我们快速完成邮箱设置吧。</dd>',
							'</dl>',
						'</div>',
						'<div class="imgInfo"> <i class="imgLink i_1one"></i>',
							'<dl>',
								'<dt class="fz_14">第一步：设置邮箱别名帐号。</dt>',
								'<dd><P class="gray">可以用来登录邮箱，更有效保护个人隐私。</P>',
									'<div class="mt_20 mb_5">别名账号：<input id="mailAlias" type="text" value="例:zhangsan" class="iText gray" style="width: 111px;" /> @139.com </div>',
									'<p id="aliasTip" class="gray">以字母开头，5-15个字符。<span class="red">设置后不可修改删除</span></p>',
								'</dd>',
							'</dl>',
						'</div>',
						'<div class="ta_c pt_20">',
							'<a href="javascript:void(0)" id="firstStep" class="seltips-i-btn">下一步</a>',
						'</div>',
						'</div>'].join(""),
			secondStep: ['<div class="seltips-iframe">',
					'<div class="norTips"><span class="norTipsIco"><i class="i_ok"></i></span>',
						'<dl class="norTipsContent">',
							'<dt class="norTipsTitle">感谢您选择139邮箱！</dt>',
							'<dd class="norTipsLine gray">轻松两步让我们快速完成邮箱设置吧。</dd>',
						'</dl>',
					'</div>',
					'<div class="imgInfo"> <i class="imgLink i_2two"></i>',
						'<dl>',
							'<dt class="fz_14">第二步：完善个人资料设置。让邮箱更加好用。</dt>',
							'<dd><P class="gray">设置发信人姓名，让好友从众多联系人中快速认出你。</P>',
								'<div class="mt_20 mb_5">发件人姓名：<input type="text" id="sendName" value="例：张三" class="iText gray" /> </div>',
								'<p class="gray">设置生日，生日当天可收到意外惊喜和满满的祝福。</p>',
								'<div class="mt_5" id="info_birthday" style="height: 25px; margin-bottom: 5px;"><span class="fl">生日：</span>',
									/*'<div class="dropDown dropDown-year">',
										'<div class="dropDownA" href="javascript:void(0)"> <i class="i_triangle_d"></i>',
										'</div>',
										'<div class="dropDownText">1986</div>',
									'</div>',
									'<div class="dropDown dropDown-month">',
										'<div class="dropDownA" href="javascript:void(0)"> <i class="i_triangle_d"></i>',
										'</div>',
										'<div class="dropDownText">7</div>',
									'</div>',
									'<div class="dropDown dropDown-month">',
										'<div class="dropDownA" href="javascript:void(0)">',
											'<i class="i_triangle_d"></i>',
										'</div>',
										'<div class="dropDownText">7</div>',
									'</div>',*/
								'</div>',
								'<p class="red" id="birthdayTips" style="display: none;">生日选择不能超过今天，请重新选择</p>',
							'</dd>',
						'</dl>',
					'</div>',
					'<div class="ta_c pt_20">',
						'<a href="javascript:void(0)" id="secondStep" class="seltips-i-btn">下一步</a>',
					'</div>',
				'</div>'].join(""),
			thirdStep: ['<div class="seltips-iframe">',
					'<div class="norTips"><span class="norTipsIco"><i class="i_ok"></i></span>',
						'<dl class="norTipsContent">',
							'<dt class="norTipsTitle">感谢您选择139邮箱！</dt>',
							'<dd class="norTipsLine gray">立即进入邮箱体验吧。</dd>',
						'</dl>',
					'</div>',
					'<p class="fz_14 gray">最后，我们推荐您订阅云邮局优质服务与精品杂志，感受一站式生活体验！</p>',
					'<div class="seltips-i-app" id="initColumns">',
						'<span class="i_erweima"></span>',
	//					'<div class="imgInfo">',
	//		'<img class="imgLink" width="56" height="56" src="http://images.139cm.com/subscribe//upload/2013/12/04/266//images/ae81128c-ebf6-4aa8-a082-e42f0203f6a1.png">',			
	//						'<dl>',
	//							'<dt class="fz_14">',
	//								'<input type="checkbox" class="mr_5" />',			
	//								'<label for="">全国电影排期</label>',
	//							'</dt>',
	//							'<dd class="gray">电影爱好者的贴心助手</dd>',
	//						'</dl>',
	//					'</div>',
	//					'<div class="imgInfo">',
	//		'<img class="imgLink" width="56" height="56" src="http://images.139cm.com/subscribe//upload/2013/12/04/266//images/ae81128c-ebf6-4aa8-a082-e42f0203f6a1.png">',					
	//						'<dl>',
	//							'<dt class="fz_14">',
	//								'<input type="checkbox" class="mr_5" />',			
	//								'<label for="">全国电影排期</label>',
	//							'</dt>',
	//							'<dd class="gray">国内最新最热资讯</dd>',
	//						'</dl>',
	//					'</div>',
					'</div>',
					'<div class="ta_c pt_20">',
						'<a href="javascript:void(0)" id="thirdStep" class="seltips-i-btn">体验邮箱</a>',
					'</div>',
				'</div>'].join(""),
			fourthStep: [
                '<style type="text/css" media="screen">',
 		'.lottery_btnBox a{float: left;  width: 138px; height: 46px; padding-top: 136px; background: url(../images/201312/lottery.jpg) no-repeat 10px 7px; border: #fafafa solid 1px; font-size: 12px;  color:#999; text-align: center; margin-right: 20px; position: relative; *zoom:1;}',
 		'.lottery_btnBox a:hover{border-color:#dcdcdc; color:#999;}',
 		'.qiulingqu_ico{position:absolute; top:13px; right:-6px; width:53px; height: 27px; background: url(../images/201312/qiulingqu_24.png) no-repeat 0 0;_background: url(../images/201312/qiulingqu.png) no-repeat 0 0;}',
 	'</style>',
                '<div class="norTips">',
                 '<dl class="norTipsContent">',
                     '<dd class="norTipsLine">为欢迎您的到来，我们准备了开箱邮礼活动，不仅帮助您更好的使用邮箱，<br>还奉上丰厚好礼供主人您享用哦~</dd>',
                     '<dd class="fw_b" style="padding: 5px 0 17px;">试试点击宝箱，发现意想不到的惊喜！</dd>',
                     '<dd class="clearfix lottery_btnBox">',
                     	'<a style="background-position: -570px 7px;">',
                     		'<span style="color:#589db4" class="fw_b">常联系宝箱</span><br>',
                     		'邮件联系你我Ta',
                     	'</a>',
                     	'<a id="lotPassword" href="javascript:;" style="margin-right:0;background-position: -376px 7px;">',
                     		'<span style="color:#b0a632" class="fw_b">信息安全宝箱</span><br>',
                     		'设置密码保障信息安全',
                     		'<i class="qiulingqu_ico" style="right:0"></i>',
                     	'</a>',
                     	'<a style="background-position: -570px 7px;">',
                     		'<span style="color:#84a847" class="fw_b">心意传递宝箱</span><br>',
                     		'时刻贺卡传心意',
                     	'</a>',
                     '</dd>',
                 '</dl>',
                 '<p class="mt_5"><a id="l_football" href="javascript:$App.show(\'football\')">一键穿梭：带你走进足球的世界</a></p>',
             '</div>'].join("")
		},
		firstStep: function(){
			var self = this;
			this.firstStep = top.$Msg.showHTML(
				this.htmlTemplate.firstStep,
				{
					title : "温馨提示",
					width : 430
				}
			).on("close",function(){
			    self.changeShownewuserguide();
			    self.fourthStep();
			});
			BH('guide_success_popUp');
		},
		secondStep: function(){
			var self = this;
			this.secondStep = top.$Msg.showHTML(
				this.htmlTemplate.secondStep,
				{
					title : "温馨提示",
					width : 430
				}
			).on("close",function(){
			    self.changeShownewuserguide();
			    self.fourthStep();
			});
			BH('guide_success_popUp');
		},
		thirdStep: function(){
		    var self = this;
            
		    var htmlTemplate = this.htmlTemplate.thirdStep;
		    if (self.allowShowLottery()) {
		        htmlTemplate = htmlTemplate.replace(/体验邮箱/, "参与活动抽大奖");
		    }
			this.thirdStep = top.$Msg.showHTML(
				htmlTemplate,
				{
					title : "温馨提示",
					width : 430
				}
			).on("close",function(){
			    self.changeShownewuserguide();
			    self.fourthStep();
			});
			BH('guide_success_popUp');
		},
		fourthStep: function () {
		    var self = this;
		    if (self.closeNotByX) {
		        self.closeNotByX = false;
		        return;
		    }
		    var allowShowLottery = self.allowShowLottery();		   
		    if (allowShowLottery) {
		        top.addBehaviorExt({ actionId: 8000, thingId: 3729 });
		        M139.RichMail.API.call("setting:examinePwdStatus", '', function (res) {
		            res = res.responseData;
		            if (res && res.code == "S_OK") {
		                self.fourthStep = top.$Msg.showHTML(
                            self.htmlTemplate.fourthStep,
                            {
                                title: "尊敬的邮箱主人，我们已恭候多时啦！",
                                width: 520
                            });
                        //url地址设置，区分有没有设置密码的用户
		                //1：设置过密码，在邮箱内部新开Tab页面，然后请求资格审查接口。
		                //2：没设置过密码，浏览器新开窗口，然后请求资格审查接口
		                self.showLottery = res['var']['pwdStatus'];
		                var NoSetedUrl = "https://www.cmpassport.com/umc/firstuse/?from=3&appid=63&backurl=" +
		            encodeURIComponent(location.origin + location.pathname + '?sid=' + sid + '&id=51');
		                var setedUrl = "javascript:$App.show('lottery',{originID:3})";
		                if (self.showLottery == 1) {
		                    $('#lotPassword')[0].href = setedUrl;
		                } else if (self.showLottery == 2) {
		                    $('#lotPassword')[0].href = NoSetedUrl;
		                    $('#lotPassword')[0].target = "_blank";
		                }
		                //资格审查，用于给中间件记录一次抽奖
		                $('#lotPassword').click(function () {
		                    self.lotteryRecord(); 
		                    top.addBehaviorExt({ actionId: 8000, thingId: 3227 });
		                });
                        //关闭弹窗
		                $('#lotCompose,#lotCard,#lotPassword,#l_football').click(function () {
		                    self.fourthStep.close();
		                });
		            }

		        }, { method: "GET" });


		       

		    }
		},

		allowShowLottery: function () {
		    var self = this;
		    var deadTime = new Date(2014, 5, 31),
                validRegist = new Date(2014, 0, 1)
		    var now = top.M139.Date.getServerTime();
		    var registTime = $App.getConfig('UserData').registDate;
		    registTime = registTime ? $Date.parse(registTime) : new Date(2014, 5, 31);
		    var isCM = top.$User.isChinaMobileUser();  //是否移动用户
		    //1.活动有效期2014.6.30， 2. 用户是2014.1.1注册的, 3.开关打开,  4.是移动用户
		    if (SiteConfig.showLottery && now < deadTime && validRegist < registTime && isCM) {
		        return true;
		    } else {
		        return false;
		    }
		},

        //记录一次
		lotteryRecord: function () {
		    var optionStr = 'versionID=1&originID=3';
		    top.M139.RichMail.API.call("setting:examineShowStatus", optionStr, function (res) { });
		},
		controlDialogShow: function(){
			var self=  this;
		//	console.log(self.model.get("datasource"));
			//显示第一个框子，并实现逻辑判断
			this.firstStep();
			this.initAndcheckAlias();
			$("#firstStep").click(function () {
			    self.closeNotByX = true;  //标识，区分关闭窗口是通过 “下一步”还是“关闭按钮”
				if(!self.firstFlag){
					return ;//验证不通过的时候
				}
				self.firstStep.close();
				//判断别名，并设置别名
				self.setUserinfo("alias");
				//异步加载生日组件的js
				M139.core.utilCreateScriptTag({
                    id:"birthday",
                    src:"/m2012/js/richmail/settings/m2012.settings.view.birthday.js",
                    charset:"utf-8"
                },function(){
                    self.secondStep();
					self.initAndsetBirthday();
					$("#secondStep").click(function () {
					    self.closeNotByX = true;  //标识，区分关闭窗口是通过 “下一步”还是“关闭按钮”
						self.birthdayYanzheng();
						if(!self.secondFlag){
							return ;//验证不通过的时候
						}
						self.secondStep.close();
						//判断并设置
						self.setUserinfo("addressorName");
						self.thirdStep();
						self.initAndsetConfigColumns();
						$("#thirdStep").click(function () {
						    //判断并设置
						    if (self.allowShowLottery()) {
						        self.showLottery = true;
						    }
							self.setUserinfo("columnIds");
							
							self.thirdStep.close();
							self.changeShownewuserguide();
							//dosomething
						//	console.log("123321");
							//self.skipToMail();
						});
					});
                });
			});
		},
		changeShownewuserguide: function(){
			M139.RichMail.API.call("user:setUserConfigInfo", { configTag: "shownewuserguide", type: "int", configValue: 0},function(res){
			//	console.log(res);
			});
		},
        initAndsetConfigColumns: function () {//拼装订阅的html，input默认勾选。返回组装的html和id数组
			var tmp = ['<div class="imgInfo">',
							'<img class="imgLink" width="56" height="56" src="{imgUrl}">',		
							'<dl>',
								'<dt class="fz_14">',
									'<input type="checkbox" id="rss{id}" checked="checked" data-id="{id}" class="mr_5" />',			
									'<label for="rss{id}">{name}</label>',
								'</dt>',
								'<dd class="gray">{description}</dd>',
							'</dl>',
						'</div>'].join("");
			var data = this.model.get("datasource");
			var column = data.configColumns;
            var columnLen = column.length;
            var idArr = [];
            var htmlArr = [];
			column[0].description = '国内最新最热资讯';
			column[1].description = '电影爱好者的贴心助手';
			column[0].imgUrl = '/m2012/images/module/registerGuide/movies.png';
			column[1].imgUrl = '/m2012/images/module/registerGuide/news.png';
            for (var i = 0; i < columnLen; i++) {
                var id = column[i].id;
				var imgUrl = "http://images.139cm.com/subscribe//upload/2013/12/04/266//images/ae81128c-ebf6-4aa8-a082-e42f0203f6a1.png";
            //    var html = '<input checked type="checkbox" id="rss' + id + '" data-id="' + id + '"><label for="rss' + id + '">' + column[i].name + '</label>';
				var html = tmp.replace(/\{id\}/img, id).replace(/\{name\}/img, column[i].name).replace(/\{imgUrl\}/, column[i].imgUrl).replace("{description}",column[i].description);
                idArr.push(id);
                htmlArr.push(html);
            }
            var html2 = htmlArr.join("");
            var obj = {
                html: html2,
                idArr: idArr
            }
			$("#initColumns").append(html2);
		//    return obj;
        },
		getUserinfo: function (callback) {//获取接口返回的数据，把数据保存到model里，填充页面上的初始数据
            var self = this;
            this.model.getUserinfo(function (result) {
                if (result.code == "S_OK") {
                    var data = result["var"];
					self.model.set({datasource : data});
					callback && callback();
                };
            });
        },
        initAndsetBirthday: function () {//生日组件
            var self = this;
			var data = self.model.get("datasource");
            self.datePicker = new M2012.Settings.View.Birthday({
                container: $("#info_birthday"),
			//	date : data.birthday || $Date.format("yyyy-MM-dd",new Date()),
                orderby: "desc",
                check: true
            }).on("ymdchange",function(){
				self.birthdayYanzheng();
				if(!self.secondFlag){
					$("#birthdayTips").show();
				}else{
					$("#birthdayTips").hide();
				}
			});
			
        //    console.log(self.datePicker);
			this.sendName = $("#sendName");
			if(data.addressorName != ""){
				this.sendName.val(data.addressorName);
				this.sendName.removeClass("gray");
			}
			this.sendName.focus(function () {
				if($(this).val() == "例：张三"){
					$(this).val("");
				}
            });
        },
		birthdayYanzheng: function(){
			//生日提示
			var self = this;
			var year = self.datePicker.year.text();
			var month = self.datePicker.month.text();
			var day = self.datePicker.day.text();
			month = parseInt(month) < 10 && month.length < 2 ? "0" + month : month;
			day = parseInt(day) < 10 && day.length < 2 ? "0" + day : day;
			var birthday = year + month + day;
			birthday = birthday == "年月日" ? "" : birthday;
			if(!isNaN(birthday)){
				if(new Date(year,month - 1,day).getTime() > new Date().getTime()){
					self.secondFlag = false;
				}else{
					self.secondFlag = true;
				}
			}
		},
        skipToMail: function () {//跳过直接进入邮箱
			this.thirdStep.close();
		//	location.href = location.href;
        //    var self = this;
        //    this.skipStep.click(function () {
        //        self.model.gotoMail();
        //   })
        },
        checkData: function (obj) {//检查别名和发件人姓名格式
            var self = this;
			/*
			别名验证*/
			if(obj.yijizhuce && typeof obj.inputEl === "string"){
				$("#" + obj.tipsEl).addClass("red").html(obj.inputEl);
				self.firstFlag = false;
				return;
			}
			
            var text = obj.inputEl.val();
            var clientResult = self.model.clientCheckStr(text);
            var code = obj.type == "alias" ? clientResult.code != "S_OK" : clientResult.resultCode == 1;

            if (code) {
                $("#" + obj.tipsEl).addClass("red").html(clientResult.msg);
                self.firstFlag = false;
            } else {
                $("#" + obj.tipsEl).html(clientResult.msg);
                self.firstFlag = true;
            }
        },
        initAndcheckAlias: function () {//即时触发别名验证
            var self = this;
			var flag = false;
			this.mailAlias = $("#mailAlias");
			var data = self.model.get("datasource");
			if (data.alias != "") {
				this.mailAlias.val(data.alias);
				this.mailAlias.attr("disabled", true);
			//	this.mailAlias.prev().prev().css("background", "#ebebe4");
			} else {
				this.mailAlias.val(self.model.messages.defaultAlias).addClass("gray");
			}
            this.mailAlias.focus(function() {	
                var alias = $(this).val();
                if (alias == self.model.messages.defaultAlias) {
                    $(this).val("");
					self.firstFlag = false;
                }
                if ($(this).val() == "") {
                    $("#aliasTip").addClass("red").html(self.model.messages.aliasStrLength);
					self.firstFlag = false;
                }
            });

            this.mailAlias.keyup(function () {
                $(this).removeClass("gray");
                var obj = {
                    type: "alias",
                    tipsEl: "aliasTip",
                    inputEl: $(this)
                }
                self.checkData(obj);
            });

            this.mailAlias.blur(function () {
                var alias = self.mailAlias.val();
                if (alias == "") {
                    $(this).val(self.model.messages.defaultAlias);
                    $(this).addClass("gray");
                    return
                }
                self.model.serverCheckAlias(alias, function (result) {
                //    console.log(result)
				/*
				别名验证*/
				
					if(result.msg == "此别名已被注册，请重新输入！"){
						self.checkData({
							type: "alias",
							tipsEl: "aliasTip",
							inputEl: "此别名已被注册，请重新输入！",
							yijizhuce : true
						});
					}else{
						top.addBehaviorExt({ actionId: "105762"});
					}
				
                });
            });
        },
        setUserinfo: function (str) {//设置个人信息
            var self = this;
			var options = {};
			options.alias = this.mailAlias.val().trim();
			if(str == "alias"){
				//do nothing
				BH('guide_success_alians');
			}else if(str == "addressorName"){
				var year = self.datePicker.year.text();
				var month = self.datePicker.month.text();
				var day = self.datePicker.day.text();
				month = parseInt(month) < 10 && month.length < 2 ? "0" + month : month;
				day = parseInt(day) < 10 && day.length < 2 ? "0" + day : day;
				var birthday = year + month + day;
				birthday = birthday == "年月日" ? "" : birthday;
				
				options.addressorName = this.sendName.val() ? this.sendName.val() : " ";
				options.birthday = birthday;
				BH('guide_success_name');
				BH('guide_success_birthday');
			}else if(str == "columnIds"){
				options.columnIds = this.setColumns();
				BH('guide_success_subscribe');
			}
			/*
            var options = {
                alias: alias,
                addressorName: addressorName,
                birthday: birthday,
                sex: sex,
                columnIds: configColumns,
                imgUrl: imgUrl
            };*/
            this.model.setUserinfo(options, function (result) {

                if (result && result.code == "S_OK") {
                    if (str == "columnIds" && !self.showLottery) {
						setTimeout(function () {
							self.model.gotoMail();
						}, 1000);
					}
                } else {
                    $Msg.alert(self.model.messages.saveError);

                }
            });

        },
        setColumns: function () {
            var self = this;
            var arr = [];
            var configColumns = "";
            $("#initColumns").find("input[data-id]").each(function (i, n) {
                if ($(this).attr("checked")) {
                    arr.push($(this).attr("data-id"));
                }
            });
            configColumns = arr.join(",");
            return configColumns;
        }
    })
    );
    $(function () {
	//	var isShowFlag = top.$App.getConfig('UserData').mainUserConfig["shownewuserguide"] && top.$App.getConfig('UserData').mainUserConfig["shownewuserguide"][0];
		$App.on("infoSetLoad", function(data){
		//	console.log(data); 
			var isShowFlag = data["userMainData"]["mainUserConfig"]["shownewuserguide"] && data["userMainData"]["mainUserConfig"]["shownewuserguide"][0];
			if(isShowFlag == "1"){ //为1说明是新注册的用户
				new M2012.Settings.Initset.View_New().render();
			}
		});
		
    })
})(jQuery, _, M139);



﻿/**   
* @fileOverview 任务邮件提醒
*/
(function (jQuery, _, M139) {
    
    /**
    * @namespace 
    * 邮件列表页、读信页任务邮件提醒
    */

    M139.namespace("M2012.Remind.Model",Backbone.Model.extend({
    
        callApi: M139.RichMail.API.call,

        setTask: function(options){
            var mid = this.get('mid');
            var taskDate = this.get('taskDate') || 0;
            var defaults = {
                type : 'taskFlag',
                value : 1,
                time : taskDate,
                ids : [mid]
            };
            var requestData = $.extend(defaults,options.requestData);
            this.callApi("mbox:setTaskMessages", requestData, function (result) {
                var response = result.responseData;
                if(response && response.code == 'S_OK'){
                    var data = response['var'];
                    if(data > 0){
                        options.success && options.success();
                    }else{
                        options.error && options.error();
                    }
                }else{
                    options.error && options.error();
                }
            });
        },
        
        addRemind:function(options){
            this.setRemind('calendar:addMailCalendar',options);
        },
        
        editRemind:function(options){
            this.setRemind('calendar:updateMailCalendar',options);
        },
        
        /** 109 表示日程不存在*/
        setRemind: function(api,options){
            var self = this;
            var defaults = {
                comeFrom : 0,
                recMySms : 1,
                startTime : 1630,
                endTime : 1630,
                content : '邮件内容',
                title : '邮件主题',
                dateFlag : '2013-04-19',
                endDateFlag : '2013-04-19',
                recMobile : $User.getShortUid(),
                dateDesc : '2013-04-19 下午 16:30',
                enable : 1,
                mid : self.get('mid')
            };
            var requestData = $.extend(defaults,options.requestData);
            this.callApi(api, requestData, function (result) {
                var response = result.responseData;
                if(response && (response.code == 'S_OK' || response.errorCode == 109)){
                    options.success && options.success();
                }else{
                    options.error && options.error();
                }
            });
        },
        
        getRemind:function(options){
            var self = this;
            var defaults = {
                comeFrom : 0,
                mid : self.get('mid')
            };
            var requestData = $.extend(defaults,options.requestData);
            this.callApi('calendar:getMailCalendar', requestData, function (result) {
                var response = result.responseData;
                if(response && (response.code == 'S_OK' || response.errorCode == 109)){
                    var data = {content:''};
                    if(response['var']){
                        data = response['var'];
                    }
                    options.success && options.success(data);
                }else{
                    options.error && options.error();
                }
            });
        },
        
        deleteRemind:function(options){
            var self = this;
            var defaults = {
                comeFrom : 0,
                mid : self.get('mid'),
                actionType : 0
            };
            var requestData = $.extend(defaults,options.requestData);
            this.callApi('calendar:delMailCalendar', requestData, function (result) {
                var response = result.responseData;
                if(response && (response.code == 'S_OK' || response.errorCode == 109)){
                    options.success && options.success();
                }else{
                    options.error && options.error();
                }
            });
        },

        batchDelRemind: function(options) {
            var requestData = {
                comeFrom: 0,
                mids: options.midArr.join(',')
            }

            this.callApi('calendar:cancelMailCalendars', requestData, function (result) {
                var response = result.responseData;
                if(response && (response.code == 'S_OK' || response.errorCode == 109)){
                    options.success && options.success();
                }else{
                    options.error && options.error();
                }
            });
        }

}));

})(jQuery, _, M139);

/**
* @fileOverview 任务邮件提醒视图/单例
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    
    /**
    * @namespace 
    * 邮件列表页、读信页任务邮件提醒
    */   
         
    M139.namespace('M2012.Remind.View', superClass.extend({

        /**
        *@lends M2012.Remind.View.prototype
        */

    el:"",
    
    template:{

        dropMenuNew: [  '<div id="remindDropMenu" class="gtasks-new-box tips tipsNoshadow" style="width:318px;position:absolute;z-index:9999">',
                            '<div class="tipsRight  diamond" style="right:-11px"></div>',
                            '<div class="gtasks-boxiframebox">',
                                '<div class="gtasks-boxIframebox-minwarp">',
                                    '<h3 class="grasks-boxIframebox-title" id="remind_time"><strong>处理此任务</strong></h3>',                       
                                    '<p class="grasks-boxIframebox-title-min" id="remind_sms" style="display:none"><strong>短信提醒时间：</strong><span name="smsremindtime"></span></p>',                                    
                                    '<p class="grasks-boxIframebox-title-min" id="remind_content" style="display:none"><strong>短信提醒内容：</strong><span name="smscontent"></span></p>',
                                '</div>',
                                '<div class="grasks-boxIframebox-btnwarp"><a class="btn" href="javascript:" name="finish">标记完成</a></div>',
                            '</div>',
                            '<div class="boxIframeBtn">',
                                '<span class="bibText"></span>',
                                '<span class="bibBtn">',
                                    '<a class="btnNormal" href="javascript:void(0)" name="edit"><span>修改</span></a>&nbsp;',
                                    '<a class="btnNormal" href="javascript:void(0)" name="cancel"><span>取消任务</span></a>',
                                '</span>',
                            '</div>',
                        '</div>'].join(""),
        item:['<li>',
                '<a href="javascript:;" id="{id}" title="{text}">',
                    '<span class="text">{text}</span>',
                '</a>',
             '</li>'].join(''),

        /** 下拉菜单 */
        menuList:{
            'add':['addtask','addremind'],
            'update':['finish','addremind','canceltask'], //添加
            'hasremind':['finish','updateremind','cancelremind','canceltask'], //修改
            'finish':['addtaskagain','addremindagain','canceltask'] //完成
        },
        
        /** 下拉菜单 联通、电信和无手机号码用户 */
        otherMenuList:{
            'add':['addtask'],
            'update':['finish','canceltask'], 
            'hasremind':['finish','canceltask'], //修改
            'finish':['addtaskagain','canceltask'] 
        },

        popTips:['<span id="taskPopTips" class="msg msgYellow" style="{1}">处理时间：<span class="c_ff6600">{0}</span></span>'].join(''),
        tips:{
            'addtasksucc': '添加待办任务成功',
            'addremindsucc':'添加待办任务成功',
            'updateremindsucc':'待办任务修改成功',
            'markfinishsucc':'待办任务标记完成',
            'canceltasksucc': '待办任务取消成功',
            'cancelremindsucc':'待办任务取消成功',
            'fail': '待办任务标记失败，请重试',
            'evocationSuccess':'添加待办任务成功'
        }
    },
    
    initialize: function(options){
        var self = this;
        this.model = new M2012.Remind.Model();
        this.initData = options;
        this.initEvent();
        $App.on('evocationRemind', function (option) {
            self.remindContent = option.content || '请输入提醒内容';
            self.popType = option.type;
            self.showEditor(option);
        })
        return superClass.prototype.initialize.apply(this, arguments);
    },
    
    showTips:function(msgKey,options){
        var msg = this.template.tips[msgKey];
        var defaults = {
            prior:true,
            delay:3000
        };
        options = $.extend(defaults,options);
        M139.UI.TipMessage.show(msg,options);
    },

    showFailTips:function(){
        var self = this;
        M139.UI.TipMessage.show(self.template.tips.fail,{
            colour:'msgRed',
            delay:3000
        });
    },
    
    refreshTaskCount: function(todoCount,totalCount){
        var folder = appView.getView('folder');
        folder.refreshTaskCount(todoCount,totalCount);
    },
    
    /** 显示编辑框 */
    showEditor:function(options){
        var self = this;
        if(!this.dialog){
            this.dialog =  $Msg.open({
                url:'/m2012/html/mailremind.html?sid=' + top.sid,
                dialogTitle:options.title,
                width:486,
                height: $B.is.ie && $B.getVersion() < 8 ? 166 : 163,
                onclose:function(){
                    self.dialog = null;
                }
            });
        }
        options.callback && options.callback();
    },
    
    changeTaskIcon:function(status,taskDate){
        if ($App.getCurrentTab().name.indexOf('readmail_')>-1) {
            var _el = $('#'+$App.getCurrentTab().name).find('a[name=mailtask]');
            var span = _el;
        } else {
            var _el = this.el.find('a[name=mailtask]');
            var span = _el.find('span');
        }
        
        var curStatus = span.attr('status');
        var css = {
            'add' : 'i_tx_n',
            'update' : 'i_tx_nb', 
            'finish' : 'i_tx_ng'
        };
        var iClassMap = { //样式
            'add':'i_cDo',
            'update':'i_cDon',
            'finish':'i_cDoy'
        };
        if ($App.getCurrentTab().name.indexOf('readmail_') == -1) {
            _el.removeClass(css[curStatus]).addClass(css[status]);
        } else {
            //var itag = _el.find('i'); //读信页已去掉i标签
            _el.removeClass(iClassMap[curStatus]).addClass(iClassMap[status]);
        }
        span.attr('status',status).attr('taskdate',taskDate);
    },
    
    /** 添加任务 */
    addTask:function(callback){
        var self = this;
        self.model.setTask({
            requestData : {
                value: 1
            },
            success : function(){
                self.changeTaskIcon('update',self.model.get('taskDate'));
                callback && callback();
                $App.trigger("showMailbox", { comefrom: "commandCallback" });
                $App.trigger("refreshSplitView");//刷新分栏
                $App.clearTabCache("readmail_" + self.model.get('mid'));
            },
            error : function(){
                self.showFailTips();
            }
        });
    },

    /** 取消任务 */
    cancelTask:function(callback){
        var self = this;
        var taskDate = self.model.get('taskDate');
        //if(taskDate && taskDate > 0){
            this.model.deleteRemind({ //同时删除日程提醒
                success : function(){
                    setTask();
                },
                error : function(){
                    self.showFailTips();
                }
            });
        //}else{
            //setTask();
        //}
        
        function setTask(){
            self.model.setTask({
                requestData : {
                    value: 0, 
                    time: 0
                },
                success : function(){
                    self.model.set({'taskDate':0});
                    self.changeTaskIcon('add',0);
                    callback && callback();
                    $App.trigger("showMailbox", { comefrom: "commandCallback" });
                    $App.trigger("refreshSplitView");//刷新分栏
                    $App.clearTabCache("readmail_" + self.model.get('mid'));
                },
                error : function(){
                    self.showFailTips();
                }
            });
        }
    },
    
    /** 添加提醒 */
    addRemind:function(){
        var self = this;
        this.model.set("recMySms",0);
        this.model.set("recMyCanl",0);
        self.showEditor({title:'待办任务'});
    },

    /** 修改提醒 */
    updateRemind:function(){
        var self = this;
        self.model.getRemind({
            requestData : {},
            success: function (data) {
                var recMySms = data.isSaveSms || 0;
                var recMyCanl = data.isSaveCalendar || 0;
                self.model.set("recMySms",recMySms);
                self.model.set("recMyCanl",recMyCanl);
                self.remindContent = data.smsContent;
                self.showEditor({title:'修改任务'});
            },
            error : function(){
                self.showFailTips();
            }
        });
    },

    /** 取消提醒 */
    cancelRemind:function(){
        var self = this;
        this.model.deleteRemind({
            success : function(){
                self.model.setTask({
                    requestData : {
                        value: 1, 
                        time: 0
                    },
                    success : function(){
                        self.model.set({taskDate:0});
                        self.changeTaskIcon('update',0);
                        top.BH('cancel_remindtaskmail_ok');
                        self.showTips('cancelremindsucc');
                        $App.trigger("refreshSplitView");//刷新分栏
                        $App.clearTabCache("readmail_" + self.model.get('mid'));
                    },
                    error : function(){
                        self.showFailTips();
                    }
                });
            },
            error : function(){
                self.showFailTips();
            }
        });
    },
    
    /** 标记已完成 */
    markFinish:function(){
        var self = this;
        var taskDate = self.model.get('taskDate');
        if(taskDate > 0){
            var data=this.model.get("calendarData");
            data.title=data.content;
            data.enable=0;
            this.model.editRemind({"requestData":data});
            
            self.model.deleteRemind({ //同时删除日程提醒
                success : function(){
                    setTask();
                },
                error : function(){
                    self.showFailTips();
                }
            });
        }else{
            setTask();
        }
        function setTask(){
            self.model.setTask({
                requestData : {
                    value: 2, 
                    time: 0
                },
                success : function(){
                    self.model.set({taskDate:0});
                    self.changeTaskIcon('finish',0);
                    top.BH('markfinish_ok');
                    $App.trigger("showMailbox", { comefrom: "commandCallback" });
                    $App.trigger("refreshSplitView");//刷新分栏
                    $App.clearTabCache("readmail_" + self.model.get('mid'));
                    self.refreshTaskCount(-1,0);
                    self.showTips('markfinishsucc');
                    // 触发会话邮件待办图标及DOM属性（status/taskDate/class）更新
                    $App.trigger('covMailRemindRender', {taskFlag: 2, taskDate: 0, mid: self.model.get('mid')})
                },
                error : function(){
                    self.showFailTips();
                }
            });
        }
    },
    
    /** 下拉菜单 */
    showDropMenu: function () {

        var self = this,
            $el = this.el,
            temp = this.template.dropMenuNew,
            itemTemp = this.template.item,
            status = this.model.get('status'),
            itemsHtml = [],
            html = temp;
  
        if (status == "add") {
            // 因为所有实例共用一个model所以先清除
            this.model.set('smsTime', null);
            this.doCommand("add");
            return; 
        }


        if($('#remindDropMenu').length==0){
            $('body').append(html);
        }

        if (status == "finish") {
  
            $("#remind_time").html("已处理此任务");
            $("#remindDropMenu [name=finish]").remove();
            $("#remindDropMenu [name=sp_line]").remove();
            $("#remindDropMenu [name=edit]").remove();

            self.setDropMenuPosition();
            self.itemEvent();
            return;
                
        }
        this.model.getRemind({
            requestData: {},
            success: function (data) {

                self.model.set("calendarData",data);

                // 因为所有实例共用一个model所以先清除
                self.model.set('smsTime', null);

                if (data) {

                    //补零
                    // var timeSpan = data.startTime;
                    // if (data.startTime.length == 1) { timeSpan = "000" + data.startTime; }
                    // if (data.startTime.length == 2) { timeSpan = "00" + data.startTime; }
                    // if(data.startTime.length==3){timeSpan="0"+data.startTime;}
                    // timeSpan=timeSpan.substr(0,2)+":"+timeSpan.substr(2);

                    var remindDate = data.dateFlag;
                    if (!remindDate) {
                        remindDate = self.model.get('taskDate');
                        remindDate = remindDate ? new Date(remindDate * 1000).format("yyyy-MM-dd") : '';
                    }
                    $("#remind_time").html((remindDate ? remindDate : '') + "&nbsp;处理此任务");

                    // 设置model中taskDate
                    // 不再从日历接口获取taskDate，直接从邮件列表取（没有勾选日历接口不会反悔dateFlag）
                    /*if (data.dateFlag) {
                        var dealTime = new Date(data.dateFlag+" "+timeSpan+":00");
                        self.model.set("taskDate",Math.round(dealTime.getTime()/1000));
                    }*/

                    // 处理短信提示内容
                    if (data.smsSendTime) {
                        var enableSms=data.isSaveSms;
                        self.model.set('smsTime', data.smsSendTime);
                        $("#remind_sms [name=smsremindtime]").text(data.smsSendTime)
                        $("#remind_sms").css("display", enableSms ? "block" : "none");
                        $("#remind_content").css("display", enableSms ? "block" : "none");                    
                        $("#remind_content [name=smscontent]").html(M139.Text.Html.encode(data.smsContent));
                    }                    
                }

                self.setDropMenuPosition();
                self.itemEvent();
            },
            error: function () {
                self.showFailTips();
            }
        });
    },
    
    setDropMenuPosition: function(){
        var offset = this.getIcoOffset();
        var top = offset.top - 10;
        var left = offset.left - 342;
        
        var remindDropMenuEl = $('#remindDropMenu');
        var menuHeight = remindDropMenuEl.height();
        var bodyHeight = $('body').height();
        
        if((top + menuHeight) > bodyHeight){
            top = top - menuHeight + 25;
            remindDropMenuEl.find('.diamond').css('top', menuHeight - 18);
        }

        remindDropMenuEl.css({top:top,left:left}).show();
    },
    
    /** 关闭菜单 */
    closeDropMenu:function(){
        $('#remindDropMenu').remove();
    },
    
    dropMenuEvent:function(){
        var self = this;
        var $el = this.el;
        
        $('#remindDropMenu').hover(function(){
            if(self.timer) clearTimeout(self.timer);
        },function(){
            self.timer = setTimeout(function(){
                self.closeDropMenu();
            },1000);
        });
        
        $D.bindAutoHide({
            action: "click",
            element: $('#remindDropMenu')[0],
            stopEvent: true,
            callback: function () {
               $(this.element).remove();
            }
        });        
    },

    doCommand:function(name){
        var self=this;
        switch (name) {
            case "add":
                this.addRemind(function(){
                    top.BH('add_taskmail_ok'); //快捷添加待办任务成功 
                    self.refreshTaskCount(1,1);
                    self.showTips('addtasksucc');
                }); //点亮图标，下拉 添加提醒
                break;
            case "edit":
                this.updateRemind();
                if (top.$App.isReadSessionMail()) {
                    top.BH('cMail_tab_changeTask');
                } else {
                    top.BH('task_edit');  
                }
                break;
            case "cancel":
                if (top.$App.isReadSessionMail()) {
                    top.BH('cMail_tab_cancelTask');
                }
                this.cancelTask(function(){
                    self.showTips('canceltasksucc');
                   
                    var status = self.model.get('status');
                    if(status == 'finish'){
                        top.BH('task_cancel_complete'); //对已完成邮件取消任务邮件 取消待办任务
                        self.refreshTaskCount(0,-1);
                    }else{
                        top.BH('task_cancel'); //取消待办任务成功
                        self.refreshTaskCount(-1,-1);
                    }

                    // 触发会话邮件待办图标及DOM属性（status/taskDate/class）更新
                    $App.trigger('covMailRemindRender', {taskFlag: 0, taskDate: 0, mid: self.model.get('mid')})
                });
                //this.cancelRemind();
                break;
            case "finish":
                this.markFinish();
                top.$App.isReadSessionMail() ? BH('cMail_tab_finishTask') : BH("task_complete");                
                break;
        }
    },
    
    itemEvent: function () {
        
        var self = this;
        var $el = this.el;
 
        $('#remindDropMenu a').unbind('click').click(function(){
            var name = $(this).attr('name');
            
            self.doCommand(name);
            self.closeDropMenu();
        });
    },

    getIcoOffset:function(){
        return this.el.find('a[name=mailtask]').offset();
    },

    /** 处理时间提示 time 毫秒*/
    getPopTipsHtml:function(time){
        var t = time ? time : null;
        t = t ? new Date(t) : new Date();
        t = t.format('yyyy-MM-dd hh:mm');
        var temp = this.template.popTips;
        var icoPosition = this.getIcoOffset();
        var style = "z-index:999;position:absolute;left:{0}px;top:{1}px;";
        style = $T.Utils.format(style,[icoPosition.left - 210,icoPosition.top]);
        return $T.Utils.format(temp,[t,style]);
    },

    /** 定义事件 */
    addEvent:function($el){
        $('#taskPopTips').remove();
        var self = this;
        var $el = $el || $("#div_maillist");
        
        //点击图标
        $el.find("a[name=mailtask]").unbind('click').click(function(e){
                top.$App.isReadSessionMail() && top.BH('cMail_tab_remind');
                self.startEvent($(this));
                self.menuEvent(); //下拉菜单
        });
    },

    /** 入口事件 */
    startEvent:function(el){ //a
        var self = this;
        // 读信页调整功能icons结构，直接把任务相关数据绑定在el（a标签）上
        var span = el.find('span').length ? el.find('span') : el;
        var mid = span.attr("mid");
        var status = span.attr('status');
        var taskDate = span.attr('taskDate');
        
        if(status == 'add'){ //由于后台随机给邮件添加了taskDate，做测试数据
            taskDate = 0;
        }
        
        if(status == 'update' && taskDate > 0){
            status = 'hasremind';
        }
        
        var thisel = el.parent(); //div
        this.model.set({
            mid:mid,
            status:status,
            taskDate:taskDate,
            listData:self.getMailData(span),
            el:thisel
        });
        this.el = thisel;
    },
    
    getMailData:function(spanel){
        var data = $App.getMailDataByMid(spanel.attr('mid'));
        if(!data){
            data = {
                from: spanel.attr('from'),
                sendDate: spanel.attr('senddate'),
                subject: spanel.attr('subject')
            };
        }
        return data;
    },

    /** 下拉事件 */
    menuEvent:function(){
        BH("task_click");
        this.showDropMenu();
        this.dropMenuEvent();
    },
    
    /** 组装输出数据 */
    getRenderData:function(){
        var data = {
            listData:this.model.get('listData'),
            status:this.model.get('status'),
            mid:this.model.get('mid'),
            fid: this.model.get('fid'),
            recMySms:this.model.get("recMySms"),
            recMyCanl: this.model.get("recMyCanl"),
            dealTime:this.model.get('taskDate') * 1000,
            smsTime: this.model.get('smsTime')
        };
        if(this.remindContent){
            data.content = this.remindContent;
            this.remindContent = null;
            data.type = this.popType;
            this.popType = null;
        }
        return data;
    },
    
    /** 保存提醒内容 */
    saveRemind: function(data){
        
        var self = this;
        if(self.waiting) return;
        self.waiting = true;

        var smstime = data.smsTime;
        var t = $Date.parse(data.time); //毫秒
        var date = new Date(t);
        var dateFlag = date.format('yyyy-MM-dd');
        var endDateFlag = date.setDate(date.getDate() + 1);
        var taskDate = parseInt(t.getTime()/1000); //秒

        endDateFlag = new Date(endDateFlag).format('yyyy-MM-dd');
        self.model.set({taskDate:taskDate});

        var options = {
            requestData : {
                startTime : '0000',
                endTime : '0000',
                content : data.content,
                title : data.subject.length > 100 ? data.subject.substring(0,100) : data.subject ,
                dateFlag : dateFlag,
                endDateFlag : endDateFlag,
                dateDesc : date.format('yyyy年MM月dd日 hh:mm'),
                smsSendTime: smstime ? new Date(smstime).format('yyyy-MM-dd hh:mm:ss') : 0,
                isSaveCalendar: data.isSaveCalendar,
                isSaveSms: data.isSaveSms
            },
            success: function () {
                if (data.type == "evocationRemind") { //如果是从非邮件发出的提醒就直接退出
                    self.showTips('evocationSuccess');
                    if (self.dialog) {
                        self.dialog.close();
                        self.dialog = null;
                    }
                } else {
                    self.addTask(function () {
                        var status = data.status;
                        if (status == 'add') {
                            top.BH('add1_remindtaskmail_ok'); //灰图标 添加待办提醒成功
                            self.refreshTaskCount(1, 1);
                            self.showTips('addremindsucc');
                        } else if (status == 'update') {
                            top.BH('add2_remindtaskmail_ok'); //亮图标 下拉框点击添加待办提醒成功
                            self.showTips('addremindsucc');
                        } else if (status == 'hasremind') {
                            top.BH('update_remindtaskmail_ok'); //亮图标 下拉框点击修改待办提醒成功
                            self.showTips('updateremindsucc');
                        } else if (status == 'finish') {
                            top.BH('addagain_remindtaskmail_ok'); //完成图标 下拉框点击重新添加待办提醒成功
                            self.refreshTaskCount(1, 1);
                            self.showTips('addremindsucc');
                        }
                        if (self.dialog) {
                            self.dialog.close();
                            self.dialog = null;
                        }
                        // 触发会话邮件待办图标及DOM属性（status/taskDate/class）更新
                        $App.trigger('covMailRemindRender', {taskFlag: 1, taskDate: taskDate, mid: self.model.get('mid')})
                    });
                }
                self.waiting = false;
            },
            error : function(){
                $Msg.alert('日程提交失败，请稍后再试');
                self.waiting = false;
            }
        };
        var d=options.requestData;
        if(data.sms){
            d["beforeTime"]=0;
            d["beforeType"]=0;
            d["recMySms"]=1;
            d["recMyEmail"]=0;
            d["enable"]=1;
        }else{
            d["recMyEmail"]=0;
            d["recMySms"]=0;
            d["enable"]=0; //禁用提醒功能
        }
        
        var status = this.model.get('status');
        if(status == 'hasremind'){
            self.model.editRemind(options);
        }else{
            self.model.addRemind(options);
        }
    },

    tipCalendarView: false,

    initEvent:function(){
        var self = this;

        function _initCalendView(p) {
            if (!self.tipCalendarView) {
//                self.tipCalendarView = new M139.UI.TipCalendarView();
                self.tipCalendarView = M139.UI.TipCalendarView;     //没有new
            }
            self.tipCalendarView.receiveCalendar(p);
        }

        top.$App.on('saveMailRemind',function(data){ //保存
            self.saveRemind(data);
        }).on('cancelMailRemind',function(data){ //取消
            if(self.dialog){
                self.dialog.close();
                self.dialog = null;
            }
        }).on('remindPageLoaded',function(){ //输出
            setTimeout(function(){
                top.$App.trigger('remindRender',self.getRenderData());
            },500);
        }).on("newCalendarMsg", function(p) {

            if (self.tipCalendarView) {
                self.tipCalendarView.receiveCalendar(p);
                return;
            }

            if (_.isUndefined(M139.UI.TipCalendarView)) {
                M139.core.utilCreateScriptTag({     //异步加载显示日历的tip view
                     scriptId: "tip_calendarview",
                     src: "/m2012/js/prod/tips/m2012.ui.tip.calendarview.js"
                }, function() {
                    _initCalendView(p);
                });
            } else {
                _initCalendView(p);
            }
        });
    }

}));

        
})(jQuery, _, M139);    



﻿/**   
* @fileOverview 邮件举报功能
*/

(function (jQuery, _, M139) {

/**
* @namespace 
* 邮件举报功能
*/

M139.namespace("M2012.MailComplaint.Model",Backbone.Model.extend({
        
        defaults:{
			fid:null, //当前文件夹
			mid:null, //当前邮件
			rubbishFid:5, //垃圾邮箱
			noReadMailFids:[2, 3, 4, 8, 9], //我的订阅、帐单中心、草稿箱、已发送和已删除文件夹（不显示入口举报，垃圾箱显示不是垃圾邮件）
			noFids:[2,3], //草稿箱、已发送列表不显示
			noSpamMailFids:[2, 3, 4, 5, 8, 9], //非拒收文件夹
			moveToFid: 5, //移动垃圾箱
			isSessionMode:false, //读信模式
			selectData:null, //列表选择数据
			sessionIds:[], //会话邮件ids
			ids:null, //普通邮件ids
			listData:null, //邮件列表数据，从读信获取
			dataSource:null, //读信数据
			accountList:[], //处理帐号
			myAccounts:[] //我的所有帐号
		},
		
		/** 提示信息 */
		tips:{
			serverBusy:'系统繁忙，请稍后重试',
			warnSys:'系统邮件，不能举报',
			warnMe:'自己的邮件，不能举报',
			warnTask:'待办任务，不能举报',
			warnSpamSys:'不能对系统邮件地址进行拒收',
			warnSpamMe:'不能对自己的邮件地址进行拒收'
		},
		
		/** 显示不是垃圾邮件 */
		isNotRubbishMailBtn:function(){
			return this.get('fid') == this.get('rubbishFid');
		},
		
		/** 显示工具栏举报按钮 */
		isShowComplaintBtn:function(){
			try{
				if(this.get('dataSource')){
					return this.isRMComplaintEntry();
				}else{
					return this.isComplaintMailBox();
				}
			}catch(e){
				return false;
			}
		},
		
		/** 是否举报邮件列表 test*/
		isComplaintMailBox:function(){
			var fids = this.get('noReadMailFids');
			var fid = this.get('fid');
			return $.inArray(fid,fids) == -1;
		},
		
		/** 是否读信举报文件夹 */
		isComplaintReadMailFid:function(){
			var fids = this.get('noReadMailFids');
			var fid = this.get('fid');
			return $.inArray(fid,fids) == -1;
		},

		/** 是否拒收邮件入口 */
		isSpamMail:function(){ 
			var fids = this.get('noSpamMailFids');
			var fid = this.get('fid');
			if($.inArray(fid,fids) > -1){
				return false;
			}else{
				return this.isRMComplaintEntry(); //同举报入口
			}
		},
        
        isAllowRefuseEmailaddr:function(addr){
            var self = this;
            var mid = this.get('mid');
            var logoType = 0;
            if(mid){
                var mailData = $App.getMailDataByMid(mid);
                var from = mailData && M139.Text.Email.getEmail(mailData.from); //邮件发件人
                if(addr == from){
                    logoType = mailData.logoType;
                }
            }
            if(self.isHasSysAccount(addr) || logoType == 1){
                self.showWarnTips(self.tips.warnSpamSys);
                return false;
            }else if(self.isHasMyAccount(addr)){
                self.showWarnTips(self.tips.warnSpamMe);
                return false;
            }
            return true;
        },
		
		/** 是否包含系统帐号 */
		isHasSysAccount:function(account){
			var sysAccounts = this.getSystemAccounts();
			return $.inArray(account,sysAccounts) > -1;
		},
		
		/** 是否包含自己帐号 */
		isHasMyAccount:function(account){
			var myAccounts = this.get('myAccounts');
			return $.inArray(account,myAccounts) > -1;
		},
		
		/** 
		* 读信举报入口
		* 以下条件读信页不显示“举报”入口：
			1、139邮箱系统邮件。如：subscribe@139.com、homemail@139.com、admin@139.com、postmaster@139.com、idea@139.com、antispam@139.com、ued@139.com、mail139@139.com、uec@139.com、service@139.com、idea@139.com、kefu@139.com、administrator@139.com、hostmaster@139.com、webmaster@139.com、mail139_holiday@139.com、port@139.com、mail139_vip@139.com、szlvsechuxing@139.com 。建议后期运营部门更新配置后支持研发调取。
			2、我的订阅、帐单中心、垃圾邮件、草稿箱、已发送和已删除文件夹
			3、139邮箱本人账号。（手机号码帐号、飞信帐号、别名帐号）
			4、带有139邮箱系统邮件LOGO的邮件(logotype=1)
		*/
		isRMComplaintEntry:function(){
			var mailData = this.get('dataSource');
			var from = this.get('from');
			if (mailData && mailData.from) { from = mailData.from;}//bugfix:从model取的from没有重新赋值，会取到上一封邮件的发件人
			var account = $Email.getEmail(from) || null;
			//会话模式
			if($App.isSessionMode()){ 
				return false;
			}
			
			//获取不了自己的帐号
			if(this.get('myAccounts').length == 0){ 
				return false;
			}
			//举报文件夹
			if(!this.isComplaintReadMailFid()){
				return false;
			}
			//系统邮件加标识
			if(mailData && mailData.logoType == 1){
				return false;
			}
			//待办任务
			if (mailData && mailData.flags && mailData.flags.taskFlag == 1) {
				return false;
			};
			//发件人含系统或自己帐号
			if(this.isHasMyAccount(account) || this.isHasSysAccount(account)){
				return false;
			}
			//订阅邮件
			if (mailData.subscriptionFlag == 1) {
				return false;
			};
			return true;
		},
		
		
		/** 
		* 获取系统邮件帐号
		*/
		getSystemAccounts:function(){
			return $App.getSysAccount() || [];
		},
		
		/** 
		* 组装拒收请求参数
		*/
		callSpamMailRequest:function(opt,callback){
			var options = {
				opType:2, //1、举报 2、拒收 3、取消垃圾邮件
				needFilterHistoryMail:opt.check ? 1 : 0, //1,2生效,是否处理历史邮件
				listType:2, //黑名单
				list:opt.list //处理拒收名单
                //ids:this.get('ids')
			};
			this.requestReportSpamMails(options,callback);
		},

		/** 
		* 组装举报请求
		*/
		callComplaintRequest:function(opt,callback){
			var options = {
				opType:1, //1、举报 2、拒收 3、取消垃圾邮件
				newFid:this.get('moveToFid'),
				needFilterHistoryMail:opt.check ? 1 : 0, //1,2,3生效,是否处理历史邮件
				list:opt.check ? this.get('accountList') : [],
				ids:this.get('ids')
			};
			this.requestReportSpamMails(options,callback);
		},

		/** 
		* 组装取消垃圾邮件请求
		*/
		callNotRubbishMailRequest:function(opt,callback){
			var options = {
				opType:3, 
				newFid:1,
                needFilterHistoryMail:opt.check ? 1 : 0, //1,2,3生效,是否处理历史邮件
				listType: 3, //opt.check ? 3 : 0, 
				list:this.get('accountList'),
				ids:this.get('ids')
			};
			this.requestReportSpamMails(options,callback);
		},		
		
		/** 
		* 功能接口请求
		*/
		requestReportSpamMails:function(options,callback){
			M139.RichMail.API.call("mbox:reportSpamMails",options,function(result){
                var responseData = result.responseData;
				callback && callback(responseData);
			});
		},

		/** 列表选择验证 */
		checkListSelect:function(){
			var self = this;
			var selectmids = this.get('ids');
            var flag = true;
			var accountList = [];
            var listObj = {};
            var fid = this.get('fid');
            var noAccountCount = 0;  //邮件没有发件人地址的邮件封数
            var mailboxModel = $App.getMailboxView().model;
            var superSelectResult = mailboxModel.superSelectResult || {};

			
			selectmids[0] && $.each(selectmids,function(n,mid){
				// 当存在跨页选择时，只能通过mailboxModel.superSelectResult中保存的mail对象来获取邮件信息
				var mailData = $App.getMailDataByMid(mid) || superSelectResult[mid];
				if(mailData){
					var logoType = mailData.logoType;
					var subscriptionFlag = mailData.subscriptionFlag;
					var account = $Email.getEmail(mailData.from);
                    if(account){
                        if(fid != 5){
                            if(self.isHasSysAccount(account) || logoType == 1 || subscriptionFlag == 1){ //系统邮件
                                self.showWarnTips(self.tips.warnSys);
                                flag = false;
                                return false;
                            }
                            if(self.isHasMyAccount(account)){ //自己帐号
                                self.showWarnTips(self.tips.warnMe);
                                flag = false;
                                return false;
                            }
                        }
                        listObj[account] = account;  //去重
                    }else{
                        noAccountCount++;
                    }
				}
			});
            for(var key in listObj){
                accountList.push(key);
            }
            this.set({accountList:accountList});
            this.set({noAccountCount:noAccountCount});
			return flag;
		},
        
		/** 
		* 举报失败提示 
		*/
		showFailTips:function(){
			this.showWarnTips(this.tips.serverBusy);
		},
		
		/** 
		* 举报警告提示 
		*/
		showWarnTips:function(text){
			text && M139.UI.TipMessage.show(text,{
				colour:'msgRed',
                prior:true,
				delay:3000
			});
		}
		
}));

})(jQuery, _, M139);



﻿/**
* @fileOverview 邮件举报功能
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 邮件举报功能
    */

        M139.namespace('M2012.MailComplaint.View', superClass.extend({

        /**
        *@lends M2012.MailComplaint.View.prototype
        */

        el: "",
		
        template: {
			complaint:[ '<dl class="norTipsContent">',
                     '<dt class="norTipsLine formLine"><strong>您举报的邮件将被移动到垃圾邮件文件夹</strong></dt>',
                     '<dd class="formLine gray">通过举报垃圾邮件，可以协助139邮箱更有效的抵制垃圾邮件。感谢您的支持！</dd>',
                     '<dd class="formLine"><input type="checkbox" id="checkbox"> 将发件人的历史邮件移入垃圾邮件文件夹</dd>',
                        '</dl>'].join(""),
			spam:[ '<dl class="norTipsContent">',
                     '<dt class="norTipsLine">拒收后，您将不再收到此地址的邮件</dt>',
                     '<dd>确定拒收此地址吗？</dd>',
                     '<dd class="txt_ellipsis mt_5" title="{1}"><strong>{0}</strong></dd>',
                     '<dd class="norTipsLine mt_10">',
                         '<input type="checkbox" id="checkbox" checked="checked" class="mr_5"><label for="chk_20">将发件人的历史邮件移入垃圾邮件文件夹</label>',
                     '</dd>',
                 '</dl>'].join(""),
			notRubbish:[ '<dl class="norTipsContent">',
                     '<dt class="norTipsLine"><strong>所选邮件将被移到收件箱</strong></dt>',
                     '<dd class="norTipsLine {0}">',
                         '<input type="checkbox" id="checkbox" checked="checked" class="mr_5"><label for="chk_20">把垃圾箱中该发件人的历史邮件全部转移到收件箱</label>',
                     '</dd>',
                 '</dl>'].join(""),
			complaintSuccess:'举报成功，邮件移动到垃圾文件夹。<a href="javascript:$App.showMailbox(5)">查看</a>',
			spamMailAndMoveSuccess:'拒收成功，{0}邮件移动到垃圾文件夹，并拒收发件人的邮件。<a href="javascript:$App.showMailbox(5)">查看</a>',
			spamMailSuccess:'拒收成功。',
			notRubbishSuccess:'邮件已移动到收件箱。'
        },
		
		/** 
		* 初始化 
		*/
        initialize: function (options) {
            var self = this;
            this.model = new M2012.MailComplaint.Model();
            this.initEvents();
            return superClass.prototype.initialize.apply(this, arguments);
        },
        
        /**定义事件*/
        initEvents: function () {
            var self = this;
            top.M139.Timing.waitForReady('$App.getConfig("UserData")', function () { 
                self.model.set({
                    myAccounts:$User.getAccountListArray() || []
                });
            });
        },
		
		/** 邮件举报操作 */
		mailComplaint:function(){
			var self = this;
            var showCheck = this.checkListSelect();
            if(showCheck){
                this.showComplaintPop();
            }
		},
		/** 拒收邮件 暂时只处理单封邮件与帐号 */
		spamMail:function(){
			this.showSpamMailPop();
		},
		
		/** 公用弹窗 */
		showPop:function(options){
			var dialog = $Msg.confirm(options.temp, 
				function(){
					var checkbox = $(dialog.el).find('#checkbox:checked');
					options.callBack(checkbox[0]);
				}, 
				null,
				{
                    dialogTitle: options.title,
					icon:"warn",
					isHtml:true
                });
		},
		
		/** 成功顶部提示 */
		showSuccessTips:function(options){
			var self = this;
			var temp = options.temp;
			var num = options.response > 1 ? '已将' + options.response + '封' : '';
			var text = $T.Utils.format(temp,[num]);
                
            this.model.showWarnTips(text);
                
			//$App.trigger("showMailbox",{hideTips:true});
			
			setTimeout(function(){
                var commandCallback = self.model.get('commandCallback');
                commandCallback && commandCallback();
			},200);
		},
		
		/** 邮件举报弹窗 */
		showComplaintPop:function(){
			var self = this;
			this.showPop({
				title:'邮件举报',
				temp:self.template.complaint,
				callBack:function(isCheck){
					M139.UI.TipMessage.show('邮件举报中...');
					self.model.callComplaintRequest({
						check:isCheck,
						ids:self.model.get('ids')
					},function(res){
						if(res.code == 'S_OK'){
                            var noAccountCount = self.model.get('noAccountCount') || 0;
							self.complaintSuccess(res['var'] + noAccountCount);
						}else{
							self.model.showFailTips();
						}
					});
				}
			});
		},
		
		/** 举报成功提示 */
		complaintSuccess:function(response){
			this.showSuccessTips({
				temp:this.template.complaintSuccess,
				response:response
			});
		},
		
		/** 邮件拒收弹窗 */
		showSpamMailPop:function(){
			var self = this;
			var from = this.model.get('from');
			var addr = $App.getAddrNameByEmail(from);
			var email = $Email.getEmail(from);
			var showname = $T.Html.encode(addr) + '&lt;' + $T.Html.encode(email) + '&gt;';
			self.showPop({
				title:'邮件拒收',
				temp:$T.Utils.format(self.template.spam,[showname,email]),
				callBack:function(isCheck){
					self.model.callSpamMailRequest({
						check:isCheck,
						list:[email]
					},function(res){
						if(res.code == 'S_OK'){
							self.spamMailSuccess(res['var'],isCheck);
						}else{
							self.model.showFailTips();
						}
					});
				}
			});

		},
		
		/** 拒收邮件成功 */
		spamMailSuccess:function(response,isCheck){
			var self = this;
            var temp = isCheck ? this.template.spamMailAndMoveSuccess : this.template.spamMailSuccess
			this.showSuccessTips({
				temp:temp,
				response:response
			});
		},
		
		/** 不是垃圾邮件操作 */
		notRubbishMail:function(){
			var self = this;
			var showCheck = this.checkListSelect();
            if(showCheck){
                self.showNotRubbishPop();
            }
		},
		
		/** 不是垃圾邮件弹窗 */
		showNotRubbishPop:function(){
			var self = this;
			self.showPop({
				title:'这不是垃圾邮件',
				temp:self.template.notRubbish,
				callBack:function(isCheck){
					self.model.callNotRubbishMailRequest(
						{
							check:isCheck
						},
						function(res){
							if(res.code == 'S_OK'){
                                self.notRubbishSuccess(res['var']);
                            }else{
                                self.model.showFailTips();
                            }
						}
					);
				}
			});
		},		
		
		/** 取消垃圾邮件成功 */
		notRubbishSuccess:function(res){
			this.showSuccessTips({
				temp:this.template.notRubbishSuccess,
				response:res
			});
		},
        
        checkListSelect:function(){
            return this.model.checkListSelect();
        },
        
        /** 是否拒收邮件入口 */
        isSpamMail:function(){
            return this.model.isSpamMail();
        },
        
        /** 是否允许拒收邮件地址 */
        isAllowRefuseEmailaddr:function(addr){
            return this.model.isAllowRefuseEmailaddr(addr);
        },

        render: function () {}

    }));

	//列表举报初始化
    $(function(){
        mailboxComplaintView = new M2012.MailComplaint.View();
    });
})(jQuery, _, M139);



﻿/**
 * @fileOverview 定义添加联系人对话框
 */

 (function(jQuery,_,M139){
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    var namespace = "M2012.UI.Dialog.ContactsEditor";

    M139.namespace(namespace,superClass.extend(
    /**@lends M2012.UI.Dialog.ContactsEditor.prototype*/
    {
       /** 定义通讯录地址本组件代码
        *@constructs M2012.UI.Dialog.ContactsEditor
        *@extends M139.View.ViewBase
        *@param {Object} options 初始化参数集
        *@param {String} options.serialId 联系人id
        *@param {String} options.name 联系人姓名
        *@param {String} options.mobile 联系人手机号
        *@param {String} options.email 联系人邮件地址
        *@example
        */
        initialize: function (options) {
            options = options || {};
            this.options = options;
            this.filter = options.filter;

            this.contactsModel = M2012.Contacts.getModel();

            return superClass.prototype.initialize.apply(this, arguments);
        },
        name: namespace,
        template:[ '<div class="boxIframeText">',
 			'<p class="mt_10 Lbl_Tip" style="margin-left:25px; display:none;"></p>',
             '<ul class="form groupFenDiv">',
                 '<li class="formLine ErrorTipContainer" style="display:none">',
                    '<label class="label"></label>',
                    '<div class="element">',
						'<div class="red LblErrorTip">格式错误</div>',
                    '</div>',
                 '</li>',
                 '<li class="formLine">',
                     '<label class="label">姓名：</label>',
                     '<div class="element">   ',
 						'<input maxlength="12" id="AddContacts_Name" type="text" class="iText" /> <span class="red">*</span>',
                     '</div>',
                 '</li>',
                 '<li class="formLine">',
                     '<label class="label">邮箱：</label>',
                     '<div class="element">       ',
 						'<input maxlength="90" id="AddContacts_Email" type="text" class="iText" />',
                     '</div>',
                 '</li>',
 				'<li class="formLine">',
                     '<label class="label">手机：</label>',
                     '<div class="element">        ',
 						'<input maxlength="20" id="AddContacts_Mobile" type="text" class="iText" />',
                     '</div>',
                 '</li>',
 				'<li class="formLine">',
                     '<label class="label">分组：</label>',
                     '<div class="element">  ',
 						'<div class="groupFen">',
 							'<div class="groupFenList GroupContainer">',
 								//'<p><input type="checkbox" value="" class="mr_5"><label for="">同学</label></p>',
 							'</div>	',
 							'<div class="groupBtn">',
 								'<a href="javascript:;" class="BtnShowAddGroup">新建分组</a>',
                                '<div class="AddrGroupContainer" style="display:none">',
                                    '<input id="AddContacts_GroupName" maxlength="16" type="text" class="iText mr_5" value="" />',
                                    '<a hidefocus="1" href="javascript:;" class="btnMinOK mr_5 AddNewGroup" title="确定"></a>',
                                    '<a hidefocus="1" href="javascript:;" class="btnMincancel CancelAddGroup" title="取消"></a>',
                                '</div>',
 							'</div>',
 						'</div>	',
                     '</div>',
                 '</li>',
             '</ul>',
 			//'<p class="gray pb_10" style="margin-left:25px;">如需编辑联系人详细资料，请进入<a href="javascript:;">新建联系人</a></p>',
         '</div>'].join(""),
        
        //批量添加模版
        batchtemplate:[ '<div class="boxIframeText">',
            '<p class="mt_10 Lbl_Tip" style="margin-left:25px; display:none;"></p>',
             '<ul class="form groupFenDiv">',
                 '<li class="formLine ErrorTipContainer" style="display:none">',
                    '<label class="label"></label>',
                    '<div class="element">',
                        '<div class="red LblErrorTip">格式错误</div>',
                    '</div>',
                 '</li>',
                 '<li class="formLine"><div style="padding-left:50px">你即将添加{0}个联系人，重复的联系人不再保存。</div></li>',
                 '<li class="formLine">',
                     '<label class="label">分组：</label>',
                     '<div class="element">  ',
                        '<div class="groupFen">',
                            '<div class="groupFenList GroupContainer">',
                                //'<p><input type="checkbox" value="" class="mr_5"><label for="">同学</label></p>',
                            '</div> ',
                            '<div class="groupBtn">',
                                '<a href="javascript:;" class="BtnShowAddGroup">新建分组</a>',
                                '<div class="AddrGroupContainer" style="display:none">',
                                    '<input id="AddContacts_GroupName" maxlength="16" type="text" class="iText mr_5" value="" />',
                                    '<a hidefocus="1" href="javascript:;" class="btnMinOK mr_5 AddNewGroup" title="确定"></a>',
                                    '<a hidefocus="1" href="javascript:;" class="btnMincancel CancelAddGroup" title="取消"></a>',
                                '</div>',
                            '</div>',
                        '</div> ',
                     '</div>',
                 '</li>',
             '</ul>',
            //'<p class="gray pb_10" style="margin-left:25px;">如需编辑联系人详细资料，请进入<a href="javascript:;">新建联系人</a></p>',
         '</div>'].join(""),

        GroupItemTemplate:'<p><input id="{chkId}" type="checkbox" value="{groupId}" class="mr_5"><label for="{chkId}">{name}</label></p>',
        events:{
            "click .AddNewGroup": "onAddNewGroupClick",
            "click .BtnShowAddGroup": "onShowAddGroupClick",
            "click .CancelAddGroup": "onCancelAddGroupClick"
        },

        /**构建dom函数*/
        render:function(){
            var This = this;
            var options = this.options;

            this.dialog = $Msg.showHTML(this.template,function(e){
                This.onYesClick();
                e.cancel = true;
            },function(){
                This.onCancel();
            },{
                //width:"380px",
                buttons:["确定","取消"],
                dialogTitle:"添加联系人"
            });

            this.setElement(this.dialog.el);

            this.renderGroupList();
            this.renderContactsInfo();


            this.initEvent();

            return superClass.prototype.render.apply(this, arguments);
        },

        /**构建批量添加dom函数*/
        batchrender:function(){
            var This = this;
            var options = this.options;
            var html = $T.Utils.format(this.batchtemplate,[options.addContacts.length]);
            this.dialog = $Msg.showHTML(html,function(e){
                This.onBatchYesClick();
                e.cancel = true;
            },function(){
                This.onCancel();
            },{
                //width:"380px",
                buttons:["确定","取消"],
                dialogTitle:"批量添加联系人"
            });

            this.setElement(this.dialog.el);
            this.renderGroupList();
            this.renderContactsInfo();


            this.initEvent();

            return superClass.prototype.render.apply(this, arguments);
        },

        /**@inner*/
        renderGroupList:function(groups){
            var htmlCode = [];
            groups = groups || this.contactsModel.getGroupList();
            for(var i=0;i<groups.length;i++){
                var g = groups[i];
                htmlCode.push(M139.Text.Utils.format(this.GroupItemTemplate,{
                    groupId:g.id,
                    name: M139.Text.Html.encode(g.name),
                    chkId:"_groups_chk_" + g.id
                }));
            }
            this.$(".GroupContainer").append(htmlCode.join(""));
        },

        /**@inner*/
        renderContactsInfo:function(){
            var This = this;
            var options = this.options;
            var info = {};
            if(options.serialId){
                var contacts = this.contactsModel.getContactsById(options.serialId);
                if(contacts){
                    info.name = contacts.name;
                    info.mobile = contacts.getFirstMobile();
                    info.email = contacts.getFirstEmail();
                    var groups = this.contactsModel.getContactsGroupId(options.serialId);
                }
                this.dialog.setDialogTitle("编辑联系人");
            }else{
                info.name = options.name;
                info.email = options.email;
                info.mobile = options.mobile;
                if (info.email) {
                    this.setLabelTip("将<" + info.email + ">加到通讯录");
                }
            }
            this.$("#AddContacts_Name").val(info.name || "");
            this.$("#AddContacts_Email").val(info.email || "");
            this.$("#AddContacts_Mobile").val(info.mobile || "");
            if(groups){
                $(groups).each(function(index,groupId){
                    This.checkedGroup(groupId);
                });
            }
        },
        /**
         *设置对话框内容区第一行文本提示内容
         *@inner
         */
        setLabelTip:function(text){
            this.$(".Lbl_Tip").text(text);
        },

        /**
         *点击添加组
         *@inner
         */
        onAddNewGroupClick: function () {
            var This = this;
            var groupName = this.$("#AddContacts_GroupName").val().trim();
            M2012.Contacts.API.addGroup(groupName, function (result) {
                if(result.success){                    
                    This.appendGroup(result.groupName,result.groupId);
                } else {
                    This.showError(result.error || result.msg);
                }
            });
        },

        /**
         *红字显示异常信息
         *@inner
         */
        showError: function (msg) {
            this.$(".ErrorTipContainer").show();
            this.$(".LblErrorTip").html(msg);
        },

        /**
         *展开添加组
         *@inner
         */
        onShowAddGroupClick:function(){
            this.$(".AddrGroupContainer").show();
            this.$("#AddContacts_GroupName").val("").focus();
            this.$(".BtnShowAddGroup").hide();
        },

        /**
         *点击隐藏添加组
         *@inner
         */
        onCancelAddGroupClick:function(){
            this.hideAddGroup();
        },

        /**
         *隐藏添加组
         *@inner
         */
        hideAddGroup:function(){
            this.$(".AddrGroupContainer").hide();
            this.$(".BtnShowAddGroup").show();
        },

        /**
         *组选中
         *@inner
         */
        checkedGroup:function(groupId){
            this.$("#_groups_chk_"+groupId).attr("checked","checked");
        },

        /**
         *新建组成功后更新组的界面
         *@inner
         */
        appendGroup:function(groupName,groupId){
            var data = {
                name:groupName,
                id:groupId
            };

            this.renderGroupList([data]);
            this.checkedGroup(groupId);
            this.$("#AddContacts_GroupName").val("");
            this.$(".GroupContainer")[0].scrollTop = 10000;//滚动到最下面，看到新建的组
            this.hideAddGroup();
            this.trigger("addGroupSuccess", data);
        },

        /**
         *@inner
         */
        initEvent:function(e){
            var This = this;
            /*
			this.on('success',function(){
				var tabname = top.$App.getCurrentTab().name;
				(tabname === 'addrhome' || tabname === 'addr') && top.$App.show('addr'); //刷新通讯录
				if (top.$App.getTabByName("addr")) { top.$App.getTabByName("addr").isRendered = false; }
			});
            */
        },
        /**
         *@inner
         */
        onYesClick: function () {
            var This = this;
            var info = {};
            info.name = this.$("#AddContacts_Name").val();
            info.email = this.$("#AddContacts_Email").val();
            info.mobile = this.$("#AddContacts_Mobile").val();
            info.groupId = [];
            this.$("input:checkbox:checked").each(function () {
                info.groupId.push(this.value);
            });
            if (this.options.serialId) {
                //编辑联系人
                M2012.Contacts.API.editContacts(this.options.serialId, info, function (result) {
                    if (result.success) {
                        top.M139.UI.TipMessage.show("修改成功", { delay: 3000 });
                        This.onSuccess(result);
                    } else {
                        This.showError(result.error || result.msg);
                    }
                });
            } else {
                //添加联系人
                M2012.Contacts.API.addContacts(info, function (result) {
                    if (result.success) {
                        top.M139.UI.TipMessage.show("添加成功", { delay: 3000 });
                        This.onSuccess(result);
                    } else {
                        This.showError(result.error || result.msg);
                    }
                });
            }
        },

        /**
         * 批量添加确认点击
         */
        onBatchYesClick: function () {
            var callback;
            var This = this;
            var groupId = [];
            var info = This.options.addContacts;
            var alink = This.options.alink; //批量增加链接

            This.$("input:checkbox:checked").each(function () {
                groupId.push(this.value);
            });
            
            if (info.length > 0) {
                
                //添加groupId
                $.each(info,function(){
                    this.groupId = groupId;
                });

                callback = function(result){
                    if(result.success){
                        top.M139.UI.TipMessage.show("成功添加{0}个联系人".format(info.length), { delay: 3000 });
                        setTimeout(function(){
                            $App.trigger("change:contact_maindata"); //刷新通讯录
                        }, 2000);

                        if (alink) {
                            alink.hide();//成功添加后隐藏链接
                        }
                        This.onSuccess(result);
                    }else {
                        This.showError(result.error || result.msg);
                    }
                };
                
                if(info.length > 1){
                    Contacts.addContacts(info, callback);                    
                }else{
                    M2012.Contacts.API.addContacts(info[0], callback);
                }               
            }
        },

        /**
         *@inner
         */
        onSuccess: function (result) {
            this.dialog.close();
            this.trigger("success", result);
        },
        /**
         *@inner
         */
        onCancel:function(){
            this.trigger("cancel");
        }
    }));



 })(jQuery, _, M139);

/*
 $(function () {
     
     M2012.Contacts.getModel().requireData(function () {
         new M2012.UI.Dialog.ContactsEditor({
            serialId:"602955467"
         }).render();
     });
 })
 */
/** 
 * @fileOverview 定义联系人选项卡组件
 */

 (function(jQuery,_,M139){
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    var namespace = "M2012.UI.Widget.ContactsCard";
    /**
    *@namespace
    *@name M2012.UI.Widget.ContactsCard
    */
    M139.namespace(namespace,superClass.extend(
    /**@lends M2012.UI.Widget.ContactsCard.prototype*/
    {
        /** 定义联系人选项卡组件
        *@constructs M2012.UI.Widget.ContactsCard
        *@extends M139.View.ViewBase
        *@param {Object} options 初始化参数集
        *@inner
        */
        initialize: function (options) {
            var $el = jQuery(this.template);

            this.setElement($el);

            this.contactsModel = M2012.Contacts.getModel();

            this.model = new Backbone.Model();

            return superClass.prototype.initialize.apply(this, arguments);
        },
        name: namespace,
        template:[
        '<div class="tips contactTips" style="left:20px;top:400px;z-index:1023;display:none;">',
 	        '<div class="tips-text">',
 		        '<div class="imgInfo"><img class="imgLink FaceImage" rel="../images/ad/face.jpg" width="50" height="50" alt="">',
 			        '<dl>',
 				        '<dt><span class="Lbl_Name">{name}</span><a class="ml_5 Vip" style="display:none;" href="javascript:;"></a></dt>',
 				        '<dd class="gray Lbl_Email">{email}</dd>',
 				        '<dd class="gray Lbl_Mobile">{mobile}</dd>',
 			        '</dl>',
 		        '</div>',
 		        '<div class="sTipsBtn2 clearfix">',
 			        '<a hidefocus="1" href="javascript:;" class="Contacts">加到通讯录</a>',
                    '<a bh="contactscard_compose" hidefocus="1" href="javascript:;" class="SendEmail">发邮件</a>',
                    '<a bh="contactscard_sms" hidefocus="1" href="javascript:;" class="SendSMS">发短信</a>',
                    '<a hidefocus="1" href="javascript:;" class="more on ShowMore">更多<span class="morfont">&gt;</span></a>',
 		        '</div>',
 		        '<div class="menuPop shadow MoreMenu" style="left:335px;top:70px;display:none">',
                     '<ul>',
                         '<li><a bh="lianxikaclassify_onclick" hidefocus="1" class="LetterSort" href="javascript:;"><span>创建收信规则</span></a></li>',
                         //'<li><a bh="contactscard_tags" hidefocus="1" class="LetterTag" href="javascript:;"><span>设置标签</span></a></li>          ',
                         '<li><a bh="set_mail_arrive_notice" hidefocus="1" class="Notify" href="javascript:;"><span>设置邮件到达通知</span></a></li>',
                         //'<li><a bh="contactscard_reject" hidefocus="1" class="Reject" href="javascript:;"><span>拒收</span></a></li>',
                         //'<li style="display:none"><a bh="contactscard_invite" class="BtnInvite" hidefocus="1" href="javascript:;"><span>邀请</span></a></li>', //通讯录兼容标准版2.0-灰度线验收2013-3-29，屏蔽邀请入口
                         '<li><a bh="contactscard_letterhistory" hidefocus="1" class="LetterHistory" href="javascript:;"><span>往来邮件</span></a></li>',
                     '</ul>',
                 '</div>',
 	        '</div>',
             '<div class="tipsTop diamond"></div>',
         '</div>'].join(""),
        events:{
            "click .Contacts": "onContactsClick",
            "click .SendEmail": "onSendEmailClick",
            "click .SendSMS": "onSendSMSClick",
            "click .BtnInvite": "onInviteClick",
            "click .Reject": "onRejectClick",
            "click .LetterHistory": "onLetterHistoryClick",
            "click .LetterSort": "onLetterSortClick",
            "click .LetterTag": "onLetterTagClick",
            "click .Notify": "onNotifyClick",
            "click .Vip": "onVipClick",
            "click a:": "onButtonClick"
        },
        /**
         *@inner
         *构建dom函数
        */
        render:function(){
            var options = this.options;
            this.initEvent();

            this.$el.appendTo(document.body);

            return superClass.prototype.render.apply(this, arguments);
        },

        /**
         *@inner
         *显示联系人卡片
         *@param {Object} options 参数集合
         *@param {HTMLElement} options.dockElement 联系人卡片停靠的元素
         *@param {String} options.email 联系人的邮件地址（会自动搜索通讯录联系人）
         *@param {String} options.serialId 可选参数，联系人的id
         *@example
         var card = new M2012.UI.Widget.ContactsCard().render();
         card.show({
            dockElement:document.getElementById("myDiv")
            email:"lifula@139.com"
         });
         */
        show: function (options,isDelay) {
            var This = this;

            if (!options.email && !options.serialId) {
                return;
            }
            if (!options.dockElement || M139.Dom.isRemove($(options.dockElement)[0])) {
                return;
            }
            var jEl = $(options.dockElement);
            if (!jEl.attr("bindcard")) {
                //防止重复绑定
                jEl.attr("bindcard", "1").mouseleave(function () {
                    This.delayHide();
                });
            }
            //延迟显示
            if (isDelay) {
                clearTimeout(this.showTimer);
                this.showTimer = setTimeout(function () {
                    This.show(options);
                }, 500);
                return;
            }

            //绑定数据
            this.setAddrInfo(options);

            //弹出框定位
            var direction = M139.Dom.dockElement(options.dockElement, this.el, {
                margin: options.margin || 0,
                dx : options.dx,
                dy : options.dy
            });

            //改变箭头方向
            if (direction == "up") {
                this.$("div.tipsTop").addClass("tipsBottom").removeClass("tipsTop");
            } else {
                this.$("div.tipsBottom").addClass("tipsTop").removeClass("tipsBottom");
            }

            var overflowX = $(options.dockElement).offset().left + this.$el.width() - $(document.body).width();
            //处理溢出屏幕
            if (overflowX > 0) {
                this.$el.css("left", $(options.dockElement).offset().left - overflowX);
                this.$("div.tipsTop,div.tipsBottom").css("left",15 + overflowX);
            } else {
                this.$("div.tipsTop,div.tipsBottom").css("left", 15);
            }


            this.cancelHide();

            if (options.flag == 'groupMail') { // 专门针对群邮件中联系人卡片的显示图片
                this.renderGroupMailImage(options["groupMail"]);
            }else{
				// 保留原先的逻辑
                this.renderFaceImage();
                this.requestFaceImage();
            }

            try {
                BH("contactscard_show");
            } catch (e) { }

            return superClass.prototype.show.apply(this, arguments);
        },
        

        /**
         *获取联系人头像
         *@inner
         */
        requestFaceImage: function () {
            var This = this;
            var info = this.model.get("info");
            var addrInfo = [];
            if (info.mobile) {
                addrInfo.push(info.mobile);
            }
            if (info.email && M139.Text.Email.getDomain(info.email) == $App.getMailDomain()) {
                var account = M139.Text.Email.getAccount(info.email);
                if (account !== info.mobile) {
                    addrInfo.push(account);
                }
            }
            // 调用后端的批量接口获取图像数据
            M2012.Contacts.API.GetBatchImageUrl({
                addressInfo : addrInfo,
                info : info
            }, function (url) {
                var currentInfo = This.model.get("info");
                if (info.email === currentInfo.email) {//防串
                    This.renderFaceImage(url);
                }
            });
        },

        renderFaceImage: function (url) {
            var img = this.$(".FaceImage");
            if (url) {
                img.attr("src", url);
            } else {
                //默认头像
                img.attr("src", img.attr("rel"));
            }
        },

        renderGroupMailImage : function(param) {
            if (!param) {
                return;
            }

            var img = this.$(".FaceImage");
            if (param.imgUrl) {
                img.replaceWith('<img class="imgLink FaceImage" rel="../images/ad/face.jpg" src="' + param.imgUrl + '" width="50" height="50" alt="">');
            }else{
                // 必须加上FaceImage,保证img元素存在并被替换
                img.replaceWith('<i class="FaceImage group_detailBig">' + param.firstName + '</i>');
            }
        },
        /**
         *@inner
         */
        showMoreMenu:function(){
            var menu = this.$(".MoreMenu");
            menu.show();
            try {
                //这里会不存在？
                var overflowX = menu.offset().left + menu.width() - $(document.body).width();
                if (overflowX > 0) {
                    menu.css("left", 101);
                } else {
                    menu.css("left", 335);
                }
            } catch (e) {
                menu.css("left", 335);
            }
            var menuTop = this.$el.height() - 29;
            //计算溢出值
            var moreTop = this.$el.offset().top + menuTop + M139.Dom.getElementHeight(menu) - $(document.body).height();
            if (moreTop > 0) {
                menuTop -= moreTop;
            }
            menu.css("top", menuTop);
            BH("contactscard_more");
        },

        /**
         *初始化事件行为
         *@inner
         */
        initEvent:function(){
            var This = this;
            $(this.dockElement).mouseover(function(){
                This.show();
            });

            this.$("a.ShowMore").mouseenter(function () {
                This.showMoreMenu();
            }).click(function () {
                This.showMoreMenu();
            });
            this.$el.mouseleave(function () {
                This.$(".MoreMenu").hide();
                This.delayHide();
            });

            this.$el.mouseenter(function () {
                This.cancelHide();
            });

            this.model.on("change:info",function(){
                This.updateHTML();
            });
        },
        /**
         *延迟消失
         *@inner
         */
        delayHide:function(){
            var This = this;
            clearTimeout(this.showTimer);
            if (this.$el.css("display") != "none") {
                this.hideTimer = setTimeout(function () {
                    This.hide();
                }, 500);
            }
        },
        /**
         *取消延迟消失
         *@inner
         */
        cancelHide:function(){
            clearTimeout(this.hideTimer);
        },

        /**
         *@innner
         *更新界面
         */
        updateHTML:function(){
            var info = this.model.get("info");
            this.$(".Lbl_Name").text(info.name);
            this.$(".Lbl_Email").text(info.email||"");
            this.$(".Lbl_Mobile").text(info.mobile||"");
            
            this.isVip = 0; //不在通讯录内
            var contactsBtn = "加到通讯录";
            if(info.id){
                contactsBtn = "编辑";
                this.isVip = 2; //不是vip联系人
                var _vipc = top.Contacts.getVipInfo();
                var i = $.inArray(info.id, _vipc.vipSerialIds.split(','));
                if(i > -1) this.isVip = 1; //是vip联系人
            }
            this.updateVipIcon();
            this.$(".Contacts").text(contactsBtn);

            if (info.email && M139.Text.Email.getDomain(info.email) != $App.getMailDomain()) {
                this.$(".BtnInvite").parent().show();
            } else {
                this.$(".BtnInvite").parent().hide();
            }

        },
        
        updateVipIcon:function(){
            if(this.isVip == 1){
                this.$(".Vip").removeClass('user_gray_vip').addClass('user_vip')
                     .attr('bh','contactscard_delvip')
                     .attr('title','取消“VIP联系人”')
                     .show();
                
            }else if(this.isVip == 2){
                this.$(".Vip").removeClass('user_vip').addClass('user_gray_vip')
                     .attr('bh','contactscard_addvip')
                     .attr('title','添加“VIP联系人”，其邮件将同时标记为“VIP邮件”')
                     .show();
                
            }else{
                this.$(".Vip").hide();
            }
        },

        /**
         *@inner
         *从show参数获取联系人信息
         */
        setAddrInfo:function(options){
            var info = {};
            var addr = M139.Text.Email.getEmail(options.email);
            if(options.serialId){
                var c = this.contactsModel.getContactsById(options.SerialId);
            }else if(options.email){
                var name = M139.Text.Email.getName(options.email);
                var c = this.contactsModel.getContactsByEmail(addr);
                c = c && c[0];
                if (!c) {
                    info.name = name;
                    //info.email = addr;
                } 
            }
            if(c){
                info.name = c.name;
                //info.email = c.getFirstEmail();
                info.mobile = c.getFirstMobile();
                info.id = c.SerialId;
            }
            info.email = addr;
            this.model.set("info",info);//change:info 事件触发别的动作
        },

        /**
         *点击发邮件
         *@inner
         */
        onSendEmailClick: function () {
            var info = this.model.get("info");
            if (info.email) {
                var args = { receiver: M139.Text.Email.getSendText(info.name,info.email) }
            }
            $App.show("compose", null, {
                inputData:args
            });
            return false;
        },

        /**
         *点击发短信
         *@inner
         */
        onSendSMSClick: function () {
            var info = this.model.get("info");
            if (info.mobile) {
                var args = { mobile: M139.Text.Mobile.getSendText(info.name, info.mobile) }
            }
            $App.jumpTo("sms", args);
            return false;
        },

        /**
         *点击添加到通讯录、编辑联系人按钮
         *@inner
         */
        onContactsClick: function () {
            var info = this.model.get("info");
            if (info.id) {
                //编辑联系人
                new M2012.UI.Dialog.ContactsEditor({
                    serialId: info.id
                }).render();
                BH("contactscard_edit");
            } else {
                //添加联系人
                new M2012.UI.Dialog.ContactsEditor({
                    name: info.name,
                    email: info.email,
                    mobile: info.mobile
                }).render();
                BH("contactscard_add");
            }
            return false;
        },



        /**
         *点击邀请
         *@inner
         */
        onInviteClick: function () {
            var email = this.model.get("info").email;
            $App.jumpTo('invitebymail', {
                email: email
            });
            return false;
        },
        /**
         *点击拒收
         *@inner
         */
        onRejectClick: function () {
            $App.trigger("mailCommand", { command: "refuseMail", email: this.model.get("info").email });
            return false;
        },
        /**
         *点击往来邮件
         *@inner
         */
        onLetterHistoryClick:function(){
            $App.trigger("mailCommand", { command: "showTraffic", email: this.model.get("info").email });
            return false;
        },

        /**
         *点击邮件分类
         *@inner
         */
        onLetterSortClick: function () {
            $App.trigger("mailCommand", { command: "autoFilter", email: this.model.get("info").email,name: this.model.get("info").name});
            return false;
        },

        /**
         *点击设置标签
         *@inner
         */
        onLetterTagClick:function(){
            $App.trigger("mailCommand", { command: "autoFilterTag", email: this.model.get("info").email,name: this.model.get("info").name });
            return false;
        },
        /**
         *点击设置到达通知
         *@inner
         */
        onNotifyClick: function () {
            if (!$User.isChinaMobileUser()) {
                $User.showMobileLimitAlert();
                return;
            }
            $App.show("notice");
            return false;
        },
        /**
         *点击添加会删除vip联系人
         *@inner
         */
        onVipClick: function () {
            var This = this;
            var info = this.model.get('info');
            var param = {
                serialId : info.id,
                name : info.name,
                success : function(){
                    This.isVip = This.isVip == 1 ? 2 : 1;
                    This.updateVipIcon();

                    if (This.isVip == 1) {
                        $(top.$App.getCurrentTab().element).find("a.Vip").removeClass('user_gray_vip').addClass('user_vip');
                    } else {
                        $(top.$App.getCurrentTab().element).find("a.Vip").removeClass('user_vip').addClass('user_gray_vip');
                    }

                    $App.trigger("showMailbox", { comefrom: "commandCallback" });
                }
            };
            if(this.isVip == 1){
                top.Contacts.delSinglVipContact(param);
            }else if(this.isVip == 2){
                top.Contacts.addSinglVipContact(param);
            }
        },
        
        /**
         *@inner
         */
        onButtonClick: function (e) {
            var This = this;
            //除了点击更多按钮，其它都隐藏贺卡
            if (!$(e.target).hasClass("ShowMore")) {
                setTimeout(function () {
                    This.hide();
                }, 0);
            }
            M139.Logger.behaviorClick(e.target);//因为对话框很快被移除，无法冒泡，因此主动触发行为点击监控
            return false;
        }
    }));


    //静态函数
    jQuery.extend(M2012.UI.Widget.ContactsCard,
        /**@lends M2012.UI.Widget.ContactsCard*/
        {
            /**
             *显示联系人卡片
             *@param {Object} options 参数集合
             *@param {HTMLElement} options.dockElement 联系人卡片停靠的元素
             *@param {String} options.email 联系人的邮件地址（会自动搜索通讯录联系人）
             *@param {String} options.serialId 可选参数，联系人的id
             *@example
             M2012.UI.Widget.ContactsCard.show({
                dockElement:document.getElementById("myDiv")
                email:"lifula@139.com"
             });
             */
            show:function(options){
                this._create().show(options, true);
            },
            /**@inner*/
            _create: function () {
                if (!this.current) {
                    this.current = new M2012.UI.Widget.ContactsCard().render();
                }
                return this.current;
            }
        }
    );

 })(jQuery,_,M139);
﻿/**
 * @fileOverview 定义通讯录地址本组件Model对象
 */

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.Model.ModelBase;
    var namespace = "M2012.UI.Widget.Contacts.Model";
    M139.namespace(namespace, superClass.extend(
    /**@lends M2012.UI.Widget.Contacts.Model.prototype*/
    {
        /** 弹出菜单组件
         *@constructs M2012.UI.Widget.Contacts.Model
         *@extends M139.Model.ModelBase
         *@param {Object} options 初始化参数集
         *@param {String} options.filter 过滤的数据类型:email|mobile|fax
         *@param {Boolean} options.selectMode 如果是对话框选择模式，则增加一些功能
         *@example
         var model = new M2012.UI.Widget.Contacts.Model({
             filter:"email"
         });
         */
        initialize: function (options) {
            options = options || {};

            if (top.$App) {
                this.contactsModel = window.top.$App.getModel("contacts");
            } else {
                this.contactsModel = M2012.Contacts.getModel();
            }

            this.filter = options.filter;
            this.colate = options.colate; //change by Aerojin 2014.06.09 过滤非本域用户

            if (options.selectMode) {
                this.selectedList = [];
            }

            return superClass.prototype.initialize.apply(this, arguments);
        },
        name: namespace,

        dataReady: function (callback) {
            var This = this;
            this.contactsModel.requireData(function () {
                This.contactsData = This.contactsModel.get("data");
                callback();
            });
        },

        /**
         *重构收敛了添加选中联系人的方法
         */
        addSelectedItem: function (item) {
            //无filter，默认按serialId进行对比判同，在通讯录分组选择框中使用
            var compare = _.isUndefined(this.filter) ? item.serialId : item.addr;

            if(this.isSelectedItem(compare)){
                return false;
            }else{
                this.selectedList.push(item);
                return true;
            }
        },
        /**
         *获得组列表
         */
        getGroupList: function () {
            return this.contactsModel.getGroupList();
        },
        /**
         *获得读信联系人组id added by tj
         */
        getReadGroupId: function () {
            var groupList = this.getGroupList();
            for (var i = 0; i < groupList.length; i++) {
                if (groupList[i].name == "读信联系人") {
                    return groupList[i].id;
                }
            }
        },
        /**
         *获得组联系人
         */
        getGroupMembers: function (gid,options) {
            options = options || {};
            //change by Aerojin 2014.06.09 过滤非本域用户
            var contacts =  this.contactsModel.getGroupMembers(gid, {
                filter: this.filter || this.colate,
                colate: this.colate
            });
            if(options.getSendText){
                for(var i=0,len=contacts.length;i<len;i++){
                    if(this.filter == "email"){
                        contacts[i] = contacts[i].getEmailSendText();
                    }else if(this.filter == "mobile"){
                        contacts[i] = contacts[i].getMobileSendText();
                    } else if (this.filter == "fax") {
                        contacts[i] = contacts[i].getFaxSendText();
                    }
                }
            }
            return contacts;
        },


        /**
         * 获得最近联系人。先按内容与SerialId查找到联系人，然后再按条件获得联系方式，注意尽量保持原始的AddrContent
         */
        getLastestContacts: function (data) {
            var contacts = data || this.contactsData.lastestContacts;
            var result = [], ct;
            if (this.filter == "fax") {
                return result;//传真没实现最近紧密联系人
            }
            var addrType = this.filter == "email" ? "E" : "M";
            for (var i = 0, len = contacts.length; i < len; i++) {
                var c = contacts[i];
                var addrcontent = c.AddrContent;

                if (!/\d{5,}/.test(c.SerialId)) {
                    if (c.AddrType == "E") {
                        ct = this.contactsModel.getContactsByEmail(c.AddrContent)[0];
                    } else if (c.AddrType == "M") {
                        ct = this.contactsModel.getContactsByMobile(c.AddrContent)[0];
                    }
                } else {
                    ct = this.contactsData.contactsMap[c.SerialId];
                }

                if (ct) {
                    if (this.filter === "email" && c.AddrType !== "E") {
                        //条件是电邮，但是是通过手机号查找到的联系人，则取出第一电邮替代通讯方式
                        addrcontent = ct.getFirstEmail();
                        if (!addrcontent) {
                            ct = false;
                        }
                    } else if (this.filter === "mobile" && c.AddrType !== "M") {
                        addrcontent = ct.getFirstMobile();
                        if (!addrcontent) {
                            ct = false;
                        }
                    }
                }

                if (ct) {
                    result.push({
                        addr: addrcontent,
                        name: ct.name,
                        SerialId: ct.SerialId
                    });
                } else if (c.AddrType == addrType) {
                    var rndId = this.createLastContactsId();
                    this.lastContactsMap[rndId] = {
                        addr: c.AddrContent,
                        name: c.AddrName,
                        SerialId: rndId
                    };
                    result.push(this.lastContactsMap[rndId]);
                }
            }
            return result;
        },

        /**
         *生成一个假的联系人id，为了兼容一些不存在于通讯录中的最近联系人
         */
        createLastContactsId:function(){
            var rnd = parseInt(Math.random() * 100000000);
            return -rnd;
        },

        lastContactsMap: {},

        /**
         *获得紧密联系人
         */
        getCloseContacts: function () {
            var contacts = this.contactsData.closeContacts;
            return this.getLastestContacts(contacts);
        },
        /**
         *获得未分组联系人
         */
        getUngroupContacts: function (allContacts) {
            var contactsMap = this.contactsData.contactsMap;
            var noGroup = this.contactsData.noGroup;
            var result = [];
            //change by Aerojin 2014.06.18 过滤非本域用户
            for (var i = 0, len = noGroup.length; i < len; i++) {
                var c = contactsMap[noGroup[i]];
                if (this.colate && c && c.getFirstEmail().indexOf(this.colate) > -1) {
                    result.push(c);
                } else if (!this.colate && c) {
                    result.push(c);
                }
            }
            return result;
        },
        /**搜索联系人*/
        getSearchContacts: function () {
            var result = this.contactsModel.search(this.get("keyword"), {
                contacts: this.getContacts()
            });
            return result;
        },
        /**获得联系人*/
        getContacts: function () {
            var contacts = this.get("contacts");
            if (!contacts) {
                var contacts = this.contactsData.contacts;
                if (this.filter || this.colate) {
                    contacts = this.contactsModel.filterContacts(contacts, { filter: this.filter || this.colate, colate: this.colate }); //change by Aerojin 2014.06.09 过滤非本域用户
                }                
                this.set("contacts", contacts);
            }
            return contacts;
        },
        /**获得vip联系人*/
        getVIPContacts: function () {
            return this.contactsModel.getGroupMembers(this.contactsModel.getVIPGroupId(), { filter: this.filter });
        },
        /**获得vip分组id*/
        getVIPGroupId: function () {
            return this.contactsModel.getVIPGroupId();
        },
        getContactsById: function (cid) {
            if (cid > 0) {
                var item = this.contactsModel.getContactsById(cid);
                if (item) {
                    var email = item.getFirstEmail();
                    return {
                        //this.filter=undefined时,返回邮箱,以解决编辑/新建组手机号码为空的用户无法加入到组.--可能存在BUG--
                        addr: this.filter == "email" ? email : (item.getFirstMobile() || email),
                        name: item.name,
                        SerialId: item.SerialId
                    };
                } else {
                    return null;
                }
            } else {
                return this.lastContactsMap[cid];
            }
        },
        isSelectedItem:function(addr){
            var list = this.selectedList;
            for(var i=0,len = list.length;i<len;i++){
                if(list[i].addr == addr || list[i].SerialId == addr){
                    return true;
                }
            }
            return false;
        },
        getSendText:function(name,addr){
            return this.contactsModel.getSendText(name,addr);
        },

        /**清空最近联系人记录*/
        clearLastContacts: function (isClose) {
            var This = this;
            //todo 这是老的代码移植过来
            var param = {
                type: isClose ? "close" : "last"
            };
            var Msg = {
                warn_delclose: "确认清空所有紧密联系人记录？",
                warn_dellast: "确认清空所有最近联系人记录？"
            };
            top.$Msg.confirm(Msg['warn_del' + param.type], function () {
                top.addBehavior("19_9561_11清空最近/紧密", isClose ? "2" : "1");
                top.Contacts.EmptyLastContactsInfo(param, function (result) {
                    if (result.success) {
                        /**
                         *@event#M2012.UI.Widget.Contacts.Model
                         */
                        This.trigger("contactshistoryupdate");
                    } else {
                        top.$Msg.alert(result.msg);
                    }
                });
            }, {
                icon:"warn"
            });
        },

        /**清空紧密联系人记录*/
        clearCloseContacts:function(){
            this.clearLastContacts(true);
        },

        /**
         *重新加载通讯录数据
         */
        reloadContactsData: function () {
            this.contactsModel.loadMainData();
        }
    }));

})(jQuery, _, M139);
﻿/**
 * @fileOverview 定义通讯录地址本组件代码
 */

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    var namespace = "M2012.UI.Widget.Contacts.View";

    var GroupsId = {
        //所有联系人
        All: -1,
        //未分组
        Ungroup: -2,
        //最近联系人
        Lastest: -3,
        //紧密联系人
        Close: -4,
        Search: -5
    };

    M139.namespace(namespace, superClass.extend(
    /**@lends M2012.UI.Widget.Contacts.View.prototype*/
    {
        /** 定义通讯录地址本组件代码
         *@constructs M2012.UI.Widget.Contacts.View
         *@extends M139.View.ViewBase
         *@param {Object} options 初始化参数集
         *@param {String} options.type 地址本类型:email|mobile|fax|mixed
         *@param {Object} options.model model对象，为组件提供数据支持
         *@param {String} options.template 组件的html代码
         *@param {Boolean} options.showSelfAddr 是否显示发给自己，默认是true
         *@param {Boolean} options.showCreateAddr 是否显示添加联系人，默认是true 
         *@param {Boolean} options.showAddGroup 是否显示添加整组的图标，默认是true 
         *@param {Boolean} options.showLastAndCloseContacts 是否显示最近紧密联系人，默认是true 
         *@param {String} options.maxCount 最大添加个数
         *@example
         new M2012.UI.Widget.Contacts.View({
             container:document.getElementById("addrContainer"),
             filter:"email"
         }).render().on("select",function(e){
             if(e.isGroup){
                 alert(e.value.length);
             }else{
                 alert(e.value);
             }
         });
         */
        initialize: function (options) {
            var This = this;
            this.filter = options.filter;
            this.selectMode = options.selectMode;
            this.showCountElFlag = options.comefrom == 'compose_addrinput' ? 'none' : '';
            //change by Aerojin 2014.06.09 过滤非本域用户
            this.model = new M2012.UI.Widget.Contacts.Model({
                filter: this.filter,
                colate: options.colate,
                selectMode: this.selectMode
            });
            var el = $D.getHTMLElement(options.container);
            el.innerHTML = this.template;
            if(options.width !== "auto") {
            	el.style.width = "191px";
            }
            this.setElement(el);
            this.model.dataReady(function () {
                This.render();
                clearTimeout(timer);
            });

            //3秒后显示重试按钮
            var timer = setTimeout(function () {
                This.showRetryDiv();
            }, 3000);

            return superClass.prototype.initialize.apply(this, arguments);
        },
        name: namespace,
        retryCount: 0, //用户点击重新加载联系人的次数
        MemberFirstSize: 10, //分组里首次显示最多几个联系人
        MemberPageSize: 500,//分组里每次显示最多几个联系人，点更多加载更多
        template: ['<div class="AddrEmptyTip ta_c loadingerror" style="height:280px;padding:80px 0 0 0">',
        '<div class="LoadingImage" style="padding-top:50px;"><img src="/m2012/images/global/searchloading.gif" /></div>',
            '<div class="bodyerror RetryDiv" style="display:none">',
 		        '<img src="../images/global/smile.png" width="73" height="72">',
 		        '<p>没加载出来，再试一次吧。</p>',
 		        '<a class="btnTb BtnRetry" href="javascript:"><span class="p_relative">重新加载</span></a>',
 	        '</div>',
 		'</div>',
        '<div class="ContentDiv tabContent p_relative" style="display:none;">',
 	    '<div class="searchContact">',
 	      '<input type="text" class="searchContactText">',
 	      '<a hidefocus="1" href="javascript:;" class="searchContactBtn"><i class="i_c-search"></i></a>',
 	    '</div>',
        '<div class="searchEnd-empty SearchEmptyTip" style="display:none">',
            '<a href="javascript:" class="delmailTipsClose BtnCloseSearchEmptyTip"><i class="i_u_close"></i></a>',
            '<p class="gray">查找结果：</p>',
            '<p>没有符合条件的联系人</p>',
        '</div>',
 	    '<div class="searchEnd" style="display:none">',
 		    '<ul class="contactList">',
            '<li data-groupId="-5"><a hidefocus="1" class="GroupButton contactList_a" href="javascript:;" title="显示或隐藏成员列表"><i class="i_plusj"></i><span>搜索结果</span><var></var></a>',
            '<ul class="pb_5">',
               //'<li><a href="javascript:void(0)">18688959302</a></li>',
             '</ul>',
            '</li>',
            '</ul>',
 	    '</div>',
         '<ul class="contactList GroupList">',
           
         '</ul>',
         '<div class="contactListNew">',
		    '<a bh="compose_addressbook_createcontacts" hidefocus="1" class="AddNewContacts" href="javascript:;">+ 新建联系人</a>',
		 '</div>',
        '</div>'].join(""),
        GroupItemTemplate: [
            '<li data-groupId="{groupId}">',
             '<a title="{clearGroupTitle}" href="javascript:;" style="display:{showClearGroup}" class="i_r_yq2 i_dels ClearGroup"></a>',
             '<a bh="compose_addressbook_addgroupclick" hidefocus="1" style="display:{showAddGroup}" title="添加整组" href="javascript:;" class="i_r_yq2 AddGroup"></a>',
             '<a bh="{behavior}" hidefocus="1" class="GroupButton contactList_a" href="javascript:;" title="显示或隐藏成员列表">',
                 '<i class="i_plusj"></i>',
                 '<span>{groupName}</span>',
                 '<var style="display:{showCountEl}">({count})</var>',
                 '</a>',
             '<ul class="pb_5" style="display:none"></ul>',
           '</li>'].join(""),
        MemberItemTemplate: '<li style="display:{display}" class="ContactsItem" data-addr="{addr}" data-contactsId="{contactsId}"><a hidefocus="1" href="javascript:void(0)" title="{addrTitle}">{contactsName}</a></li>',
        //联系人容器dom
        GroupContainerPath: "ul.GroupList",
        events: {
            "click .GroupButton": "onGroupButtonClick",
            "click .LoadMoreMember": "onLoadMoreMemberClick",
            "click .ContactsItem": "onContactsItemClick",
            "click .searchContactBtn": "onClearSearchInput",
            "click .AddGroup": "onAddGroupClick",
            "click .SendToMySelf": "onSendToMySelfClick",
            "click .AddNewContacts": "onAddNewContactsClick",
            "click .BtnCloseSearchEmptyTip": "hideGroupEmptyTip",
            "click .BtnRetry": "onRetryClick",
            "click .ClearGroup": "onClearGroupClick"
        },
        /**构建dom函数*/
        render: function () {
            var options = this.options;

            this.clearSearchButton = this.$("a.searchContactBtn");

            this.$(".AddrEmptyTip").hide();

            this.renderGroupListView();

            this.initEvent();

            if (options.showSelfAddr === false) {
                this.$(".SendToMySelf").hide();
            }
            if (options.showCreateAddr === false) {
                this.$(".contactListNew").hide();
            }
            this.$("div.ContentDiv").show();
            this.render = function () {
                return this;
            }

            return superClass.prototype.render.apply(this, arguments);
        },

        /**
         *加载联系组界面
         *@inner
         */
        renderGroupListView: function () {
            var groups = this.model.getGroupList();
            var htmlCode = ['<li class="SendToMySelf contactList_a"><a bh="compose_addressbook_sendself" hidefocus="1" href="javascript:void(0)">发给自己</a></li>'];
            var template = this.GroupItemTemplate;

            if (this.options.showLastAndCloseContacts !== false) {

                //最近联系人
                htmlCode.push(M139.Text.format(template, {
                    groupId: GroupsId.Lastest,
                    groupName: "最近联系人",
                    clearGroupTitle:"清空最近联系人记录",
                    showCountEl: this.showCountElFlag,
                    count: this.model.getLastestContacts().length,
                    behavior: "compose_addressbook_lastcontacts",
                    showAddGroup: "none",
                    showClearGroup: ""
                }));

                //紧密联系人
                htmlCode.push(M139.Text.format(template, {
                    groupId: GroupsId.Close,
                    groupName: "紧密联系人",
                    clearGroupTitle: "清空紧密联系人记录",
                    showCountEl: this.showCountElFlag,
                    count: this.model.getCloseContacts().length,
                    behavior: "compose_addressbook_closecontacts",
                    showAddGroup: "none",
                    showClearGroup: ""
                }));
            }
            //所有联系人
            htmlCode.push(M139.Text.format(template, {
                groupId: GroupsId.All,
                groupName: "所有联系人",
                showCountEl: this.showCountElFlag,
                count: this.model.getContacts().length,
                behavior: "compose_addressbook_allcontacts",
                showAddGroup: "none",
                showClearGroup: "none"
            }));

            //未分组联系人
            htmlCode.push(M139.Text.format(template, {
                groupId: GroupsId.Ungroup,
                groupName: "未分组",
                showCountEl: this.showCountElFlag,
                count: this.model.getUngroupContacts().length,
                behavior: "compose_addressbook_ungroup",
                showAddGroup: "none",
                showClearGroup: "none"
            }));
            if (this.options.showVIPGroup !== false) {
                //vip联系人
                htmlCode.push(M139.Text.format(template, {
                    groupId: this.model.getVIPGroupId(),
                    groupName: "VIP联系人",
                    showCountEl: this.showCountElFlag,
                    count: this.model.getGroupMembers(this.model.getVIPGroupId()).length,
                    behavior: "compose_addressbook_vip",
                    showAddGroup: this.options.showAddGroup === false ? "none" : "",
                    showClearGroup: "none"
                }));
            }
            for (var i = 0, len = groups.length; i < len; i++) {
                var g = groups[i];
                var members = this.model.getGroupMembers(g.id).length;
                var showAddGroup = this.options.showAddGroup === false ? "none" : "";
                var h = null;

                //读信联系人特别处理上报
                if (g.name == "读信联系人") {
                    h = M139.Text.format(template, {
                        groupId: g.id,
                        groupName: M139.Text.Html.encode(M139.Text.Utils.getTextOverFlow(g.name, 6, true)),
                        showCountEl: this.showCountElFlag,
                        count: members,
                        behavior: "compose_addressbook_readcontacts",
                        showAddGroup: showAddGroup,
                        showClearGroup: "none"
                    });
                }
                else {
                    h = M139.Text.format(template, {
                        groupId: g.id,
                        groupName: M139.Text.Html.encode(M139.Text.Utils.getTextOverFlow(g.name, 6, true)),
                        showCountEl: this.showCountElFlag,
                        count: members,
                        behavior: "compose_addressbook_customcontacts",
                        showAddGroup: showAddGroup,
                        showClearGroup: "none"
                    });
                }
                htmlCode.push(h);
            }
            htmlCode = htmlCode.join("");
            this.$(this.GroupContainerPath)[0].innerHTML = htmlCode;

            if (this.options.showSelfAddr === false) {
                this.$(".SendToMySelf").hide();
            }
        },
        /**
         *初始化事件行为
         *@inner
         */
        initEvent: function () {
            var This = this;
            //切换展开组
            this.model.on("change:currentGroup", function (model, gid) {
                var oldGid = model.previous("currentGroup");
                if (oldGid != null) {
                    this.hideGroupMember(oldGid);
                }
                if (gid) {
                    this.showGroupMember(gid);
                }
            }, this);

            //最近紧密联系人记录清除后
            this.model.on("contactshistoryupdate", function () {
                This.updateView();
            });

            //监听搜索框输入
            var input = this.$("input")[0];
            M139.Timing.watchInputChange(input, function () {
                This.onSearchInputChange(input.value);
            });

            //选择模式下，选中的联系人左边列表要隐藏
            if (this.selectMode) {
                this.on("additem", function (e) {
                    var addr = [];
                    if (!e.isGroup) {
                        e.SerialId = e.serialId;
                        addr = [e];
                    } else {
                        addr = e.value;
                    }

                    if (This.filter) {
                        for (var i=0; i<addr.length; i++) {
                            if(addr[i].addr && addr[i].addr.length){
                                This.utilGetMemberElement(addr[i].addr).hide();
                            }else{
                                This.utilGetMemberElementById(addr[i].serialId).hide();
                            }
                        }
                    } else {
                        for (var i=0; i<addr.length; i++) {
                            This.utilGetMemberElementById(addr[i].serialId).hide();
                        }
                    }
                });
                this.on("removeitem", function (e) {
                    if (This.filter) {
                        if(e && e.addr.length){     
                            This.utilGetMemberElement(e.addr).show();
                        }else{
                            This.utilGetMemberElementById(e.serialId).hide();
                        }
                    } else {
                        This.utilGetMemberElementById(e.serialId).show();
                    }
                });
            }

            this.on("print", function () {
                this.model.set("currentGroup", GroupsId.Lastest);
            });

        },
        /**@inner*/
        showGroupEmptyTip:function(){
            this.$(".SearchEmptyTip").show();
        },
        /**@inner*/
        hideGroupEmptyTip:function(){
            this.$(".SearchEmptyTip").hide();
        },

        /**
         *显示重试按钮
         *@inner
        */
        showRetryDiv: function () {
            var This = this;
            This.$(".LoadingImage").hide();
            This.$(".RetryDiv").show();

            if (This.retryCount > 1) {
                var total = -1, arrlength = -1, glength = -1, datstr = "hasdata";
                var cmodel = This.model.contactsModel || {};
                if (cmodel.get) {
                    var data = cmodel.get("data");
                    if (_.isUndefined(data)) {
                        datstr = "nodata";
                    } else {
                        total = data.TotalRecord;
                        if ($.isArray(data.Contacts)) {
                            arrlength = data.Contacts.length;
                        }
                        if ($.isArray(data.Groups)) {
                            glength = data.Groups.length;
                        }
                    }
                }

                This.logger.error($TextUtils.format('addrlist retry fail|filter={0}|mode={1}|retry={2}|data={3}|isLoading={4}|total={5}|contacts={6}|groups={7}',
                    [This.filter, This.selectMode, This.retryCount, datstr, cmodel.isLoading, total, arrlength, glength]));
            }
        },

        /**@inner*/
        renderMemberView: function (gid, mode) {
            var container = this.utilGetMemberContainer(gid);
            var containerInit = container.attr("init") || 0;
            if (mode == "init" && container.attr("init") == 1) {
                return;
            }

            //显示组成员
            var htmlCode = [];
            var template = this.MemberItemTemplate;
            var contacts;
            if (gid == GroupsId.All) {
                contacts = this.model.getContacts();
            } else if (gid == GroupsId.Lastest) {
                contacts = this.model.getLastestContacts();
            } else if (gid == GroupsId.Close) {
                contacts = this.model.getCloseContacts();
            } else if (gid == GroupsId.Ungroup) {
                contacts = this.model.getUngroupContacts();
            } else if (gid == GroupsId.Search) {
                contacts = this.model.getSearchContacts();
            } else {
                contacts = this.model.getGroupMembers(gid);
            }

            if (gid == GroupsId.Search && contacts.length == 0) {
                //显示搜索结果为空的提示
                this.showGroupEmptyTip();
                this.switchGroupMode();
            } else {
                this.hideGroupEmptyTip();
            }


            //一共几个联系人
            var total = contacts.length;
            //当前已显示几个
            var showCount = container.find("li[data-addr]").length;
            //一次追加几个
            var pageSize = containerInit == 1 ? this.MemberPageSize : this.MemberFirstSize;

            //分页显示的，每次显示10个，点击更多每次新显示10
            for (var i = showCount, len = Math.min(showCount + pageSize, total) ; i < len; i++) {
                var c = contacts[i];
                var addr = c.addr || this.getAddr(c);//最近联系人直接有addr属性，联系人对象需要获取
                var addrText = M139.Text.Html.encode(addr);

                if (!this.filter){
                    addr = c.SerialId;
                }

                var isDisplay = !(this.selectMode && this.model.isSelectedItem(addr))

                htmlCode.push(M139.Text.format(template, {
                    contactsId: c.SerialId,
                    contactsName: M139.Text.Html.encode(c.name),
                    addr: addrText,
                    addrTitle: addrText,
                    display: isDisplay ? "" : "none"
                }));
            }
            //如果还没显示完
            if (showCount + pageSize < total) {
                htmlCode.push('<li class="LoadMoreMember" data-groupId="'
                    + gid + '"><a hidefocus="1" href="javascript:;">更多<span class="f_SimSun">↓</span></a></li>');
            }
            htmlCode = htmlCode.join("");
            container.append(htmlCode);
            container.attr("init", 1);//表示已经加载过一次数据了
        },
        /**@inner*/
        onLoadMoreMemberClick: function (e) {
            $(M139.Dom.findParent(e.currentTarget, "li")).hide();
            var gid = this.utilGetClickGroupId(e);
            this.renderMemberView(gid);
        },


        /**@inner*/
        onClearSearchInput: function () {
            top.BH('compose_addressbook_search');
            var txt = this.$("input:text");
            if (this.$(".searchContact").hasClass("searchContact-on")) {
                txt.val("");
            }
            this.hideGroupEmptyTip();
            txt.focus();           
        },

        /**
         *搜索框输入值变化
         *@inner
         */
        onSearchInputChange: function (value) {
            if (value == "") {
                this.switchGroupMode();
                this.$(".searchContact").removeClass("searchContact-on");
            } else {
                this.renderSearchView(value);
                this.$(".searchContact").addClass("searchContact-on");
                this.trigger('BH_onSearch');
            }
        },

        /**
         *从搜索视图返回正常视图
         *@inner*/
        switchGroupMode: function () {
            this.$(".searchEnd").hide();
            this.$(".GroupList").show();
        },

        /**@inner*/
        renderSearchView: function (keyword) {
            this.$(".GroupList").hide();
            this.$(".searchEnd").show();
            this.$(".searchEnd li ul").html("").attr("init", 0);
            this.model.set("keyword", keyword);
            this.model.set("currentGroup", null);//否则不会触发change:currentGroup
            this.model.set("currentGroup", GroupsId.Search);
        },
        /**@inner*/
        onGroupButtonClick: function (e) {
            var gid = this.utilGetClickGroupId(e);
            var currentGid = this.model.get("currentGroup");
            if (currentGid == gid) {
                this.model.set("currentGroup", null);
            } else {
                this.model.set("currentGroup", gid);
            }
        },

        /**
         *点击发给自己
         *@inner
        */
        onSendToMySelfClick: function () {
            var name = top.$User.getTrueName();
            if(this.filter == "email"){
                var addr = top.$User.getDefaultSender();
            }else if(this.filter == "mobile"){
                var addr = top.$User.getShortUid();
            }
            var sendText = this.model.getSendText(name,addr);
            var result = {
                value:sendText,
                name:name,
                addr:addr
            };
            if (this.selectMode) {
				if (this.model.selectedList.length >= this.options.maxCount) {
                    this.trigger("additemmax");
                } else {
				    var ok = this.model.addSelectedItem(result);
				    ok && this.trigger("additem", result);
                }
            } else {
                this.trigger("select", result);
            }
        },


        /**@inner*/
        showGroupMember: function (gid) {
            this.renderMemberView(gid, "init");
            //显示成员容器
            this.utilGetMemberContainer(gid).show();
            //折叠+变-
            this.utilGetGroupElement(gid).find("a.GroupButton i").addClass("i_minus");
        },
        /**@inner*/
        hideGroupMember: function (gid) {
            //隐藏成员容器
            this.utilGetMemberContainer(gid).hide();
            //折叠-变+
            this.utilGetGroupElement(gid).find("a.GroupButton i").removeClass("i_minus");
        },

        /**
         *点击选择联系人
         *@inner
         */
        onContactsItemClick: function (clickEvent) {
            var cid = M139.Dom.findParent(clickEvent.target, "li").getAttribute("data-contactsId");
            var c = this.model.getContactsById(cid);
            var sendText = this.model.getSendText(c.name, c.addr);
            var result = {
                value:sendText,
                name:c.name,
                addr: c.addr,
                serialId: c.SerialId
            };
            if (this.selectMode) {
                if (this.model.selectedList.length >= this.options.maxCount) {
                    this.trigger("additemmax");
                } else if(this.options.isAddVip && top.Contacts.IsPersonalEmail(c.SerialId)){
						top.FF.alert("不支持添加自己为VIP联系人。");
				}else{
                    var ok = this.model.addSelectedItem(result);
                    ok && this.trigger("additem", result);
				}
            } else {
                this.trigger("select", result);
                //最近联系人
                if ($(clickEvent.currentTarget).parent().parent().attr("data-groupid") == -3) {
                    top.BH("compose_addressbook_lastitem");
                }
                //紧密联系人
                else if ($(clickEvent.currentTarget).parent().parent().attr("data-groupid") == -4) {
                    top.BH("compose_addressbook_closeitem");
                }
                //所有联系人
                else if ($(clickEvent.currentTarget).parent().parent().attr("data-groupid") == -1) {
                    top.BH("compose_addressbook_allitem");
                }
                //未分组
                else if ($(clickEvent.currentTarget).parent().parent().attr("data-groupid") == -2) {
                    top.BH("compose_addressbook_noitem");
                }
                //vip联系人
                else if ($(clickEvent.currentTarget).parent().parent().attr("data-groupid") == this.model.getVIPGroupId()) {
                    top.BH("compose_addressbook_vipitem");
                }
                //读信联系人
                else if ($(clickEvent.currentTarget).parent().parent().attr("data-groupid") == this.model.getReadGroupId()) {
                    top.BH("compose_addressbook_readitem");
                }
                else {
                    BH("compose_addressbook_itemclick");
                }
            }
        },

        /**
         *点击添加整组
         *@inner
         */
        onAddGroupClick: function (e) {
            var item;            
            var gid = this.utilGetClickGroupId(e);
            if (gid > 0) {
                if (this.selectMode) {
                    var list = this.model.getGroupMembers(gid).concat();
					var vipList=[];

                    for (var i = 0; i < list.length; i++) {
                        var c = list[i];
						if (this.filter == "email") {
                            var sendText = c.getEmailSendText();
                        } else if (this.filter == "mobile") {
                            var sendText = c.getMobileSendText();
                        }  
                        item = {
                            value:sendText,
                            name:c.name,
                            addr: this.getAddr(c),
                            serialId: c.SerialId,
                            SerialId: c.SerialId
                        };
                        list[i] = item;
						if (this.model.selectedList.length >= this.options.maxCount) {
							this.trigger("additemmax");
                            break;
                        } else if(this.options.isAddVip){ //vip联系人不能重复被选中-添加整组排重
							var selected = this.model.selectedList;
							var hasSelevted = false;
							for(var j=0; j< selected.length;j++){
								if(item.serialId == selected[j].serialId ||top.Contacts.IsPersonalEmail(item.serialId)){
									hasSelevted = true;
									break;
								}
							}
							if(!hasSelevted){
								var ok = this.model.addSelectedItem(item);
								ok && vipList.push(item);
							}
                        } else {
                            var ok = this.model.addSelectedItem(item);
                            if (!ok) {
                                list.splice(i, 1);
                                i--;
                            }
                        }
                    }
                    this.trigger("additem", {
                        isGroup: true,
                        group: gid,
                        value: !this.options.isAddVip? list:vipList
                    });
                } else {
                    this.trigger("select", {
                        isGroup: true,
                        group: gid,
                        value: this.model.getGroupMembers(gid, {
                            getSendText: true
                        })
                    });
                }
                this.utilGetMemberContainer(gid).find("li").hide();
            }

            this.trigger("BH_onAddGroup");//增加行为ID
        },

        /**
         *点击添加联系人
         *@inner
         */
        onAddNewContactsClick: function () {
            var This = this;
            var topWin = M139.PageApplication.getTopAppWindow();
            var addView = new topWin.M2012.UI.Dialog.ContactsEditor().render();
            addView.on("success", function (result) {
                This.trigger('addContact', result);
                This.onAddContacts();
                //上报添加联系人成功行为
                BH("compose_linkmansuc");
            });

            addView.on('addGroupSuccess', function(result){                
                This.trigger('addGroup', result);
            });

            this.trigger('BH_onAddNewContacts');
        },

        /**
         *添加联系人成功时触发
         */
        onAddContacts: function () {
            this.updateView();
        },

        /**
         *由于数据变化 重绘通讯录界面
         */
        updateView:function(){
            //清除缓存数据
            this.model.set("contacts", null);
            this.renderGroupListView();
            this.model.set("currentGroup", null);
        },

        /**
         *点击重试，重新加载通讯录数据
         */
        onRetryClick: function () {
            var This = this;
            This.retryCount++;

            this.$(".LoadingImage").show();
            this.$(".RetryDiv").hide();
            setTimeout(function () {
                This.showRetryDiv();
            }, 5000);
            this.model.reloadContactsData();
        },

        /**
         *点击清空最近、紧密联系人
         */
        onClearGroupClick: function (e) {
            if ($(e.target).parent().attr('data-groupid') == -3) {
                top.BH("compose_addressbook_lastcancel");
            }
            if ($(e.target).parent().attr('data-groupid') == -4) {
                top.BH("compose_addressbook_closecancel");
            }
            var gid = this.utilGetClickGroupId(e);
            if (gid == GroupsId.Lastest) {
                this.model.clearLastContacts();
            } else if (gid == GroupsId.Close) {
                this.model.clearCloseContacts();
            }
        },

        /**
         *todo move to model
         *@inner
         */
        getAddr: function (c) {
            var addr = "";
            if (this.filter == "email") {
                addr = c.getFirstEmail();
            } else if (this.filter == "mobile") {
                addr = c.getFirstMobile();
            } else if (this.filter == "fax") {
                addr = c.getFirstFax();
            } else {
                addr = c.SerialId;
            }
            return addr;
        },

        /**
         *todo move to model
         *添加已选的部分联系人（对话框选择模式下有用）
         */
        addSelectedItems: function (selContacts) {
            var filter = this.filter;
            for (var i = 0; i < selContacts.length; i++) {
                var c = selContacts[i];
                if (typeof c == "object") {
                    var ok = this.model.addSelectedItem(c);
                    ok && this.trigger("additem", c);
                } else {
                    var addr = "";
                    var name = "";
                    if (filter == "email") {
                        addr = M139.Text.Email.getEmail(c);
                        name = M139.Text.Email.getName(c);
                        value = M139.Text.Email.getSendText(name, addr);
                    } else if (filter == "mobile") {
                        addr = M139.Text.Mobile.getMobile(c);
                        name = M139.Text.Mobile.getName(c);
                        value = M139.Text.Mobile.getSendText(name, addr);
                    }
                    if (addr) {
                        var item = {
                            name: name,
                            addr: addr,
                            value: value
                        };
                        var ok = this.model.addSelectedItem(item);
                        ok && this.trigger("additem", item);
                    }
                }
            }


        },
        removeSelectedAddr: function (param) {
            var list = this.model.selectedList;
            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                var tmpCopareItem ="";
				tmpCopareItem = !this.options.isAddVip? item.addr :item.serialId;

                if (!this.filter) {
                    tmpCopareItem = item.serialId;
                }


				if (tmpCopareItem == param) {
                    list.splice(i, 1);
                    this.trigger("removeitem", item);
                    return;
                }
            }

        },

        /**
         *选择模式下获得选中的成员
         */
        getSelectedItems:function(){
            if(this.selectMode){
                var result = this.model.selectedList.concat();
                return result;
            }else{
                return null;
            }
        },

        /**@inner*/
        utilGetClickGroupId: function (clickEvent) {
            return M139.Dom.findParent(clickEvent.target, "li").getAttribute("data-groupId");
        },
        utilGetMemberElement: function (addr) {
            return this.$("li[data-addr='" + addr + "']");
        },

        /**@inner*/
        utilGetMemberElementById: function (serialId) {
            return this.$("li[data-contactsid='" + serialId + "']");
        },

        /**@inner*/
        utilGetGroupElement: function (gid) {
            return this.$("li[data-groupId='" + gid + "']");
        },
        /**@inner*/
        utilGetMemberContainer: function (gid) {
            return this.utilGetGroupElement(gid).find("ul");
        }

    }));
})(jQuery, _, M139);
﻿/**
 * @fileOverview 定义通讯录地址本对话框
 */

 (function(jQuery,_,M139){
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    var namespace = "M2012.UI.Dialog.AddressBook";

    M139.namespace(namespace,superClass.extend(
    /**@lends M2012.UI.Dialog.AddressBook.prototype*/
    {
       /** 定义通讯录地址本组件代码
        *@constructs M2012.UI.Dialog.AddressBook
        *@extends M139.View.ViewBase
        *@param {Object} options 初始化参数集
        *@param {String} options.filter 地址本类型:email|mobile|fax|mixed
        *@param {String} options.receiverText 显示接收人标题（默认为"接收人")
        *@param {String} options.dialogTitle 对话框标题（默认为"从联系人添加");
        *@param {Boolean} options.getDetail 是否返回object类型的联系人数据
        *@param {Boolean} options.showLastAndCloseContacts 是否显示最近联系人、紧密联系人（默认值为true)
        *@param {Boolean} options.showVIPGroup 是否显示最近联系人、紧密联系人（默认值为true)
        *@example
        */
        initialize: function (options) {
            this.filter = options.filter;
            return superClass.prototype.initialize.apply(this, arguments);
        },
        name: namespace,
        template:['<div class="addFormContact">',
             '<table>',
                 '<tbody><tr>',
                     '<td width="193">联系人(<var class="Label_ContactsLength"></var>)</td>',
                     '<td width="36"></td>',
                     '<td width="195"><var class="Label_ReceiverText"></var></td>',
                 '</tr>',
                 '<tr>',
                     '<td>',
                     '<div class="addFcLeft p_relative AddressBookContainer">',
                     '</div>',
                     '</td>',
                     '<td class="ta_c"><i class="i_addjt"></i></td>',
                     '<td>',
                         '<div style="width:221px;" class="menuPop addFcRight">',
                             /*
                             '<a href="#" class="lia">',
                                 '<i class="i_del"></i>',
                                 '<span>18688959302 sdfsdffffffffffffffffffffffffffffffff</span>',
                             '</a>',
                             */
                         '</div>',
                     '</td>',
                 '</tr>',
             '</tbody></table>',
         '</div>'].join(""),

        /**构建dom函数*/
        render:function(){
            var This = this;
            var options = this.options;

            this.dialog = $Msg.showHTML(this.template,function(){
                This.onSelect();
            },function(){
                This.onCancel();
            },{
                width:"500px",
                buttons:["确定","取消"],
                dialogTitle:options.dialogTitle || "从联系人添加"
            });

            this.addressBook = new M2012.UI.Widget.Contacts.View({
                container: this.dialog.$(".AddressBookContainer")[0],
                showLastAndCloseContacts: options.showLastAndCloseContacts,
                showVIPGroup: options.showVIPGroup,
                showSelfAddr:options.showSelfAddr,
                maxCount: options.maxCount,
                selectMode:true,
                filter:this.filter,
				isAddVip:options.isAddVip,
                comefrom:options.comefrom
            }).render().on("additem", function (e) {
                if (e.isGroup) {
                    var list = e.value;
                    for (var i = 0; i < list.length; i++) {
                        var item = list[i];
                        This.onAddItem(item.name, item.addr,item.serialId);
                    }
                } else {
                    This.onAddItem(e.name, e.addr,e.serialId);
                }
            }).on("removeitem",function(e){
                This.onRemoveItem(e.addr,e.serialId);
            }).on("additemmax", function (e) {
                This.trigger("additemmax");
            });

            this.on("print",function(){
                //初始化组件的时候，有可能用户已经添加了部分联系人
                if(options.items){
                    this.addressBook.addSelectedItems(options.items);
                }
            });

            this.setElement(this.dialog.el);

            this.setTips({
                contactsLength:this.addressBook.model.getContacts().length,
                receiverText:options.receiverText || "接收人"
            });

            this.initEvent();

            return superClass.prototype.render.apply(this, arguments);
        },
        selectedTemplate: ['<a hidefocus="1" data-contactsid ="{serialId}"  data-addr="{addr}" href="javascript:;" class="lia">',
            '<i class="i_del"></i>',
            '<span>{sendText}</span>',
        '</a>'].join(""),
        initEvent:function(e){
            var This = this;
            this.$(".addFcRight").click(function(e){
                if(e.target.className == "i_del"){
                   
					var addr = e.target.parentNode.getAttribute("data-addr");
					if(This.options.isAddVip){
						addr = e.target.parentNode.getAttribute("data-contactsid");
					}
					This.addressBook.removeSelectedAddr(addr);
                }
            });
        },
        onAddItem:function(name,addr,serialId){
            var sendText = this.filter == "email" ? M139.Text.Email.getSendText(name,addr) :
                M139.Text.Mobile.getSendText(name,addr);
            var html = M139.Text.format(this.selectedTemplate,{
                addr:M139.Text.Html.encode(addr),
                sendText:M139.Text.Html.encode(sendText),
                serialId:M139.Text.Html.encode(serialId)
            });
            $(".addFcRight").append(html);
        },
        onRemoveItem:function(addr,serialId){
           if(!this.options.isAddVip){
				this.$("a[data-addr='"+addr+"']").remove();
			}else{
				this.$("a[data-contactsid='"+serialId+"']").remove();
			}
        },
        setTips:function(options){
            this.$(".Label_ContactsLength").html(options.contactsLength);
            this.$(".Label_ReceiverText").html(options.receiverText);
        },
        onSelect:function(){
            var items = this.addressBook.getSelectedItems();
            //默认返回的是["",""]，如果是getDetail返回[{},{}],可以有serialId等参数
            if (this.options.getDetail !== true) {
                for (var i = 0; i < items.length; i++) {
                    items[i] = items[i].value;
                }
            }
            this.trigger("select",{
                value:items
            });
        },
        onCancel:function(){
            this.trigger("cancel");
        }
    }));


     //扩展静态函数
    $.extend(M2012.UI.Dialog.AddressBook,
    /**@lends M2012.UI.Dialog.AddressBook*/
    {
        /**
        *创建实例
        *@param {Object} options 参数集
        *@example
        */
        create: function (options) {
            var view = new M2012.UI.Dialog.AddressBook(options).render();
            return view;
        }
    });
 })(jQuery,_,M139);
﻿/**
 * @fileOverview 定义树目录组件
 */

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    var namespace = "M2012.UI.TreeView.MainView";
    M139.namespace(namespace, superClass.extend(
     /**
      *@lends M2012.UI.TreeView.MainView".prototype
      */
    {
        /** 树目录组件
        *@constructs M2012.UI.TreeView.MainView
        *@extends M139.View.ViewBase
        *@param {Object} options 初始化参数集
        *@param {String} options.template 组件的html代码
        *@param {Array} options.treeViewContainer 定义树视图的容器路径
        *@param {Array} options.nodeTemplate 定义子节点的html结构
        *@param {Array} options.nodeLabel 定义子节点的标题路径
        *@param {Array} options.nodeLabelIcon 定义子节点的图标元素路径
        *@param {Array} options.nodeSwitchButton 定义子节点的展开状态开关元素
        *@param {Array} options.nodes 定义子节点数据源
        *@example
        */
        initialize: function (options) {
            if (options.el) {
                var $el = $(options.el);
                $el.html(options.template);
            } else {
                var $el = jQuery(options.template);
            }

            this.model = new Backbone.Model();
            this.nodes = options.nodes;


            this.setElement($el);

            return superClass.prototype.initialize.apply(this, arguments);
        },

        defaults: {
            name: namespace
        },
        
        render: function () {
            var options = this.options;
            this.treeViewContainer = this.$(options.treeViewContainer);
            

            this.initEvent();
            this.renderNodes();
			this.updatePathTip();
            return superClass.prototype.render.apply(this, arguments);
        },

        initEvent:function(){
            this.model.on("change:selectedNode", function (model,node) {
                var lastNode = model.previous("selectedNode");
              	var curNode = model.get("selectedNode");
                if (lastNode) {
                    lastNode.unselect();
                }
                if(curNode){
	                var curNodeEl = curNode.$el;
	                curNodeEl[0].scrollIntoView();
		            var textEl = $(model.get("selectedNode").$el).find("span").eq(0);

	                textEl.css({
	                    color: "white",
	                    background: "rgb(50,119,222)"
	                });

                }
				
                this.updatePathTip();

            },this);
            
        },
        getSelectPath:function(){
            var node = this.model.get("selectedNode");
            var path = [];
            while (node) {
				if(node.text == "彩云网盘"){
					node.text = "全部文件";
				}
				var nodeId = node.tag.directoryId;
				var nodeText = node.text;
				nodeText = M139.Text.Utils.getTextOverFlow(nodeText, 5, false);//夹断文件夹名;
                path.unshift('<a href="javascript:void(0);" nodeid="'+ nodeId +'">'+ nodeText +'</a>');
				//path.unshift(nodeText);
                node = node.parentNode;
            }
            return path;
        },

        /**
         *上面显示选中的路径
         */
        updatePathTip:function(){
			//debugger;
			var This = this;
           var path = this.getSelectPath();
		// 移动到顶部   
        //   for (var i = 0; i < path.length; i++) {
        //       path[i] = M139.Text.Utils.getTextOverFlow(path[i], 5, false);//夹断文件夹名
        //   }
			var newPath = [];
			var length = path.length;
			if(length > 5){
				newPath = [path[0], path[1], '...', path[length-2], path[length-1]];
			}else{
				newPath = path;
			}
           this.$(".attrsavediskP").html("" + newPath.join(" > "));
            //this.$(".attrsavediskP").text("保存至：彩云网盘");
			this.$(".attrsavediskP a").unbind("click").bind("click",function(){
				var thisid = $(this).attr("nodeid");
				This.options.selectedId = thisid;
				//This.renderNodes();
				This.onNodeSelected(This.containers[thisid]);
			});
        },
		containers:{},
        onNodeSelected:function(node){
            this.model.set("selectedNode", node);
			this.updatePathTip();
        },
        renderNodes: function () {
            var This = this;
            var options = this.options;
		//	debugger;
            var nodesLen = this.nodes.length;
            for (var i = 0; i < nodesLen; i++) {
                var item = this.nodes[i];
                var node = new M2012.UI.TreeView.NodeView({
                    tree: this,
                    depth:0,
                    text: item.text,
                    tag: item.tag,
                    childNodes : item.childNodes,
                    template: options.nodeTemplate,
                    label: options.nodeLabel,
                    labelIcon: "a > i:eq(1)",
                    switchButton: "a > i:eq(0)",
                    childContainer: options.nodeChildContainer,
                    container: this.treeViewContainer,
                    selectedId : options.selectedId, // add by tkh
                    containers : This.containers
                });
                node.render();

                
				if(This.containers[item.directoryId] != 'undefined'){
					This.containers[item.directoryId] = node ;
				}
				// add by tkh 默认选中元素
				if(options.selectedId){
					if(options.selectedId == item.tag.directoryId){
						node.select();
					}
				}else{
					if (node.tag.directoryId === 10) {
	                    node.select();//选中根元素
	                }
				}
            }
        }
    }));
    var DefalutStyle = {
        template: [
 			'<p class="attrsavediskP">',//电影存盘<span class="fsongt">&gt;</span>港台电影
 			'</p>',
 			'<div class="attrsavedisk">',
 			'<ul>',
 			'</ul>',
 			'</div>'].join(""),
        nodeTemplate:['<li>',
            '<a href="javascript:;" class="on txtd"><i class="i_plus"></i><i class="i_wjj"></i><span>text</span></a>',
            '<ul></ul>',
        '</li>'].join(""),
        nodeLabel: "a:eq(0)",
        nodeLabelIcon: "a > i:eq(1)",
        nodeSwitchButton: "a > i:eq(0)",
        nodeChildContainer: "ul",
        treeViewContainer: ".attrsavedisk > ul"
    };

    jQuery.extend(M2012.UI.TreeView, {
        create: function (options) {
            options = _.defaults(options, DefalutStyle);
            return new M2012.UI.TreeView.MainView(options);
        }
    });
})(jQuery, _, M139);
﻿/**
 * @fileOverview 定义树组件的节点视图
 */

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    var namespace = "M2012.UI.TreeView.NodeView";
    M139.namespace(namespace, superClass.extend(
     /**
      *@lends M2012.UI.TreeView.NodeView".prototype
      */
    {
        /** 树组件的节点视图
        *@constructs M2012.UI.TreeView.NodeView
        *@extends M139.View.ViewBase
        *@param {Object} options 初始化参数集
        *@param {String} options.template 组件的html代码
        *@param {String} options.childContainer 子节点容器路径
        *@param {String} options.label 标题元素
        *@param {String} options.labelIcon 图标元素
        *@example
        */
        initialize: function (options) {
            this.model = new Backbone.Model();
            this.tree = options.tree;
            this.tag = options.tag;
            this.depth = options.depth;
            var opened = options.opened === true;
            if (!options.parentNode) {
                opened = true;//根节点默认展开
            }
            this.model.set("opened", opened);

            var $el = jQuery(options.template);
            this.setElement($el);

            this.parentNode = options.parentNode;

            return superClass.prototype.initialize.apply(this, arguments);
        },

        defaults: {
            name: namespace
        },

        render: function () {
            var options = this.options;
            if(options.container){
                this.$el.appendTo(options.container);
            }else{
                this.$el.appendTo(this.parentNode.childContainer);
            }

            this.label = this.$(options.label);
            if(options.text !== '彩云网盘'){
	            this.label.css('paddingLeft',this.depth*22+10+"px")
            }
            this.labelIcon = this.$(options.labelIcon);

            this.switchButton = this.$(options.switchButton);

            this.childContainer = this.$(options.childContainer);
            this.childNodes = options.childNodes;
            
            this.setText(options.text);

            this.childContainer = this.$(options.childContainer);


            this.bindEvent();


            this.renderChildNodes();
            this.renderSwitchStatus();

            if (!this.childNodes || this.childNodes.length == 0) {
                this.switchButton.css("visibility", "hidden");
            }
            

            return superClass.prototype.render.apply(this, arguments);
        },

        /**
         *初始化绑定事件
         *@inner
         */
        bindEvent: function () {
            var This = this;

            this.label.click(function (e) {
                This.onLabelClick(e);
            });
            this.model.on("change:opened", function () {
                This.renderSwitchStatus();
            }).on("change:selected", function () {
                This.renderSelectedMode();
            });;



            this.label.dblclick(function (e) {
                This.toggleNode();
            });
            this.switchButton.click(function (e) {
                This.toggleNode();
            });
        },

        toggleNode:function(){
            this.model.set("opened", !this.model.get("opened"));
        },

        onLabelClick: function (e) {
            this.select();
        },

        select:function(){
            this.model.set("selected", true);
		//	debugger;
			var thisSelectId = this.tag && this.tag.directoryId;
			top.$App && top.$App.setCustomAttrs("diskSelectId",thisSelectId);
            this.tree.onNodeSelected(this);
			
        },

        unselect:function(){
            this.model.set("selected", false);
        },

        /**
         *组装子节点界面
         *@inner
         */
        renderChildNodes: function () {
            var options = this.options;
            var childNodes = this.childNodes;
            if (childNodes) {
                for (var i = 0; i < childNodes.length; i++) {
                    var info = childNodes[i];
                    var node = new M2012.UI.TreeView.NodeView({
                        parentNode:this,
                        tree: this.tree,
                        text: info.text,
                        tag: info.tag,
                        depth: this.depth + 1,
                        label: options.label,
                        template: options.template,
                        label: options.label,
                        labelIcon: "a > i:eq(1)",
                        switchButton: "a > i:eq(0)",
                        childContainer: options.childContainer,
                        childNodes: info.childNodes,
                        parentNode: this,
                        containers : options.containers,
                        selectedId : options.selectedId
                    });
                    
                    node.render();
					if(options.containers[info.tag.directoryId] != 'undefined'){
						options.containers[info.tag.directoryId] = node ;
					}
                    // add by tkh 
                    if(options.selectedId == info.tag.directoryId){
	                    var parentNode = node.parentNode;
	                    while(parentNode){
		                    parentNode.model.set("opened", true);
		                    parentNode = parentNode.parentNode;
	                    }
						node.select();
					}
                }
            }
        },
        /**
         *设置节点的文本标题
         */
        setText: function (text) {
            this.text = text;
            this.label.find("span").text(text);
            //this.labelIcon[0].className = this.model.getLabelIcon(text);
        },

        renderSwitchStatus: function () {
            if (this.model.get("opened")) {
                this.label.addClass("on");
                this.childContainer.show();
            } else {
                this.label.removeClass("on");
                this.childContainer.hide();
            }
        },
        renderSelectedMode: function () {
            var selected = this.model.get("selected");
            var textEl = this.label.find("span");
            if (selected) {
                textEl.css({
                    color: "white",
                    background: "rgb(50,119,222)"
                });
            } else {
                textEl.css({
                    color: "",
                    background: ""
                });
            }
        }
    }))

})(jQuery, _, M139);
﻿//http://smsrebuild0.mail.10086.cn/disk/disk?func=disk:saveAttach&sid=MTM1MzI4NzA1NTAwMTU0ODU0MzYxNAAA000001&rnd=0.2288308567367494
/*
<?xml version="1.0" encoding="utf-8" ?>
<object>
    <string  name="filename">PAD%u7248%u79BB%u7EBF%u4E2D%u5FC3%u6D4B%u8BD5%u7528%u4F8B%28CTC%29.xls</string>
    <string  name="usernumber">8615889394143</string>
    <string  name="directoryid">117321768</string>存到最新上传实际上是20
    <string  name="ComeFrom">0</string>
    <int name="BItemId">0</int>
    <string  name="url">http://appmail3.mail.10086.cn/RmWeb/view.do?func=attach:download&amp;mid=058b00000b92645b0000000a&amp;offset=392686&amp;size=83378&amp;name=PAD%E7%89%88%E7%A6%BB%E7%BA%BF%E4%B8%AD%E5%BF%83%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B(CTC).xls&amp;encoding=1&amp;sid=MTM1MzI4NzA1NTAwMTU0ODU0MzYxNAAA000001&amp;type=attach</string>
    <string  name="cookieValue"></string>
    <string  name="type">attach</string>
</object>
{
    "code": "S_OK",
	"summary":"附件转存彩云成功！"
}
*/
/**
 * @fileOverview 定义存附件到彩云对话框
 */

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    var namespace = "M2012.UI.Dialog.SaveToDisk";

    /*
    var acceptMaxFileLength = 80; //字节
var acceptPhotoExtend = "bmp,gif,ico,jpg,jpeg,png,tif,tiff,";
var acceptMusicExtend = "mid,wma,wav,mp3,cda,";
var PhotoExtendAlert = "“{0}”不是图片格式文件,请重新选择";
var MusicExtendAlert = "“{0}”不是音乐格式文件,请重新选择";
var MusicExtendTips = "（支持上传mp3,wma,wav,mid等格式的音乐文件）";
var PhotoExtendTips = "（支持上传jpg,png,gif,bmp等格式的图片文件）";
var FileNotSelectAlert = "请先选择你要上传的文件";
var DirectoryRootName = "彩云";
var FileHadExist = "文件“{0}”已存在，是否将彩云中的该文件替换？";
var FileNameIsEmpty = "文件的文件名不能为空！";
var FileNameLength = "文件“{0}”名称大于{1}字符，不能上传";
var BanLvTips = "单个文件最大{0}";
var NotBanLvTips = "单个文件最大{0}  <a title='升级套餐,您可以上传更大单个文件.' href='#'>(上传更大单个文件!)</a>";
var UploadResultPage = top.SiteConfig.disk + "/html/uploadresult.html";
var InstallControlTips = "安装139邮箱小工具上传更稳定，速度更快，并支持选择多个文件和断点续传。<a href=\"{0}\" target=\"_blank\">立即安装</a>";
var UpdateControlTips = "系统检测到“139邮箱小工具”有更新版本，要升级后才能正常使用。<a href=\"{0}\" target=\"_blank\">立即升级</a>";
var EnforceUpdateTips = "检测到“139邮箱小工具”有新版本，需要升级才能继续。";
 var fileName = "";
    var url = "";
    var attachinfos = [];
    if (top.NETDISKATTACHMENT) {
        var netdiskattachment = top.NETDISKATTACHMENT;
        if(isArray(netdiskattachment)){
            attachinfos = netdiskattachment;
        }else{
            if (netdiskattachment.fileName) {
                fileName = netdiskattachment.fileName;
            }
            if (netdiskattachment.url) {
                url = netdiskattachment.url;
            }
            attachinfos = [{
                attachname : fileName,
                attachurl : url
            }];
        }
    } else {
        attachinfos = [{
            attachname : escape(Utils.queryString("filename")),
            attachurl : decodeURIComponent(Utils.queryString("tourl"))
        }];
    }
    if (DirectoryTree.selComefrom == 2) {
        for(var i=0;i<attachinfos.length;i++){
            fileName = unescape(attachinfos[i].attachname);
            if (!CheckMusic(fileName)) {
                return;
            }
        }
    } else if (DirectoryTree.selComefrom == 1) {
        for(var i=0;i<attachinfos.length;i++){
            fileName = unescape(attachinfos[i].attachname);
            if (!CheckAlbum(fileName)) {
                return;
            }
        }
    }
    */

    //特殊的文件夹id
    var DIRID = {
        //我的相册
        PHOTO: 20,
        //我的音乐
        MUSIC: 30
    };
    var AcceptPhotoExtend = "bmp,gif,ico,jpg,jpeg,png,tif,tiff".split(",");
    var AcceptMusicExtend = "mid,wma,wav,mp3,cda".split(",");
    var PhotoExtendAlert = "“{0}”不是图片格式文件,请重新选择";
    var MusicExtendAlert = "“{0}”不是音乐格式文件,请重新选择";

    M139.namespace(namespace, superClass.extend(
    /**@lends M2012.UI.Dialog.SaveToDisk.prototype*/
    {
        /** 定义存附件到彩云对话框
         *@constructs M2012.UI.Dialog.SaveToDisk
         *@extends M139.View.ViewBase
         *@param {Object} options 初始化参数集
         *@param {String} options.fileName 附件名
         *@param {String} options.downloadUrl 附件下载地址
         * 
         *@param {String} options.ids 文件ID 多个id用逗号隔开 
         *@param {String} options.type 组件类型 'save' 保存附件至彩云 'move' 移动文件至彩云
		 *@param {String} options.isreadmail 是否是读信页存网盘
         *@example
         */
        initialize: function (options) {
            this.model = new Backbone.Model();
            return superClass.prototype.initialize.apply(this, arguments);
        },
        templateBtn : '<a id="createFolder" class="btnGreenBd btn MB_But_0 YesButton btnGray" rel="0" href="javascript:void(0)" style=""><span>新建文件夹</span></a>',
        templateNewFolder : [ '<li><span class="on">',
							     '<i class="i_plus"></i>',
							     '<i class="i_wjj"></i>',
							     '<input type="text" value="新建文件夹" style="height:11px;width:80px;" class="iText ml_5" value="" maxlength="255">',
							     '<a href="javascript:;" class="btnMinOK ml_5" title="确定"></a>',
							     '<a href="javascript:;" class="btnMincancel ml_5" title="取消"></a>',
							 '</span></li>'].join(""),
        tipWords: {
            Empty: "文件夹名称不能为空",
            MaxLength: "最大长度不能超过255字",
            InvalidChar: "不能有以下特殊字符 \\/:*?\"<>|&",
            RepeatDirName: "文件夹名称不能重复",
            Exception: "创建文件夹失败，请稍后再试。",
            Level: "文件夹层级不能超过5层",
            NotSys: "不能与系统文件夹重名"
        },
        dialogTitle: {
            save: "附件存彩云网盘",
            move: "附件存彩云网盘",
            diskFileMove: "移动",
            shareCopy: "复制到"
        },
        rootName: '彩云网盘',
        maxLengthName: 255,
        name: namespace,
        /**构建dom函数*/
        requestInitData2: function (callback) {
            var This = this;
            top.M139.UI.TipMessage.show("正在打开彩云网盘...");
            M139.RichMail.API.call("disk:getDirectorys", "", function (response) {// update by tkh 调用新接口
                top.M139.UI.TipMessage.hide();
                if (response.responseData.code == "S_OK") {
                    callback && callback();
                } else {
                    top.$Msg.alert("加载失败，请稍后重试", { ico: "warn" });
                    return;
                }
            });

        },
        render: function () {
            var This = this;
            //	This.requestInitData2(function(){
            var options = This.options;
            var dialogTitle = This.dialogTitle[options.type] || This.dialogTitle['save'];

				This.dialog = $Msg.showHTML("", function (e) {
					This.onYesClick(e);
				}, function (e) {
					This.onCancelClick(e);
				}, {
					width: 500,
					buttons: ["确定", "取消"],
					dialogTitle: dialogTitle
				});
				
				// add by tkh
				This.createBtnStatus = true;// 新建按钮是否可点击
				This.jContainer = This.dialog.$el;
				This.jContainer.find('.BottomTip').html(This.templateBtn);// 添加新建按钮
				This.initFolderEvent();// 初始化新建文件夹事件

            This.setElement(This.dialog.el);

            This.initEvent();

            return superClass.prototype.render.apply(This, arguments);
            //	});
        },

        // add by tkh新建文件夹输入框绑定事件
        initFolderEvent : function(){
        	var self = this,pl= 0;
        	this.jCreateFolderBtn = this.jContainer.find("#createFolder");
			this.jCreateFolderBtn.unbind('click').bind('click', function(event){
				if(!self.createBtnStatus){
					return;
				}
				self.disableCreateFolderBtn();
				self.jSelectFolder = self.treeView.model.get("selectedNode").$el;
				pl = parseInt($(self.jSelectFolder.find('a')[0]).css('paddingLeft')) + 18 ;
				$(self.jSelectFolder.find('ul')[0]).show().prepend(self.templateNewFolder);
				$(self.jSelectFolder.find('ul')[0]).find('span').eq(0).css('paddingLeft',pl+'px')
				$(self.jSelectFolder.find('a')[0]).addClass('on');
				$(self.jSelectFolder.find('i')[0]).show();
				bindEvents();
			});
        	
        	function bindEvents(){
        		var jInput = self.jSelectFolder.find("input");
        		// jInput.blur(function(event){
        			// var target = $(event.target);
	        		// $(this).parent('span').parent('li').remove();
	        		// ableCreateFolderBtn();
	        	// }).focus(function(){
	        		// var text = $(this).val();
	        		// if(text == '新建文件夹'){
	        			// $(this).val('');
	        		// }
	        	// });
	        	if($B.is.ie && $B.getVersion() == 6){
					jInput.bind('keydown', function(event){
						clearInput($(this));
						
						if(event.keyCode == M139.Event.KEYCODE.ENTER){
							self.jSelectFolder.find("a.btnMinOK").click();
						}
					}).bind('keypress', function(event){
						clearInput($(this));
						
						if(event.keyCode == M139.Event.KEYCODE.ENTER){
							self.jSelectFolder.find("a.btnMinOK").click();
						}
					});
				}else{
					jInput.bind('keydown', function(event){
						clearInput($(this));
						
						if(event.keyCode == M139.Event.KEYCODE.ENTER){
							self.jSelectFolder.find("a.btnMinOK").click();
						}
					});
				}
	        	function clearInput(jInput){
	        		var text = jInput.val();
	        		if(text == '新建文件夹'){
	        			jInput.val('');
	        		}
	        	}
	        	
	        	jInput.focus();
	        	
	        	self.jSelectFolder.find("a.btnMinOK").click(function(event){
	        		var name = $.trim(jInput.val());
	        		var msg = self.getErrorMsg(name);
	        		if(!msg){
	        			var dirId = getSelectedDirid();
	        			var options = {parentId : dirId, name : name, dirType : getSelectedDirType()};
	        			self.requestCreateFolder(options);
	        		}else{
	        			top.$Msg.alert(msg);
	        		}
	        	});
	        	self.jSelectFolder.find("a.btnMincancel").click(function(event){
	        		$(this).parent('span').parent('li').remove();
	        		self.ableCreateFolderBtn();
	        	});
        	};
        	
        	// 获取当前选中目录的ID
        	function getSelectedDirid(){
        		var dir = self.treeView.model.get("selectedNode").tag;
    			var dirId = String(dir.directoryId || dir.parentDirectoryId);
	            if (dir.parentDirectoryId == DIRID.PHOTO) {
	                dirId = dir.parentDirectoryId;
	            }else if(dir.parentDirectoryId == DIRID.MUSIC){
	                dirId = dir.parentDirectoryId;
	            }
	            return dirId;
        	};
        	
        	// 获取当前选中目录的dirType
        	function getSelectedDirType(){
        		var dir = self.treeView.model.get("selectedNode").tag;
            	return dir.dirType;
        	};
        },
        // add by tkh新建文件夹按钮不可用
        disableCreateFolderBtn: function () {
            var self = this;
            self.createBtnStatus = false;
            self.jCreateFolderBtn.addClass('btnGray');
        },
        // add by tkh激活新建文件夹按钮
        ableCreateFolderBtn: function () {
            var self = this;
            self.createBtnStatus = true;
            self.jCreateFolderBtn.removeClass('btnGray');
        },
        // add by tkh验证文件夹名称
        getErrorMsg: function (name) {
            var self = this;
            if (!name) {
                return self.tipWords.Empty;
            }
            //查看长度
            if (name.length > self.maxLengthName) {
                return self.tipWords.MaxLength;
            }
            if (!self.isRightName(name)) {
                return self.tipWords.InvalidChar;
            }
            return;
        },
        // add by tkh判断文件夹是否正确
        isRightName: function (name) {
            var reg = /[*|:"<>?\\/&]/;
            return !reg.test(name);
        },
        // add by tkh 移动文件至彩云
        requestMoveToDisk: function (dir) {
            var This = this;
            var dirId = String(dir.directoryId || dir.parentDirectoryId);
            var bItemId = 0;
            var comeFrom =This.options.comeFrom || "0";
            if (dir.parentDirectoryId == DIRID.PHOTO) {
                dirId = dir.parentDirectoryId;
                bItemId = dir.directoryId;
            } else if (dir.parentDirectoryId == DIRID.MUSIC) {
                dirId = dir.parentDirectoryId;
                bItemId = dir.directoryId;
            }
            if (dir.directoryId == DIRID.PHOTO || dir.parentDirectoryId == DIRID.PHOTO) {
                comeFrom = "1";
            } else if (dir.directoryId == DIRID.MUSIC || dir.parentDirectoryId == DIRID.MUSIC) {
                comeFrom = "2";
            }

            var requestData = {
                directoryId: dirId,
                shareFileId: this.options.ids,
                comeFrom: comeFrom,//comeFrom 来源  0为普通目录 1为相册 2为音乐
                //bItemId: bItemId,
                type: dir.dirType
            };
            var names = this.options.fileName;
            M139.UI.TipMessage.show("已后台保存，稍后查看",{delay : 5000});
            M139.RichMail.API.call("file:turnFile", requestData, function (response) {
                M139.UI.TipMessage.hide();
                if (response.responseData && response.responseData.code == "S_OK") {
                	if(This.options.comeFrom === 'fileCenter'){ // todo 日志上报
                        BH({key:'diskv2_fileCenter_savesuc'});
                	}else{
                        BH({key:'diskv2_cabinet_savesuc'});
                	}
                	
                //    This.onSaveRequestLoad(response.responseData);
					This.dialog.close();
                    //var tipMsg = "存彩云网盘成功";
                    //if (This.options.comeFrom !== 'largeAttach'&&(This.options.comeFrom !== 'fileCenter' ||top.Links !=="undefined")) {// 文件提取中心是独立的页面，没办法打开彩云
                    //    tipMsg += "，<a href='javascript:;' onclick='top.Links.show(\"diskDev\",\"&id={0}\",true);top.FF.close();return false;'>去查看</a>";
                    //}
                    //var tipMsgStr = tipMsg.format(dirId);
					//M139.UI.TipMessage.show(tipMsgStr,{delay : 5000}); 
                //    top.$Msg.alert(tipMsg.format(top.$T.Utils.htmlEncode(names), dirId), {
	            //        isHtml: true
	            //    });
                }else if(response.responseData.code == "-7"){
                	var html = response.responseData.summary;
	                //单文件超过大小
                    var vipInfo = top.UserData.vipInfo;
                    if (vipInfo && vipInfo.serviceitem != "0016" && vipInfo.serviceitem != "0017") {
                        html += '&nbsp;<a href="javascript:;" style="text-decoration: underline;" onclick="var topWin = top; topWin.FF.close();topWin.$App.show(\'mobile\');return false;">上传更大单个文件</a>';
                    }
                    top.FF.close();
                    top.$Msg.alert(html, {
                        icon: "warn",
                        isHtml: true
                    });
                } else if (response.responseData.code == "-4") {
                    var html = response.responseData.summary;
                    top.FF.close();
                    top.$Msg.alert(html, {
                        icon: "warn",
                        isHtml: true
                    });
                } else {
                    top.$Msg.alert("保存失败，请稍后重试", { ico: "warn" });
                }
            });
        },
        // add by zsx 提取中心的存彩云不是一样的
        requestMoveToDiskForFileCenter: function (dir) {
            var This = this;
            var dirId = String(dir.directoryId || dir.parentDirectoryId);
            var bItemId = 0;
            var comeFrom = "0";
            if (dir.parentDirectoryId == DIRID.PHOTO) {
                dirId = dir.parentDirectoryId;
                bItemId = dir.directoryId;
            } else if (dir.parentDirectoryId == DIRID.MUSIC) {
                dirId = dir.parentDirectoryId;
                bItemId = dir.directoryId;
            }
            if (dir.directoryId == DIRID.PHOTO || dir.parentDirectoryId == DIRID.PHOTO) {
                comeFrom = "1";
            } else if (dir.directoryId == DIRID.MUSIC || dir.parentDirectoryId == DIRID.MUSIC) {
                comeFrom = "2";
            }

            var requestData = {
                groupId: this.options.groupId,
                dirId: dirId,
                sendIds: this.options.ids,
                //     comeFrom: comeFrom,//comeFrom 来源  0为普通目录 1为相册 2为音乐
                //bItemId: bItemId,
                type: dir.dirType
            };
            var names = this.options.fileName;
			if(This.options.comeFrom == 'fileCenter'){
				This.trigger("fileCenterSaveSuccess");
				M139.RichMail.API.call("file:toDiskForCenter", requestData,function(){});
				This.dialog.close();
			}else{
	            M139.UI.TipMessage.show("已后台保存，稍后查看",{delay : 5000});
	            M139.RichMail.API.call("file:toDiskForCenter", requestData, function (response) {
	                M139.UI.TipMessage.hide();
	                if (response.responseData && response.responseData.code == "S_OK") {
		                
	                	if(This.options.comeFrom === 'fileCenter'){ // todo 日志上报
	                		//This.onSaveRequestLoad(response.responseData);
	                	}else{
	                		// diskv2_cabinet_savesuc
	                	}
	                	
	                	
	                   
						This.dialog.close();
						
						//return;
	                   // var tipMsg = "存彩云网盘成功";
	                    //if (This.options.comeFrom !== 'largeAttach'&&(This.options.comeFrom !== 'fileCenter' ||top.Links !=="undefined")) {// 文件提取中心是独立的页面，没办法打开彩云
	                    //    tipMsg += "，<a href='javascript:;' onclick='top.Links.show(\"diskDev\",\"&id={0}\",true);top.FF.close();return false;'>去查看</a>";
	                    //}
						//var tipMsgStr = tipMsg.format(dirId);
						//M139.UI.TipMessage.show(tipMsgStr,{delay : 5000});    
	                //    top.$Msg.alert(tipMsg.format(top.$T.Utils.htmlEncode(names), dirId), {
		            //        isHtml: true
		            //    });
	                }else if(response.responseData.code == "-7"){
	                	var html = response.responseData.summary;
		                //单文件超过大小
	                    var vipInfo = top.UserData.vipInfo;
	                    if (vipInfo && vipInfo.serviceitem != "0016" && vipInfo.serviceitem != "0017") {
	                        html += '&nbsp;<a href="javascript:;" style="text-decoration: underline;" onclick="var topWin = top; topWin.FF.close();topWin.$App.show(\'mobile\');return false;">上传更大单个文件</a>';
	                    }
		                top.FF.close();
		                top.$Msg.alert(html, {
		                    icon:"warn",
		                    isHtml: true
		                });
	                }else if(response.responseData.code == "-4"){
	                	var html = response.responseData.summary;
		                top.FF.close();
		                top.$Msg.alert(html, {
		                    icon:"warn",
		                    isHtml: true
		                });
	                } else {
	                    top.$Msg.alert("保存失败，请稍后重试", { ico: "warn" });
	                }
	            });
			}

        },
        //add by cezo 彩云文件/文件夹移动
        requestDiskFileMove: function (dir) {
            var This = this;
            var dirId = String(dir.directoryId || dir.parentDirectoryId);
            var data = this.options.data;
            var requestData = {
                fileIds: data.fileIds,
                directoryIds: data.directoryIds,
                srcDirType: data.srcDirType,
                toDirectoryId: dirId,
                toDirType: dir.dirType
            };

            M139.UI.TipMessage.show("正在移动...");
            M139.RichMail.API.call("disk:move", requestData, function (response) {
                M139.UI.TipMessage.hide();
                var responseData = response.responseData;

                if (responseData && responseData.code == "S_OK") {
                    This.onSaveRequestLoad(response.responseData);
                } else if (responseData && responseData.code == "JOIN_MCLOUD") {//正在接入彩云
                    This.confirmMcloudUpgrade();
                } else {
                    var error = response.responseData.summary;
                    top.$Msg.alert(error, { ico: "warn" });
                }
            });
        },

        //接入彩云提示
        confirmMcloudUpgrade: function () {
            $Msg.confirm(
                "尊敬的用户，彩云正在进行系统升级，暂时无法进行该操作，请稍后再试!",
                function () { },
                function () { },
                {
                    buttons: ["确定"]
                }
            ).setDialogTitle("彩云系统升级");
        },

        /** 存彩云同时存彩云，存彩云不提示 */
        repareSaveToMcloud: function () {
            var self = this;
            var options = this.options;
            if (options && options.saveToMcloud) {
                this.saveToMcloud = true;
            }

            this.initMcloudEvent();
            return superClass.prototype.render.apply(this, arguments);
        },
        //add by xx 共享管理 复制到 彩云
        requestCopyToDisk: function (dir) {
            var This = this;
            var dirId = String(dir.directoryId || dir.parentDirectoryId);
            var data = this.options.data;
            var fromDiskType = dir.dirType;
            var toDirType = 0;
            if (fromDiskType == 1) {   //因为旧版共享管理定义文件类型和重构彩云不一样，需要转化下
                toDirType = 0;
            } else if (fromDiskType == 3) {
                toDirType = 1;
            } else if (fromDiskType == 4) {
                toDirType = 2;
            }
            var requestData = {
                fileIds: data.fileIds,
                directoryIds: data.directoryIds,
                toDirId: dirId,
                toDirType: toDirType,
                path: data.path
            };
            var requestData = {
            };
            if (_.isArray(data)) {
                requestData[data[0]] = data[1];
            } else {
                requestData["catalogInfos"] = data.catalogInfos ? data.catalogInfos.join(",") : "";
                requestData["contentInfos"] = data.contentInfos ? data.contentInfos.join(",") : "";
            }
            requestData["newCatalogID"] = dirId;

            M139.UI.TipMessage.show("正在复制...");
            /*rewrite this*/
            M139.RichMail.API.call("disk:copyContentCatalog", requestData, function (response) {
                M139.UI.TipMessage.hide();
                var responseData = response.responseData;

                if (responseData && responseData.code == "S_OK") {
                    This.onSaveRequestLoad(response.responseData);
                } else {
                    top.$Msg.alert("复制失败，请稍后重试", { ico: "warn" });
                }
            });
        },
        // add by tkh 新建文件夹
        requestCreateFolder: function (options) {
            var self = this;
            var requestData = {
                parentId: options.parentId,
                name: options.name,
                dirType: options.dirType
            };

            M139.UI.TipMessage.show("正在新建文件夹...");
            M139.RichMail.API.call("disk:createDirectory", requestData, function (response) { // update by tkh 调新接口
                M139.UI.TipMessage.hide();
                var responseData = response.responseData;

                if (responseData && responseData.code == "S_OK") {
                    var dirid = responseData['var']['directoryId'];
                    self.selectedId = dirid;
                    self.trigger('print', dirid);// 重新生成文件夹树状结构，并选中新创建的文件夹
                    // 新建文件夹按钮可用
                    self.ableCreateFolderBtn();
                } else if (responseData && responseData.code == "JOIN_MCLOUD") {//正在接入彩云
                    self.confirmMcloudUpgrade();
                } else {
                    var error = responseData.summary;
                    $Msg.alert(error, { ico: "warn" });
                }
            });
        },

        requestInitData: function () {
            var This = this;
            !this.saveToMcloud && M139.UI.TipMessage.show("正在打开彩云网盘...");
            M139.RichMail.API.call("disk:getDirectorys", "", function (response) {// update by tkh 调用新接口
                M139.UI.TipMessage.hide();
                if (response.responseData.code == "S_OK") {
                    This.onInitDataLoad(response.responseData["var"]['directorys']);
                } else {
                    $Msg.alert("加载失败，请稍后重试", { ico: "warn" });
                }
            });

        },
        /*
        Attachinfos 对象（多个附件对象）
        attachname 附件名
        attachurl 附件下载路径
        usernumber 手机号 
        directoryid 保存目录id
        comeFrom 来源  0为普通目录 1为相册 2为音乐
        bItemId 专辑或相册id，当comefrom为 1或2时，该值有用
        数据库彩云普通目录，相册、音乐专辑是三张表
        为相册或音乐专辑的话 bItemId 就是相册或专辑ID
        为普通目录的话，bItemId 无效
        */
        requestSaveToDisk: function (dir) {
            var This = this;
            var dirId = String(dir.directoryId || dir.parentDirectoryId);
            var requestData = { netFiles: [] };
            var Attachinfos = this.options.Attachinfos;
            var names = [];
            var item;

            if (Attachinfos) {
                for (var i = Attachinfos.length - 1; i >= 0; --i) {
                    item = Attachinfos[i];
                    item.directoryId = dirId;
                    item.dirType = dir.dirType;
                    names.push(item.fileName);
                }
                requestData.netFiles = Attachinfos;
            } else {
                requestData.netFiles.push({
                    url: this.options.downloadUrl,
                    directoryId: dirId,
                    dirType: dir.dirType,
                    fileName: this.options.fileName,
                    fileSize: this.options.fileSize
                });
            }

            !this.saveToMcloud && M139.UI.TipMessage.show("正在保存至彩云网盘...");
            M139.RichMail.API.call("disk:attachUpload", requestData, function (response) {
                M139.UI.TipMessage.hide();
                if (response.responseData && response.responseData.code == "S_OK") {
                    BH({ key: 'diskv2_other_savesuc' });
                    //        This.onSaveRequestLoad(response.responseData);
                    This.dialog.close();
                    var tipMsg = "存彩云网盘成功";
                    if (This.options.comeFrom !== 'fileCenter' && top.Links != undefined ) {// 文件提取中心是独立的页面，没办法打开彩云
                        tipMsg += "，<a href='javascript:;' onclick='top.Links.show(\"diskDev\",\"&id={0}\",true);top.FF.close();return false;'>去查看</a>";
                    }
                    var tipMsgStr = tipMsg.format(dirId);
                    M139.UI.TipMessage.show(tipMsgStr, { delay: 5000 });
                    //    top.$Msg.alert(tipMsg.format(top.$T.Utils.htmlEncode(names.join(",")), dirId), {
                    //        isHtml: true
                    //    });

                } else {
                    var error = response.responseData.summary;
                    !this.saveToMcloud && $Msg.alert(error, { ico: "warn" });
                }
            });
        },

        onInitDataLoad: function (json) {
            if (json) {
                this.model.set("data", json);
                json[0] && this.model.set("rootId", json[0]["parentDirectoryId"]);//确定彩云的根目录id
            }
            this.trigger("initdataload");
        },

        onSaveRequestLoad: function (json) {
            if (json && json.code == "S_OK") {
                this.onSaveSuccess();
            }
        },

        /**
         *将后台输出的恶心的数据组装成树数据
         */
        getTreeNodeData: function () {
            var self = this;
            var data = this.model.get("data");
            var nodeMap = {};
            var rootLevelNodes = [];
            var allDirs = [].concat(data);
            var rootId = self.model.get("rootId");

            //添加彩云根目录 add by chenzhuo
            allDirs.unshift({
                directoryId: rootId,
                directoryName: self.rootName,
                dirType: 1,
                parentDirectoryId: 0
            });
            //var allDirs = [].concat(data.sysdirs, data.dirs, data.photodirs, data.musicdirs);// update by tkh 调用新接口

            var newDirs = [];
            for (var i = 0, len = allDirs.length; i < len; i++) {
                var dir = allDirs[i];

                newDirs.push({
                    directoryId: dir.directoryId,
                    parentDirectoryId: dir.parentDirectoryId,
                    text: dir.directoryName,
                    tag: dir,
                    childNodes: []
                })
            }

            rootLevelNodes.push(this.getNodeTreeData(newDirs));
            return rootLevelNodes;
        },

        //add by chenzhuo 生成目录树形结构(数据)
        getNodeTreeData: function (directories) {
            var root = {};//根目录

            for (var i = 0, len = directories.length; i < len; i++) {
                var dir = directories[i];

                for (var j = 0; j < len; j++) {
                    var item = directories[j];

                    if (dir.parentDirectoryId == item.directoryId) {
                        item.childNodes.push(dir);
                        break;
                    }

                    j == len - 1 && (root = dir);
                }
            }

            return root;
        },

        // update by tkh 新增属性selectedId
        renderTree: function () {
            var self = this;
            var nodes = this.getTreeNodeData();
            var newnodes = nodes;
            //如果是读信页
            //	debugger;
            if (self.options.isreadmail) {
                var firstTrees = nodes[0]["childNodes"];
                $.each(firstTrees, function () {
                    if (this["text"] == "139邮箱") {
                        //	newnodes = [this];
                        self.model.set("rootId", this["directoryId"]);
                        return false;
                    }
                });
            }
            var selectedId = self.selectedId || self.model.get("rootId");
			var topselectedId = '';
            if(top.resetDiskSelect){//定义在index.html页面
			   top.resetDiskSelect = false;
	           top.$App && top.$App.setCustomAttrs("diskSelectId",'');//取消网盘之前选择的目录
            }else{
	           topselectedId = top.$App && top.$App.getCustomAttrs("diskSelectId"); 
            }
            if (self.options.isreadmail && topselectedId) {
                selectedId = self.selectedId || topselectedId || self.model.get("rootId");
            }
            this.treeView = M2012.UI.TreeView.create({
                el: this.dialog.$(".boxIframeText"),
                nodes: newnodes,
                selectedId: selectedId
            }).render();
        },

        /** 存彩云附件同时存彩云 */
        autoSaveToDisk: function () {
            var nodes = this.getTreeNodeData();
            var dir = nodes[0].tag;
            this.requestSaveToDisk(dir);
        },

        initEvent: function (e) {
            this.on("initdataload", function () {
                this.renderTree();
            }).on("print", function () {
                this.requestInitData();
            }).on("success", function (e) {
                M139.UI.TipMessage.show("保存成功", {
                    delay: 5000
                });
                this.dialog.close();
            });
        },


        //附件存彩云不同时存彩云了
        initMcloudEvent: function (e) {

            var downUrl = this.options.downloadUrl;
            var fileName = this.options.fileName;
            console.log(downUrl);
            $App.trigger("saveToMcloud", {
                downUrl: downUrl,
                fileName: fileName || '全部附件.zip',
                fileSize: top.M139.Text.Url.queryString('size', downUrl) || '1'
            });
            /*
			var self = this;
            this.on("initdataload", function () {
                this.autoSaveToDisk();
            }).on("print", function () {
                this.requestInitData();
            }).on("success", function (e) {
                M139.UI.TipMessage.show("存彩云同时存彩云成功", {
                    delay: 3000
                });
				console.log('存彩云同时存彩云成功');
				var downUrl = this.options.downloadUrl;
				var fileName = this.options.fileName;
				console.log(downUrl);
				$App.trigger("saveToMcloud",{
					downUrl:downUrl,
					fileName: fileName || '全部附件.zip',
					fileSize:top.M139.Text.Url.queryString('size', downUrl) || '1'
				});
            });*/
        },

        onSaveSuccess: function () {
            this.trigger("success");
        },

        /**
         *检查文件是否可以保存
         * 彩云文件移动规则：
         * （1）相册下的文件可以移动到自定义目录、彩云根目录等但不能移动到音乐目录
         * （2）音乐下的文件可以移动到自定义目录、彩云根目录等但不能移动到相册目录
         * （3）相册和音乐下的目录不能移动
         * （4）自定义及彩云根目录的文件，是图片格式的可以移动到相册目录，是音乐格式的可以移动到音乐目录
         * （5）自定义目录可以在自定义目录之间移动，但是不能移动到相册和音乐目录
         * author：xiaoyingxiang
         * check :jiangzixiang
         *@inner
         */
        checkFile: function (dir) {
            var fileName = this.options.fileName;
            var extName = M139.Text.Url.getFileExtName(fileName);
            var error = "";
            //保存到“我的相册”、“我的音乐”要检查文件扩展名
            if (dir.directoryId == DIRID.PHOTO || dir.parentDirectoryId == DIRID.PHOTO) {
                if ($.inArray(extName, AcceptPhotoExtend) == -1) {
                    error = PhotoExtendAlert.format(M139.Text.Url.getOverflowFileName(fileName, 15));
                }
            } else if (dir.directoryId == DIRID.MUSIC || dir.parentDirectoryId == DIRID.MUSIC) {
                if ($.inArray(extName, AcceptMusicExtend) == -1) {
                    error = MusicExtendAlert.format(M139.Text.Url.getOverflowFileName(fileName, 15));
                }
            }
            if (error) {
                $Msg.alert(error, {
                    icon: "warn"
                });
                return false
            } else {
                return true;
            }
        },

        onYesClick: function (e) {
            var dir = this.treeView.model.get("selectedNode").tag;
            e.cancel = true;//取消对话框关闭
            if (this.checkFile(dir)) {
                var type = this.options.type;
                var isForFileCenter = this.options.isForFileCenter;
                if (isForFileCenter) {
                    this.requestMoveToDiskForFileCenter(dir);
                    return;
                }
                if (type === 'move') {
                    this.requestMoveToDisk(dir);
                } else if (type === "diskFileMove") {
                    this.requestDiskFileMove(dir);
                } else if (type === "shareCopy") {
                    this.requestCopyToDisk(dir);
                } else {
                    this.requestSaveToDisk(dir);
                }
            }
        },
        onCancelClick: function () {
            this.trigger("cancel");
        }
    }));
})(jQuery, _, M139);
﻿/**
* @author wuxiang
* @fileOverview 
* @description 应用于滚动效果
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    /**
    * @namespace 
    * 欢迎页运营广告
    */   
         
    M139.namespace('M2012.UI.Scroll', superClass.extend({

       /**
        *依附于哪个元素之内
        */
        wrap:'',
        
        /**
         * 根元素
         */
        ulEL:null,
        
        /**
         * 数据
         */
        ulMsg:{},
        
        /**
         * 间隔时间
         */
        intervalTime:15000,
        
        /**
         * 滚动速度
         */
        speed:40,
        
        initialize: function(){
		    return superClass.prototype.initialize.apply(this, arguments);
	    },
	  
	    init: function(obj){
	  	    this.ulEL  = 'ul_track_'+this.cid;
	  	    this.lis   = obj.lis;
	  	    this.order = obj.order;
	  	    this.speed = obj.speed||40;
	  	    this.intervalTime = obj.intervalTime||15000;
	  	    this.doc = obj.win?obj.win.document:window.document;
	  	    this.wrap  = $(obj.wrap,this.doc);
			this.wrap.html(this.getTemplate(this.ulEL,this.lis,this.order));
			this.containerSrcoll = $("#"+this.ulEL,this.doc);
	    },
		render:function(obj){
		   this.init(obj);
		   this.scrollMarquee();
		},
	    scrollMarquee:function(){
		    var length = this.containerSrcoll.find("li").length;
			if (length > 1) {
				var height = $(this.wrap).height();
				this.startmarquee(this.ulEL, height, this.speed, this.intervalTime, 1);  //15000
			}
	    },
  		startmarquee:function(id,lh,speed,delay,index){ 
			var t; 
			var stopFlag=false; //是否停止的标志位
			var o=this.doc.getElementById(id); 
			o.innerHTML+=o.innerHTML; 
			o.onmouseover = function () { stopFlag = true };
			o.onmouseout = function () { stopFlag = false };
			o.scrollTop = 0; 
			function start(){ 
				try{
					t=setInterval(scrolling,speed);
					if (stopFlag == false) {
					    o.scrollTop += 1;
					}
				}catch(e){
					
				}
			} 
			function scrolling(){
				try{
					if(o.scrollTop%lh!=0){ 
					    o.scrollTop += 1; 
					    if (o.scrollTop >= o.scrollHeight / 2) { o.scrollTop = 0; }
					}else{ 
					    clearInterval(t); 
					    setTimeout(start,delay); 
					} 
				}catch(e){}
			} 
			setTimeout(start,delay); 
       },
	   resetScroll:function(data){
		  this.wrap.html(this.getTemplate(this.ulEL,data,this.order));
		  this.scrollMarquee();
		},
		/**
		 * 模版
		 */
		getTemplate:function(id,data,order){
			order = order?order:[];
			var lis =[],len = order.length;
			var eachData = (len==0?data:order);
			_.each(eachData,function(v,k){
				if(len==0){
					lis.push(v);
				}else{
					if(data[v]){
						lis.push(data[v]);
					}
				}
			});
			return top.$T.Utils.format(this._template,{id:id,lis:lis.join('')});
		},
		_template: '<ul class="nessageReminding" id="{id}" style="overflow:hidden;">{lis}</ul>'
	}));
    
})(jQuery, _, M139);
﻿/**
 * @author wuxiang 
 * @description 运营滚动效果
 * data为li中的数据,
 * defaultLines为默认展现的条数,
 * scrollLine每一次滚动的条数
 * speed 滚动的速度
 * timer 每一次滚动所花时间
 * var mutiScroll = new M2012.UI.MutiScroll({ data:['11111','222222','33333','222222','33333'],
 *                           parentEl:$("#accountList"),
 *                           defaultLines:2,
 *                           scrollLine:1,
 *                           speed:1300,
 *                           timer:1500
 *                         }); 
 * 更新滚动内容
 * mutiScroll.updateScroll({data:["aaaaa","bbbbb","ccccc"]});
 */
(function (jQuery, _, M139) {
	    var $ = jQuery;
	    var superClass = M139.View.ViewBase;
	    M139.namespace('M2012.UI.MutiScroll', superClass.extend({
	    	 data:[],
	    	 parentEl:null,
	    	 speed:1300,   //滚动的速度
	    	 timer:1500,   //多少次滚动一次
	    	 scrollLine:1, //每次滚动条数
			 defaultLines:1,//展现的条数
	    	 initialize :function(obj){
	    	  	this.data = obj.data||[];
	    	  	this.speed = obj.speed||1300;//卷动速度，数值越大，速度越慢（毫秒）
	    	  	this.timer = obj.timer||1500;//滚动的时间间隔（毫秒）
	    	  	this.parentEl = obj.parentEl;
	    	  	this.scrollLine  = obj.scrollLine||1;
				this.defaultLines = obj.defaultLines||1;
	    	  	this.init();
	         },
	         init:function(){
	        	 this._initPararent(this.data);
	        	 this._scroll();
	        	 this._initEvent();
	         },
			 _initPararent:function(data){
				 var Lis = [],len = data.length;
	        	 for(var i = 0;i<len;i++){
	        		 Lis.push( $T.Utils.format(this._templateLi,{info:data[i]}));
	     		 }
	        	 this.parentEl.html($T.Utils.format(this._templateUl,{id:this.cid,lis:Lis.join('')}));
				 //获取每一行的高度,展现的行数
				 var liHeight = this.parentEl.find("li:first").outerHeight();
				 this.parentEl.css({height:liHeight*this.defaultLines,overflow:'hidden'});
			 },
			 updateScroll:function(param){
			     if(param.data){
			     	this.data = param.data;
					this._initPararent(param.data);
					this._stop();
					this._scroll();
				 }
			 },
	         _scroll:function(){
	         	 if(this.data.length>this.defaultLines){
				 	this._start();
	         	 }
	         },
	         _scrollUp:function(){
			     var self = this;
			     var ulEl =  this.parentEl.eq(0).find("ul:first");
				 var scrollLine =  parseInt(this.scrollLine,10);
				 var lineH = this.parentEl.find("li:first").outerHeight();
				 var upHeight = 0-scrollLine*lineH;
				 var speed =parseInt(this.speed,10); 
	         	 if(this.timerID){
				    try{
							ulEl.animate({marginTop:upHeight},speed,function(){
									for(i=1;i<=scrollLine;i++){
										   ulEl.find("li:first").appendTo(ulEl);
									}
									ulEl.css({marginTop:0});
							});
						}catch(e){
						   self._stop();
						   self._scroll();
						}
					}
	         },
	         _stop:function(){
	         	 if(this.timerID){
                    clearInterval(this.timerID);
					this.timerID = null;
				}
	         },
	         _start:function(){
	         	var self = this;
	         	self.timerID=setInterval(function(){
                        		self._scrollUp();
                            },self.timer);
	         },
	         _initEvent:function(){
	         	 //鼠标事件绑定
	         	var self = this;
                this.parentEl.hover(function(){
				      self._stop();
                },function(){
                      self._scroll();
                }).mouseout();
	         },
	    	 _templateUl:'<ul id="ul_{id}" style="overflow:hidden;margin:0px;">{lis}</ul>',
	    	 _templateLi:'<li style="overflow:hidden;">{info}</li>'
	    }));
})(jQuery, _, M139);
﻿/**
* @author wuxiang
* @fileOverview 
* @example new M2012.UI.HoriScroll({parentEl:$('#accountList'),defaultMCount:2,data:[""],test:true,});
* @description 应用于滚动效果
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    /**
    * @namespace 
    * 欢迎页运营广告
    */   
         
    M139.namespace('M2012.UI.HoriScroll', superClass.extend({
	    parentEl:null,//容器
		UlEl    :null,//最外层UL
		data    :[],  //数据
		movePos :0,   //移动的位置
		isIE6   :true,//ie6不做滚动处理
		widthLi :50,  //li的宽度
		defaultLis:4, //默认能装下多少个LI
		defaultMCount:1,//每次移动多少个
 		initialize :function(obj){
			        	this.data = obj.data;
						this.parentEl = obj.parentEl;
						this.defaultMCount = obj.defaultMCount||1;
		    	  		this.init();
	         },
	    init:function(){
		 
		    this.isIE6 = $.browser.msie&&$.browser.version == 6; //不支持滚动

	    	if(this.test){
				this.testData();
			}
			this._initParent();
			this.initEvent();
	    	
	    },
		initEvent:function(){
		  	var _this = this;
		  	this.parentEl.find(".slideBtn-prev").bind('click',function(){
		     	_this.moveLeft();
		  	});
		  	this.parentEl.find(".slideBtn-next").bind('click',function(){
				_this.moveRight();
		 	 });
		},
		moveLeft:function(){
	      	if (this.movePos == 0) return;
		  	this.movePos-=this.defaultMCount;
		  	this.move(this.movePos);
		},
		moveRight:function(){
		    if (this.movePos + this.defaultLis >= this.data.length) return;
			this.movePos+=this.defaultMCount;
			this.move(this.movePos);	
		},
		move:function(movePos){
		    var _this = this;
			if (this.isIE6) {
				this.UlEl.css('margin-left',-(movePos * _this.widthLi));
			} else {
				this.UlEl.animate({
					'margin-left': -(movePos * _this.widthLi)
				}, "slow");
			}
			this.movePos = movePos;	
		},
		_initParent:function(){
		  	if(this.parentEl.length>0){
				this.parentEl.html(top.$T.Utils.format(this._template,{id:this.cid,lis:this.data.join('')}));
		  	}
		  	this.UlEl = this.parentEl.find("#UL_"+this.cid);
		  	var liEl = this.UlEl.find("li:first");
		  	this.widthLi = parseInt(liEl.css('width'))+parseInt(liEl.css('margin-right'));
		  	this.defaultLis = this.getLiCount(this.widthLi,this.parentEl.outerWidth());
		},
		getLiCount:function(widthLi,contain_width){
		    var liCount = 0;
			for(var i=1;i<=this.data.length;i++){
		         if(contain_width<widthLi*i){
				    liCount = i-1;
				    break;
				 }
		   	}
		  	return liCount;
		},
	    testData:function(){
	    	var x = "<li class='on'><a href='' class='item-bg'><i class='item-ico1'></i></a><a href='' class='item-info-name'>使用绿色账单</a></li>";
	    	for(var i=0;i<8;i++){
	    		this.data.push(x);
	    	}
	    },
       _template:['<div class="slide-item" id="hs_{id}">',
                  '<div class="slide-item-con">',
					'<ul class="slide-item-ul m_clearfix" id="UL_{id}">{lis}</ul>',
                  '</div>',
                  '<a href="javascript:void(0);" title="上一页" class="slideBtn-prev"><i></i></a>',
                  '<a href="javascript:void(0);" title="下一页" class="slideBtn-next"><i></i></a>',
               '</div>'].join('')
		}));
    
})(jQuery, _, M139);
﻿﻿/**
 * 右下角弹出tips
 * @example taskList = [{},{}];
 * $PopTip.show({title:'xxx',content:'xxxx'});
 */
M139.core.namespace("M139.UI.BottomTip", Backbone.View.extend({
    initialize: function (options) {
		this.isClosed = true;
		this.isOver = false;
		this.timerClose = 0;
		this.taskList = [];
		this.createContainer();
		this.initEvents();
    },
	createContainer:function(){
	  if(typeof this.contentElement==='undefined'){
		   this.contentElement = document.createElement("div");
		   this.contentElement.style.cssText ="position:absolute;right:1px;bottom:0px;display:none;z-index:9999;";
		   this.contentElement.id = "remindTip";
		   document.body.appendChild(this.contentElement);
		   $("#remindTip").bind('mouseout',this.mouseOut);
		   $("#remindTip").bind('mousemove',this.mouseMove);
		   $("#remindTip").bind('click',this.clickHander);
		}
	},
	initEvents:function(){
			this.on('show',this.show);
	},
	/**
	 * 显示tips
	 * @param {Object} params 
	 */
    show: function () {
    	var param,self = $BTips.instance;
		if(arguments.length>0){
			params = arguments[0];
		}else{
			params = self.taskList.splice(0,1)[0];
		}
		if(!params) return;
		var content = params.content||'内容',
			title = params.title||"标题",
			timeout = params.timeout||20000,//tips消失时间2秒20000
			width   = params.width||340,    //tips宽度
			bhClose = params.bhClose,	    //关闭统计
			bhShow  = params.bhShow;        //展现统计
		self.contentElement.innerHTML=self._getContent(title,content,width,bhClose);
		self.isClosed = false;
        self.onclick = params.onclick || function(){};

		var	maxY=0;
		var offsetY=0;
		var intervalId=window.setInterval(anmiate,30);//100抖动效果比较明显，改成30
		function anmiate(){
			if (self.isClosed) {//在弹出的过程中点了关闭
				self.contentElement.style.display = "none";
				window.clearInterval(intervalId);
			}
			else {
				self.contentElement.style.display = "block";
				maxY = self.contentElement.offsetHeight;
				if (offsetY <= maxY + 1) {
					self.contentElement.style.bottom = (-maxY + offsetY).toString() + "px";
				}
				else {
					window.clearInterval(intervalId);
					offsetY = 0;
					if(!self.isOver){
						self.timerClose=setTimeout(self.close,timeout);
					}
					
				}
				//30第一次上升30px,后面按百分比上升
				var m = 30 * (maxY - offsetY) / maxY;//缓冲系数
                //上升的高度，最小一次上升2px，最大为30px
				offsetY += m < 2 ? 2 : m;//偏移量,要注意极限值,否则无法停下来.
			}
			
		}
      //统计行为
	  if(bhShow)top.BH(bhShow); 
	},
	/**
	 * 更新tips
	 * @param {Object} title
	 * @param {Object} content
	 */
	updateContent:function(title,content){
		this.contentElement.innerHTML = this._getContent(title,content);
	},
	close:function(){
		var el =  $BTips.instance.contentElement;
		el.style.bottom=(-el.offsetHeight).toString()+"px";
		el.style.display="none";
		$BTips.instance.isClosed=true;
		$BTips.instance.trigger('show');
	},
	clickHander:function(event){
		var target = event.target;
		do{
			if(target.tagName==='A'){
				$BTips.instance.isOver=false;
				setTimeout($BTips.instance.close,5000);
				break;
			}
			target = target.parentNode;
		}while(target.id!=='remindTip');

        if ($BTips.instance.onclick) {
            $BTips.instance.onclick(event, $BTips.instance);
        }
	},
	mouseMove:function(){
	   if($BTips.instance.timerClose!=0){
			$BTips.instance.isOver=true;
			clearTimeout($BTips.instance.timerClose);
		}
	},
	mouseOut:function(event){
	     if(!event.toElement||event.toElement.tagName==='IFRAME'){
	     	$BTips.instance.isOver=false;
			$BTips.instance.timerClose=setTimeout($BTips.instance.close,5000);
	     }
	},
   _getContent:function(title,content,width,bhClose){
		var s="<div class=\"boxIframe\" style=\"width:{width}px;\">"+
			    "<div class=\"boxIframeTitle\"><h2><span>{title}</span></h2><a class=\"i_t_close\" bh=\"{bhClose}\" id=\"tipCloseLink\" href=\"javascript:{href}void(0);\"></a></div>"+
			    "<div class=\"boxIframeMain\">"+
			        "<div class=\"boxIframeText\">{content}</div>"+
			    "</div>"+
			"</div>"
		return top.$T.Utils.format(s,{width:width,title:title,content:content,bhClose:bhClose,href:"top.$BTips.instance.close();"});
   }
}));
(function(jQuery,_,M139){
	jQuery.extend(M139.UI.BottomTip,{

        timer: false,
        interval: 333,

		show:function(params){
			 $BTips.instance.show(params);
			},
		hide:function(){
			if($BTips.instance)$BTips.instance.close();
		},
		updateContent:function(title,content){
			if($BTips.instance)$BTips.instance.updateContent(title,content);
		},
		/**
		 * 添加任务
		 */
		addTask:function(params){
            var This = this;
            $BTips.instance.taskList.push(params);

            if (!This.timer) {
                This.timer = setInterval(function() {
                    if ($BTips.instance.isClosed) {
                        $BTips.instance.show();
                    }

                    if (!$BTips.instance.taskList.length) {
                        clearInterval(This.timer);
                        This.timer = false;
                    }

                }, This.interval);
            }
		},
		/**
		 * 删除任务
		 */
		removeTask:function(){
			$BTips.instance.taskList.splice(0,1);
		},
		instance:new M139.UI.BottomTip()
	})
	//定义缩写
    window.$BTips = M139.UI.BottomTip;
})(jQuery,_,M139);
﻿/**
 * @fileOverview 定义用管中心升级提示的组件
 */

;(function ($, _, M139) {

    var superClass = M139.View.ViewBase;

    M139.namespace("M2012.UI.Tip.UmcUpgradeTip.View", superClass.extend({

        initialize: function (options) {
            return superClass.prototype.initialize.apply(this, arguments);
        },
        
        template: ['<div class="upload_tips_body">',
        '<p class="upload_tips_txtDescribe">恭喜您已获得<span class="orange">5</span>福分，升级互联网通行证领取吧，更有机会拿<span class="orange">100元话费</span>好礼</p>',
        '<p class="txt_uploadBtn">',
          '<em class="look_long_btn">',
            '<em>',
              '<a id="btnUpgrade" href="javascript:void(0)" style="height:35px;line-height:35px" class="look_mail">马上领取</a>',
            '</em>',
          '</em>',
        '</p>',
      '</div>'].join(''),


        initEvents: function () {
            var _this = this;
        },

        render: function () {
            var _this = this;
            if (top.UmcUpgradeTip) {
                return;
            }
         //   top.UmcUpgradeTip = true;
            $BTips.addTask({
                title: "玩邮箱账号，升安全达人",
                content: this.template,
                //bhShow:{ actionId: 102421, thingId: 3, moduleId: 19 },
                //bhClose:'上线tips关闭',
                timeout: 1000 * 20,

                onclick: function(event, instance) {
                    if (event && event.target && event.target.id == "btnUpgrade") {
                        _this.upgrade();
                    }
                }

            });

            _this.initEvents();
            return _this;
        },

        upgrade: function () {
            var TO_UPDATE = 1;
            var reqData = { optype: TO_UPDATE };
            var url = M139.HttpRouter.getUrl("umc:rdirectCall").replace("/setting/", "/mw2/setting/");
            url = $Url.makeUrl(url, reqData);
            window.open(url);
        }
    }));

})(jQuery, _, M139);
﻿/* Detect-zoom
 * -----------
 * Cross Browser Zoom and Pixel Ratio Detector
 * Version 1.0.0 | Feb 5 2013
 * dual-licensed under the WTFPL and MIT license
 * Maintained by https://github/tombigel
 * Original developer https://github.com/yonran
 */

(function () {
    if ($B.is.ie && $B.getVersion() < 8) {
        return;
    }


    /**
     * Use devicePixelRatio if supported by the browser
     * @return {Number}
     * @private
     */
    var devicePixelRatio = function () {
        return window.devicePixelRatio || 1;
    };

    /**
     * Fallback function to set default values
     * @return {Object}
     * @private
     */
    var fallback = function () {
        return {
            zoom: 1,
            devicePxPerCssPx: 1
        };
    };
    /**
     * IE 8+: no trick needed!
     * TODO: Test on IE10 and Windows 8 RT
     * @return {Object}
     * @private
     **/
    var ie8 = function () {
        var zoom = Math.round((screen.deviceXDPI / screen.logicalXDPI) * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Mobile WebKit
     * the trick: window.innerWIdth is in CSS pixels, while
     * screen.width and screen.height are in system pixels.
     * And there are no scrollbars to mess up the measurement.
     * @return {Object}
     * @private
     */
    var webkitMobile = function () {
        var deviceWidth = (Math.abs(window.orientation) == 90) ? screen.height : screen.width;
        var zoom = deviceWidth / window.innerWidth;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Desktop Webkit
     * the trick: an element's clientHeight is in CSS pixels, while you can
     * set its line-height in system pixels using font-size and
     * -webkit-text-size-adjust:none.
     * device-pixel-ratio: http://www.webkit.org/blog/55/high-dpi-web-sites/
     *
     * Previous trick (used before http://trac.webkit.org/changeset/100847):
     * documentElement.scrollWidth is in CSS pixels, while
     * document.width was in system pixels. Note that this is the
     * layout width of the document, which is slightly different from viewport
     * because document width does not include scrollbars and might be wider
     * due to big elements.
     * @return {Object}
     * @private
     */
    var webkit = function () {
        var important = function (str) {
            return str.replace(/;/g, " !important;");
        };

        var div = document.createElement('div');
        div.innerHTML = "1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>0";
        div.setAttribute('style', important('font: 100px/1em sans-serif; -webkit-text-size-adjust: none; height: auto; width: 1em; padding: 0; overflow: visible;'));

        // The container exists so that the div will be laid out in its own flow
        // while not impacting the layout, viewport size, or display of the
        // webpage as a whole.
        // Add !important and relevant CSS rule resets
        // so that other rules cannot affect the results.
        var container = document.createElement('div');
        container.setAttribute('style', important('width:0; height:0; overflow:hidden; visibility:hidden; position: absolute;'));
        container.appendChild(div);

        document.body.appendChild(container);
        var zoom = 1000 / div.clientHeight;
        zoom = Math.round(zoom * 100) / 100;
        document.body.removeChild(container);

        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * no real trick; device-pixel-ratio is the ratio of device dpi / css dpi.
     * (Note that this is a different interpretation than Webkit's device
     * pixel ratio, which is the ratio device dpi / system dpi).
     *
     * Also, for Mozilla, there is no difference between the zoom factor and the device ratio.
     *
     * @return {Object}
     * @private
     */
    var firefox4 = function () {
        var zoom = mediaQueryBinarySearch('min--moz-device-pixel-ratio', '', 0, 10, 20, 0.0001);
        zoom = Math.round(zoom * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom
        };
    };

    /**
     * Firefox 18.x
     * Mozilla added support for devicePixelRatio to Firefox 18,
     * but it is affected by the zoom level, so, like in older
     * Firefox we can't tell if we are in zoom mode or in a device
     * with a different pixel ratio
     * @return {Object}
     * @private
     */
    var firefox18 = function () {
        return {
            zoom: firefox4().zoom,
            devicePxPerCssPx: devicePixelRatio()
        };
    };

    /**
     * works starting Opera 11.11
     * the trick: outerWidth is the viewport width including scrollbars in
     * system px, while innerWidth is the viewport width including scrollbars
     * in CSS px
     * @return {Object}
     * @private
     */
    var opera11 = function () {
        var zoom = window.outerWidth / window.innerWidth;
        zoom = Math.round(zoom * 100) / 100;
        return {
            zoom: zoom,
            devicePxPerCssPx: zoom * devicePixelRatio()
        };
    };

    /**
     * Use a binary search through media queries to find zoom level in Firefox
     * @param property
     * @param unit
     * @param a
     * @param b
     * @param maxIter
     * @param epsilon
     * @return {Number}
     */
    var mediaQueryBinarySearch = function (property, unit, a, b, maxIter, epsilon) {
        var matchMedia;
        var head, style, div;
        if (window.matchMedia) {
            matchMedia = window.matchMedia;
        } else {
            head = document.getElementsByTagName('head')[0];
            style = document.createElement('style');
            head.appendChild(style);

            div = document.createElement('div');
            div.className = 'mediaQueryBinarySearch';
            div.style.display = 'none';
            document.body.appendChild(div);

            matchMedia = function (query) {
                style.sheet.insertRule('@media ' + query + '{.mediaQueryBinarySearch ' + '{text-decoration: underline} }', 0);
                var matched = getComputedStyle(div, null).textDecoration == 'underline';
                style.sheet.deleteRule(0);
                return { matches: matched };
            };
        }
        var ratio = binarySearch(a, b, maxIter);
        if (div) {
            head.removeChild(style);
            document.body.removeChild(div);
        }
        return ratio;

        function binarySearch(a, b, maxIter) {
            var mid = (a + b) / 2;
            if (maxIter <= 0 || b - a < epsilon) {
                return mid;
            }
            var query = "(" + property + ":" + mid + unit + ")";
            if (matchMedia(query).matches) {
                return binarySearch(mid, b, maxIter - 1);
            } else {
                return binarySearch(a, mid, maxIter - 1);
            }
        }
    };

    /**
     * Generate detection function
     * @private
     */
    var detectFunction = (function () {
        var func = fallback;

        if (navigator.userAgent.indexOf('MSIE 6.') > -1) {
            
        }
        //IE8+
        else if (!isNaN(screen.logicalXDPI) && !isNaN(screen.systemXDPI)) {
            func = ie8;
        }
            //Mobile Webkit
        else if ('ontouchstart' in window && typeof document.body.style.webkitTextSizeAdjust === 'string') {
            func = webkitMobile;
        }
            //WebKit
        else if (typeof document.body.style.webkitTextSizeAdjust === 'string') {
            func = webkit;
        }
            //Opera
        else if (navigator.userAgent.indexOf('Opera') >= 0) {
            func = opera11;
        }
            //Last one is Firefox
            //FF 18.x
        else if (window.devicePixelRatio) {
            func = firefox18;
        }
            //FF 4.0 - 17.x
        else if (firefox4().zoom > 0.001) {
            func = firefox4;
        }

        return func;
    }());


    var exports = ({

        /**
         * Ratios.zoom shorthand
         * @return {Number} Zoom level
         */
        zoom: function () {
            return detectFunction().zoom;
        },

        /**
         * Ratios.devicePxPerCssPx shorthand
         * @return {Number} devicePxPerCssPx level
         */
        device: function () {
            return detectFunction().devicePxPerCssPx;
        }
    });


    M139.core.namespace("M2012.UI.Tip.ZoomTip.Model", exports);
})(M139);

﻿/**
 * @fileOverview 定义页面缩放提示的组件
 */

;(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    var StorageKey_NotShow = "M139_ZoomTip_Not_Show_Again";
    M139.namespace("M2012.UI.Tip.ZoomTip.View", superClass.extend(
    {
        initialize: function (options) {
            var $el = jQuery(this.template);
            this.setElement($el);
            return superClass.prototype.initialize.apply(this, arguments);
        },
        template: ['<div id="divZoomTip">',
                '<div class="zoomTip_content">',
                    '<div class="zoomTip_inner">',
                        '<i style="background-image:url(http://images.139cm.com/m2012/images/global/global.png);background-position: -130px -150px;height: 24px;width: 24px;position: absolute;top: 20px;left: 10px;z-index: 20;"></i>',
                        '<div class="zoomTip_txt">您的浏览器目前处于缩放状态，会导致邮箱显示不正常，您可以键盘按“ctrl+数字0”组合键恢复初始状态。',
                        '<a id="aZoomNotShowAgain" style="color: #1E79C6;text-decoration: underline;" href="javascript:;">不再提示</a>',
                        '</div>',
                    '</div>',
                    '<a id="aZoomTipClose" title="关闭提示" style="position: absolute;right: 10px;top: 10px;width: 14px;height: 14px;font-size: 14px;color: #E4AF4D;line-height: 14px;font-family: Tahoma;font-weight: bold;overflow: hidden;text-align: center;" href="javascript:;" onclick="return false;">×</a>',
                '</div>',
        '</div>'].join(""),
        style: [
         '<style>',
         '#divZoomTip{',
             'position: fixed;',
             'top: 0px;',
             'left: 0px;',
             'height: 60px;',
             'width: 99.9%;',
             'z-index: 10240;',
             'overflow: hidden;',
         '}',
         '#divZoomTip .zoomTip_content {',
             'width: 100%;',
             ',position: relative;',
             'zoom: 1;',
             'background: #FFF2D1;',
             'border-bottom: 1px solid #E9C58C;',
         '}',
         '#divZoomTip .zoomTip_inner {',
            'width: 960px;',
            'height: 60px;',
            'margin: 0 auto;',
            'position: relative;',
            'zoom: 1;',
            'color: #555;',
         '}',
         '#divZoomTip .zoomTip_txt {',
            'margin-left: 35px;',
             'font-size: 14px;',
             'font-family: "Microsoft Yahei","\9ED1\4F53";',
             'padding-top: 22px;',
             'color: #984B12;',
             'line-height: 18px;',
             'height: 18px;',
         '}',
        '</style>'].join(""),
        initEvents: function () {
            var This = this;
            //缩放正常后移除提示
            $(window).bind("resize", function () {
                try{
                    if (M2012.UI.Tip.ZoomTip.Model.zoom() == 1) {
                        This.$el.hide();
                    } else {
                        This.$el.show();
                    }
                } catch (e) { }
            });
            this.$el.find("#aZoomTipClose").click(function () {
                This.close();
            });
            this.$el.find("#aZoomNotShowAgain").click(function () {
                This.close(true);
            });
        },
        render: function () {
            $(this.style).appendTo(document.body);
            this.$el.appendTo(document.body);
            this.initEvents();
            return this;
        },
        close: function (bNotShowAgain) {
            this.$el.remove();
            if (bNotShowAgain) {
                M2012.UI.Tip.ZoomTip.flagNotShowAgain();
            }
        }
    }));
    jQuery.extend(M2012.UI.Tip.ZoomTip, {
        isShow:false,
        watchZoom: function () {
            if ($B.is.ie && $B.getVersion() < 8) {
                return;
            }
            if (!this.isNotShowAgain()) {
                //调用第一次就检查一次，然后再根据resize事件检查
                if (!checkZoom()) {
                    $(window).bind("resize", function () {
                        checkZoom();
                    });
                }
            }
            function checkZoom() {
                var zoom = M2012.UI.Tip.ZoomTip.Model.zoom();
                //TODO 当窗口不是最大化的时候存在bug，暂时改为判断是0.1的完整倍数
                if (/^\d+\.\d$/.test(zoom)) {
                    showTip();
                    return true;
                }
            }
            function showTip() {
                if (!M2012.UI.Tip.ZoomTip.isShow) {
                    new M2012.UI.Tip.ZoomTip.View().render();
                    M2012.UI.Tip.ZoomTip.isShow = true;
                }
            }
        },
        isNotShowAgain: function () {
            var v = false;
            try {
                v = !!localStorage.getItem(StorageKey_NotShow);
            } catch (e) {

            }
            return v;
        },
        flagNotShowAgain: function () {
            try {
                localStorage.setItem(StorageKey_NotShow, "1");
            } catch (e) { }
        }
    });
})(jQuery, _, M139);
﻿/**
 * @fileOverview 弱网络检测组件，不依赖其它类库
 */

; (function (ctx) {
    var checkUrl = "/m2012/images/global/loading.gif";//700多字节的小图片
    //警报值
    var alertValue = 0;
    var timer;
    var fnQueue = [];
    var img;
    function refreshImg() {
        if (fnQueue.length == 0) {
            return;
        }
        var img = getImg();
        img.src = checkUrl + "?rnd=" + Math.random();
        clearTimeout(timer);
        timer = setTimeout(onTimeout, 3000);
    }
    function onLoad() {
        if (img.complete || img.width) {
            alertValue = 0;
            clearTimeout(timer);
            callFn(true);
            window.console && console.log("net check onload");
        }
    }
    function onError() {
        alertValue++;
        if (alertValue >= 2) {
            callFn(false);
        } else {
            refreshImg();
        }
        window.console && console.log("net check onerror");
    }
    function onTimeout() {
        onError();
    }
    function callFn(isSucc) {
        while (fnQueue.length > 0) {
            var fn = fnQueue.shift();
            try {
                fn(isSucc);
            } catch (e) { }
        }
        alertValue = 0;
    }
    function getImg() {
        if(!img){
            img = new Image();
            img.id = "imgHealthCheck";
            img.onload = onLoad;
            img.onerror = onError;
        }
        return img;
    }
    ctx.NetHealthCheck = {
        check: function (fn) {
            fnQueue.push(fn);
            if (fnQueue.length == 1) {
                //没有正在检查的任务才发起刷图片
                refreshImg();
            }
        }
    };
})(window);
/*
NetHealthCheck.check(function (isOnline) {
    alert(isOnline);
});
*/

(function (M139) {
    M139.namespace("M2012.UI.Tip.NetHealthCheck", {
        check: function () {
            NetHealthCheck.check(function (isOnline) {
                if (!isOnline) {
                    M139.UI.TipMessage.show("连接中断，请检查网络状况", {
                        className: "msgRed"
                    });
                }
            });
        }
    });
})(M139);
/**
 * @author wuxiang
 * @fileOverview
 * @description 产品运营相关工具方法
 */

(function(jQuery, _, M139) {

	M139.PUtils = {
         
		mobileMail : top.$User.getShortUid() + "@"
				+ top.coremailDomain,
				
		getImageSrc:function(ImageUrl){
			var imgUrlTemp = '{0}/addr/apiserver/httpimgload.ashx?sid={1}&path={2}';
            if (ImageUrl) {
                var headUrl = top.$T.Utils.format(imgUrlTemp, [top.domainList[top.$User.getPartid()].webmail, top.$App.getSid(), encodeURIComponent(ImageUrl)]);
                return top.M139.HttpRouter.getNoProxyUrl(headUrl);
            } else {
                return "/m2012/images/ad/face.jpg";
            }
		},
		userInfo:{},
		updateUserInfo:function(type){
			if(type==='name'){
			    top.$App.show('account','&info=accountSet');
			}else if(type==='birth'){
			 	top.$App.show('account','&info=userInfo');
			}else if(type==='mail'){
			 	top.$App.show('preference','&info=onlinetips');
			}else if(type==='head'){
				top.$App.show('account','&info=userInfo');
			}else if(type==='importContact'){
				top.appView.show("addrinputhome");
			}
		},
		getUserinfo : function(callback) {
			top.M139.Timing.waitForReady('top.$App.getModel("contacts")',function(){
                if(!top.$App.getModel("contacts").getUserInfoWaiting){
				top.$App.getModel("contacts").getUserInfo(null, function(info) {
					if(info&&info.code === "S_OK"){
						var data = info["var"]||{};
						data.headImg = $PUtils.getImageSrc(data.ImageUrl);
						var userName = "";
	                    var aliasName = top.$User.getAliasName();
					    //发件人姓名>别名>手机号
	                    if (data.AddrFirstName) {
	                        userName = data.AddrFirstName;
	                    } else if (aliasName) {
	                        userName = top.$Email.getAccount(aliasName); //别名
	                    } else {
	                        userName = top.$User.getShortUid();
	                    }
	                    data.UserNumber = data.UserNumber.replace(/^86/,"");
						data.userName = userName;
						callback&&callback(data);
					}
				});
                }
			});
		},
		isHasHead : function(imgUrl) {
			if (imgUrl.match("face.jpg")) {
				return false;
			}
			return true;
		},

		iframetransparent: function () {
		    top.$App.get('birthWishFrame').$("iframe").attr("allowtransparency", "true");  //兼容IE78,iframe背景透明

		    $('div.boxIframeMain').css({"background": "none", "border": "none" });		
		},

		


	    destroyEl:function(div){
	     if(div)div.innerHTML = "";
	   },
	    _creatElement:function(tag,id){
	   	 var div = document.getElementById(id)?document.getElementById(id):document.createElement(tag);
		 div.id = id;
		 div.style.display = "none";
	   	 return div;
	   },
        htmlEncode:function(str){
		  var div = this._creatElement('div','htmlCode');
		  div.appendChild(document.createTextNode(str)); 
		  var innerHTTML = div.innerHTML;
		  this.destroyEl(div);
		  return innerHTTML;  
	   },
	    htmlDecode:function(str){
	    var div = this._creatElement('div','htmlCode'); 
		div.innerHTML = str;
		var innerText = div.innerText || div.textContent;
		this.destroyEl(div);
		return innerText  
	  },
		getEmail:function(text){
			return [$T.Email.getName(text),$T.Email.getEmail(text)];
		},
		/**
		 * 根据权重获取选择哪一个数据
		 * s为是否加入计算,weight为权限
		 * @example[{s:true,weight:3},{s:true,weight:5},{s:true,weight:6}]];
		 */
		getRandomByWeigth:function(weights){
			  var data = [],count=0;
			  for(var i = 0;i<weights.length;i++){
			    if(weights[i].s){
				 count+=weights[i].weight;
				 data.push(ads[i]);
				}
			  }
			  //构建数据
			  var random = Math.floor(Math.random()*count);
			  //数据落在哪里区间
			  var pos = 0;
			  var weight = null;
			  for(var j= 0;j<data.length;j++){
			       pos +=data[j].weight;
				   if(random<pos){//找到数据
					   weight = data[j];
					 break;
				   }
			  
			  }
			 return weight;
		},
		isCurTInRangeTime : function(arr) {
			var startTime = arr[0], endTime = arr[1];
			var flag = false;
			var sysTime = top.$Date.getServerTime();
			if (startTime instanceof Date && endTime instanceof Date
					&& sysTime >= startTime && sysTime < endTime) {
				flag = true;
			}
			return flag;
		},
		isContainNum : function(mobiles, num) {
			var strMobiles = mobiles.join(",");
			if (strMobiles.match(num))
				return true
			return false
		},
		fixTime2Str : function(num) {
			num = "0" + num;
			num = num.length == 3 ? num.substr(1) : num;
			return num;
		},
		setCharVal:function(str,num,val){
			str = str||'';
			var len = str.length,sub = num-len;
			var strs = str.split('');
			if(sub>1){
				for(var i=0;i<sub;i++){
				  strs[len+i] = 0;
			 	}
			}
			strs[num-1]=val;
			return strs.join('');
		},
		dateFormat : function(str) {  
        	var isoExp  = /^\s*(\d{4})-(\d\d)-(\d\d)( (\d{2}):(\d{2}):(\d{2}))?\s*$/,  
            	date    = new Date(NaN), month,  
            	parts   = isoExp.exec(str);  
            if(parts) {  
            	month   = +parts[2];  
           		date.setFullYear(parts[1], month - 1, parts[3]);
           		if(parts[4]){
           			date = new Date(parts[1],month - 1,parts[3],parts[5],parts[6],parts[7]);
           		}
                if(month != date.getMonth() + 1) {  
                	date.setTime(NaN);  
                }  
            }      
            return date;  
    	}, 
		getLeftStr:function(str,len,showSymbol,tail){
    		showSymbol = showSymbol||true;
			var leftStr = str;
			var curLen  = 0;
			for(var i=0;i<str.length;i++){
				curLen += str.charCodeAt(i)>255 ? 2 : 1;
				if(curLen > len){
					leftStr = str.substring(0,i);
					break;
				}else if(curLen == len){
					leftStr = str.substring(0,i + 1);
					break;
				}
			}
			if(showSymbol){
				if(leftStr != str){
					leftStr += (tail?tail:"..."); 
				}
			}
			return leftStr;
		},
		getGNameByMobile:function(mobileNumber){
			 var gName = '';
			 var _contacts = top.$App.getModel("contacts").getContactsByMobile(mobileNumber)||[]; 
			 //取到这些联系人所在的所有组名 
			 var _groupNames = $.map(_contacts, //循环每个手机号里的SerialId
				  function(i){ return $.map($.grep(top.Contacts.data.map, 
				  function(j){ return j.SerialId == i.SerialId }),//查询在group中是否找到相应的SerialId
				  function(k){ return top.$App.getModel("contacts").getGroupById(k.GroupId).GroupName;}); });//找到之后返回数组中
		     if(_groupNames[0]){
			    if(top.$T.Utils.getBytes(_groupNames[0])>20){
			     gName = _groupNames[0].substring(0,10)+'...';
			    }else{
				 gName = _groupNames[0]
				}
			 }
			 return gName;
		 },
		/**
		 *发送邮件
		 */
		
		sendMail:function(param){
	       var  mailInfo = {
            id: param.id || "",
        	mid : param.mid || "", //后台返回的草稿ID,成功调用存草稿方法后修改该属性
			messageId: "",
        	account: param.account?param.account:top.$User.getDefaultSender()|| top.$PUtils.mobileMail,//发件人
	        to: param.email,//收件人地址‘,’号分隔
	        cc: "",//抄送人地址
	        bcc: "",//密送人地址
	        showOneRcpt: param.showOneRcpt || 0, //是否群发单显1 是 0否 
	        isHtml: 1,
	        subject: param.subject,
	        content: param.content,
	        priority: 3, //是否重要
	        signatureId: 0,//使用签名档
	        stationeryId: 0,//使用信纸
	        saveSentCopy: 1,//发送后保存副本到发件箱
	        requestReadReceipt : 0,//是否需要已读回执
	        inlineResources: 1, //是否内联图片
	        scheduleDate: param.scheduleDate || 0, //定时发信
	        normalizeRfc822: 0,
	        attachments: param.attachments || []//所有附件信息
            }
	    top.$PUtils._sendMail(mailInfo, param.callback||function(){}, param.action);
		},
		_sendMail:function(mailInfo,callback,action){
	       var data = {
                "attrs"  :     mailInfo,
                "action" :     action||'deliver',
                "replyNotify": 0,
            	"returnInfo":  1
	       };
	       top.M139.RichMail.API.call("mbox:compose&comefrom=5&categroyId=103000000", data, function(res) {
    	   		if(callback){callback(res);}
	       });
		},
		getContact : function(count, filterFun) {
			filterFun = filterFun || function(mail) {
				if (mail.match("10086"))
					return false;
				return (mail == top.$User.getDefaultSender() || mail
						.match(this.mobileMail)) ? false : true;
			};
			var retUser = [];
			var contactData = top.$App.getConfig("ContactData")||{};
			var close = contactData.closeContacts || [];
			var last = contactData.lastestContacts || [];
			var link = contactData.contacts || [];
			var allUser = close.concat().concat(last.concat()).concat(link
					.concat());
			count = count || allUser.length;
			var user = null;
			for (var i = 0; i < count; i++) {
				user = allUser[i];
				if (user.name && user.addr && this._distinctUser(user)
						&& filterFun.apply(null, user.addr)) {
					retUser.push(user);
				}
			}
			return retUser;
		},
		_distinctUser : function(name, addr, users) {
			var len = users.length, flag = true;
			for (var i = 0; i < len; i++) {
				if (users[i].name == name) {// 名字相同，优先取139的
					if (add.match("@" + top.coremailDomain)) {
						users[i].addr = add;
					}
					flag = false;
					break;
				}
				if (users[i].addr == add) {// 邮箱地址相同
					flag = false;
					break;
				}
			}
			return flag;
		},
		getFlashHtml : function(flashName, width, height) {
			var flashHtml = "";
			var name = flashName.replace(/\.swf/, "");
			if ($.browser.msie) {
				flashHtml = "<object id='"
						+ name
						+ "' name='"
						+ name
						+ "' wmode='transparent' "
						+ " classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'"
						+ "codebase='http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=7,0,19,0'"
						+ "width='" + width + "' height='" + height + "' >"
						+ "<param name='movie' value='" + top.wmsvrPath2 + "/"
						+ flashName + "'>"
						+ "<param name='wmode' value='transparent'>"
						+ "<param name='AllowScriptAccess' value='always'/>"
						+ "<param name='quality' value='high'>" + "</object>";
			} else {
				flashHtml = "<embed name='"
						+ name
						+ "' id='"
						+ name
						+ "' wmode='transparent' src='"
						+ top.wmsvrPath2
						+ "/"
						+ flashName
						+ "' quality='high' pluginspage='http://www.macromedia.com/go/getflashplayer' type='application/x-shockwave-flash' width='"
						+ width + "px' height='" + height
						+ "px'  allowscriptaccess='always'></embed>";
			}
			return flashHtml;
		},
		show : function(param, href) {
			if(param=='updateHead'){
				top.$App.show('account');
			}
		},
		getCurTabWin : function(winName) {
			
			var iframeId = winName?winName:(top.$App.getCurrentTab().view.readmailcontentview
					.getEl().replace(/^#mailContent/, "mid"));
			return top.$("iframe[name='" + iframeId + "']")[0].contentWindow;
		},
		setIframeScrollTop:function(el,win){
			var top;
			win = win||window;
			if(el){
        		top = el.offset().top;
        		win.scroll(0,top);
        	}
		},
		
		//添加日程
		 renderSchdedule : function(data,options){
      	
	        var PageApp = new M139.PageApplication({name : 'popSchedule_utils'});
	        var url = "http://" + top.window.location.host + "/m2012/html/calendar_reminder/";
	        url += "pop_schedule.html?&sid"+top.sid;
	        url = PageApp.inputDataToUrl(url,{data:data,type:1});
	        var scheduleIFrame = top.$Msg.open({
	                                dialogTitle: "添加日程提醒",
	                                url: url,
	                                width: 650,
	                                height: 520
	                      });;
      	   top.$App.set('scheduleIFrame',scheduleIFrame);
      	   top.$App.set('scheduleIFrame_options',options);
         },
		createStyle:function(css,win){
			if(!css) return;
			var doc = win?win.document:document;
			var htmlCode = "<style type='text/css'>"+css + "</style>";
			$(htmlCode).appendTo(doc.body);
		},
		showCheck:function(timeout){
			top.$App.show('welcome'); //打开欢迎页签到
			setTimeout(function(){
				if(top.document.getElementById("welcome").contentWindow.CheckIn){
					top.document.getElementById("welcome").contentWindow.CheckIn.showface();
				}
			},timeout||200);
		},
		date : function(y) {
			var P = [19416, 19168, 42352, 21717, 53856, 55632, 91476, 22176,
					39632, 21970, 19168, 42422, 42192, 53840, 119381, 46400,
					54944, 44450, 38320, 84343, 18800, 42160, 46261, 27216,
					27968, 109396, 11104, 38256, 21234, 18800, 25958, 54432,
					59984, 28309, 23248, 11104, 100067, 37600, 116951, 51536,
					54432, 120998, 46416, 22176, 107956, 9680, 37584, 53938,
					43344, 46423, 27808, 46416, 86869, 19872, 42448, 83315,
					21200, 43432, 59728, 27296, 44710, 43856, 19296, 43748,
					42352, 21088, 62051, 55632, 23383, 22176, 38608, 19925,
					19152, 42192, 54484, 53840, 54616, 46400, 46496, 103846,
					38320, 18864, 43380, 42160, 45690, 27216, 27968, 44870,
					43872, 38256, 19189, 18800, 25776, 29859, 59984, 27480,
					21952, 43872, 38613, 37600, 51552, 55636, 54432, 55888,
					30034, 22176, 43959, 9680, 37584, 51893, 43344, 46240,
					47780, 44368, 21977, 19360, 42416, 86390, 21168, 43312,
					31060, 27296, 44368, 23378, 19296, 42726, 42208, 53856,
					60005, 54576, 23200, 30371, 38608, 19415, 19152, 42192,
					118966, 53840, 54560, 56645, 46496, 22224, 21938, 18864,
					42359, 42160, 43600, 111189, 27936, 44448];
			var K = "甲乙丙丁戊己庚辛壬癸";
			var J = "子丑寅卯辰巳午未申酉戌亥";
			var O = "鼠牛虎兔龙蛇马羊猴鸡狗猪";
			var L = ["小寒", "大寒", "立春", "雨水", "惊蛰", "春分", "清明", "谷雨", "立夏",
					"小满", "芒种", "夏至", "小暑", "大暑", "立秋", "处暑", "白露", "秋分", "寒露",
					"霜降", "立冬", "小雪", "大雪", "冬至"];
			var D = [0, 21208, 43467, 63836, 85337, 107014, 128867, 150921,
					173149, 195551, 218072, 240693, 263343, 285989, 308563,
					331033, 353350, 375494, 397447, 419210, 440795, 462224,
					483532, 504758];
			var B = "日一二三四五六七八九十";
			var H = ["正", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一",
					"腊"];
			var E = "初十廿卅";
			var V = {
				"0101" : "*1元旦节",
				"0214" : "情人节",
				"0305" : "学雷锋纪念日",
				"0308" : "妇女节",
				"0312" : "植树节",
				"0315" : "消费者权益日",
				"0401" : "愚人节",
				"0501" : "*1劳动节",
				"0504" : "青年节",
				"0601" : "国际儿童节",
				"0701" : "中国共产党诞辰",
				"0801" : "建军节",
				"0910" : "中国教师节",
				"1001" : "*3国庆节",
				"1224" : "平安夜",
				"1225" : "圣诞节"
			};
			var T = {
				"0101" : "*2春节",
				"0115" : "元宵节",
				"0505" : "*1端午节",
				"0815" : "*1中秋节",
				"0909" : "重阳节",
				"1208" : "腊八节",
				"0100" : "除夕"
			};
			function U(Y) {
				function c(j, i) {
					var h = new Date((31556925974.7 * (j - 1900) + D[i] * 60000)
							+ Date.UTC(1900, 0, 6, 2, 5));
					return (h.getUTCDate())
				}
				function d(k) {
					var h, j = 348;
					for (h = 32768; h > 8; h >>= 1) {
						j += (P[k - 1900] & h) ? 1 : 0
					}
					return (j + b(k))
				}
				function a(h) {
					return (K.charAt(h % 10) + J.charAt(h % 12))
				}
				function b(h) {
					if (g(h)) {
						return ((P[h - 1900] & 65536) ? 30 : 29)
					} else {
						return (0)
					}
				}
				function g(h) {
					return (P[h - 1900] & 15)
				}
				function e(i, h) {
					return ((P[i - 1900] & (65536 >> h)) ? 30 : 29)
				}
				function C(m) {
					var k, j = 0, h = 0;
					var l = new Date(1900, 0, 31);
					var n = (m - l) / 86400000;
					this.dayCyl = n + 40;
					this.monCyl = 14;
					for (k = 1900; k < 2050 && n > 0; k++) {
						h = d(k);
						n -= h;
						this.monCyl += 12
					}
					if (n < 0) {
						n += h;
						k--;
						this.monCyl -= 12
					}
					this.year = k;
					this.yearCyl = k - 1864;
					j = g(k);
					this.isLeap = false;
					for (k = 1; k < 13 && n > 0; k++) {
						if (j > 0 && k == (j + 1) && this.isLeap == false) {
							--k;
							this.isLeap = true;
							h = b(this.year)
						} else {
							h = e(this.year, k)
						}
						if (this.isLeap == true && k == (j + 1)) {
							this.isLeap = false
						}
						n -= h;
						if (this.isLeap == false) {
							this.monCyl++
						}
					}
					if (n == 0 && j > 0 && k == j + 1) {
						if (this.isLeap) {
							this.isLeap = false
						} else {
							this.isLeap = true;
							--k;
							--this.monCyl
						}
					}
					if (n < 0) {
						n += h;
						--k;
						--this.monCyl
					}
					this.month = k;
					this.day = n + 1
				}
				function G(h) {
					return h < 10 ? "0" + h : h
				}
				function f(i, j) {
					var h = i;
					return j.replace(/dd?d?d?|MM?M?M?|yy?y?y?/g, function(k) {
								switch (k) {
									case "yyyy" :
										var l = "000" + h.getFullYear();
										return l.substring(l.length - 4);
									case "dd" :
										return G(h.getDate());
									case "d" :
										return h.getDate().toString();
									case "MM" :
										return G((h.getMonth() + 1));
									case "M" :
										return h.getMonth() + 1
								}
							})
				}
				function Z(i, h) {
					var j;
					switch (i, h) {
						case 10 :
							j = "初十";
							break;
						case 20 :
							j = "二十";
							break;
						case 30 :
							j = "三十";
							break;
						default :
							j = E.charAt(Math.floor(h / 10));
							j += B.charAt(h % 10)
					}
					return (j)
				}
				this.date = Y;
				this.isToday = false;
				this.isRestDay = false;
				this.solarYear = f(Y, "yyyy");
				this.solarMonth = f(Y, "M");
				this.solarDate = f(Y, "d");
				this.solarWeekDay = Y.getDay();
				this.solarWeekDayInChinese = "星期" + B.charAt(this.solarWeekDay);
				var X = new C(Y);
				this.lunarYear = X.year;
				this.shengxiao = O.charAt((this.lunarYear - 4) % 12);
				this.lunarMonth = X.month;
				this.lunarIsLeapMonth = X.isLeap;
				this.lunarMonthInChinese = this.lunarIsLeapMonth ? "闰"
						+ H[X.month - 1] : H[X.month - 1];
				this.lunarDate = X.day;
				this.showInLunar = this.lunarDateInChinese = Z(this.lunarMonth,
						this.lunarDate);
				if (this.lunarDate == 1) {
					this.showInLunar = this.lunarMonthInChinese + "月"
				}
				this.ganzhiYear = a(X.yearCyl);
				this.ganzhiMonth = a(X.monCyl);
				this.ganzhiDate = a(X.dayCyl++);
				this.jieqi = "";
				this.restDays = 0;
				if (c(this.solarYear, (this.solarMonth - 1) * 2) == f(Y, "d")) {
					this.showInLunar = this.jieqi = L[(this.solarMonth - 1) * 2]
				}
				if (c(this.solarYear, (this.solarMonth - 1) * 2 + 1) == f(Y,
						"d")) {
					this.showInLunar = this.jieqi = L[(this.solarMonth - 1) * 2
							+ 1]
				}
				if (this.showInLunar == "清明") {
					this.showInLunar = "清明节";
					this.restDays = 1
				}
				this.solarFestival = V[f(Y, "MM") + f(Y, "dd")];
				if (typeof this.solarFestival == "undefined") {
					this.solarFestival = ""
				} else {
					if (/\*(\d)/.test(this.solarFestival)) {
						this.restDays = parseInt(RegExp.$1);
						this.solarFestival = this.solarFestival.replace(/\*\d/,
								"")
					}
				}
				this.showInLunar = (this.solarFestival == "")
						? this.showInLunar
						: this.solarFestival;
				this.lunarFestival = T[this.lunarIsLeapMonth
						? "00"
						: G(this.lunarMonth) + G(this.lunarDate)];
				if (typeof this.lunarFestival == "undefined") {
					this.lunarFestival = ""
				} else {
					if (/\*(\d)/.test(this.lunarFestival)) {
						this.restDays = (this.restDays > parseInt(RegExp.$1))
								? this.restDays
								: parseInt(RegExp.$1);
						this.lunarFestival = this.lunarFestival.replace(/\*\d/,
								"")
					}
				}
				if (this.lunarMonth == 12
						&& this.lunarDate == e(this.lunarYear, 12)) {
					this.lunarFestival = T["0100"];
					this.restDays = 1
				}
				this.showInLunar = (this.lunarFestival == "")
						? this.showInLunar
						: this.lunarFestival;
				this.showInLunar = (this.showInLunar.length > 4)
						? this.showInLunar.substr(0, 2) + "..."
						: this.showInLunar
			}
			return new U(y);
		}
	}
	/////////////////////////////////////////////////////////////////////////////////////////////
	if(!Function.prototype.bind){
		Function.prototype.bind=function(){
            var __method = this;
            var args = Array.prototype.slice.call(arguments);
            var object = args.shift();
            return function() {
                return __method.apply(object, args.concat(Array.prototype.slice.call(arguments)));
            }
        };
	}
	window.$PUtils = M139.PUtils;
	 top.M139.Timing.waitForReady('top.$App.getConfig("UserData")', function () {
		window.$PUtils.getUserinfo(function(info){
		    $PUtils.userInfo = info;
		    $PUtils.userInfo.aliasName = ($User.getAliasName()).replace(/@139\.com$/,'');
		});
	 });
})($, _, M139);
﻿
(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    M139.namespace('M2012.Fetionim.View', superClass.extend({
        //高度
        height: 46,
        //是否注册了飞信区域行为点击事件，默认为false，注册后为true，保证只注册一次
        fetionClickEventAdded: false,
        //是否取得凭证
        isLogin: false,
        /**
        * 初始化飞信Bar
        */
        initialize: function () {
            this.initEvents();
            var self = this;
            $App.on("FetionBinded", function () {
                self.login();
            });
            $App.on("FetionUnBinded", function () {
                self.logout();
            });
        },
        render: function (call) {
            var self = this;

            var regex = getDomain("rebuildDomain").match(/\/+(.*)\//);
            if (regex.length > 0) {
                //站点标记
                this.LOGIN_SITE_TAG = regex[1] || null;
            }

            //获取凭证站点
            var LOGIN_SITE = top.domainList[$User.getPartid()]["webmail"] || null;

            //皮肤
            this.SKIN = "skin_4";
            //缓存SSOID
            this.SSO_SID = top.$App.getSid();
            //延迟加载web飞信延迟加载时间，先从UserData中取值，如果没有取到就给默认值15秒
            this.fetionDelayTime = 10000;
            //加载飞信Bar脚本主机，测试环境和现网不同
            this.fetionBarHost = LOGIN_SITE.indexOf("mail.10086.cn") > -1
                ? "http://webim.feixin.10086.cn/webimbar/" : "http://221.179.173.100/WebIMBardebug/";
            //加载飞信BarUrl
            //0:飞信站点url
            //1:第三方网页对应的域，这里使用的是LOGIN_SITE_TAG
            //2:第三方对应的tag，这里使用的是LOGIN_SITE_TAG
            //3:随机数，防止浏览器缓存
            this.getfetionBarUrl = "{0}initializev2.aspx?domain={1}&tag={2}&skin={3}&_={4}"
                .format(this.fetionBarHost, "gateway.139.com", this.LOGIN_SITE_TAG, this.SKIN, Math.random());

            //存放飞信绑定信息，邮.net站点
            window.fetion = {};
            //接入飞信Bar参数设置
            window.fxbar_settings = {
                //第三方对应的tag，不能为空
                tag: "139youxiang",
                //第三方网页对应的域
                domain: "mail.10086.cn",
                //编码
                charset: "utf-8",
                //飞信Bar宽度
                //width:300,
                height: this.height,
                //飞信Bar默认是否展开
                autoExpand: false,
                //飞信Bar定位
                pos: {
                    left: "0px",
                    bottom: "0px"
                },

                //飞信Bar样式，6是139邮箱的。
                layout: 8,
                skin: "skin_4",
                permission: 1,
                containerId: "fetionContainerId",
                /**
                * 获取凭证
                * @param {function} callback 获取凭证回调方法 
                */
                preLogin: function (callback) {
                    var api = 'user:getFetionLoginInfo';
                    var data = {};
                    var options = {
                        onrouter: function (router) {
                            router.addRouter('together', [api]);
                        },
                        error: function () {
                            if (callback) callback(500);
                        }
                    };

                    $RM.call(api, data, success, options);

                    function success(result) {
                        //200  一切正常，顺利获取到凭证以及凭证的域
                        //301  获取凭证失败
                        //302  未绑定飞信
                        //500  未知错误
                        var SUCCEED = 200, FAIL = 301, UNBIND = 302, ERROR = 500;

                        if (result && result.responseData) {
                            result = result.responseData;
                            if (result.code === "S_OK") {

                                result = result['var'];
                                if (Number(result.isBind) === 1 || Number(result.isBind) === -1) {
                                    var ssic = decodeURIComponent(result.credential);
                                    if (callback) {
                                        callback(ssic ? SUCCEED : FAIL, ssic, "gateway.139.com");
                                        self.isLogin = true; //得到凭证并登录成功，修改标记
                                        self.addEventForLogged(); //注册登录后的事件
                                    }
                                    return;
                                } else if (Number(result.isBind) === 0) {
                                    if (callback) {
                                        callback(UNBIND);
                                    }
                                    return;
                                }
                            }
                        }

                        if (callback) {
                            callback(ERROR);
                        }
                    }
                },

                /**
                * 绑定方法
                * @param {function} callback 绑定方法
                */
                bindFetion: function (callback) {
                    var api = 'user:bindFetion';
                    var data = {};
                    var options = {
                        onrouter: function (router) {
                            router.addRouter('together', [api]);
                        }
                    };

                    $RM.call(api, data, success, options);

                    function success(result) {
                        //200  一切正常，绑定成功
                        //404  用户未开通飞信
                        //500  绑定发生错误
                        var SUCCEED = 200, NONE = 404, ERROR = 500;
                        var OK = 0, NOTFOUND = 1, HASEXISTS = 2, flag;

                        if (!$.isFunction(callback)) {
                            return;
                        }

                        if (result && result.responseData) {
                            result = result.responseData;
                            if (result.code === "S_OK") {
                                result = result["var"];

                                flag = Number(result.bindFlag);
                                if (OK === flag) {
                                    callback(SUCCEED);
                                } else if (NOTFOUND === flag) {
                                    callback(NONE, "用户未开通飞信");
                                } else if (HASEXISTS === flag) {
                                    callback(SUCCEED);
                                } else {
                                    callback(ERROR, "帐号绑定失败");
                                }
                                return;
                            }
                        }

                        callback(ERROR, "帐号绑定失败");
                    }
                }
            };

            //延时3秒加载飞信
            window.setTimeout(function () {
                M139.core.utilCreateScriptTag({
                    id: "getfetionBar",
                    src: self.getfetionBarUrl,
                    charset: "utf-8"
                },
                 function () {
                     self.show();
                     $(".i_funtion").hide();
                 });
                var setFlashHide = setInterval(function () {
                    var div=$("#fetion_ajaxproxy");
                    var status = div.attr("status");
                    if (!status) {
                        div.hide().attr("status", 1);
                    } else {
                        clearInterval(setFlashHide);
                    }
                }, 1000);
            }, self.fetionDelayTime);

            //加载飞信Bar脚本
            if (call) { call() }
        },
        /**
        * 退出飞信
        */
        logout: function () {
            try {
                //调用退出飞信Bar方法
                top.fetion$.fxbar.logic.quit();
                //退出成功，修改标记
                this.isLogin = false;
            } catch (e) { }
        },
        login: function () {
            try {
                //调用退出飞信Bar方法
                top.fetion$.fxbar.logic.login();
                //退出成功，修改标记
                this.isLogin = true;
            } catch (e) { }
        },
        bindAutoHide: function (options) {
            return $D.bindAutoHide(options);
        },

        unBindAutoHide: function (options) {
            return $D.unBindAutoHide(options);
        },
        /**
        * 增加事件，用于行为登录后上报统计
        */
        addEventForLogged: function () {
            //添加doument点击事件，使飞信面板隐藏
            $(document).click(function () {
                if (fetion$ && fetion$.mainWindow) {
                    fetion$.mainWindow.collapse();
                }
            });
        },
        initEvents: function () {
            //当前标签如果不是欢迎页，隐藏飞信，否则显示
            $App.on("showTab", function(e){
                var welcomeIframe = document.getElementById("welcome");
                var winWelcome = welcomeIframe.contentWindow;//欢迎页重载会导致window改变
                var fetionElemInTop = $("#fetionElemTop");

                try {
                    if (e.name == "googSubscription") {
                        top.addBehaviorExt({ actionId: 104808 });
                        console.log("上报云邮局日志");
                    }
                    if (e.name == "welcome") {
                        if (!winWelcome.$) return;//欢迎页重载时，不计算位置

                        var fetionElemInWelcome = winWelcome.$("#fetionElem");
                        //当欢迎页重载的时候，如果飞信还未出来，则不计算位置
                        if (fetionElemInWelcome.length == 0) return;

                        if ($.browser.msie) {//为ie设置滚动条
                            winWelcome.document.documentElement.scrollTop = 0;
                        } else {
                            winWelcome.document.body.scrollTop = 0;
                        }

                        //重新计算飞信的位置，防止上次计算不准确
                        var fetionElemOffsetInWelcome = fetionElemInWelcome.show().offset();
                        fetionElemInWelcome.hide();
                        var fetionElemOffsetInWelcomeTopValue = fetionElemOffsetInWelcome.top;
                        var fetionElemTopValueInTop = fetionElemOffsetInWelcomeTopValue + 28;

                        fetionElemInTop.css({
                            left: fetionElemOffsetInWelcome.left - 6,
                            top: fetionElemTopValueInTop -31
                        });

                        fetionElemInTop.show();
                    } else {
                        fetionElemInTop.hide();
                    }
                } catch (ex) {
                    //
                }
            });
        },
        show: function () {
            var self = this;
            $("#fetionContainerId").mouseover(function (e) {
                e.preventDefault();
                self.bindAutoHide({
                    action: "click",
                    element: $(this)[0],
                    stopEvent: true,
                    callback: function () {
                        $("#fetionContainerId").attr("bindautohide", 0);
                        fetion$.fxbar.ui.toggle(0)
                    }
                });
            });
            return superClass.prototype.show.apply(this, arguments);
        }
    })
    );

})(jQuery, _, M139);


﻿/**   
* @fileOverview 飞信同窗
*/
(function (jQuery, _, M139) {

    /**
    * @namespace 
    * g3通话
    */

    M139.namespace("M2012.G3.Model", Backbone.Model.extend({

        defaults: {
            param: {}

        },
        getParam: function (newSkin) {
            var skinName = newSkin || $T.Cookie.get("SkinPath") || $App.getUserConfigInfo("skin") || "skin_xmas"; //当前皮肤
            var environment = 2; //默认环境研发线,0研发、1测试、其它生产
            if (top.location.href.indexOf("rd") > -1)
                environment = 0;
            if (top.location.href.indexOf("ts") > -1)
                environment = 1;
            var cookiepartid = $User.getPartid(); //0灰度
            cookiepartid = "undefined" == typeof cookiepartid || cookiepartid == null ? "0" : cookiepartid;
            var netSpeedServerType = $T.Cookie.get("netSpeedServerType"); //多链路
            netSpeedServerType = "undefined" == typeof netSpeedServerType || netSpeedServerType == null ? "" : netSpeedServerType;
            this.set({
                param: {
                    environment: environment,
                    partId: cookiepartid,
                    path: netSpeedServerType,
                    skin: skinName.replace("skin_", "")
                }
            })
        },
        getUrl: function (key, newSkin) {
            var url =  LinkConfig[key]["url"];
            return url +  "?sid=" + $App.getSid() + this.getParam(newSkin);
        }

    }));

})(jQuery, _, M139);

﻿/**   
* @fileOverview 邮件附件存彩云
* @Code by Sukunwei
*/

(function (jQuery, _, M139) {

/**
* @namespace 
* 邮件附件存彩云
*/
	M139.namespace("M2012.ReadMail.SaveToMcloud.Model",Backbone.Model.extend({
			
	    defaults: {
	        loginUser: null, //$User.getLoginName(),
		    sid: null,//$App.getSid(), //sid
		    userNumber:null, //用户手机号
			//userNumber: '18299752969', //用户手机号
			sidVal:'cloudUpload', //彩云标识
			RMKEY: '671300886', //RMKEY,暂时不依赖，随便定一个值
			downUrl:null, //下载路径
			isAll:false, //是否全部存
			fileSize:null, //文件大小
			fileName:null, //文件名带后缀
			saveStatus:true, //保存状态,
			checkTime:5000, //轮询时间间隔
			maxTime: 1000 * 30

			//maxTime:1000 * 60 * 20 //最长时间（20分钟）
		},
		
		/** 
		* 请求URL
		* saveMcloud:'http://172.16.42.15:8211/resourceupload/fileupload', //存彩云请求
			callBack:'http://172.16.42.15:8211/cloudUploadCallBack' //查询状态请求
		*
		*/
		requestUrl:{
		    url: 'http://app.mail.10086rd.cn/colorcloud',
		    saveMcloud: getDomain("colorcloud") + '/fileupload', //存彩云请求
		    callBack: getDomain("colorcloud") + '/cloudUploadCallBack',//查询状态请求
		    saveMcloud_dev: getDomain("colorcloud") +'/fileupload'

		},
		
		/** 
		* 提示语
		*/
		tips:{
			link:'<a href="http://caiyun.feixin.10086.cn/portal/index.jsp" target="_blank">查看</a>',
			saveStatus:'<img src="/m2012/images/global/loading_xs.gif" />&nbsp;正在保存中...',
			oneSaveSuccess: '{0}已成功保存到彩云网盘<span style="padding-left:20px;"><a href="http://caiyun.feixin.10086.cn/portal/index.jsp" target="_blank">查看</a></span>',
			saveFail:'保存失败，请稍后重试',
			warn:'无法同时保存多个附件到彩云，请稍后再试。'
		},
		
		/** 
		* 判断是否冲突，不允许多个同时存储
		*/
		checkSaveConflict:function(){
			if(!this.get('saveStatus')){
				$Msg.alert(this.tips.warn);
				return;
			}
		},
		
		/**
		* 附件存彩云
		* http://192.168.9.53:8181/resourceupload/fileupload?userNumber=15023451001&downUrl= http://rm.mail.10086ts.cn/RmWeb/view.do?func=attach:download&mid=010300017994e117000000a2&offset=2456&size=1574&name=focus.html&encoding=1&sid=MTM2MzY3Njk5OTAwMTA5NDA2NDIwMQAA000001&type=attach &sid= MTM2MzY3Njk5OTAwMTA5NDA2NDIwMQAA000001 &sidVal=cloudUpload&RMKEY=671300886&&fileSize=1574&fileName=focus.html
		*/
		saveToMcloudRequest:function(callback){
		    var self = this;
		    //var aa = this.get('RMKEY');
		    this.set("userNumber", $User.getShortUid());
			var options = {
			    userNumber: this.get('userNumber'),
			    loginUser: $User.getLoginName(),
				sid:$App.getSid(),
				provCode:$User.getProvCode() || null,
				areaCode:$User.getAreaCode() || null,
				sidVal:this.get('sidVal'),
				//RMKEY:this.get('RMKEY'),
				downUrl:this.get("downUrl").replace(/appmail(3?).mail.10086.cn/, "webapp-pd.api.localdomain:9001"),
				fileSize:this.get('fileSize'),
				fileName:this.get('fileName'),
				format:'json'
			};
			var getUrl = self.requestUrl.saveMcloud_dev; //测试请求地址
			getUrl = $T.Url.makeUrl(getUrl,options) + "&jsoncallback=?";
			$.getJSON(getUrl, function(data){
				callback && callback(data);
			});
		},
		
		/** 
		* 判断存彩云是否成功
		*/
		checkSaveSuccessRequest: function (callback) {
		    this.set("userNumber", $User.getShortUid());
			var self = this;
			var getUrl = self.requestUrl.callBack; 
			var options = {
			    loginUser: $User.getLoginName(),
				userNumber:this.get('userNumber'),
				sid: $App.getSid(),
				sidVal:this.get('sidVal'),
				fileName:this.get('fileName'), //文件带后缀 
				format:'json'
			};
			getUrl = $T.Url.makeUrl(getUrl,options) + "&jsoncallback=?";
			$.getJSON(getUrl,function(response) {
				callback && callback(response);
    		});
		}
		
	}));

})(jQuery, _, M139);



﻿/**
* @fileOverview 邮件附件存彩云
* @Code by Sukunwei
*/

(function (jQuery, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;

    /**
    * @namespace 
    * 邮件附件存彩云
    */

        M139.namespace('M2012.ReadMail.SaveToMcloud.View', superClass.extend({

        /**
        *@lends M2012.ReadMail.SaveToMcloud.View.prototype
        */

        el: "",
		
		/** 
		* 初始化
		*/
        initialize: function (options) {
            var self = this;
            this.model = new M2012.ReadMail.SaveToMcloud.Model();
			return superClass.prototype.initialize.apply(this, arguments);
        },
		
		/** 
		* 定义事件 
		*/
		initEvents:function(){
			var self = this;
			top.$App.on('saveToMcloud',function(options){
				self.saveMcloudEvent(options);
			});			
		},
		
		/** 
		* 存彩云事件
		*/
		saveMcloudEvent:function(options){
			var self = this;
			//附件存彩云是否冲突
		    //self.model.checkSaveConflict();
			if (!self.model.get('saveStatus')) {
			    $Msg.alert(self.model.tips.warn);
			    return;
			}
		    //保存中提示
			self.savingToMcloudTips();
			//更新配置
			self.model.set({
				downUrl:options.downUrl,
				fileSize:options.fileSize,
				fileName:options.fileName,
				isAll:options.isAll,
				saveStatus:false 
			});
			//存彩云
			self.callSaveToMcloud();
		},
		
		/** 
		* 日志记录
		*/
        logger: new M139.Logger({name: "M2012.ReadMail.SaveToMcloud"}),

        /** 
		* 正在保存彩云
		*/
		savingToMcloudTips:function(){
			M139.UI.TipMessage.show(this.model.tips.saveStatus); 
		},
		
		/** 
		* 存彩云成功 
		*/
		saveToMcloudSuccess:function(){			
			var text = this.model.tips.oneSaveSuccess,
				name = this.model.get('isAll') ? '附件' : this.model.get('fileName');
			this.model.set({ saveStatus: true }); //解锁
			top.mcloudSaving = true;
			$('#icon_mcloudSaving').remove();
			M139.UI.TipMessage.show($T.Utils.format(text,[name]), {
				delay: 3000
            });
			BH('readmail_savemcloudsuccess');
		},
		
		/** 
		* 存彩云失败提示
		*/
		saveToMcloudFail:function(){
			$Msg.alert(this.model.tips.saveFail);
			M139.UI.TipMessage.hide();
			this.model.set({ saveStatus: true });
			top.mcloudSaving = true;
			$('#icon_mcloudSaving').remove();
		},
   
		
		/** 
		* 附件存彩云请求
		*/
		callSaveToMcloud:function(){
			var self = this;
			self.model.saveToMcloudRequest(function(response){					
			    if (response && response.code == 'S_OK') {
					setTimeout(function(){
						self.checkSaveSuccess();				
					},3000);
				}else{
					self.saveToMcloudFail(); 
				}
			});
		},
        
		/** 
		* 判断存彩云是否成功
		* 由于是异步存储，只能是轮询请求中间件判断状态
		*/
		checkSaveSuccess: function(){
			var self = this;
			var checkTime = self.model.get('checkTime');
			var maxTimer = self.model.get('maxTime');
			var timeCounter = 0;
			var timer = setInterval(function(){
				timeCounter += checkTime;
				self.model.checkSaveSuccessRequest(function(response){
					if(response && response.code == 'S_OK'){
						self.saveToMcloudSuccess();
						clearInterval(timer);
					}else{
						console.log(response); 
					}
				});
				//超时判断
				if(timeCounter > maxTimer){
					clearInterval(timer);
					self.saveToMcloudFail();
				}
			},checkTime);
			
		},
        
		render: function () {
			
		}

    }));
    
	$(function(){
		top.saveMcloudView = new M2012.ReadMail.SaveToMcloud.View();
		top.saveMcloudView.initEvents();
	});
	
	
})(jQuery, _, M139);



﻿
/*
  运营快速唤起功能入口
  点击读信页的链接执行
*/


var $Evocation = {

    /*
    option:{
        type:1,                    
        to: 5,                      //是哪种类型的收件人    lastest | clostest | birthdayWeek | me | specified
        email: "13923797879@139.com",                  //收件人地址
        subject: "运营给您发来的邮件",
        content: "运营发来的邮件内容邮件内容邮件内容邮件内容邮件内容邮件内容邮件内容"
    },
    */

    create: function (params) {
        if (top.SiteConfig.evocation) {
            if (typeof params == "string") {
                var params = params || "";
                params = params.split('&');
                var option = {}
                for (var i = 0; i < params.length; i++) {
                    option[params[i].split('=')[0]] = params[i].split('=')[1]
                }
            } else if (typeof params == "object") {
                var option = params;
            }

            var self = this;
            document.domain = window.location.host.match(/([^.]+\.[^.:]+):?\d*$/)[1];

            top.M139.core.utilCreateScriptTag({ src: "/m2012/js/packs/evocation.pack.js", charset: "utf-8" }, function () {
                EvocationPopWindow = new top.Evocation.Main.View(option);
            });
        }
    },

    /**
     *  弹出订阅日历活动详情
     *  @param {Number} options.labelId //日历ID
     *  @param {Boolean} options.isOffical //是否是官方（后台）发布日历
     *  @param {Function} options.subscribe //订阅成功后的处理函数
     *  @param {Function} options.unsubscribe //订阅失败后的处理函数
     */
    openSubsCalendar: function (options) {
        if (_.isUndefined(M2012.Calendar) || _.isUndefined(M2012.Calendar.View) ||
            _.isUndefined(M2012.Calendar.View.CalendarDetail)) {
            top.M139.core.utilCreateScriptTag({ src: "/m2012/js/packs/calendar/cal_pop_subscribedetail.pack.js", charset: "utf-8" }, function () {
                new M2012.Calendar.View.CalendarDetail(options);
            });          
            return;
        }
        new M2012.Calendar.View.CalendarDetail(options);
    },
    
    changeSkin: function (skinName) {
        top.M139.core.utilCreateScriptTag({ src: "/m2012/js/packs/m2012.changeskin.pack.js", charset: "utf-8" }, function () {
            setTimeout(function () {
                top.$App.trigger('EvochangeSkin', { skinName: skinName });
            }, 500)
        });

    },

    openAndSubject:function(columnId){
        columnId = columnId + '';
        top.$App.show('googSubscription');
        top.$App.show('mpostOnlineService', null, {
            key : columnId,
            inputData : {
                columnId : columnId
            }
        }); 
        var postUrl = top.getDomain('image') + 'subscribe/inner/bis/subscribe?sid=' + top.sid;
        var postOption = '{comeFrom:503,columnId:' + columnId + '}';
        top.M139.RichMail.API.call(postUrl, postOption);
    },

    showMessageBox:function(){
        var msgBox = new M2012.RemindboxView;
        msgBox.render();
    },

    msgBoxHot:{

        show:function(){
            var cguid = $Url.queryString("cguid");
            $('#msgBoxComing').show();
            $Cookie.set({name:'msg',value: cguid + '|s'})
        },

        hide:function(){
            var cguid = $Url.queryString("cguid");
            $('#msgBoxComing').hide();
            $Cookie.set({name:'msg',value: cguid + '|h'})
        },

        setStatus:function(){
            var self = this;
            var cguid = $Url.queryString("cguid");
            var v = $Cookie.get('msg');
            //如果是此次登录的cguid,则保持状态
            if(v && v.split('|')[0] == cguid){
                var d = v.split('|')[1]; //状态值
                switch(d){
                    case 's':self.show();break;
                    case 'h':self.hide();break;
                }
            }
        }
    }
}
/**
 * 全局产品运营主入口
 */
var ProductFuns = {


	//懒人贺卡弹出判断
    isNeedDisplay: function () {
        var isNeedDisplay = false;
        var sets = top.SiteConfig.lazyCard || []; 
        var test = top.$App && top.$App.query && top.$App.query.testServerTime ? top.$App.query.testServerTime : false;
        var today = new Date(M139.Date.getServerTime());
        if (test) {
            today = top.$Date.parse(test);
        }
        var setData = top.$App.getCustomAttrs("lazyCard") || "";

        setData = setData.replace(/\/>|\s*/g, "");


        // setData = setData.replace("");
        var begin = $PUtils.dateFormat(sets.begin),
            end = $PUtils.dateFormat(sets.end),
            key = sets.key;
        if (today >= begin && today <= end && setData.indexOf(key) < 0) {
            isNeedDisplay = true;
        }
        return { isNeedDisplay: isNeedDisplay, key: key }
    },
    //懒人贺卡入口
    loadLazyCard: function (key) {
        var self = this;
        if (key) { //从触点进入
            self.lazyCardResource(key, function (option) {
                self.popLazyCard(option);
            })
        } else {
            top.M139.Timing.waitForReady('$App.getConfig("UserAttrs")', function () {
                var display = self.isNeedDisplay();
                var isNeedDisplay = display.isNeedDisplay,
                    key = display.key;
                var contactReady = self.lazyCardContact();   //通讯录已经加载
                var allowUsers = top.UserData.vipType == "1";  //一般用户

                if (isNeedDisplay && key && contactReady && allowUsers) {
                    top.$App.setCustomAttrs("lazyCard", key, function (res) {
                        if (res['code'] == "S_OK") {
                            self.lazyCardResource(key, function (option) {
                                self.popLazyCard(option);
                            })
                        }
                    });
                }
            })
        }
    },
    //懒人贺卡需要的数据--通信录
    lazyCardContact: function () {
        var contact = top.$App.getModel("contacts");
        if (contact && contact.attributes && contact.attributes.data && contact.attributes.data.contacts && contact.attributes.data.contacts.length) {
            return true;
        } else {
            return false;
        }       
    },
    //懒人贺卡需要的数据--贺卡素材
    lazyCardResource: function (key, callback) {
        var typeStore = {  //param:[newHot, topGroupId, groupId, pageIndex]
            cj : {title: '春节',   param: [2,1,7,1]}, 
            yx : {title: '元宵', param: [2,1,8,1]}, 
            //fn: { title: '妇女', param: [2, 1, 3, 1] },
            yr: { title: '愚人', param: [2, 1, 9, 1] },
            //qm: { title: '清明', param: [2, 1, 31, 1] },
            //ld: { title: '劳动', param: [2, 1, 4, 1] },
            //qn: { title: '青年', param: [2, 1, 5, 1] },
            //mq: { title: '母亲', param: [2, 1, 10, 1] },
            dw: { title: '端午', param: [2, 1, 11, 1] },
            //et: { title: '儿童', param: [2, 1, 20, 1] },
            //fq: { title: '父亲', param: [2, 1, 21, 1] },
            //qx: { title: '七夕', param: [2, 1, 22, 1] },
            //jj: { title: '建军', param: [2, 1, 23, 1] },
            //zq: { title: '中秋', param: [2, 1, 27, 1] },
            //js: { title: '教师', param: [2, 1, 25, 1] },
            //gq: { title: '国庆', param: [2, 1, 26, 1] },
            //cy: { title: '重阳', param: [2, 1, 28, 1] },
            //ws: { title: '万圣', param: [2, 1, 34, 1] },
            //gg: { title: '光棍', param: [2, 1, 35, 1] },
            //ge: { title: '感恩', param: [2, 1, 29, 1] },
            //sd: { title: '圣诞', param: [2, 1, 37, 1] },
            //yd: { title: '元旦',   param: [2, 1, 6, 1] },
            nothing:{}
        };

        var type = key.slice(-2);
        //如果没有检索到
        if (!typeStore[type]) {
            return;
        }
        //日志上报
        //top.BH('欢迎页弹出发送贺卡邮件浮层_' + typeStore[type]['title']);
        var requestType = typeStore[type].param;
        var requestUrl = "/mw2/card/s?func=card:cardPageData&sid=" + top.sid,
            requsetData = ['<object>',
                '<int name="type">0</int>',
                '<int name="newHot">2</int>',
                '<string name="topGroupId">1</string>',
                '<string name="groupId">' + requestType[2] + '</string>',
                '<int name="pageIndex">1</int>',
                '<int name="pageSize">100</int>',
                '</object>'].join('');

        top.M139.RichMail.API.call(requestUrl, requsetData, function (rep) {
            if (rep.responseData && rep.responseData.code == "S_OK") {
                var cardList = rep.responseData['var']['data']['retData'];
                if (cardList.length) {
                    top.$lazycardList = {
                        type: typeStore[type]['title'],
                        dataList: cardList
                    }
                    var option = {
                        type: type
                    }
                    callback(option);
                }
            }
        });
    },
    //懒人贺卡弹出执行
    popLazyCard: function (option) {
        top.selfBir_mask = top.M2012.UI.DialogBase.showMask();
        var width = 680,
            height = 550;
        var url = "http://" + top.window.location.host + "/m2012/html/lazyCard/" + option.type + "/lazyCard.html";
        var iframe = ["<div id='lazycardWindow' style='width:"+width+"px; height:"+height+"px;overflow:hidden; z-index:999; position:absolute;left:50%;top:50%;margin-top: -"+height/2+"px;margin-left: -"+width/2+"px;'>",
            "<iframe allowTransparency='true' style='width:"+width+"px; height:"+height+"px; border:none;' frameborder='0' src='",
            url,
            "'></iframe>",
            "</div>"
        ].join("");
        top.lazycardWin = $('body').append(iframe).find('#lazycardWindow');
    },

    closeLazyCard: function () {
        top.lazycardWin.remove();
        top.selfBir_mask.hide();
    },

	showBirthwish: function () {
	    $App.getModel("contacts").requireData(function () { //等待通讯录加载
	        var url = "http://" + top.window.location.host + "/m2012/html/";
	        url += "birthdaywish.html";
	        var scheduleIFrame = top.$Msg.open({
	            hideTitleBar: true,
	            url: url,
	            width: 746,
	            height: 536
	        });;
	        top.$App.set('birthWishFrame', scheduleIFrame);//设置一顶层变量用于以后关闭弹出框
	        M139.PUtils.iframetransparent();  //把弹出框设置背景透明，无边框
	    });
	},
    

    //tips
	showOnlineTips: function () {

	    if (top.SiteConfig.loginOnlineTip) {
	        window.setTimeout(function () {
	            top.M139.UI.TipLoginView.show();
	        }, 3000); //延迟3秒后显示
	    }
	    if (top.SiteConfig.emailOnlineTip) top.M139.UI.TipMailView.show();
	    if (top.SiteConfig.userOnlineTip) {
	        window.setTimeout(function () {
	            top.M139.UI.TipOnlineView.show();
	        }, 1000 * 60 * 60); //1个小时显示
	    }
	    if (top.SiteConfig.plugOnlineTip) {
	        window.setTimeout(function () {
	            top.M139.UI.TipActiveView.show();
	        }, 1000 * 60); //1分钟显示
	    }


	},
	examineUserStatus: function (params, callback) {
	    this._callLotteryAPI("setting:examineShowStatus", params, callback);
	},
	_callLotteryAPI: function (api, params, callback) {
	    options = { method: "GET" };
	    callback = callback || $.noop;
	    params = ($Url.makeUrl("", params)).replace("?", ""); //GET模式，拼接url，并去掉问号

	    M139.RichMail.API.call(api, params, function (respData) {
	        if (respData) {
	            callback(respData.responseData);
	        } else {
	            callback();
	        }
	    }, options);
	},
    //运营tips   xxxyyy
	loadOperateTips: function () {
	    top.M139.Timing.waitForReady('NewAdLink', function () {
            var operatetipsview = new M2012.OperateTips.View();
            top.operatetipsview = operatetipsview; //方便测试
            operatetipsview.initEvents();

	    });
	},
    /**
     * ProductFuns.examineShowStatus({
     *     tid: 1000, //对应的日历活动id或者贺卡id
     *     originID:3, //来源，如1表示贺卡，2，表示写信，3表示日历
     *     versionID:1 //版本，如1表示标准版2.0
     * },function(data){
     *     //do something
     * }
     */
	examineShowStatus: function (params, callback) {
	    this._callLotteryAPI("setting:examineShowStatus", params, callback);
	},
    /**
     * ProductFuns.examineUserStatus({
     *     tid: 1000,   //对应的日历活动id或者贺卡id
     *     originID:3,  //来源，1：表示贺卡，2：表示写信，3：表示日历
     *     versionID:1, //版本，1：表示标准版2.0
     *     comefrom:1   //来源为日历时必选，1：创建日历，2：创建日历活动
     * },function(data){
     *     //do something
     * }
     */
	examineUserStatus: function (params, callback) {
	    this._callLotteryAPI("setting:examineUserStatus", params, callback);
	},
	_callLotteryAPI: function (api, params, callback) {
	    options = { method: "GET" };
	    callback = callback || $.noop;
	    params = ($Url.makeUrl("", params)).replace("?", ""); //GET模式，拼接url，并去掉问号

	    M139.RichMail.API.call(api, params, function (respData) {
	        if (respData) {
	            callback(respData.responseData);
	        } else {
	            callback();
	        }
	    }, options);
	}
};


 

﻿/**
 * 右下角弹出框模型类，主要功能获取数据
 * @example M139.UI.TIP.RemindModel;
 */
//todo1 命名M139.UI.Tip.RemindModel 
M139.core.namespace("M139.UI.RemindTipModel", Backbone.Model.extend({
    initialize: function (options) {
    }
}));
(function(jQuery,_,M139){
    jQuery.extend(M139.UI.RemindTipModel, {
		 materialIds:[10679,10680,10678,10621,10620,10564,178,173,192,10561], //打招呼贺卡ID10561
		 users: { log: [], online: [] },
		 types:{'ad':0,'online':1,'login':2,'mail':3,'active':4,'calendar':5},
		 maxStrCount:83,//显示好友的最大中文字数，长度,多次实验统计得出
		 nameCharMaxCount:28,//单个名字的最大字符数
		 configOnline:[{linkName:"带给TA节日的问候",start:"2012-12-11",end:"2012-12-25",materialIds:[10613,10610,10609,10612,356,355,353]},
	              {linkName:"带给TA节日的问候",start:"2012-12-26",end:"2013-01-01",materialIds:[222,383,396,387,386,10616,382]},
				  {linkName:"带给TA春节的问候",start:"2013-02-03",end:"2013-02-16",materialIds:[10627,395,392,121,138]},
				  {linkName:"带给TA元宵节的问候",start:"2013-02-17",end:"2013-02-24",materialIds:[10632,10631,148,147,136]}],
		 url:'/mw/mw/s?func=user:getOnlineFriends&sid=',
		 logger: new top.M139.Logger({
			name: "online tips"
		 }),
		 /**
		  * 处理获取的在线人
		  * @param {Object} type
		  * @param {Object} callback
		  */
		 getOnlineUsers: function (type, callback) {
			var self = this;
			var lineType = type == 'online' ? 1 : 400;
			var data = {lineType:lineType}
			top.M139.RichMail.API.call('user:getOnlineFriends', data, function (response) {
				  var data = [];
		          if (response.responseData.code && response.responseData.code == "S_OK") {
		               callback(response.responseData['var']);
		          } else {
                     self.logger.error("getOnlineFriends returndata error", "[user:getOnlineFriends]", response)
		          }   
			});
		},
		/**
		 * 获取tips属性设置
		 */
		getNewMailTipsSetting:function(){
			var userData = top.$App.getConfig("UserData")||{};
			if(userData.mainUserConfig&&userData.mainUserConfig.newmailtips&&userData.mainUserConfig.newmailtips.length>1){
				return userData.mainUserConfig.newmailtips[1];
			}else{
				return "1111";//全部不弹出
			}
		},
		/**
		 * 获取适当长度值
		 * @param {Object} len
		 */
		getLength:function(len){
		 	return [60,20,18,10,8,8][len]
		},
		/**
		 * 组名加括号
		 * @param {Object} groupName
		 */
		getGroupName:function(groupName){
			return groupName?('('+groupName+')'):'';
		},
		/**
		 * 更新用户用组信息 长度截取
		 * @param {Object} users
		 */
		updateUserGName:function(users){
			users = users||[];
		  	var fullUser = [];
		  	var _this = this;
		  	var chLenth = this.getLength(users.length-1);//朋友名长度
		  	var groupName = null,cardName='',cardFullName='';
		 	$.map(users,function(obj){
					    groupName = _this.getGroupName(obj.groupName);
						obj.cardFullName = obj.friendName+groupName;
						fullUser.push(obj.cardFullName);
						if(top.$T.Utils.getBytes(obj.friendName)>_this.nameCharMaxCount){//贺卡中的长度
						   cardName = top.$PUtils.getLeftStr(obj.friendName,_this.nameCharMaxCount,true);
						}else{
						   cardName = obj.friendName;
						}
						if(top.$T.Utils.getBytes(obj.friendName)>chLenth){
						  obj.friendName = top.$PUtils.getLeftStr(obj.friendName,chLenth,true);
						}
						obj.cardName = cardName+groupName;
						obj.friendName+=groupName;
					   });
		    return fullUser;
		},
		/**
		 * 查看是否超过指定长度
		 * @param {Object} str
		 * @param {Object} len
		 */
		isStrOverLen:function(str,len){
			str = str.replace(/(<font color='#0344AE'>)+/g,"");
			str = str.replace(/(<\/font>)+/g,"");
			return top.$T.Utils.getBytes(str)>len;
		},
	    /**
	     * 构建主题
	     * @param {Object} users
	     * @param {Object} fullUser
	     * @param {Object} type
	     */
		buildSummary:function(users,fullUser,type){
		    var head = '你的好友', content = [], len = users.length,summary;
		    var typeName = type === 'login' ? '在线' : '上线';
		    //随机显示6个人名
		    var showUser = [];
		    if (fullUser.length > 6) {
		        for (var i = 0; i < 6; i++) {
		            var randomUser = parseInt(Math.random() * 1000) % fullUser.length;
		            showUser.push(fullUser.splice(randomUser, 1)[0]);
		        }
		    } else {
		        showUser = fullUser;
		    }
		    var tail = "<font color='red' title='" + showUser.join(",") + "'>" + len + "</font>" + "人" + typeName;
		    for (var i = 0; i < showUser.length; i++) {
			    content.splice(0, 0, "<font color='#0344AE'>" + showUser[i] + '</font>');
			    if(this.isStrOverLen(content.join(''),this.maxStrCount)){
				   content.splice(0,1);
				   if(len===1){
				   		content.splice(0,0,"<font color='#0344AE'>"+top.$PUtils.getLeftStr(users[i].friendName,this.nameCharMaxCount,true)+'</font>');
				   }
				}
			}
			if(len>1){
			  if(content.length<len){
				tail = '等'+tail;
			  }
			}else{
				tail = typeName;
			}
			summary = head+content.join('，')+tail;
			return summary;
		},
		/**
		 * 用户是否打开或关闭配置 
		 * @param {Object} num 第几位
		 */									
		isUserOpen:function(num){
		   var tipsConfig = this.getNewMailTipsSetting();
		   if(tipsConfig&&tipsConfig.length>3){
		     return 1==tipsConfig.charAt(num);
		   }else{
		     return false;
		   }
	 	},
		/**
		 * 暂无用
		 */
	 	compatible:function(){
	 		//新版本获取数据 top.$App.getConfig("UserData").mainUserConfig.newmailtips;
	 		//新版本更新数据  top.$App.setMailTips("1000");
	    },
		/**
		 * 获取当前时间在哪个时间点内
		 */
	 	getRightTimeIndex:function(){
		    var today = top.$Date.getServerTime()||new Date();
			var len = this.configOnline.length,item,starttime,endtime;
			var index = -1;
		    for(var i=0;i<len;i++){
		        item = this.configOnline[i];
                //todo data-->date
			   starttime = $PUtils.dateFormat(item['start']);
			   endtime  =  $PUtils.dateFormat(item['end']);
			   if(today instanceof Date&&starttime instanceof Date && endtime instanceof Date &&today >=starttime&&today<=endtime){
			      index = i;
				  break;
			   }
			}
			return index;
  		},
		/**
		 * 更新tips
		 * @param {Object} title
		 * @param {Object} content
		 */
		updateTip:function(title,content){
			$BTips.updateContent(title,content);
	    },
		/**
		 * 读信
		 */
	    readMail:function(){ 
	        var mail = $BMTips.newMail[$BMTips.currentMail];
            //更新文件夹未读邮件数
	        if (mail && mail.flags && mail.flags.read == 1) {
	            var isStar = (mail.flags && mail.flags.starFlag) ? true : false;
	            $App.trigger("reduceFolderMail", { fid: mail.fid, isStar: isStar });//文件夹未读邮件减少
	        }
	       $App.readMail(mail.mid, false,mail.fid,{mailData:mail});
	    },
		/**
		 *打招呼
		 *@param {string}  type   邮件或上线人
		 */
		sayHello:function(type){
			top.$App.jumpTo('greetingcard',"&sayHello="+type+"&materialId="+this.getMaterialId());
		},
		/**
		 * 记住用户操作
		 * @param {Object} type
		 */
		remember:function(type){
			var tipsConfig = this.getNewMailTipsSetting();
			if(type==='active'){
				tipsConfig = this.setCharVal(tipsConfig,this.types[type]+1,1);
				top.$App.setMailTips(tipsConfig);
			}
		},
		/**
		 * 设置某位数值
		 * @param {Object} str
		 * @param {Object} num
		 * @param {Object} val
		 */
		setCharVal:function(str,num,val){
			str = str||'';
			var len = str.length,sub = num-len;
			var strs = str.split('');
			if(sub>1){
				for(var i=0;i<sub;i++){
				  strs[len+i] = 0;
			 	}
			}
			strs[num-1]=val;
			return strs.join('');
		},
		/**
		 * 随机取贺卡id
		 */
		getMaterialId:function(){
		   var index = this.getRightTimeIndex();
		   var materialIds = this.materialIds;
		   if(index!=-1){
		      materialIds = this.configOnline[index].materialIds;
		   }
		   var length = materialIds.length;
		   return materialIds[parseInt(Math.random()*length)];
		}
	})
	window.$BMTips = M139.UI.RemindTipModel;
}
)(jQuery,_,M139);
/**
 * 登录提醒类
 * @example
 * M139.UI.TipLoginView.show();
 */
M139.core.namespace("M139.UI.TipLoginView", Backbone.View.extend({
    initialize: function (options) {
    }
}));
(function(jQuery,_,M139){
	jQuery.extend(M139.UI.TipLoginView,{
		adId:1303,//1303,//广告id1303 1304测试环境
		items:{name :{content:'设置发件人姓名，让邮件接收人更快认出你',linkName:'马上设置',loginBehavior:'登录tips发件人',linkAction:"M139.UI.TipLoginView.updateUserInfo('name');"},
		       birth:{content:'快去填写您的生日，生日时会收到满满的祝福哦',linkName:'立即填写',loginBehavior:'登录tips生日提醒',linkAction:"M139.UI.TipLoginView.updateUserInfo('birth');"},
			   mail :{content:'新邮件到达，免费短信马上提醒',linkName:'立即设置',loginBehavior:'登录tips邮件',linkAction:"M139.UI.TipLoginView.updateUserInfo('mail');"},
		       addr :{content:'联系人太少？快来试试批量导入功能吧！',linkName:'立即导入',loginBehavior:'登录tips导入通讯录',linkAction:"M139.UI.TipLoginView.updateUserInfo('importContact');"}
			  },
		title:"尊敬的139邮箱用户",
	    /**
	     *成功登录显示的内容，需要完成贺卡中的彩信
	     */
		show: function () {
            //别名设置引导 add by QZJ
		    var now = this.isShowTureName();
		    if (now) {
		        var divContent = [
                    '<div class="boxIframeText boxIframeText_new">',
                         '<div class="norTips"><span class="norTipsIco"><i class="i_139Prompt"></i></span>',
                             '<dl class="norTipsContent">',
                                 '<dt class="norTipsLine">想获得个性化的邮箱地址？想不透露个人手机号？快来设置别名账号，让您的邮箱更独特！</dt>',
                             '</dl>',
                         '</div>',
                     '</div>',
                     '<div class="boxIframeBtn"><span class="bibText"></span><span class="bibBtn"> ',
 		                '<a class="btnSure" href="javascript:top.$Evocation.create(\'type=6\');top.addBehaviorExt({ actionId: 105303, thingId: 0 });"><span>立即设置</span></a>',
                     '</span></div>'].join("");
		        top.$App.setUserCustomInfoNew({ "setedName": now }, function () {
		            $BTips.addTask({
		                title: '139邮箱温馨提示',
		                content: divContent,
		                bhShow: { actionId: 8000, thingId: 3776 },
		                bhClose: '登录tips关闭'
		            });
		        })

		        return;
		    }



		  if (!$BMTips.isUserOpen($BMTips.types['login'])) { return; };
		  var self = this;
	      $BMTips.getOnlineUsers('login',function(data){
	      	  $BMTips.users.login = data;
	   	      top.$PUtils.getUserinfo(function (result) {
	   	      	    result.isShowUser = data.length>0?true:false;
					var showType = self.getShowType(result);
					self.showOnlineTips(showType,result);
	   	      });
	      });
		},
	    /**
        是否显示别名引导
        */
		isShowTureName: function () {
		    var aliasName = top.$User.getAliasName();
		    var data = top.$App.getConfig('UserData');
		    var firstLogin = data && data["mainUserConfig"]["shownewuserguide"] && data["mainUserConfig"]["shownewuserguide"][0];

		    var lastShowTime = top.$App.getUserCustomInfo('setedName');
		    var now = top.M139.Date.getServerTime();
		    now.setDate(now.getDate() - 3);
		    now = $Date.format('yyyyMMdd', now);
		    if ((!lastShowTime || lastShowTime < now) && firstLogin != '1' && aliasName == "") {
		        return $Date.format('yyyyMMdd', top.M139.Date.getServerTime());
		    } else {
		        return false;
		    }
		},
		/**
		 * 得到要显示的类型
		 * @param {Object} userInfo
		 */
		getShowType:function(userInfo){
	        //todo1 通讯录数据取法，通过函数封装
		    var contactData = top.$App.getConfig("ContactData");
		    var showType = "";
		    if (contactData && contactData.contacts && contactData.contacts.length == 0) {   //input/importHome.ht
		        type = 'addr';
			}else if(userInfo.isShowUser){
				type='loginUser';
			}else if(!userInfo.AddrFirstName){//没有设置名称
				type = 'name';
			}else if(!userInfo.BirDay){
				type = 'birth';
			}else if(!$BMTips.isUserOpen($BMTips.types['mail'])){
				type = 'mail';
			}else{
				type = 'ad';
			}
			return type;
		},
		/**
		 * 显示tips
		 * @param {Object} showType
		 * @param {Object} userInfo
		 */
		showOnlineTips:function(showType,userInfo){
			var param = this.buildShowParams(showType,userInfo);
			var divContent;
			if (showType === 'ad') {
				top.M139.Timing.waitForReady('top.$App.getConfig("AdLink")', function(){
					var response = top.$App.getConfig("AdLink");
					if (response && response[M139.UI.TipLoginView.adId] && response[M139.UI.TipLoginView.adId][0] && response[M139.UI.TipLoginView.adId][0].text) {
						param.content = response[M139.UI.TipLoginView.adId][0].text;
						param.display='none';
						divContent = top.$T.Utils.format(M139.UI.TipLoginView._template, param);
						$BTips.addTask({
							title: M139.UI.TipLoginView.title,
							content: divContent,
							bhShow: {
								actionId: 102421,
								thingId: 1,
								moduleId: 19
							},
							bhClose: '登录tips关闭'
						});
					}
				});
				return;
			}
		    divContent = top.$T.Utils.format(M139.UI.TipLoginView._template,param);
			$BTips.addTask({title:M139.UI.TipLoginView.title,
							content:divContent,
							bhShow:{actionId: 102421, thingId: 1, moduleId: 19},
							bhClose:'登录tips关闭'
							});
		},
		/**
		 * 获取组装tips的参数
		 * @param {Object} showType
		 * @param {Object} userInfo
		 */
		buildShowParams:function(showType,userInfo){
			var deautSender = top.$User.getDefaultSender()|| $PUtils.mobileMail;
			var param = {sender:deautSender,mobile:top.$User.getShortUid()};
			param.imgSrc = userInfo.headImg;
	       	param.name =  top.$T.Html.encode(userInfo.userName);
			param.hrefHead = "top.$App.show('account','&info=userInfo');";
	       	_.extend(param,M139.UI.TipLoginView.items[showType]);
	       	var index=-1,fullUser=null;
	       	if(type==='loginUser'){
	       		fullUser  = $BMTips.updateUserGName($BMTips.users.login);
	       		param.content = $BMTips.buildSummary($BMTips.users.login,fullUser,'login'); //修改这里的长度
			    index     = $BMTips.getRightTimeIndex();
			    param.linkName = index==-1?'问候一下':$BMTips.configOnline[index].linkName;
			    param.linkAction = "$BMTips.sayHello('login');";
	       	}
		    return param;
		},
		/**
		 * 跳转更新用户设置信息
		 * @param {Object} type
		 */
		updateUserInfo:function(type){
			if(type==='name'){
			    top.$App.show('account','&info=accountSet');
			}else if(type==='birth'){
			 	top.$App.show('account','&info=userInfo');
			}else if(type==='mail'){
			 	top.$App.show('preference','&info=onlinetips');
			}else if(type==='head'){
				top.$App.show('account','&info=userInfo');
			}else if(type==='importContact'){
				top.appView.show("addrinputhome");
			}
		},
		_template:[ '<div class=\'imgInfo imgInfo-rb\'>',
				         '<a class=\'imgLink\' href=\"javascript:{hrefHead}void(0);\" title=\'图片\'><img width=\'52\' height=\'52\' src=\'{imgSrc}\' alt=\'\'></a>',
				 		 '<dl> <dt><strong>{name}</strong></dt><dd class=\'gray\'>{sender}</dd><dd>{mobile}</dd></dl>',
				         '<p class=\'topline\'>{content}</p>',
				         '<p class=\'ta_r\' style=\'display:{display}\'><a href=\"javascript:{linkAction}void(0);\">{linkName}<span class=\'f_st\'>&gt;&gt;</span> </a></p>',
			 		'</div>'].join("")
		})
})(jQuery,_,M139);
/**
 * 右下角弹出mailview
 * @example
 * M139.UI.TipMailView.show();
 */
M139.core.namespace("M139.UI.TipMailView", Backbone.View.extend({
    initialize: function (options) {}
}));
(function(jQuery,_,M139){
	jQuery.extend(M139.UI.TipMailView,{
	title:'您有 {count} 封新邮件',
	/**
	 *开启邮箱提醒
	 */
	show:function(){
		top.$App.on("newMailArrival",this.receiveMail);
	},
	/**
	 *获取到的新邮件
	 * @param {array} data 所有邮件
	 * @param {map}  receiveDate 最后收到的邮件
	 * @param {string} type 邮件类型
	 */
	receiveMail:function(mails){
		 if(!$BMTips.isUserOpen($BMTips.types['mail'])){return;}
		 var j=1,len = mails.length;
		 $BMTips.currentMail = 0;
		 $BMTips.newMailCount = len;
		 if(len<=0) return ;
		 $BMTips.newMail  = mails;
	     var curMail = $BMTips.newMail[0];
	     var hTitle = "您有" + mails.length+"封新邮件";
		 var content = M139.UI.TipMailView.buildMailHtml($BMTips.newMail[$BMTips.currentMail],$BMTips.currentMail+1,$BMTips.newMailCount);
        if($BTips.isCalendarTip){   //因为日历消息同时也会下发邮件，这样日历的tips会闪一下就被邮件的tips会冲掉了
            setTimeout(function(){
		        $BTips.instance.close();
                delete $BTips.isCalendarTip;
            }, 10000);
        }else{
            $BTips.instance.close();
        }
		 //加入到队列中
		 $BTips.addTask({
						 	title:hTitle,
							content:content,
							bhShow:{ actionId: 102421, thingId: 2, moduleId: 19 },
							bhClose:'邮件tips关闭',
							timeout:20000
						});
		//滚动标题
		mails.length > 0 && M139.UI.TipMailView.showRollTitle(hTitle); 
	},
	/**
	 *得到下一封邮件
	 *@param {int}  position 邮件所在位置
	 */
	nextMail:function(position){
		 if("R"==position){
		   if($BMTips.currentMail+1<$BMTips.newMailCount){
		     $BMTips.currentMail++;
		   }else{
		     return ;
		   }
		 }else if('L'==position){ 
		   if($BMTips.currentMail>0){
		    $BMTips.currentMail--;
		   }else{
		     return ;
		   }
		 }
		 var hTitle = "您有" + $BMTips.newMailCount+"封新邮件";
		 var content = this.buildMailHtml($BMTips.newMail[$BMTips.currentMail],$BMTips.currentMail+1,$BMTips.newMailCount);
		 $BMTips.updateTip(hTitle,content);
	},
	/**
	 * 构建邮件主题
	 * @param {Object} curMail
	 * @param {Object} index
	 * @param {Object} total
	 */
	buildMailHtml:function(curMail,index,total){
	    var click = "top.$BMTips.readMail();top.$BTips.hide();";
	    // update by tkh 发件人过长需截取
	    var fromMan = top.$T.Html.encode(curMail.from.replace(/"/g,""));
	    fromMan = top.$T.Utils.getTextOverFlow2(fromMan, 33, true);
		var param = {
				email:fromMan,
				hander:click,
				subject:top.$T.Html.encode(curMail.subject),
				cur:index,total:total,
				fromMan:curMail.from.replace(/"/g,""),
				display:$BMTips.newMailCount>1?'':'none'
		};
	  return  top.$T.Utils.format(M139.UI.TipMailView._template,param);
	},
		
	rollTitleConfig:{
		"orgTitle": document.title, //原标题
        "rollSpeed":420,//滚动间隔
        "timeHandler": null, //计时器
        "run": 1 //是否运行提示
	},
	
	/**
	 * 新到达邮件浏览器滚动标题
	 * $param {string} tit 邮件标题
	*/
	showRollTitle:function(tit){
		var config = this.rollTitleConfig;
			speed = config.rollSpeed,
			strIndex = 0,
			rollTitle = tit + '　' + tit;
		
		//开始滚动		
		config.run = 1; 
		clearInterval(config.timeHandler)
		
		config.timeHandler = setInterval(function(){
			if( config.run !== 1 ){ clearInterval(config.timeHandler) }
			if( strIndex === rollTitle.length ){
				strIndex = 0;
			}else{
				strIndex++;
			}			
			document.title = rollTitle.substring(strIndex,rollTitle.length) + '　' + rollTitle.substring(0,strIndex);
		},speed);
		
		//全局点击时还原标题,搜：M139.UI.TipMailView.reSetDocTitle()
		
	},
	
	//还原浏览器标题
	reSetDocTitle:function(){
		var config =  this.rollTitleConfig;
		config.run = 0;
		setTimeout(function(){
			document.title = config.orgTitle;
		},1000);
	},
	
	_template:[ '<div class="imgInfo imgInfo-rb">',
                 '<a class="imgLink" href="javascript:void(0);" title="图片"><i class="i_mail_b"></i></a>',
                 '<dl>',
                     '<dt><strong id="fromMan">{email}</strong></dt>',
                     '<dd class="maila"><a bh="邮件tips查邮件" href="javascript:{hander};void(0);">{subject}</a></dd>',
                 '</dl>',
                 '<p style="display:{display};" class="imgInfo-rb-page"><a  bh="邮件tips左右导航" href="javascript:top.M139.UI.TipMailView.nextMail(\'L\');void(0);" class="pre"></a><span >{cur}/{total}</span><a bh="邮件tips左右导航" href="javascript:top.M139.UI.TipMailView.nextMail(\'R\');void(0);" class="next"></a></p>',
             '</div>'].join("")
	})
})(jQuery,_,M139);
/**
 * 右下角弹出onlinetips
 * @example
 * M139.UI.TipOnlineView.show();
 */
M139.core.namespace("M139.UI.TipOnlineView", Backbone.View.extend({
    initialize: function (options) {}
}));
(function(jQuery,_,M139){
	jQuery.extend(M139.UI.TipOnlineView,{
		title:"上线提醒",
		show:function(){
			 if(!$BMTips.isUserOpen($BMTips.types['online'])){return ;}
			 var callback = function(data){
       	   		    if(!data) return;
		       	 	if(data.length>0){
		       	 		if(!$BMTips.logSuc)$BMTips.logSuc={};
		       	 		$BMTips.users.online = data;
		       	 		M139.UI.TipOnlineView.showNewOnlineMan(data);
		       	 	}
			 }
			 $BMTips.getOnlineUsers('online',callback);
		},
		/**
		 *取得新上线人的
		 *@param {array}  newUsers   最新上线人
		 */
		showNewOnlineMan:function(newUsers){
	       var fullUsers = $BMTips.updateUserGName(newUsers);
		   var content = $BMTips.buildSummary(newUsers,fullUsers,'online'); //修改这里的长度
		   var handleContent = this.buildContent(newUsers[0].imageUrl,newUsers[0].friendName,newUsers[0].friendMail,content);
		   
		   $BTips.addTask({
		   	              title:M139.UI.TipOnlineView.title,
						  content:handleContent,
						  bhShow:{ actionId: 102421, thingId: 3, moduleId: 19 },
						  bhClose:'上线tips关闭',
						  timeout:15000
						  });
		},
		/**
		 *上线提醒内容的组装
		 *@param {number}  length 上线人数
		 *@param {string}  imgsrc   图片地址
		 *@param {string}  name    上线人名  
		 *@param {string}  email  上线人邮件地址
		 */
		buildContent:function(imgsrc,name,email){
			 var displayHead = "block;",
			     sendMail    = "M139.UI.TipOnlineView.sendMail();";
			 if(imgsrc){
			 	 displayHead = "none;";
			 }
			 imgsrc = $PUtils.getImageSrc(imgsrc);
			 var index = $BMTips.getRightTimeIndex();
			 var linkName = index==-1?'问候一下':$BMTips.configOnline[index].linkName;
			 var linkAction="$BMTips.sayHello('online');";
			 divContent  = top.$T.Utils.format( M139.UI.TipOnlineView._template,{imgsrc:imgsrc,name:name,email:email,displayHead:displayHead,linkName:linkName,linkAction:linkAction,sendMail:sendMail});
			 return divContent;
		},
		/**
		 * 发邮件
		 */
		sendMail:function(){
			var el = $("#tip_RemindMail");
			var email = top.$User.getDefaultSender()||el.attr("email");
			var name = el.attr("name");
			var content =  top.$T.Utils.format(M139.UI.TipOnlineView._headMailHtml,{resourcePath:top.$App.getResourceHost()+"/m2012/",name:name});
			var subject = "《近况如何？赶快上传头像吧！》";
			var callback = function(res){
				var data = res.responseData;
				var msg = "您的提醒已经成功发出，耐心等待他的头像吧~~~";
				if(!data||(data&&data.code!='S_OK')){
				      msg = "发送邮件失败！";
					  top.ScriptErrorLog.sendLog(top.UserData.DefaultSender+"给好友"+el.attr('name')+"发送邮件失败");
				}
			    top.$Msg.alert(msg);
			}
			top.$PUtils.sendMail({email:email,content:content,subject:subject,callback:callback});
		},
		_headMailHtml:"<style>html,body,dl,dt,dd,img,p{margin:0;padding:0;font-size:12px;}"+
					  	"img{vertical-align:top;border:none;}</style><table border='0' cellpadding='0' cellspacing='0' style='width:726px;margin:10px auto;'>"+
					  	"<tr id=\"quickHeadImg\"><td><img src='{resourcePath}/images/prod/onlinetips/yd_01.jpg' alt='引导邮件' /></td></tr>"+
					  	"<tr><td style='background:#EAF1F7;border-left:1px solid #DEDEE0;border-right:1px solid #DEDEE0;'>"+
					  	"<div style='position:relative;width:100%'>"+
					  	"<dl style='width:488px;padding:30px 20px 10px 60px;float:left;'>"+
					  	"<dt style='margin-bottom:10px;font-size:14px;' id='tipsName'>Hi，{name}：</dt>"+
					  	"<dd style='line-height:25px;font-size:14px;'>近况如何？ 赶快上传头像吧！方法很简单~~</dd></dl>"+
					  	"<a rel='prod' param='updateHead'  id=\"guidSMail\" href='javascript:void(0)' style='position:absolute;left:0;left:565px;top:50px;'><img style=\"cursor:pointer;\" src='{resourcePath}/images/prod/onlinetips/yd_upBtn.gif' alt='引导邮件' /></a>"+  
					  	"</div></td></tr><tr><td><img src='{resourcePath}/images/prod/onlinetips/yd_02.jpg' alt='引导邮件' /></td></tr>"+
					  	"<tr><td> <div style='position:relative;'> <img   src='{resourcePath}/images/prod/onlinetips/yd_03.jpg' alt='引导邮件' />"+
					  	"<p style='color:#999;position:absolute;top:0;left:0;width:726px;text-align:center;line-height:35px;'>139邮箱mail.10086.cn&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;感谢您一直以来的支持，我们将不断创新，为您带来更好的邮箱体验!	</p>"+
					  "</div></td></tr></table>",
		_template: [ '<div class="imgInfo imgInfo-rb">',
                 '<a class="imgLink" href="javascript:void(0);" title="图片"><img width="52" height="52" src="{imgsrc}" alt=""></a>',
                 '<dl>',
                     '<dt><strong>{name}</strong> 上线了</dt>',
                     '<dd class="gray">{email}</dd>',
                     '<dd>{mobile}</dd>',
                     '<dd style="display:{displayHead};"><a email="{email}" id="tip_RemindMail" href="javascript:{sendMail};">提醒TA上传头像<span class="f_st">&gt;&gt;</span> </a></dd>',
                     '<dd><a href="javascript:{linkAction};void(0);">{linkName}！<span class="f_st">&gt;&gt;</span> </a></dd>',
                 '</dl>',
             '</div>'].join("")
	})
})(jQuery,_,M139);
/**
 * 邮箱助手提醒类
 * @example
 * M139.UI.TipActiveView.show();
 */
M139.core.namespace("M139.UI.TipActiveView", Backbone.View.extend({
    initialize: function (options) {
    }
}));
(function(jQuery,_,M139){
	jQuery.extend(M139.UI.TipActiveView,{
		locationHrefId  :34,	//从工具登录过来
		href:'https://chrome.google.com/webstore/search-extensions/139%E9%82%AE%E7%AE%B1%E5%8A%A9%E6%89%8B?hl=zh-CN',
		title:"尊敬的139邮箱用户",
		imgSrc:'mail-rb_chrome.jpg',
		show:function(){
	        if($BMTips.isUserOpen($BMTips.types['active'])){return;}
	  		 //判断是否为chrome内核,判断是否从首页跳过来
			var isChrome = top.$B.is.chrome;
	    	var isFromHasTool = $T.Url.queryString("id") == M139.UI.TipActiveView.locationHrefId;
	    	
			if (isChrome && !isFromHasTool) {//webkit浏览器并且非助手过来
			    var param = { href:M139.UI.TipActiveView.href,
							  remember:"top.$BMTips.remember('active');",
							  src:top.$App.getResourceHost()+"/m2012/images/global/"+M139.UI.TipActiveView.imgSrc
							};
				var content = top.$T.Utils.format(M139.UI.TipActiveView._template,param);
				$BTips.addTask({width:338,
								title:M139.UI.TipActiveView.title,
								content:content,
								bhShow:{actionId:104183,thingId:1,moduleId:19},
								bhClose:'助手tip关闭',
								timeout:15000
							   });
		 	}
		},
		_template:[ '<div class="imgInfo imgInfo-rb chrom-tips-rb">',
	                '<a target="_blank" bh="助手tip跳转" href="{href}"><img src="{src}"></a>',
	                 '<p class="topline">',
	                     '<a target="_blank" bh="助手tip跳转" href="{href}">139邮箱助手</a>全新上线，用插件武装你的浏览器！',
	                 '</p>',
	                 '<p class="mt_10 mb_5 clearfix">',
	                    '<a href="{href}" bh="助手tip跳转" target="_blank" class="fr">马上去试试<span class="f_st">&gt;&gt;</span></a> <a bh="助手tip不再提醒" href="javascript:{remember};void(0);" class="c_999 no_tips">不再提醒</a>',
	                 '</p>',
	             '</div>'].join("")
	})
})(jQuery,_,M139);
﻿/**   
 * @fileOverview 运营tips
 */

(function(jQuery, _, M139) {

    /**
     * @namespace
     * 运营tips
     */

    M139.namespace("M2012.OperateTips.Model", Backbone.Model.extend({

		logger: new top.M139.Logger({
            name: "OperateTips"
        }),

        getTipsData: function(){
            return SiteConfig["unifiedPositionStatic"] ? top.NewAdLink["web_061"] : top.$App.getConfig("AdLink").tips;
        },

        /** 关闭tips请求 */
        closeRequest: function(mailid, success, error) {
            var tipsData = this.getTipsData();
            if (tipsData) {
                tipsData = tipsData[0];
            } else {
                // PNS和智能运营对接数据没有保存，关闭不用做处理
                return;
            }
            var api = "unified:updatePositionContent";
            var data = {
                //seqId: mailid,
                //type: 2
				positionCodes: "web_061",
                contentId: tipsData.contentId
            };

            var options = {
                onrouter: function (router) {
                    router.addRouter("setting", [api]);
                }
            };

            $RM.call(api, data, callback, options);

            function callback(result) {
                if (result && result.responseData) {
                    result = result.responseData;
                    if (result.code === "S_OK") {
                        if (success) success(result);
                        return true;
                    }
                }
                if (error) error(result);
                return false;
            }
        }

    }));

})(jQuery, _, M139);
/**
 * @fileOverview 运营tips
 */

(function(jQuery, Backbone, _, M139) {
    var $ = jQuery;
    var superClass = M139.View.ViewBase;
    M139.namespace("M2012.OperateTips.View", superClass.extend({

        initialize: function(options) {
            this.model = new M2012.OperateTips.Model();
            superClass.prototype.initialize.apply(this, arguments);

        },

        /** tips配置 */
        tipsConfig: {
            width: 250 //宽度
        },

        /** 方向样式 */
        directionClass: {
            top: 'tipsTopArrow',
            left: 'tipsLeftArrow',
            right: 'tipsRightArrow',
            bottom: 'tipsBottomArrow'
        },

        /** 模版 */
        /*
        template: {
            tips: ['<div id="caixuntips_{id}" class="tips yellow-tips" style="{style}">', '<a href="javascript:" class="yellow-tips-close" name="popup_close"><i class="i_u_close"></i></a>', '<div class="tips-text">{content}</div>', '<div class="{directionClass} diamond" style="{directionStyle}"></div>', '</div>'].join(""),
            icoContent: ['<div class="imgInfo">', '<i class="imgLink {ico}"></i>', '{content}', '</div>'].join("")
        },*/

        template: {
            tips:['<div id="caixuntips_{id}" class="tipsLayer" style="{style}">',
                '<div class="tipsLayerMain">',
                '{content}',
                '</div>',      
                '<i class="i-tipsLayerArrow {directionClass}" style="{directionStyle}"></i>',
                '<a href="javascript:;" class="closeTipsLayerBtn yellow-tips-close" title="关闭"><i class="i-closeTipsLayer"></i></a>',
                '</div>'].join(''),
            icoContent: ['<i class="{ico}"></i>', '{content}'].join("")
        },

        /** 计算tips显示位置 
         * @param {object} obj tips数据对象
         */
        getPositionObj: function(obj) {
            var self = this;
            var posTop = 0;
            var posLeft = 0;
            var elem = obj.elem;
            var tipsWidth = self.tipsConfig.width;
            var direction = obj.direction; //箭头方向
            switch(direction) {
            case 'top':
                posTop = elem.offset().top + elem.height() + 5;
                if(self.isSlopOver(obj)) { //越界
                    posLeft = elem.offset().left - tipsWidth + 20;
                } else {
                    posLeft = elem.offset().left + 20;
                }
                break;
            case 'left':
                posTop = elem.offset().top - 5;
                posLeft = elem.offset().left + elem.width() + 10;
                break;
            case 'bottom':
                posTop = elem.offset().top - 75;
                if(self.isSlopOver(obj)) { //越界
                    posLeft = elem.offset().left - tipsWidth;
                } else {
                    posLeft = elem.offset().left + 20;
                }
                break;
            case 'right':
                posTop = elem.offset().top - 5;
                posLeft = elem.offset().left - tipsWidth;
                break;
            default:
                break;
            }
            return {
                top: +(posTop + obj.adjustTop),
                left: +(posLeft + obj.adjustLeft)
            };

        },

        /** 判断tips是否越界 
         * @param {object} obj tips数据对象
         */
        isSlopOver: function(obj) {
            var self = this;
            var elem = $('#' + obj.elementId, obj.doc);
            var tipsWidth = self.tipsConfig.width;
            var direction = obj.direction;
            if(elem[0]) {
                var bodyWidth = $('body', obj.doc).width();
                if((direction == 'top' || direction == 'bottom') && elem.offset().left + tipsWidth > bodyWidth) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        },

        /** 调整箭头样式 
         * @param {object} obj tips数据对象
         */
        getDirectionStyle: function(obj) {
            var self = this;
            var style = '';
            if(self.isSlopOver(obj)) { //若越界则调整为相反方向显示
                if(obj.direction == 'top' || obj.direction == 'bottom') {
                    style = 'left:auto;right:10px;';
                }
            }
            return style;
        },

        /** 获取元素位置样式 
         * @param {object} obj tips数据对象
         */
        getPositionStyle: function(obj) {
            var self = this;
            var elem = $('#' + obj.elementId, obj.doc);
			
			//新增列表页不固定ID元素,根据元素name属性定位，如<a name='name_mailtask'>任务邮件</a>
			if(obj.elementId.indexOf('name_') > -1){
				var elemname = obj.elementId.replace('name_','');
				var scrollContainer = $('#div_maillist'); //可以补充其他固定ID滚动区域
				elem = $('a[name="' + elemname + '"]:eq(0),div[name="' + elemname + '"]:eq(0)', obj.doc);
				if(scrollContainer.find(elem)){
					if(scrollContainer.scrollTop() > 80){elem = []}
				}				
			}

			//写信页特殊处理，没有固定ID
			if(obj.elementId === 'compose'){
				try{
					var composeIframe = $.grep($("iframe[id^=compose]"),function(val,i){
						return $App.getCurrentTab().name === val.id;
					});
					elem = composeIframe[0] && $('#' + obj.elementId, composeIframe[0].contentWindow.document);
				}catch(e){}
			}
			
            if(elem[0]) {
                var posObj = self.getPositionObj({
                    elem: elem,
                    elementId: obj.elementId,
                    direction: obj.direction,
                    adjustLeft: obj.adjustLeft,
                    adjustTop: obj.adjustTop
                });
				
				if( isNaN(posObj.left) || isNaN(posObj.top) ){
					return 'display:none';
				}else if( posObj.left > $('body',obj.doc).width() || posObj.top > $('body',obj.doc).height()){
					return 'display:none';
				}else if(posObj.left < 30 || posObj.top < 30) { //元素隐藏状态
                    return 'display:none';
                } else {
                    return $T.Utils.format('z-index:9000;left:{0}px;top:{1}px;', [posObj.left, posObj.top]);
                }
            } else {
                return 'display:none';
            }
        },

        /** 渲染单个tips 
         * @param {object} data tips数据对象
         * @param {object} doc 所在页面document
         */
        render: function(data, doc) {
            // 先移除现存的tips，避免数据问题（如果存在多个tips则新的tips会被覆盖）
            $('#caixuntips_' + data.positionId, doc).remove();
            var self = this;
            var temp = self.template.tips;
            var icotemp = self.template.icoContent;
            var content = data.content;
            if(self.getImgIco(data) != '') {
                content = $T.Utils.format(icotemp, {
                    ico: self.getImgIco(data),
                    content: content
                });
            }
			
			var direction = $(content).attr('direction') || $(content).find('div[direction]').attr('direction');
			var left = $(content).attr('left') || $(content).find('div[left]').attr('left');
			var top = $(content).attr('top') || $(content).find('div[top]').attr('top');
			direction = direction || 'top';
			return $T.Utils.format(temp, {
                id: data.positionId,
                directionClass: self.directionClass[direction],
                directionStyle: self.getDirectionStyle({
                    elementId: data.elementId,
                    doc: doc,
                    direction: direction
                }),
                content: content,
                style: self.getPositionStyle({
                    elementId: data.elementId,
                    doc: doc,
                    direction: direction,
                    adjustLeft: 0 | (left || 0),
                    adjustTop: 0 | (top ||  0)
                })
            });
        },

        /** 行为统计 
            key="tips_remind0"  desc="tips_功能提醒类0" 
            key="tips_remind1"  desc="tips_功能提醒类1" 
            key="tips_remind2"  desc="tips_功能提醒类2"
            key="tips_setting0"  desc="tips_功能设置类0"
            key="tips_setting1"  desc="tips_功能设置类1" 
            key="tips_setting2"  desc="tips_功能设置类2" 
            key="tips_guide0"  desc="tips_功能引导类0"
            key="tips_guide1"  desc="tips_功能引导类1" 
            key="tips_guide2"  desc="tips_功能引导类2"    
        */
        addBehavior:function(type,key){
            var self = this;
            var behaviorKey;
            if(type){
                behaviorKey = 'tips_' + [0,'remind','setting','guide'][type];                
            }
            if(key){
                behaviorKey += key;
            }
            top.BH(behaviorKey);
        },

        /** 关闭tips 
         * @param {string} tipsid id值
         * @param {object} doc 所在页面文档
         */
        closeTips: function(obj) {
            var self = this;
            var type = obj.type;
            var tipsContainer = $('#caixuntips_' + obj.tipsid, obj.doc);

            function removeTips(){
                self.model.closeRequest(obj.tipsid);
                tipsContainer.remove();

                //删除相关内存数据
                var adLinks = self.model.getTipsData();
                // PNS和智能运营对接数据没有保存，不用做处理
                if (!adLinks) return;
                $.each(adLinks, function(n, val){
                    if (val) {
                        var id = val.positionId || val.id;
                        if (id === obj.tipsid) {
                            adLinks.splice(n,1);
                            return;
                        }
                    }
                });
            }

            //右上角关闭
            tipsContainer.find('a.yellow-tips-close').unbind('click').click(function() {
                removeTips();
                self.addBehavior(type,2);

                // 针对具体每一条消息的统计
                var closeid = tipsContainer.find('a[closeid]').attr('closeid'); 
                closeid && top.BH({actionId:8000, thingId:closeid});
            });

            //其他关闭
            tipsContainer.find('.tipsLayerMainInner a').unbind('click').click(function(){
                removeTips();
                self.addBehavior(type,1);
                self.defineTipsEvent(obj.operate); //定制事件

                // 针对具体每一条消息的统计
                var thingid = tipsContainer.find('a[thingid]').attr('thingid'); 
                thingid && top.BH({actionId:8000, thingId:thingid});
            });
			
        },

        /** 产品定制的tips 
        * 如：点击tips跳到某个页面达到某种状态
        */
        defineTipsEvent:function(operate){
            var self = this;
            //operate = 1; //测试用
            var action = {
                            '0' : function(){
                                return;
                            },
                            '1' : function(){ //邮件到达通知设置开启过滤
                                $App.show("notice");
                                top.M139.Timing.waitForReady('top.$("#notice").contents()', function () { 
                                    setTimeout(function(){
                                        $('#notice').contents().find('#majorswitch input:eq(0)').click();
                                    },1000);  
                                });
                            }
                        };
            //action[operate] && action[operate]();
        },

        /** tips自适应 
         * @param {object} obj tips数据对象
         * 由于页面有缩放拖动等行为，造成tips位置会变动，所以要采用计时器显示tips。
         */
        tipsResize: function(obj) {
            var self = this;
            var tipsContainer = $('#caixuntips_' + obj.tipsid, obj.doc);
            var tipsText = tipsContainer.find('.tips-text > div');
			if(tipsContainer.find('div[direction]')){
				tipsText = tipsContainer.find('div[direction]');
			}
            var scrollContainer = $('#sidebar', obj.doc); //滚动容器，若有其他滚动条容器在这里添加
            var elem = $('#' + obj.elementId, obj.doc);
            var timer = M139.Timing.setInterval('operatetips', function() {
                if(tipsContainer[0]) {
                    var style = self.getPositionStyle({
                        elementId: obj.elementId,
                        doc: obj.doc,
                        direction: tipsText.attr('direction') || 'top',
                        adjustLeft: tipsText.attr('left') ? parseInt(tipsText.attr('left')) : 0,
                        adjustTop: tipsText.attr('top') ? parseInt(tipsText.attr('top')) : 0
                    });
				
                    //首页特殊容器tips处理，如在滚动容器内  
                    if(scrollContainer.find('#' + obj.elementId)[0]) {
                        if(elem.offset().top + 15 < scrollContainer.offset().top) {
                            tipsContainer.hide();
                        } else if(elem.offset().top + 15 > scrollContainer.offset().top + scrollContainer.height()) {
                            tipsContainer.hide();
                        } else {
                            tipsContainer.attr('style', style);
                        }
                    } else {
                        tipsContainer.attr('style', style);
                    }
                } else {
                    M139.Timing.clearInterval(timer);
                }
            }, 1000);

            self.closeTips({
                tipsid:obj.tipsid, 
                doc:obj.doc,
                type:obj.type
            }); //点击关闭事件                         
        },

        /** 获取tips自定义图标 */
        getImgIco: function(item) {
            var self = this;
            var ico = '';
            //数据对应样式
            var data = {
                '1': 'i_t_ok',
                '2': 'i_t_del',
                '3': 'i_t_garbage',
                '4': 'i_t_light',
                '5': 'i_t_link',
                '6': 'i_t_warn'
            };
            if(item && item.imageurl) {
                var url = item.imageurl;
                try {
                    var index = url.split("tips/")[1].split(".")[0];
                    if(data[index]) {
                        ico = data[index]
                    };
                } catch(e) {}
            }
            return ico;
        },


        /** tips展示 */
        showTips: function(tipsList) {
            var self = this;
			var timer = {};

            function showIframeTips(itemdata, tipsObj){
                var iframe = $('#' + itemdata.pageUrl)[0];
                if(iframe) { //内嵌页只弹一次
                    var iframedoc = iframe.contentWindow.document;

                    // 已经找到tips所在的iframe，将tips所对应的计时器给干掉
                    clearInterval(timer[itemdata.positionId]);

                    $('body', iframedoc).append(self.render(itemdata, iframedoc));
                    tipsObj.doc = iframedoc;
                    self.tipsResize(tipsObj);
                }
            }

            $.each(tipsList, function(n, val) {
                var itemdata = val;
                var tipsObj = {
                    tipsid: itemdata.positionId,
                    elementId: itemdata.elementId,
                    type: itemdata.type,
                    operate: itemdata.operate,
                    doc: document
                };

                if(itemdata.pageUrl == 'index') { //主页
                    $('body').append(self.render(itemdata, document));
                    self.tipsResize(tipsObj);
                } else { //iframe页
					
					if(itemdata.pageUrl == 'welcome'){
						showIframeTips(itemdata, tipsObj);
					}else{
						timer[itemdata.positionId] = setInterval(function(){
							showIframeTips(itemdata, tipsObj);
						},3000);
					}
                }
            });

        },

        /**绑定事件处理
         *@inner
         **/
        initEvents: function() {
            //tips显示
            var self = this;

            // NewAdLink来源于欢迎页的统一位置广告位 web_061 代表运营tips的位置编号
            var tipsData = self.model.getTipsData();
            //数据用于测试
            /*tipsData = [
                {id:"114",pageurl:"index",imageurl:"/images/tips/1.png",elementid:"li_star",type:"3",operate:"0",content:"<div style=\"FONT-SIZE: 12px\">重要邮件，点亮星标，方便查找。 <br></div><a style=\"FLOAT: right\" href=\"javascript:MB.search({flags:{starFlag:1},title:\'星标邮件\'});\">体验一下</a>"},
                {id:"115",pageurl:"index",imageurl:"/images/tips/2.png",elementid:"recommend",type:"3",operate:"0",content:"<div style=\"FONT-SIZE: 12px\">推荐业务内容</div>"},
                {id:"116",pageurl:"welcome",imageurl:"/images/tips/6.png",elementid:"shequLink",type:"3",operate:"0",content:"<div direction='top' style=\"FONT-SIZE: 12px\">欢迎页同窗内容。<br></div>"}
            ];*/

            if(tipsData) {
                this.showTips(tipsData);
            }

            $App.on('tipstest', function(response) { //用于自测试tips
                self.showTips(response.tipsdata);
            });

            /** 浏览器命令行测试代码(方便产品自测)：
            var tipstestdata = [{
            content: '<div>用139邮箱接收移动账单，方便又快捷。</div><a href="$App.jumpTo(\'sms\');">马上开通账单投递功能</a>', //tips内容
            elementid: "mms_link", //对应页面id
            id: "0", //测试的tipsid
            imageurl: "/images/tips/1.png", // tips显示图片  如： /images/tips/1.png
            operate: "5", //产品定制类型
            pageurl: "index", //所属页面
            type: "2"}];  //可以添加多条数据，格式：{ content:'',....},{ content:'',.... }
            if(top.operatetipsview){$App.trigger('tipstest',{tipsdata:tipstestdata})}else{M139.core.utilCreateScriptTag({id:"operatetips",src:"operatetips.pack.js",charset:"utf-8"},function(){$App.trigger('tipstest',{tipsdata:tipstestdata})})}
           */
        }

    }));

})(jQuery, Backbone, _, M139);

/**
 * 生日邮件
 */
var BirthRemind = { 
    birdthMan: [],
    cardIdsxx:[10677,10655,10646,10637,10559,10556,158,156,154,151,149,155],
	cardIds:  [694,693,692,691,690,694,693,692,691,690,691,690],
	logger: new top.M139.Logger({name: "m2012.product.birthmail"}),
	addLink:function(){
	  this.init();
	  this.fixBtn();
	  top.BH({actionId: 104191,thingId: 1}); 
	},
   /**
    * 初始化
    */
    init: function () {
        var _document = top.$PUtils.getCurTabWin().document;
        var birthTable = $("#birthRemind2",_document);
         
		var inputEL = null, check = null;
		//上一次最新
		birthTable.find("ul").bind("click", function (e) {
		    e = $(e.target);
		    if (e.attr("tagName") == 'IMG') {
		        inputEL = e.parent().prev();
		        check = inputEL.attr("checked");
		        inputEL.attr("checked", check ? "" : "checked");
		    }
		});
		//这次新加的
		birthTable.find('#moreFriend').bind('click',this.moreFriend);
		this.birthInfo = birthTable.find("#birthInfo");
		
		this.birthInfo.find('img').bind("click", function (e) {
		    e = $(e.target);
		        inputEL = e.parent().parent().parent().find('input');
		        check = inputEL.attr("checked");
		        inputEL.attr("checked", check ? false :true);
		});
      
		$("#sendCard",_document).bind("click", this.sendCard).css('cursor','pointer').removeAttr('href');

    },
  
    moreFriend:function(){
    	var  birthInfo = $('#birthInfo',top.$PUtils.getCurTabWin().document);
	 	birthInfo.find("tr").show();
	 	$('#moreFriend', top.$PUtils.getCurTabWin().document).hide();
	 	top.$(window.parent).trigger('resize');
	 	top.BH({actionId: 104191,thingId: 1}); 
	},
	/**
	 * 发贺卡
	 */
    sendCard: function () {
    	var _self = top.$App.get('birth');
        var _document = top.$PUtils.getCurTabWin().document;
	    _self.birdthMan = [];
        top.BH({ actionId: 101081, thingId: 1, moduleId: 19 });
        //旧版本
        var birthTable = $("#birthRemind2",_document), pEL = null, AddrName, BirDay, mail, gName, MobilePhone;
        birthTable.find("ul input:checked").each(function (i, input) {
            pEL = $(input).parent().find("p");
            BirDay = pEL.find("span").text();
            AddrName = pEL.text().replace(BirDay, "");
            mail = pEL.attr("mail");
            MobilePhone = pEL.attr("mobilephone");
            gName = _self.fetchGNameByMobile(MobilePhone);
            _self.birdthMan.push({ AddrName: AddrName, BirDay: _self.formateTime(BirDay), email: mail, MobilePhone: MobilePhone, fullGroupName: gName });
        });
        
        //新版本
		var  birthInfo = birthTable.find("#birthInfo")
		var tdInfo;
        birthInfo.find("tr:visible input:checked").each(function (i, input) {
		    tdInfo = $($(input).parent().parent().children()[3]);
            pEL = $(tdInfo.children()[0]);
            BirDay = $(tdInfo.children()[1]).text();
            AddrName = pEL.text();
            mail = pEL.attr("mail");
            MobilePhone = pEL.attr("mobilephone");
            gName = pEL.attr('groupname')==='未分组'?MobilePhone:pEL.attr('groupname');
            _self.birdthMan.push({ AddrName: AddrName, BirDay: _self.formateTime(BirDay), email: mail, MobilePhone: MobilePhone, fullGroupName: gName });
        });
		
		
       if(_self.birdthMan.length<=0){
	     top.FF.alert("请选择要过生日的好友!");
		 return;
	   }
        var param = '&birthday=1&singleBirthDay=1&senddate=true&materialId='+_self.cardIds[parseInt(11 * Math.random() + 1)];
        setTimeout("top.Links.show('greetingcard','" + param + "')", 100);
    },
	/**
	 *格式化时间
	 */
    formateTime: function (time) {
        var times = time.split("月");
        return "2011-" + times[0] + "-" + times[1].replace("日","");

    },
	/**
	 *��װ�û�
	 */
	getUser:function(mail){
	  var users = top.$App.get('birth').birdthMan;
	  var len = users.length;
	  var mailDomain= "@"+top.$App.getMailDomain()
	  for(var i= 0;i<len;i++){
	   if(users[i].MobilePhone==mail.replace(mailDomain,"")){
	      return users[i];
	   }
	  }
	  return {};
	},
  /**
    * 发送祝福事件
    * @param {Object}  content邮件内容 to投递给谁 subject主题
    */
    sendTimeMail: function(obj){
        //修改内容
        var date = new Date();
		var year = date.getFullYear();
		var now = date.format("yyyy-MM-dd");
		now = top.$PUtils.dateFormat(now+" 09:00:00");
		this.sucessMobile ={suc:[],fail:[]};
		var count = 0;
		var usersMail = obj.to.replace(/;$/,"").split(";");//已勾选的人
		if(usersMail.length==0){
		  top.FF.alert("请选择即将过生日的好友");
		  return;
		}
		_this = this;
		//邮件回调函数
        var callback = function(data){
		    count++;
		    if(data.code!='S_OK'){
			  _this.sucessMobile.fail.push('error');
			  _this.sucessMobile.suc.pop();
			}
			if(count == usersMail.length){
			  _this.requestBirthHis(_this.sucessMobile.suc);
			}
        }
		var birth,time,dateTime,toUser;
		var diffTime = 0;
		var name= top.$PUtils.userInfo.userName;
		var subject = obj.subject;
		var user;
		var subjectContet;
		//给每个人发送邮件
        for (var i = 0; i < usersMail.length; i++) {
			toUser = usersMail[i];
			if(toUser){
				user  = this.getUser(usersMail[i]);
				birth = user.BirDay.split("-");
				birth[1] = top.$PUtils.fixTime2Str(birth[1]);
				birth[2] = top.$PUtils.fixTime2Str(birth[2]);
				time = "" + year + "-" + birth[1] + "-" + birth[2] + " 09:00:00";
				dateTime = top.$PUtils.dateFormat(time);
				diffTime = top.$Date.getDaysPass(now, dateTime);
				//比较时间 显示不同的主题
				if(obj.isDefiniteTime){
					if (diffTime < 0) {//迟到的邮件
						subjectContet = "迟到的祝福，"+subject;
						dateTime = null;
					}else if(diffTime==0){//当天直接发送
						dateTime = null;
						subjectContet = subject;
					}else if(diffTime>=0){
					  subjectContet = subject;
					}
				}else{
				  subjectContet = subject;
				  dateTime = null;
				}
				this.saveMail({subject: subjectContet, content: obj.content,time: dateTime,toEmail:toUser,priority:obj.priority,returnReceipt:obj.returnReceipt,callback:callback});
			}
		}
    },

	/**
	 * 发邮件
	 * @param {} Info
	 */
    saveMail: function(Info){
        var mailInfo = {
            account: top.UserData.DefaultSender,
            to: [Info.toEmail],
            isHtml: true,
            subject: Info.subject,
            content: Info.content,
			singleSend:true,
            priority: 3, 
            sendReceipt: Info.sendReceipt,
			saveToSent:true,
			showOneRcpt:false,
            timeset: Info.time,
            callback: Info.callback
        };
        top.CM.sendList = [];
        top.CM.sendList.push({
            action: Info.time ? "schedule" : "deliver",
            subject: Info.subject,
            to: [Info.toEmail]
        });
		this.sucessMobile.suc.push(Info.toEmail);
        top.CM.sendMail(mailInfo,"greetingCard");
    },
	/**
	 *�����Ѿ����ͺؿ�
	 */
	requestBirthHis:function(mails){
	    var self = top.$App.get('birth');
		var birthUsers = this.buildBirthHisParam(mails);
		var options = {op:'set',mobiles:birthUsers};
        top.M139.RichMail.API.call("card:birthdayRemind", options, function (response) {
        	if(!(response.responseData&&response.responseData.code==='S_OK')){
        		self.logger.error("card:birthdayRemind", "[card:birthdayRemind]", response);
        	}
        });
	},
	/**
	 * 获取发生日邮件的人
	 * @param {} mails
	 * @return {}
	 */
	buildBirthHisParam:function(mails){
	   var users = top.$App.get('birth').birdthMan;
	   var hisParam=[];
	   var year = new Date().getFullYear();
	   var mailLength = mails.length;
	   var userLength = users.length;
	   var bithDay,sendDay,user;
	   for(var i=0;i<mailLength;i++){
	       user =  top.$App.get('birth').getUser(mails[i]);
			bithDay = user.BirDay.split("-");
			sendDay = year + "-" + bithDay[1] + "-" + bithDay[2];
			hisParam.push(user.MobilePhone+","+sendDay+";");
			top.BH({actionId: 104191,thingId: 1}); ({ actionId: 103663, moduleId: 13 });
	   }
	  return hisParam.join('').replace(/;$/,"");
	},
	/**
    * 获取分组
    */
	fetchGNameByMobile:function(mobileNumber){ 
	    var gName = '';
	    var _contacts = top.Contacts.getContactsByMobile(mobileNumber);
	    //取到这些联系人所在的所有组名 
	    var _groupNames = $.map(_contacts, //循环每个手机号里的SerialId
             function (i) {
                 return $.map($.grep(top.Contacts.data.map,
                 function (j) { return j.SerialId == i.SerialId }),//查询在group中是否找到相应的SerialId
                 function (k) {
                     var group = top.Contacts.getGroupById(k.GroupId);
                     if (group) {
                         return group.GroupName;
                     }
                     
                 });
             });//找到之后返回数组中
	    if (_groupNames[0]) {
	        if (_groupNames[0].getBytes() > 20) {
	            gName = _groupNames[0].getLeftStr(20) + '...';
	        } else {
	            gName = _groupNames[0]
	        }
	    }
	 return gName;
    },
	  //屏蔽掉以前的页面
	fixBtn:function(){
        var _document = top.$PUtils.getCurTabWin().document;
        var birth_content = _document.getElementById("birth_content");
		if(birth_content){
			//修正链接头像
			var imgs  =  $(birth_content).find('div.f_li img');
			var imgsLen = imgs.length-1;
			var imgSrc = '';
			for(var j=0;j<=imgsLen;j++){
				imgSrc = $(imgs[j]).attr('src');
				$(imgs[j]).attr('src',BirthRemind.getImageSrc(imgSrc));
			}
			//修改连接
			var htmlStr = birth_content.innerHTML;
			htmlStr = htmlStr.replace(/(href)(="")/g, "");
			htmlStr = htmlStr.replace("target=_blank","");
			
			htmlStr = htmlStr.replace(/birthck/g, "onclick=\"javascript:top.FF.alert('请查看升级版!');\"");
			birth_content.innerHTML = htmlStr;
			//修改个人生日信息
			var myBirthInfolink = _document.getElementById("birth_info");
			$(myBirthInfolink).removeAttr("target");
			//查询用户是否设置了生日
			top.Contacts.QueryUserInfo(function(result) {
				if (result&&result.info&&result.info.BirDay) {
					myBirthInfolink.style.display = "none";
				}else {
					myBirthInfolink.style.display = "";
					myBirthInfolink.href = "javascript:setTimeout(top.Links.show('baseData');";
				}
			});
			//发送祝福
			var sendWidsh = _document.getElementById("sendWish");
			$(sendWidsh).removeAttr("target");
			$(sendWidsh).attr('href',"javascript:javascript:top.FF.alert('请查看升级版!');");
		}
	}
}

/**
 * 精品订阅，云邮局，日历，彩云链接
 * @example
 * M139.UI.TipMasslinkView.show();
 */
M139.core.namespace("M139.UI.TipMasslinkView", Backbone.View.extend({
    initialize: function () {
        if (!top.SiteConfig.tipsMassLink) {
            return;
        }
        this.render();

    },

    render: function () {
        var self = this;

        //帐单的TIPS
        setTimeout(function () {
            var showed = top.$App.getUserCustomInfo(50); //从一百开始
            if (showed != '1') {
                top.$App.setUserCustomInfo(50, 1, function () {
                    $App.on("showMailbox",
                        function () {
                            if (top.massLinkBill) {
                                return;
                            }
                            top.massLinkBill = true;
                            self.showBill();
                        });
                }); 
                
            }
        }, 1000)

        //精品订阅的TIPS
        setTimeout(function () {
            var isShow = self.isShowPosition()
            if (isShow) {
                var now = top.M139.Date.getServerTime();
                var year = now.getFullYear();
                var month = now.getMonth();
                if (month < 10) {
                    month = "0" + month;
                }
                var date = now.getDate();
                if (date < 10) {
                    date = "0" + date;
                }
                now = '' + year + month + date;
                top.$App.setUserCustomInfoNew({ 48: now }, function () {
                    self.showPosion('web_058');
                });
            }
        }, 30 * 1000);
    },

    isShowPosition: function () {
        var time = top.$App.getUserCustomInfo(48);
        if (!time || time.length < 8) {
            var now = top.M139.Date.getServerTime();
            var year = now.getFullYear();
            var month = now.getMonth();
            if (month < 10) { month = "0" + month; }
            var date = now.getDate();
            if (date < 10) { date = "0" + date; }
            now = '' + year + month + date;
            top.$App.setUserCustomInfoNew({ 48: now });
            return false;
        }
        time = new Date(time.slice(0, 4), time.slice(4, 6), time.slice(6, 8));
        time.setDate(time.getDate() + 3)
        var now = top.M139.Date.getServerTime();
        return time < now;
    },

    showPosion: function (postionId) {
        var htmlContent;
        top.M139.RichMail.API.call("unified:getUnifiedPositionContent", { positionCodes: postionId }, function (response) {
            if (response.responseData.code && response.responseData.code == "S_OK") {
                htmlContent = response.responseData["var"];
                htmlContent = htmlContent[postionId][0].content;

                $BTips.addTask({
                    width: 350,
                    title: '为您推荐的精品服务',
                    content: htmlContent,
                    bhClose: '关闭',
                    timeout: 10 * 1000
                });
            }
        });

        
    },

    showBill: function () {
        var content = ['<div class="imgInfo imgInfo-rb">',
                 '<dl class="events mt_10">',
                     '<dd class="gray"><a href="http://mail.10086.cn/upInbox/upInbox.html" target="_blank">尊敬的用户您好，为了让您更便捷的查看账单和订阅邮件，您现在还可以在收件箱里查看。也可以根据需要，设置成将邮件分拣到自定义目录中。</a></dd>',
                 '</dl>',
             '</div>',
             '<div class="boxIframeBtn">',
                 '<span class="bibBtn">',
                     '<a href="http://mail.10086.cn/upInbox/upInbox.html" target="_blank" class="btnSure"><span>更多详情</span></a>',
                 '</span>',
             '</div>'].join('');
        $BTips.addTask({
            width: 350,
            title: '温馨提示',
            content: content,
            bhClose: '关闭',
            timeout: 10000
        });
    }
}));

$(function () {
    setTimeout(function(){
        var tipMasslinkView = new top.M139.UI.TipMasslinkView();
    },10 * 1000)
});
/**
我的账单中心tips弹窗
 */
M139.core.namespace("M139.UI.bill", Backbone.View.extend({
    initialize: function () {
		var self = this;
        setTimeout(function(){
			self.render();
		},10000);
    },
    render: function () {
		var self = this;
		var flagBill = top.$App.getUserCustomInfo(31); //类似于"20131118"这样的东西
		var lastMonth = new Date().getMonth(); //上个月的月份
		//新加的
		var da = new Date();
		var year = da.getFullYear();
		var month = da.getMonth();
		var day = da.getDate();
		var todaySdate  = '' + year + ( month < 10 ? ('0' + month) : month ) + (day < 10 ? ('0' + day) : day);
		
		//flagBill = "20131118"; //测试用
		var toyear = flagBill && parseInt(flagBill.slice(0,4));
		var tomonth = flagBill && parseInt(flagBill.slice(4,6)); //接口取的月份
		var today = flagBill && parseInt(flagBill.slice(6,8));
		//如果设置过值且显示过了，且三天内显示了才不显示，其他的情况都要显示
		if($Date.getDaysPass(new Date(toyear, tomonth,today), new Date(year, month, day)) < 3){
			return;
		}
	//	self.getBillCount(function(t){
			if(this.getBillCount() > 0){
				$App.getView("mailbox").model.getFreshUnreadBill(function(mail){
				//	console.log(mail);
					
					if(mail){
						var fl1 = !!(mail["from"].indexOf("10086") > -1);
						var fl2 = !!(mail["subject"].indexOf(lastMonth+"月") > -1);
						var fl3 = !!(mail["subject"].indexOf("话费账单") > -1);
						
						if(mail && fl1 && fl2 && fl3) {
							var parms = {};
							parms["title"] = mail["subject"];
							parms["mid"] = mail["mid"];
							var html = "";
							html = $T.Utils.format(self._template,{
								title: parms["title"],
								js : "top.$App.readMail('"+parms["mid"]+"')"
							});
							$BTips.addTask({
								width: 350,
								title: "您有1封新账单",
								content: html,
								bhClose: 'billClose',
								bhShow: 'billPopNum'
							});
							top.$App.setUserCustomInfoNew({31:todaySdate});
							//点标题都要上报日志，没有做相应的扩展，只能进行繁琐的jQuery查找
							$("#billAccount8").parents(".boxIframeMain").prev(".boxIframeTitle").find("span").click(function(){
								top.BH("billTitle");
							});
						}
					}
				});
			}
	//	});
    },
    getBillCount: function (callback) {
		return top.$App.getView("folder").model.get("newBillCount");
		/*异步的话不需要监听了，现在改为延迟弹窗
		$App.getView('folder').model.on('ProcessCompleted', function(i){
		//	console.log('文件夹好了', this.get('newBillCount'));
			callback && callback(this.get('newBillCount'))
		});*/
    },
    _template: ['<div class="imgInfo imgInfo-rb chrom-tips-rb" id="billAccount8">',
                    '<p class="mt_10">发件人：10086</p>',
                    '<p class="mt_10">主题：<a bh="billContent" href="javascript:{js};" class="c_666">{title}</a></p>',
                    '<p class="mt_10 mb_5 clearfix">',
                        '<a href="javascript:top.$App.showMailbox(8);" bh="billList" class="fr">查看账单详情<span class="f_st">&gt;&gt;</span></a>',
                    '</p>',
                '</div>'].join("")
	})
);

$(function () {
	try{
		var mybills = new M139.UI.bill();
	}catch(e){

	}
});
/*
1: mail_inboxmailnumber 收件箱提醒
2：mail_scmn 特定联系人提醒
    3：calendar_cen日程即将到期事项数量提醒
    4：calendar_cain日历活动邀请数量提醒
    5：addr_mkpn通讯录可能认识的人数量提醒
    6：groupmail_gin群邮件群组邀请数量提醒
    7：netdisk_tsen网盘暂存柜到期文件数量提醒
8：netdisk_fsfn网盘好友共享文件数量提醒
    9：cpo_cpopu云邮局用户订阅报刊更新
    10：cpo_cponm云邮局报刊亭上架新杂志
11：webfe_asr别名设置提醒
12：webfe_mnsr邮件到达通知设置提醒
*/

M139.namespace("M2012", {
    RemindboxModel: Backbone.Model.extend({

    	initialize:function(){},
    	
    	getMsgList:function (callback) {
    		M139.RichMail.API.call("msg:getRemindMsg",{},function(response){
    			var res = response.responseData;
    			callback && callback(res);
    		});
    	},

    	removeMsg:function(option,callback){
    		M139.RichMail.API.call("msg:delRemindMsg",option,function(response){
    			var res = response.responseData;
    			callback && callback(res);
    		});
    	},

        getUnreadMailList:function(option,callback){
            var option = {
                "fid":0,
                "recursive":0,
                "ignoreCase":0,
                "isSearch":1,
                "isFullSearch":2,
                "start":1,
                "total":100,
                "limit":1000,
                "order":"receiveDate",
                "desc":"1",
                "flags":{"read":1},
                "statType":1
            }
            
            M139.RichMail.API.call("mbox:searchMessages",option,function(response){
                var res = response.responseData;
                callback && callback(res);
            });
        }
    })
});
﻿M139.namespace("M2012", {
    RemindboxView: Backbone.View.extend({

        el: "#msgBox",

        listTemplate:['<div class="tips-text">',
            '<div class="tipsInfoBox_title"><strong>通知</strong><a href="javascript:;" id="msgBoxEmpty" class="i_delb"></a></div>',
            '<ul class="tipsInfoBox_list">{list}</ul>',
            '</div>'].join(''),

        itemTemplate :['<li class="clearfix" seqNO="{seqNO}" type={type}>',
            '<i class="{icon}"></i>',
            '<div class="tipsInfoBox_listCon">',
                '<p>{msg}</p>',
            '</div>',
            '<span class="tipsInfoBox_listTime">{time}</span>',
            '<a href="javascript:;"  rel="关闭" class="closeMin" msg="msgBoxClose"></a>',
        '</li>'].join(""),

        emptyTemplate:'<div class="tips-text tipsInfoBox_no"><i class="i_warn"></i>目前没有通知</div>',

        getShowTime:function(sendTime){
            //sendTime必须是时间对象，传入时需要做转换
            var now = top.M139.Date.getServerTime();       

            var passTime = now - sendTime;
            if(passTime > 1000 * 60 * 60 * 24 * 30){
                return false;
            }

            //用于判断是不是昨天
            var yesterDay = new Date(now);
            yesterDay.setDate(yesterDay.getDate()-1);

            if(passTime < 1000 * 60 * 5){
                return '刚刚';
            }else if(passTime < 1000 * 60 * 60){
                return (0 | (passTime /(1000*60))) + '分钟前';
            }else if(sendTime.getMonth() == now.getMonth() && sendTime.getDate() == now.getDate()){
                return '今天' + $Date.format('hh:mm',sendTime);
            }else if(sendTime.getMonth() == yesterDay.getMonth() && sendTime.getDate() == yesterDay.getDate()){
                return '昨天' + $Date.format('hh:mm',sendTime);
            }else if(sendTime.getFullYear() == now.getFullYear()){
                return (sendTime.getMonth()+1) + '月' + sendTime.getDate() + '日';
            }else if((sendTime.getFullYear() + 1) == now.getFullYear()){
                return sendTime.getFullYear() + '年' + (sendTime.getMonth()+1) + '月';
            }
        },

        getShowMsgList:function(msgHash){
            var i,j;
            var msgArr = [];
            var structure = [
                ['mail'],
                ['addrGroupinvite','addrMaykown'],
                ['calendarInvite','calendarActive'],
                ['cabinet'],
                ['myMagazine','magazineHome']
            ]
            for(i=0; i<structure.length; i++){
                var group = structure[i];
                for(j=0; j<group.length; j++){
                    if(msgHash[group[j]]){
                        msgArr.push(msgHash[group[j]]);
                        break;
                    }
                }
            }
            return msgArr;
        },


        options:{
            mail:{
                icon:"tipsInfoBox_ico_1",
                msg:"您有<strong>{num}</strong>封未读邮件", 
                gotoUrl:function(){
                    $Evocation.hasNewMail = false;
                    top.$App.trigger("mailCommand", { command: "viewUnread", fid: 0 });
                }
            },
            addrGroupinvite:{
                icon:"tipsInfoBox_ico_2",
                msg:"您有<strong>{num}</strong>个群组邀请",
                gotoUrl:function(){
                    $App.show('teamNotify');
                }
            },
            addrMaykown:{
                icon:"tipsInfoBox_ico_2",
                msg:"您有<strong>{num}</strong>个可能认识的人",
                gotoUrl:function(){
                    $App.show('addrWhoAddMe');
                }
            },
            calendarInvite:{
                icon:"tipsInfoBox_ico_3",
                msg:"您有<strong>{num}</strong>个日历活动邀请",
                gotoUrl:function(){
                    $App.show("calendar","&redirect=msg");
                }                  
            },
            calendarActive:{
                icon:"tipsInfoBox_ico_3",
                msg:"您有<strong>{num}</strong>个日历活动快开始了",
                gotoUrl:function(){
                    $App.show('calendar');
                }
            },
            cabinet:{
                icon:"tipsInfoBox_ico_4",
                msg:"您暂存柜有<strong>{num}</strong>个文件快过期了",
                gotoUrl:function(){
                    top.$App.show('diskDev', {from:'cabinet'})
                }
            },
            myMagazine:{
                icon:"tipsInfoBox_ico_5",
                msg:"您的报刊今天更新了<strong>{num}</strong>篇文章",
                gotoUrl:function(){
                    top.$App.show("googSubscription",{mtype : 0});
                }
            },
            magazineHome:{
                icon:"tipsInfoBox_ico_5",
                msg:"报刊亭上架了<strong>{num}</strong>本新杂志",
                gotoUrl:function(){
                    top.$App.show("googSubscription",{mtype : 4});
                }
            }
        },
        initialize: function (options) {
            this.model = new M2012.RemindboxModel(); 
        },

        render:function(list){
            var self = this;
            var unreadListReady = null;
            var msgListReady = null;
            var isLogin = typeof $Evocation.hasNewMail != 'undefined' ;
            //未读邮件需要特殊处理，自己读接口获取，此处与消息获取并发请求，减少等等时间
            //第一次登录 或者 有新邮件到达 就请求一次，获取数据
            if(typeof $Evocation.hasNewMail == 'undefined' || $Evocation.hasNewMail){
                self.model.getUnreadMailList({},function(res){
                    unreadListReady = res;
                    if(msgListReady !== null){
                        handleData();
                    }
                });             
            }else{                
                unreadListReady = {
                    'stats':{messageCount:0},
                    'var':[]
                };   
                if(msgListReady !== null){
                    handleData();
                }          
            }

            self.model.getMsgList(function(res){
                if(res && res.code == "S_OK"){
                    msgListReady = res['var'];
                    if(unreadListReady !== null){
                        handleData();
                    }
                }else{
                    msgListReady = [];
                    if(unreadListReady !== null){
                        handleData();
                    }
                }
            });
           

            function handleData(){
                //未读邮件特殊处理，在这里push到消息数组里面
                var num =unreadListReady.stats.messageCount;
                var list = unreadListReady['var'];
                if(unreadListReady.stats.messageCount){
                    var latest =  new Date(list[0].receiveDate*1000);
                    var time = self.getShowTime(latest);
                    if(time && time != 'false'){
                        msgListReady.push({
                            "seqNO": '',
                            "msgType": "mail",
                            "msgContent": num,
                            "createTime": top.$Date.format("yyyy-MM-dd hh:mm:ss", latest)
                        });
                    }
                }

                //未读邮件，群组的消息体有无点击是在前端记录，不记入数据库，需要在这里面特殊处理
                self.listRender(msgListReady);     
                self.bindAutoHide();
            }
        },

        filterLocalItem:function(list){
            var map={'mail':1,'groupmail_gin':1};
            //格式：msgBox=1425316203614|abcdefg，被记录表示不显示
            var _cookie = $Cookie.get('msgBox');
            if(!_cookie){  //如果没有cookie记录，不处理
                return list
            }

            //如果cguid不同，表示已经重新登录，不处理
            var arr = _cookie.split('|');
            var cguid = $Url.queryString('cguid');
            if(cguid != arr[0]){  
                return list
            }

            var notShow = arr[1];
            for(var i in list){
                if(map[list[i].msgType]){
                    list.splice(i,1);
                    i--;
                }
            }
            return list;
        },

        bindAutoHide:function(){
            var self = this;
            M139.Dom.bindAutoHide({
                action:"click",
                element:$("#msgBox")[0],
                callback:function(e){
                    var e = e.event || window.event; 
                    var t =  e.target || e.srcElement;
                    if(t.id == 'msgBox' || $('#msgBox').find(t).length || $(t).attr('msg')=='msgBoxClose'){
                        $('#msgBox').attr('bindautohide','');
                        self.bindAutoHide();
                    }else{
                        self.closeWindow();
                    }
                }
            });
        },

        transferList :{
            mail:'mail',
            groupmail_gin: 'addrGroupinvite',
            addr_mkpn: 'addrMaykown',
            calendar_cain: 'calendarInvite',
            calendar_cen: 'calendarActive',
            netdisk_tsen: 'cabinet',
            cpo_cpopu: 'myMagazine',
            cpo_cponm: 'magazineHome'
        },

        //适配器模式，用于转换后台的数据至方面前端使用的数据
        transferData: function(list) {
            var self = this;
            var listObj = {};
            var transfer = self.transferList;
            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                var key = transfer[item.msgType];
                var date = $.trim(item.createTime);
                var num = item.msgContent;
                if(key == 'addrMaykown' && num>50){num = '50+'}
                if(key == 'mail' && num>99){num = '99+'}
                if(num == 0 || !key){
                    continue;
                }
                date = $Date.parse(date);
                //消息提示，如果是函数，就用执行后的返回值
                var msg = self.options[key].msg;
                if($.isFunction(msg)){
                    msg = msg();
                }
                var time = self.getShowTime(date);
                if(time){
                    listObj[key] = { 
                        icon: self.options[key].icon,
                        type: key,
                        msg: $T.format(msg, {num:num}),
                        seqNO: list[i].seqNO,
                        time: time,
                        gotoUrl: self.options[key].gotoUrl
                    }
                }
            }
            return listObj;
        },

        getUnreadMail:function(){
            return $User.getUnreadMessageCount();
        },

        listRender:function(list){
            var self = this,i=0;
            if(list.length == 0){
                self.emptyRender();
                return;
            }
            var listHash = self.transferData(list);
            if($.isEmptyObject(listHash)){
                self.emptyRender();
                return;
            }
            var msgList = self.getShowMsgList(listHash);
            var html = ul = "";
            for(;i<msgList.length;i++){
                ul += $T.format(self.itemTemplate,msgList[i]);
            }
            html = $T.format(self.listTemplate,{list:ul});
            $(self.el).fadeIn(200).find('>div').replaceWith(html);
            if(self.hasLockedMail()){
                $(self.el).find('li[type=mail] p').addClass('tipsInfoBox_listCon_p').append('<span class="gray">(不含加锁邮件)</span>');
            }
            self.eventInit();
        },

        emptyRender:function(){
            var self = this;
            $(this.el).show().find('>div').replaceWith(self.emptyTemplate);
            $Evocation.msgBoxHot.hide()
        },

        eventInit:function(){
            var self = this;
            $(self.el).find('#msgBoxEmpty').bind({
                'click':function(){
                    var seqNOs = $(self.el).find('li').map(function(){
                        return $(this).attr('seqNO');
                    }).get().join(',');
                    self.model.removeMsg({seqNO:seqNOs},function(res){
                        if(res && res.code == "S_OK"){}else{};
                    });
                    $('#msgBox li').remove();
                    self.closeAll();
                    $Evocation.hasNewMail = false;
                }
            })
            $(self.el).find('li').bind({
                'click':function(e){
                    //var e = e.event || window.event; 
                    var node = e.target || e.srcElement; 
                    var li=$(this);
                    var type = li.attr('type');
                    //如果点中的是关闭按钮
                    if(node && node.rel == "关闭"){
                        li = $(node).parent('li');
                        if(li.attr('type') == 'mail'){
                            $Evocation.hasNewMail = false;
                        }
                        li.remove(); 
                        self.checkEmpty();
                    }else{
                        li.remove();  
                        self.options[type].gotoUrl();
                        self.closeAll();
                    }        
                    var seqNO = li.attr('seqNO');          
                    self.model.removeMsg({seqNO:seqNO},function(res){
                        console.log(res);
                    });
                },
                'mouseover':function(){
                    $(this).addClass('boxFocus').find('.closeMin').show();
                },
                'mouseout':function(){
                    $(this).removeClass('boxFocus').find('.closeMin').hide();
                }
            });

        },

        clickMsg:function(domLi){
            var type = domLi.attr('type');
            this.options[type].gotoUrl();
            this.closeAll();
        },

        removeMsg:function(domLi){
            var seqNO = domLi.attr('seqNO');
            this.model.removeMsg({seqNO:seqNO},function(res){
                console.log(res);
            })
        },

        closeAll:function(){
            var self = this;
            self.closeWindow();
            self.checkEmpty();
        }, 

        checkEmpty:function(){
            var self = this;
            var len =  $(this.el).find('li').length;
            if(len == 0){
                top.$Evocation.msgBoxHot.hide();
                self.closeWindow();
            }
        },

        closeWindow:function(){
            $('#msgBox').fadeOut(200).attr('bindautohide','');
        },

        hasLockedMail:function(){
            var has = false;
            $($App.getFolders()).each(function(i,n){
                if($App.getView("folder").model.isLock(n.fid)){
                    has = true;
                }
            });
            return has;
        }
    })
});

setTimeout(function(){
    $App.on('msgBoxMailArrival',function(mail){
        top.$Evocation.msgBoxHot.show();
        $Evocation.hasNewMail = mail;    
    });

    $('#msgBoxClick,#msgBoxComing').bind({
        'mouseover':function(){
            $('#msgBoxClick').addClass('focus');            
        },
        'mouseleave':function(){
            $('#msgBoxClick').removeClass('focus');
        },
        'click':function(){
            $Evocation.showMessageBox();
        }
    });
},1000)



M139.namespace("M2012.ReadMail.View", {
    ConversationSetting: Backbone.View.extend({
        el:"body",
        events:{

        },
        template: [ '<div class="alias-set-box">',
                         '<div class="boxIframeText ">',
                             '<dl class="form">',
                                 '<dt class="formLine pl_20 fw_b">会话邮件排序：</dt>',
                                 '<dd class="formLine pl_30" bh="cMail_toolbar_sort_new2old">',
                                     '<input type="radio" id="covMail_set_sort_asc" name="covMail_set_sort" value="1">',
                                     '<label for="covMail_set_sort_asc">按邮件从新到旧排序</label>',
                                 '</dd>',
                                 '<dd class="formLine pl_30" bh="cMail_toolbar_sort_old2new">',
                                     '<input type="radio" id="covMail_set_sort_desc" name="covMail_set_sort" value="0">',
                                     '<label for="covMail_set_sort_desc">按邮件从旧到新排序</label>',
                                 '</dd>',
                             '</dl>',
                             '<dl class="form pt_0">',
                                 '<dt class="formLine pl_20 fw_b">进入会话邮件后：</dt>',
                                 '<dd class="formLine pl_30" bh="cMail_toolbar_unexpand">',
                                     '<input type="radio" id="covMail_set_expand_none" name="covMail_set_expand" value="0">',
                                     '<label for="covMail_set_expand_none">不展开任何邮件</label>',
                                 '</dd>',
                                 '<dd class="formLine pl_30" bh="cMail_toolbar_expand">',
                                     '<input type="radio" id="covMail_set_expand_latest" name="covMail_set_expand" value="1">',
                                     '<label for="covMail_set_expand_latest">展开最新一封邮件</label>',
                                 '</dd>',
                             '</dl>',
                         '</div>',
                 '</div>'].join(""),

        initialize: function(options){
           if (options.el) {
               this.setElement(options.el);
           }
        },
        render:function(){
            var self = this;
            var popup=M139.UI.Popup.create({
                        name:"covMail_set",
                        target:$(self.el).find("#btn_setting")[0],//document.getElementById("btn_setting"),
                        buttons: [{ 
                                    text: "确定", 
                                    cssClass: "btnSure", 
                                    click: function () { self.saveSetting(); BH('cMail_toolbar_set_confirm'); } 
                                  },
                                  {
                                    text:"取消",
                                    click:function(){popup.close();BH('cMail_toolbar_set_cancel');}
                                  }],
                        content: this.template,
                        autoHide:true
                    });
            this.popup=popup;        
            popup.render();
            
            var covMaiSet = $App.getUserCustomInfo('covsetting') || '10';
            var sort = covMaiSet.slice(0, 1);
            var expand = covMaiSet.slice(1, 2);
            var len = $('[name=covMail_set_sort][value='+sort+']').length
            $('[name=covMail_set_sort][value='+sort+']').attr('checked', true);
            $('[name=covMail_set_expand][value='+expand+']').attr('checked', true);

            popup.on("close", function (args) {            
                if ($(args.event.target).parents(".menuPop").length > 0) {
                    args.cancel = true;
                }            
            });
        },

        saveSetting: function() {
            var sort = $('[name=covMail_set_sort]:checked').val();
            var expand = $('[name=covMail_set_expand]:checked').val();
            $App.setUserCustomInfoNew({covsetting: ''+sort+expand}, function(){
                $App.trigger('changeCovMailSetting');
                BH(sort == 1 ? 'cMail_toolbar_sort_new2old_bh' : 'cMail_toolbar_sort_old2new_bh');
                BH(expand == 1 ? 'cMail_toolbar_expand_bh' : 'cMail_toolbar_unexpand_bh');
            });
            this.popup.close();
        }
    })
});
